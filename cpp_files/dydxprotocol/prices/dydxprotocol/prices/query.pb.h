// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/prices/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fprices_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fprices_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "dydxprotocol/prices/market_param.pb.h"
#include "dydxprotocol/prices/market_price.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fprices_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fprices_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fprices_2fquery_2eproto;
namespace dydxprotocol {
namespace prices {
class QueryAllMarketParamsRequest;
struct QueryAllMarketParamsRequestDefaultTypeInternal;
extern QueryAllMarketParamsRequestDefaultTypeInternal _QueryAllMarketParamsRequest_default_instance_;
class QueryAllMarketParamsResponse;
struct QueryAllMarketParamsResponseDefaultTypeInternal;
extern QueryAllMarketParamsResponseDefaultTypeInternal _QueryAllMarketParamsResponse_default_instance_;
class QueryAllMarketPricesRequest;
struct QueryAllMarketPricesRequestDefaultTypeInternal;
extern QueryAllMarketPricesRequestDefaultTypeInternal _QueryAllMarketPricesRequest_default_instance_;
class QueryAllMarketPricesResponse;
struct QueryAllMarketPricesResponseDefaultTypeInternal;
extern QueryAllMarketPricesResponseDefaultTypeInternal _QueryAllMarketPricesResponse_default_instance_;
class QueryMarketParamRequest;
struct QueryMarketParamRequestDefaultTypeInternal;
extern QueryMarketParamRequestDefaultTypeInternal _QueryMarketParamRequest_default_instance_;
class QueryMarketParamResponse;
struct QueryMarketParamResponseDefaultTypeInternal;
extern QueryMarketParamResponseDefaultTypeInternal _QueryMarketParamResponse_default_instance_;
class QueryMarketPriceRequest;
struct QueryMarketPriceRequestDefaultTypeInternal;
extern QueryMarketPriceRequestDefaultTypeInternal _QueryMarketPriceRequest_default_instance_;
class QueryMarketPriceResponse;
struct QueryMarketPriceResponseDefaultTypeInternal;
extern QueryMarketPriceResponseDefaultTypeInternal _QueryMarketPriceResponse_default_instance_;
}  // namespace prices
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::prices::QueryAllMarketParamsRequest* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryAllMarketParamsRequest>(Arena*);
template <>
::dydxprotocol::prices::QueryAllMarketParamsResponse* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryAllMarketParamsResponse>(Arena*);
template <>
::dydxprotocol::prices::QueryAllMarketPricesRequest* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryAllMarketPricesRequest>(Arena*);
template <>
::dydxprotocol::prices::QueryAllMarketPricesResponse* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryAllMarketPricesResponse>(Arena*);
template <>
::dydxprotocol::prices::QueryMarketParamRequest* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryMarketParamRequest>(Arena*);
template <>
::dydxprotocol::prices::QueryMarketParamResponse* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryMarketParamResponse>(Arena*);
template <>
::dydxprotocol::prices::QueryMarketPriceRequest* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryMarketPriceRequest>(Arena*);
template <>
::dydxprotocol::prices::QueryMarketPriceResponse* Arena::CreateMaybeMessage<::dydxprotocol::prices::QueryMarketPriceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace prices {

// ===================================================================


// -------------------------------------------------------------------

class QueryMarketPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryMarketPriceRequest) */ {
 public:
  inline QueryMarketPriceRequest() : QueryMarketPriceRequest(nullptr) {}
  ~QueryMarketPriceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryMarketPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryMarketPriceRequest(const QueryMarketPriceRequest& from);
  QueryMarketPriceRequest(QueryMarketPriceRequest&& from) noexcept
    : QueryMarketPriceRequest() {
    *this = ::std::move(from);
  }

  inline QueryMarketPriceRequest& operator=(const QueryMarketPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMarketPriceRequest& operator=(QueryMarketPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryMarketPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryMarketPriceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryMarketPriceRequest*>(
               &_QueryMarketPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryMarketPriceRequest& a, QueryMarketPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMarketPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMarketPriceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryMarketPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryMarketPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryMarketPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryMarketPriceRequest& from) {
    QueryMarketPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMarketPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryMarketPriceRequest";
  }
  protected:
  explicit QueryMarketPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryMarketPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryMarketPriceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryMarketPriceResponse) */ {
 public:
  inline QueryMarketPriceResponse() : QueryMarketPriceResponse(nullptr) {}
  ~QueryMarketPriceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryMarketPriceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryMarketPriceResponse(const QueryMarketPriceResponse& from);
  QueryMarketPriceResponse(QueryMarketPriceResponse&& from) noexcept
    : QueryMarketPriceResponse() {
    *this = ::std::move(from);
  }

  inline QueryMarketPriceResponse& operator=(const QueryMarketPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMarketPriceResponse& operator=(QueryMarketPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryMarketPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryMarketPriceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryMarketPriceResponse*>(
               &_QueryMarketPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryMarketPriceResponse& a, QueryMarketPriceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMarketPriceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMarketPriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryMarketPriceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryMarketPriceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryMarketPriceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryMarketPriceResponse& from) {
    QueryMarketPriceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMarketPriceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryMarketPriceResponse";
  }
  protected:
  explicit QueryMarketPriceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketPriceFieldNumber = 1,
  };
  // .dydxprotocol.prices.MarketPrice market_price = 1 [(.gogoproto.nullable) = false];
  bool has_market_price() const;
  void clear_market_price() ;
  const ::dydxprotocol::prices::MarketPrice& market_price() const;
  PROTOBUF_NODISCARD ::dydxprotocol::prices::MarketPrice* release_market_price();
  ::dydxprotocol::prices::MarketPrice* mutable_market_price();
  void set_allocated_market_price(::dydxprotocol::prices::MarketPrice* market_price);
  private:
  const ::dydxprotocol::prices::MarketPrice& _internal_market_price() const;
  ::dydxprotocol::prices::MarketPrice* _internal_mutable_market_price();
  public:
  void unsafe_arena_set_allocated_market_price(
      ::dydxprotocol::prices::MarketPrice* market_price);
  ::dydxprotocol::prices::MarketPrice* unsafe_arena_release_market_price();
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryMarketPriceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::prices::MarketPrice* market_price_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllMarketPricesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryAllMarketPricesRequest) */ {
 public:
  inline QueryAllMarketPricesRequest() : QueryAllMarketPricesRequest(nullptr) {}
  ~QueryAllMarketPricesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllMarketPricesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllMarketPricesRequest(const QueryAllMarketPricesRequest& from);
  QueryAllMarketPricesRequest(QueryAllMarketPricesRequest&& from) noexcept
    : QueryAllMarketPricesRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllMarketPricesRequest& operator=(const QueryAllMarketPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllMarketPricesRequest& operator=(QueryAllMarketPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllMarketPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllMarketPricesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllMarketPricesRequest*>(
               &_QueryAllMarketPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllMarketPricesRequest& a, QueryAllMarketPricesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllMarketPricesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllMarketPricesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllMarketPricesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllMarketPricesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllMarketPricesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllMarketPricesRequest& from) {
    QueryAllMarketPricesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllMarketPricesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryAllMarketPricesRequest";
  }
  protected:
  explicit QueryAllMarketPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryAllMarketPricesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllMarketPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryAllMarketPricesResponse) */ {
 public:
  inline QueryAllMarketPricesResponse() : QueryAllMarketPricesResponse(nullptr) {}
  ~QueryAllMarketPricesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllMarketPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllMarketPricesResponse(const QueryAllMarketPricesResponse& from);
  QueryAllMarketPricesResponse(QueryAllMarketPricesResponse&& from) noexcept
    : QueryAllMarketPricesResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllMarketPricesResponse& operator=(const QueryAllMarketPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllMarketPricesResponse& operator=(QueryAllMarketPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllMarketPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllMarketPricesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllMarketPricesResponse*>(
               &_QueryAllMarketPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAllMarketPricesResponse& a, QueryAllMarketPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllMarketPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllMarketPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllMarketPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllMarketPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllMarketPricesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllMarketPricesResponse& from) {
    QueryAllMarketPricesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllMarketPricesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryAllMarketPricesResponse";
  }
  protected:
  explicit QueryAllMarketPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketPricesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .dydxprotocol.prices.MarketPrice market_prices = 1 [(.gogoproto.nullable) = false];
  int market_prices_size() const;
  private:
  int _internal_market_prices_size() const;

  public:
  void clear_market_prices() ;
  ::dydxprotocol::prices::MarketPrice* mutable_market_prices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketPrice >*
      mutable_market_prices();
  private:
  const ::dydxprotocol::prices::MarketPrice& _internal_market_prices(int index) const;
  ::dydxprotocol::prices::MarketPrice* _internal_add_market_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketPrice>& _internal_market_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketPrice>* _internal_mutable_market_prices();
  public:
  const ::dydxprotocol::prices::MarketPrice& market_prices(int index) const;
  ::dydxprotocol::prices::MarketPrice* add_market_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketPrice >&
      market_prices() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryAllMarketPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketPrice > market_prices_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryMarketParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryMarketParamRequest) */ {
 public:
  inline QueryMarketParamRequest() : QueryMarketParamRequest(nullptr) {}
  ~QueryMarketParamRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryMarketParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryMarketParamRequest(const QueryMarketParamRequest& from);
  QueryMarketParamRequest(QueryMarketParamRequest&& from) noexcept
    : QueryMarketParamRequest() {
    *this = ::std::move(from);
  }

  inline QueryMarketParamRequest& operator=(const QueryMarketParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMarketParamRequest& operator=(QueryMarketParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryMarketParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryMarketParamRequest* internal_default_instance() {
    return reinterpret_cast<const QueryMarketParamRequest*>(
               &_QueryMarketParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryMarketParamRequest& a, QueryMarketParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMarketParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMarketParamRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryMarketParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryMarketParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryMarketParamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryMarketParamRequest& from) {
    QueryMarketParamRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMarketParamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryMarketParamRequest";
  }
  protected:
  explicit QueryMarketParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryMarketParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryMarketParamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryMarketParamResponse) */ {
 public:
  inline QueryMarketParamResponse() : QueryMarketParamResponse(nullptr) {}
  ~QueryMarketParamResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryMarketParamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryMarketParamResponse(const QueryMarketParamResponse& from);
  QueryMarketParamResponse(QueryMarketParamResponse&& from) noexcept
    : QueryMarketParamResponse() {
    *this = ::std::move(from);
  }

  inline QueryMarketParamResponse& operator=(const QueryMarketParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMarketParamResponse& operator=(QueryMarketParamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryMarketParamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryMarketParamResponse* internal_default_instance() {
    return reinterpret_cast<const QueryMarketParamResponse*>(
               &_QueryMarketParamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryMarketParamResponse& a, QueryMarketParamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMarketParamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMarketParamResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryMarketParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryMarketParamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryMarketParamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryMarketParamResponse& from) {
    QueryMarketParamResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMarketParamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryMarketParamResponse";
  }
  protected:
  explicit QueryMarketParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketParamFieldNumber = 1,
  };
  // .dydxprotocol.prices.MarketParam market_param = 1 [(.gogoproto.nullable) = false];
  bool has_market_param() const;
  void clear_market_param() ;
  const ::dydxprotocol::prices::MarketParam& market_param() const;
  PROTOBUF_NODISCARD ::dydxprotocol::prices::MarketParam* release_market_param();
  ::dydxprotocol::prices::MarketParam* mutable_market_param();
  void set_allocated_market_param(::dydxprotocol::prices::MarketParam* market_param);
  private:
  const ::dydxprotocol::prices::MarketParam& _internal_market_param() const;
  ::dydxprotocol::prices::MarketParam* _internal_mutable_market_param();
  public:
  void unsafe_arena_set_allocated_market_param(
      ::dydxprotocol::prices::MarketParam* market_param);
  ::dydxprotocol::prices::MarketParam* unsafe_arena_release_market_param();
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryMarketParamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::prices::MarketParam* market_param_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllMarketParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryAllMarketParamsRequest) */ {
 public:
  inline QueryAllMarketParamsRequest() : QueryAllMarketParamsRequest(nullptr) {}
  ~QueryAllMarketParamsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllMarketParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllMarketParamsRequest(const QueryAllMarketParamsRequest& from);
  QueryAllMarketParamsRequest(QueryAllMarketParamsRequest&& from) noexcept
    : QueryAllMarketParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllMarketParamsRequest& operator=(const QueryAllMarketParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllMarketParamsRequest& operator=(QueryAllMarketParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllMarketParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllMarketParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllMarketParamsRequest*>(
               &_QueryAllMarketParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryAllMarketParamsRequest& a, QueryAllMarketParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllMarketParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllMarketParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllMarketParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllMarketParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllMarketParamsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllMarketParamsRequest& from) {
    QueryAllMarketParamsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllMarketParamsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryAllMarketParamsRequest";
  }
  protected:
  explicit QueryAllMarketParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryAllMarketParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllMarketParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.prices.QueryAllMarketParamsResponse) */ {
 public:
  inline QueryAllMarketParamsResponse() : QueryAllMarketParamsResponse(nullptr) {}
  ~QueryAllMarketParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllMarketParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllMarketParamsResponse(const QueryAllMarketParamsResponse& from);
  QueryAllMarketParamsResponse(QueryAllMarketParamsResponse&& from) noexcept
    : QueryAllMarketParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllMarketParamsResponse& operator=(const QueryAllMarketParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllMarketParamsResponse& operator=(QueryAllMarketParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllMarketParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllMarketParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllMarketParamsResponse*>(
               &_QueryAllMarketParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryAllMarketParamsResponse& a, QueryAllMarketParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllMarketParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllMarketParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllMarketParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllMarketParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllMarketParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllMarketParamsResponse& from) {
    QueryAllMarketParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllMarketParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.prices.QueryAllMarketParamsResponse";
  }
  protected:
  explicit QueryAllMarketParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketParamsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .dydxprotocol.prices.MarketParam market_params = 1 [(.gogoproto.nullable) = false];
  int market_params_size() const;
  private:
  int _internal_market_params_size() const;

  public:
  void clear_market_params() ;
  ::dydxprotocol::prices::MarketParam* mutable_market_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketParam >*
      mutable_market_params();
  private:
  const ::dydxprotocol::prices::MarketParam& _internal_market_params(int index) const;
  ::dydxprotocol::prices::MarketParam* _internal_add_market_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketParam>& _internal_market_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketParam>* _internal_mutable_market_params();
  public:
  const ::dydxprotocol::prices::MarketParam& market_params(int index) const;
  ::dydxprotocol::prices::MarketParam* add_market_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketParam >&
      market_params() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.prices.QueryAllMarketParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketParam > market_params_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fprices_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryMarketPriceRequest

// uint32 id = 1;
inline void QueryMarketPriceRequest::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t QueryMarketPriceRequest::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryMarketPriceRequest.id)
  return _internal_id();
}
inline void QueryMarketPriceRequest::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.prices.QueryMarketPriceRequest.id)
}
inline ::uint32_t QueryMarketPriceRequest::_internal_id() const {
  return _impl_.id_;
}
inline void QueryMarketPriceRequest::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// QueryMarketPriceResponse

// .dydxprotocol.prices.MarketPrice market_price = 1 [(.gogoproto.nullable) = false];
inline bool QueryMarketPriceResponse::has_market_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.market_price_ != nullptr);
  return value;
}
inline const ::dydxprotocol::prices::MarketPrice& QueryMarketPriceResponse::_internal_market_price() const {
  const ::dydxprotocol::prices::MarketPrice* p = _impl_.market_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::prices::MarketPrice&>(
      ::dydxprotocol::prices::_MarketPrice_default_instance_);
}
inline const ::dydxprotocol::prices::MarketPrice& QueryMarketPriceResponse::market_price() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryMarketPriceResponse.market_price)
  return _internal_market_price();
}
inline void QueryMarketPriceResponse::unsafe_arena_set_allocated_market_price(
    ::dydxprotocol::prices::MarketPrice* market_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_price_);
  }
  _impl_.market_price_ = market_price;
  if (market_price) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.prices.QueryMarketPriceResponse.market_price)
}
inline ::dydxprotocol::prices::MarketPrice* QueryMarketPriceResponse::release_market_price() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::prices::MarketPrice* temp = _impl_.market_price_;
  _impl_.market_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::prices::MarketPrice* QueryMarketPriceResponse::unsafe_arena_release_market_price() {
  // @@protoc_insertion_point(field_release:dydxprotocol.prices.QueryMarketPriceResponse.market_price)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::prices::MarketPrice* temp = _impl_.market_price_;
  _impl_.market_price_ = nullptr;
  return temp;
}
inline ::dydxprotocol::prices::MarketPrice* QueryMarketPriceResponse::_internal_mutable_market_price() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.market_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::prices::MarketPrice>(GetArenaForAllocation());
    _impl_.market_price_ = p;
  }
  return _impl_.market_price_;
}
inline ::dydxprotocol::prices::MarketPrice* QueryMarketPriceResponse::mutable_market_price() {
  ::dydxprotocol::prices::MarketPrice* _msg = _internal_mutable_market_price();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryMarketPriceResponse.market_price)
  return _msg;
}
inline void QueryMarketPriceResponse::set_allocated_market_price(::dydxprotocol::prices::MarketPrice* market_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_price_);
  }
  if (market_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_price));
    if (message_arena != submessage_arena) {
      market_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.market_price_ = market_price;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.prices.QueryMarketPriceResponse.market_price)
}

// -------------------------------------------------------------------

// QueryAllMarketPricesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1;
inline bool QueryAllMarketPricesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllMarketPricesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllMarketPricesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryAllMarketPricesRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllMarketPricesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.prices.QueryAllMarketPricesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketPricesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketPricesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.prices.QueryAllMarketPricesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketPricesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketPricesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryAllMarketPricesRequest.pagination)
  return _msg;
}
inline void QueryAllMarketPricesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.prices.QueryAllMarketPricesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllMarketPricesResponse

// repeated .dydxprotocol.prices.MarketPrice market_prices = 1 [(.gogoproto.nullable) = false];
inline int QueryAllMarketPricesResponse::_internal_market_prices_size() const {
  return _impl_.market_prices_.size();
}
inline int QueryAllMarketPricesResponse::market_prices_size() const {
  return _internal_market_prices_size();
}
inline ::dydxprotocol::prices::MarketPrice* QueryAllMarketPricesResponse::mutable_market_prices(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryAllMarketPricesResponse.market_prices)
  return _internal_mutable_market_prices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketPrice >*
QueryAllMarketPricesResponse::mutable_market_prices() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.prices.QueryAllMarketPricesResponse.market_prices)
  return _internal_mutable_market_prices();
}
inline const ::dydxprotocol::prices::MarketPrice& QueryAllMarketPricesResponse::_internal_market_prices(int index) const {
  return _internal_market_prices().Get(index);
}
inline const ::dydxprotocol::prices::MarketPrice& QueryAllMarketPricesResponse::market_prices(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryAllMarketPricesResponse.market_prices)
  return _internal_market_prices(index);
}
inline ::dydxprotocol::prices::MarketPrice* QueryAllMarketPricesResponse::_internal_add_market_prices() {
  return _internal_mutable_market_prices()->Add();
}
inline ::dydxprotocol::prices::MarketPrice* QueryAllMarketPricesResponse::add_market_prices() {
  ::dydxprotocol::prices::MarketPrice* _add = _internal_add_market_prices();
  // @@protoc_insertion_point(field_add:dydxprotocol.prices.QueryAllMarketPricesResponse.market_prices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketPrice >&
QueryAllMarketPricesResponse::market_prices() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.prices.QueryAllMarketPricesResponse.market_prices)
  return _internal_market_prices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketPrice>&
QueryAllMarketPricesResponse::_internal_market_prices() const {
  return _impl_.market_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketPrice>*
QueryAllMarketPricesResponse::_internal_mutable_market_prices() {
  return &_impl_.market_prices_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2;
inline bool QueryAllMarketPricesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllMarketPricesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllMarketPricesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryAllMarketPricesResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllMarketPricesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.prices.QueryAllMarketPricesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketPricesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketPricesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.prices.QueryAllMarketPricesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketPricesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketPricesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryAllMarketPricesResponse.pagination)
  return _msg;
}
inline void QueryAllMarketPricesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.prices.QueryAllMarketPricesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryMarketParamRequest

// uint32 id = 1;
inline void QueryMarketParamRequest::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t QueryMarketParamRequest::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryMarketParamRequest.id)
  return _internal_id();
}
inline void QueryMarketParamRequest::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.prices.QueryMarketParamRequest.id)
}
inline ::uint32_t QueryMarketParamRequest::_internal_id() const {
  return _impl_.id_;
}
inline void QueryMarketParamRequest::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// QueryMarketParamResponse

// .dydxprotocol.prices.MarketParam market_param = 1 [(.gogoproto.nullable) = false];
inline bool QueryMarketParamResponse::has_market_param() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.market_param_ != nullptr);
  return value;
}
inline const ::dydxprotocol::prices::MarketParam& QueryMarketParamResponse::_internal_market_param() const {
  const ::dydxprotocol::prices::MarketParam* p = _impl_.market_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::prices::MarketParam&>(
      ::dydxprotocol::prices::_MarketParam_default_instance_);
}
inline const ::dydxprotocol::prices::MarketParam& QueryMarketParamResponse::market_param() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryMarketParamResponse.market_param)
  return _internal_market_param();
}
inline void QueryMarketParamResponse::unsafe_arena_set_allocated_market_param(
    ::dydxprotocol::prices::MarketParam* market_param) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_param_);
  }
  _impl_.market_param_ = market_param;
  if (market_param) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.prices.QueryMarketParamResponse.market_param)
}
inline ::dydxprotocol::prices::MarketParam* QueryMarketParamResponse::release_market_param() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::prices::MarketParam* temp = _impl_.market_param_;
  _impl_.market_param_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::prices::MarketParam* QueryMarketParamResponse::unsafe_arena_release_market_param() {
  // @@protoc_insertion_point(field_release:dydxprotocol.prices.QueryMarketParamResponse.market_param)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::prices::MarketParam* temp = _impl_.market_param_;
  _impl_.market_param_ = nullptr;
  return temp;
}
inline ::dydxprotocol::prices::MarketParam* QueryMarketParamResponse::_internal_mutable_market_param() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.market_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::prices::MarketParam>(GetArenaForAllocation());
    _impl_.market_param_ = p;
  }
  return _impl_.market_param_;
}
inline ::dydxprotocol::prices::MarketParam* QueryMarketParamResponse::mutable_market_param() {
  ::dydxprotocol::prices::MarketParam* _msg = _internal_mutable_market_param();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryMarketParamResponse.market_param)
  return _msg;
}
inline void QueryMarketParamResponse::set_allocated_market_param(::dydxprotocol::prices::MarketParam* market_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.market_param_);
  }
  if (market_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_param));
    if (message_arena != submessage_arena) {
      market_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_param, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.market_param_ = market_param;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.prices.QueryMarketParamResponse.market_param)
}

// -------------------------------------------------------------------

// QueryAllMarketParamsRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1;
inline bool QueryAllMarketParamsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllMarketParamsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllMarketParamsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryAllMarketParamsRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllMarketParamsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.prices.QueryAllMarketParamsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketParamsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketParamsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.prices.QueryAllMarketParamsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketParamsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllMarketParamsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryAllMarketParamsRequest.pagination)
  return _msg;
}
inline void QueryAllMarketParamsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.prices.QueryAllMarketParamsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllMarketParamsResponse

// repeated .dydxprotocol.prices.MarketParam market_params = 1 [(.gogoproto.nullable) = false];
inline int QueryAllMarketParamsResponse::_internal_market_params_size() const {
  return _impl_.market_params_.size();
}
inline int QueryAllMarketParamsResponse::market_params_size() const {
  return _internal_market_params_size();
}
inline ::dydxprotocol::prices::MarketParam* QueryAllMarketParamsResponse::mutable_market_params(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryAllMarketParamsResponse.market_params)
  return _internal_mutable_market_params()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketParam >*
QueryAllMarketParamsResponse::mutable_market_params() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.prices.QueryAllMarketParamsResponse.market_params)
  return _internal_mutable_market_params();
}
inline const ::dydxprotocol::prices::MarketParam& QueryAllMarketParamsResponse::_internal_market_params(int index) const {
  return _internal_market_params().Get(index);
}
inline const ::dydxprotocol::prices::MarketParam& QueryAllMarketParamsResponse::market_params(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryAllMarketParamsResponse.market_params)
  return _internal_market_params(index);
}
inline ::dydxprotocol::prices::MarketParam* QueryAllMarketParamsResponse::_internal_add_market_params() {
  return _internal_mutable_market_params()->Add();
}
inline ::dydxprotocol::prices::MarketParam* QueryAllMarketParamsResponse::add_market_params() {
  ::dydxprotocol::prices::MarketParam* _add = _internal_add_market_params();
  // @@protoc_insertion_point(field_add:dydxprotocol.prices.QueryAllMarketParamsResponse.market_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::prices::MarketParam >&
QueryAllMarketParamsResponse::market_params() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.prices.QueryAllMarketParamsResponse.market_params)
  return _internal_market_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketParam>&
QueryAllMarketParamsResponse::_internal_market_params() const {
  return _impl_.market_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::prices::MarketParam>*
QueryAllMarketParamsResponse::_internal_mutable_market_params() {
  return &_impl_.market_params_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2;
inline bool QueryAllMarketParamsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllMarketParamsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllMarketParamsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.prices.QueryAllMarketParamsResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllMarketParamsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.prices.QueryAllMarketParamsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketParamsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketParamsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.prices.QueryAllMarketParamsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketParamsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllMarketParamsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.prices.QueryAllMarketParamsResponse.pagination)
  return _msg;
}
inline void QueryAllMarketParamsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.prices.QueryAllMarketParamsResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace prices
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fprices_2fquery_2eproto_2epb_2eh
