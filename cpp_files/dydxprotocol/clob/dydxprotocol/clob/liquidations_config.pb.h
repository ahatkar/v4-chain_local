// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/liquidations_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto;
namespace dydxprotocol {
namespace clob {
class FillablePriceConfig;
struct FillablePriceConfigDefaultTypeInternal;
extern FillablePriceConfigDefaultTypeInternal _FillablePriceConfig_default_instance_;
class LiquidationsConfig;
struct LiquidationsConfigDefaultTypeInternal;
extern LiquidationsConfigDefaultTypeInternal _LiquidationsConfig_default_instance_;
class PositionBlockLimits;
struct PositionBlockLimitsDefaultTypeInternal;
extern PositionBlockLimitsDefaultTypeInternal _PositionBlockLimits_default_instance_;
class SubaccountBlockLimits;
struct SubaccountBlockLimitsDefaultTypeInternal;
extern SubaccountBlockLimitsDefaultTypeInternal _SubaccountBlockLimits_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::FillablePriceConfig* Arena::CreateMaybeMessage<::dydxprotocol::clob::FillablePriceConfig>(Arena*);
template <>
::dydxprotocol::clob::LiquidationsConfig* Arena::CreateMaybeMessage<::dydxprotocol::clob::LiquidationsConfig>(Arena*);
template <>
::dydxprotocol::clob::PositionBlockLimits* Arena::CreateMaybeMessage<::dydxprotocol::clob::PositionBlockLimits>(Arena*);
template <>
::dydxprotocol::clob::SubaccountBlockLimits* Arena::CreateMaybeMessage<::dydxprotocol::clob::SubaccountBlockLimits>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class LiquidationsConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.LiquidationsConfig) */ {
 public:
  inline LiquidationsConfig() : LiquidationsConfig(nullptr) {}
  ~LiquidationsConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LiquidationsConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LiquidationsConfig(const LiquidationsConfig& from);
  LiquidationsConfig(LiquidationsConfig&& from) noexcept
    : LiquidationsConfig() {
    *this = ::std::move(from);
  }

  inline LiquidationsConfig& operator=(const LiquidationsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidationsConfig& operator=(LiquidationsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiquidationsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiquidationsConfig* internal_default_instance() {
    return reinterpret_cast<const LiquidationsConfig*>(
               &_LiquidationsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LiquidationsConfig& a, LiquidationsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidationsConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidationsConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiquidationsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LiquidationsConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LiquidationsConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LiquidationsConfig& from) {
    LiquidationsConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidationsConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.LiquidationsConfig";
  }
  protected:
  explicit LiquidationsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBlockLimitsFieldNumber = 3,
    kSubaccountBlockLimitsFieldNumber = 4,
    kFillablePriceConfigFieldNumber = 5,
    kMaxInsuranceFundQuantumsForDeleveragingFieldNumber = 1,
    kMaxLiquidationFeePpmFieldNumber = 2,
  };
  // .dydxprotocol.clob.PositionBlockLimits position_block_limits = 3 [(.gogoproto.nullable) = false];
  bool has_position_block_limits() const;
  void clear_position_block_limits() ;
  const ::dydxprotocol::clob::PositionBlockLimits& position_block_limits() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::PositionBlockLimits* release_position_block_limits();
  ::dydxprotocol::clob::PositionBlockLimits* mutable_position_block_limits();
  void set_allocated_position_block_limits(::dydxprotocol::clob::PositionBlockLimits* position_block_limits);
  private:
  const ::dydxprotocol::clob::PositionBlockLimits& _internal_position_block_limits() const;
  ::dydxprotocol::clob::PositionBlockLimits* _internal_mutable_position_block_limits();
  public:
  void unsafe_arena_set_allocated_position_block_limits(
      ::dydxprotocol::clob::PositionBlockLimits* position_block_limits);
  ::dydxprotocol::clob::PositionBlockLimits* unsafe_arena_release_position_block_limits();
  // .dydxprotocol.clob.SubaccountBlockLimits subaccount_block_limits = 4 [(.gogoproto.nullable) = false];
  bool has_subaccount_block_limits() const;
  void clear_subaccount_block_limits() ;
  const ::dydxprotocol::clob::SubaccountBlockLimits& subaccount_block_limits() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::SubaccountBlockLimits* release_subaccount_block_limits();
  ::dydxprotocol::clob::SubaccountBlockLimits* mutable_subaccount_block_limits();
  void set_allocated_subaccount_block_limits(::dydxprotocol::clob::SubaccountBlockLimits* subaccount_block_limits);
  private:
  const ::dydxprotocol::clob::SubaccountBlockLimits& _internal_subaccount_block_limits() const;
  ::dydxprotocol::clob::SubaccountBlockLimits* _internal_mutable_subaccount_block_limits();
  public:
  void unsafe_arena_set_allocated_subaccount_block_limits(
      ::dydxprotocol::clob::SubaccountBlockLimits* subaccount_block_limits);
  ::dydxprotocol::clob::SubaccountBlockLimits* unsafe_arena_release_subaccount_block_limits();
  // .dydxprotocol.clob.FillablePriceConfig fillable_price_config = 5 [(.gogoproto.nullable) = false];
  bool has_fillable_price_config() const;
  void clear_fillable_price_config() ;
  const ::dydxprotocol::clob::FillablePriceConfig& fillable_price_config() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::FillablePriceConfig* release_fillable_price_config();
  ::dydxprotocol::clob::FillablePriceConfig* mutable_fillable_price_config();
  void set_allocated_fillable_price_config(::dydxprotocol::clob::FillablePriceConfig* fillable_price_config);
  private:
  const ::dydxprotocol::clob::FillablePriceConfig& _internal_fillable_price_config() const;
  ::dydxprotocol::clob::FillablePriceConfig* _internal_mutable_fillable_price_config();
  public:
  void unsafe_arena_set_allocated_fillable_price_config(
      ::dydxprotocol::clob::FillablePriceConfig* fillable_price_config);
  ::dydxprotocol::clob::FillablePriceConfig* unsafe_arena_release_fillable_price_config();
  // uint64 max_insurance_fund_quantums_for_deleveraging = 1;
  void clear_max_insurance_fund_quantums_for_deleveraging() ;
  ::uint64_t max_insurance_fund_quantums_for_deleveraging() const;
  void set_max_insurance_fund_quantums_for_deleveraging(::uint64_t value);

  private:
  ::uint64_t _internal_max_insurance_fund_quantums_for_deleveraging() const;
  void _internal_set_max_insurance_fund_quantums_for_deleveraging(::uint64_t value);

  public:
  // uint32 max_liquidation_fee_ppm = 2;
  void clear_max_liquidation_fee_ppm() ;
  ::uint32_t max_liquidation_fee_ppm() const;
  void set_max_liquidation_fee_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_max_liquidation_fee_ppm() const;
  void _internal_set_max_liquidation_fee_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.LiquidationsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::PositionBlockLimits* position_block_limits_;
    ::dydxprotocol::clob::SubaccountBlockLimits* subaccount_block_limits_;
    ::dydxprotocol::clob::FillablePriceConfig* fillable_price_config_;
    ::uint64_t max_insurance_fund_quantums_for_deleveraging_;
    ::uint32_t max_liquidation_fee_ppm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto;
};// -------------------------------------------------------------------

class PositionBlockLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.PositionBlockLimits) */ {
 public:
  inline PositionBlockLimits() : PositionBlockLimits(nullptr) {}
  ~PositionBlockLimits() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PositionBlockLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionBlockLimits(const PositionBlockLimits& from);
  PositionBlockLimits(PositionBlockLimits&& from) noexcept
    : PositionBlockLimits() {
    *this = ::std::move(from);
  }

  inline PositionBlockLimits& operator=(const PositionBlockLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBlockLimits& operator=(PositionBlockLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionBlockLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionBlockLimits* internal_default_instance() {
    return reinterpret_cast<const PositionBlockLimits*>(
               &_PositionBlockLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionBlockLimits& a, PositionBlockLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionBlockLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionBlockLimits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionBlockLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionBlockLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionBlockLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionBlockLimits& from) {
    PositionBlockLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionBlockLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.PositionBlockLimits";
  }
  protected:
  explicit PositionBlockLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinPositionNotionalLiquidatedFieldNumber = 1,
    kMaxPositionPortionLiquidatedPpmFieldNumber = 2,
  };
  // uint64 min_position_notional_liquidated = 1;
  void clear_min_position_notional_liquidated() ;
  ::uint64_t min_position_notional_liquidated() const;
  void set_min_position_notional_liquidated(::uint64_t value);

  private:
  ::uint64_t _internal_min_position_notional_liquidated() const;
  void _internal_set_min_position_notional_liquidated(::uint64_t value);

  public:
  // uint32 max_position_portion_liquidated_ppm = 2;
  void clear_max_position_portion_liquidated_ppm() ;
  ::uint32_t max_position_portion_liquidated_ppm() const;
  void set_max_position_portion_liquidated_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_max_position_portion_liquidated_ppm() const;
  void _internal_set_max_position_portion_liquidated_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.PositionBlockLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t min_position_notional_liquidated_;
    ::uint32_t max_position_portion_liquidated_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto;
};// -------------------------------------------------------------------

class SubaccountBlockLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.SubaccountBlockLimits) */ {
 public:
  inline SubaccountBlockLimits() : SubaccountBlockLimits(nullptr) {}
  ~SubaccountBlockLimits() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubaccountBlockLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubaccountBlockLimits(const SubaccountBlockLimits& from);
  SubaccountBlockLimits(SubaccountBlockLimits&& from) noexcept
    : SubaccountBlockLimits() {
    *this = ::std::move(from);
  }

  inline SubaccountBlockLimits& operator=(const SubaccountBlockLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubaccountBlockLimits& operator=(SubaccountBlockLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubaccountBlockLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubaccountBlockLimits* internal_default_instance() {
    return reinterpret_cast<const SubaccountBlockLimits*>(
               &_SubaccountBlockLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubaccountBlockLimits& a, SubaccountBlockLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(SubaccountBlockLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubaccountBlockLimits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubaccountBlockLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubaccountBlockLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubaccountBlockLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubaccountBlockLimits& from) {
    SubaccountBlockLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubaccountBlockLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.SubaccountBlockLimits";
  }
  protected:
  explicit SubaccountBlockLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNotionalLiquidatedFieldNumber = 1,
    kMaxQuantumsInsuranceLostFieldNumber = 2,
  };
  // uint64 max_notional_liquidated = 1;
  void clear_max_notional_liquidated() ;
  ::uint64_t max_notional_liquidated() const;
  void set_max_notional_liquidated(::uint64_t value);

  private:
  ::uint64_t _internal_max_notional_liquidated() const;
  void _internal_set_max_notional_liquidated(::uint64_t value);

  public:
  // uint64 max_quantums_insurance_lost = 2;
  void clear_max_quantums_insurance_lost() ;
  ::uint64_t max_quantums_insurance_lost() const;
  void set_max_quantums_insurance_lost(::uint64_t value);

  private:
  ::uint64_t _internal_max_quantums_insurance_lost() const;
  void _internal_set_max_quantums_insurance_lost(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.SubaccountBlockLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t max_notional_liquidated_;
    ::uint64_t max_quantums_insurance_lost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto;
};// -------------------------------------------------------------------

class FillablePriceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.FillablePriceConfig) */ {
 public:
  inline FillablePriceConfig() : FillablePriceConfig(nullptr) {}
  ~FillablePriceConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FillablePriceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FillablePriceConfig(const FillablePriceConfig& from);
  FillablePriceConfig(FillablePriceConfig&& from) noexcept
    : FillablePriceConfig() {
    *this = ::std::move(from);
  }

  inline FillablePriceConfig& operator=(const FillablePriceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FillablePriceConfig& operator=(FillablePriceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FillablePriceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FillablePriceConfig* internal_default_instance() {
    return reinterpret_cast<const FillablePriceConfig*>(
               &_FillablePriceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FillablePriceConfig& a, FillablePriceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FillablePriceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FillablePriceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FillablePriceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FillablePriceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FillablePriceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FillablePriceConfig& from) {
    FillablePriceConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FillablePriceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.FillablePriceConfig";
  }
  protected:
  explicit FillablePriceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBankruptcyAdjustmentPpmFieldNumber = 1,
    kSpreadToMaintenanceMarginRatioPpmFieldNumber = 2,
  };
  // uint32 bankruptcy_adjustment_ppm = 1;
  void clear_bankruptcy_adjustment_ppm() ;
  ::uint32_t bankruptcy_adjustment_ppm() const;
  void set_bankruptcy_adjustment_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_bankruptcy_adjustment_ppm() const;
  void _internal_set_bankruptcy_adjustment_ppm(::uint32_t value);

  public:
  // uint32 spread_to_maintenance_margin_ratio_ppm = 2;
  void clear_spread_to_maintenance_margin_ratio_ppm() ;
  ::uint32_t spread_to_maintenance_margin_ratio_ppm() const;
  void set_spread_to_maintenance_margin_ratio_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_spread_to_maintenance_margin_ratio_ppm() const;
  void _internal_set_spread_to_maintenance_margin_ratio_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.FillablePriceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t bankruptcy_adjustment_ppm_;
    ::uint32_t spread_to_maintenance_margin_ratio_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LiquidationsConfig

// uint64 max_insurance_fund_quantums_for_deleveraging = 1;
inline void LiquidationsConfig::clear_max_insurance_fund_quantums_for_deleveraging() {
  _impl_.max_insurance_fund_quantums_for_deleveraging_ = ::uint64_t{0u};
}
inline ::uint64_t LiquidationsConfig::max_insurance_fund_quantums_for_deleveraging() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LiquidationsConfig.max_insurance_fund_quantums_for_deleveraging)
  return _internal_max_insurance_fund_quantums_for_deleveraging();
}
inline void LiquidationsConfig::set_max_insurance_fund_quantums_for_deleveraging(::uint64_t value) {
  _internal_set_max_insurance_fund_quantums_for_deleveraging(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.LiquidationsConfig.max_insurance_fund_quantums_for_deleveraging)
}
inline ::uint64_t LiquidationsConfig::_internal_max_insurance_fund_quantums_for_deleveraging() const {
  return _impl_.max_insurance_fund_quantums_for_deleveraging_;
}
inline void LiquidationsConfig::_internal_set_max_insurance_fund_quantums_for_deleveraging(::uint64_t value) {
  ;
  _impl_.max_insurance_fund_quantums_for_deleveraging_ = value;
}

// uint32 max_liquidation_fee_ppm = 2;
inline void LiquidationsConfig::clear_max_liquidation_fee_ppm() {
  _impl_.max_liquidation_fee_ppm_ = 0u;
}
inline ::uint32_t LiquidationsConfig::max_liquidation_fee_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LiquidationsConfig.max_liquidation_fee_ppm)
  return _internal_max_liquidation_fee_ppm();
}
inline void LiquidationsConfig::set_max_liquidation_fee_ppm(::uint32_t value) {
  _internal_set_max_liquidation_fee_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.LiquidationsConfig.max_liquidation_fee_ppm)
}
inline ::uint32_t LiquidationsConfig::_internal_max_liquidation_fee_ppm() const {
  return _impl_.max_liquidation_fee_ppm_;
}
inline void LiquidationsConfig::_internal_set_max_liquidation_fee_ppm(::uint32_t value) {
  ;
  _impl_.max_liquidation_fee_ppm_ = value;
}

// .dydxprotocol.clob.PositionBlockLimits position_block_limits = 3 [(.gogoproto.nullable) = false];
inline bool LiquidationsConfig::has_position_block_limits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_block_limits_ != nullptr);
  return value;
}
inline void LiquidationsConfig::clear_position_block_limits() {
  if (_impl_.position_block_limits_ != nullptr) _impl_.position_block_limits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::clob::PositionBlockLimits& LiquidationsConfig::_internal_position_block_limits() const {
  const ::dydxprotocol::clob::PositionBlockLimits* p = _impl_.position_block_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::PositionBlockLimits&>(
      ::dydxprotocol::clob::_PositionBlockLimits_default_instance_);
}
inline const ::dydxprotocol::clob::PositionBlockLimits& LiquidationsConfig::position_block_limits() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LiquidationsConfig.position_block_limits)
  return _internal_position_block_limits();
}
inline void LiquidationsConfig::unsafe_arena_set_allocated_position_block_limits(
    ::dydxprotocol::clob::PositionBlockLimits* position_block_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_block_limits_);
  }
  _impl_.position_block_limits_ = position_block_limits;
  if (position_block_limits) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.LiquidationsConfig.position_block_limits)
}
inline ::dydxprotocol::clob::PositionBlockLimits* LiquidationsConfig::release_position_block_limits() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::PositionBlockLimits* temp = _impl_.position_block_limits_;
  _impl_.position_block_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::PositionBlockLimits* LiquidationsConfig::unsafe_arena_release_position_block_limits() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.LiquidationsConfig.position_block_limits)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::PositionBlockLimits* temp = _impl_.position_block_limits_;
  _impl_.position_block_limits_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::PositionBlockLimits* LiquidationsConfig::_internal_mutable_position_block_limits() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_block_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::PositionBlockLimits>(GetArenaForAllocation());
    _impl_.position_block_limits_ = p;
  }
  return _impl_.position_block_limits_;
}
inline ::dydxprotocol::clob::PositionBlockLimits* LiquidationsConfig::mutable_position_block_limits() {
  ::dydxprotocol::clob::PositionBlockLimits* _msg = _internal_mutable_position_block_limits();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.LiquidationsConfig.position_block_limits)
  return _msg;
}
inline void LiquidationsConfig::set_allocated_position_block_limits(::dydxprotocol::clob::PositionBlockLimits* position_block_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_block_limits_;
  }
  if (position_block_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position_block_limits);
    if (message_arena != submessage_arena) {
      position_block_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_block_limits, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.position_block_limits_ = position_block_limits;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.LiquidationsConfig.position_block_limits)
}

// .dydxprotocol.clob.SubaccountBlockLimits subaccount_block_limits = 4 [(.gogoproto.nullable) = false];
inline bool LiquidationsConfig::has_subaccount_block_limits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_block_limits_ != nullptr);
  return value;
}
inline void LiquidationsConfig::clear_subaccount_block_limits() {
  if (_impl_.subaccount_block_limits_ != nullptr) _impl_.subaccount_block_limits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::dydxprotocol::clob::SubaccountBlockLimits& LiquidationsConfig::_internal_subaccount_block_limits() const {
  const ::dydxprotocol::clob::SubaccountBlockLimits* p = _impl_.subaccount_block_limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::SubaccountBlockLimits&>(
      ::dydxprotocol::clob::_SubaccountBlockLimits_default_instance_);
}
inline const ::dydxprotocol::clob::SubaccountBlockLimits& LiquidationsConfig::subaccount_block_limits() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LiquidationsConfig.subaccount_block_limits)
  return _internal_subaccount_block_limits();
}
inline void LiquidationsConfig::unsafe_arena_set_allocated_subaccount_block_limits(
    ::dydxprotocol::clob::SubaccountBlockLimits* subaccount_block_limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_block_limits_);
  }
  _impl_.subaccount_block_limits_ = subaccount_block_limits;
  if (subaccount_block_limits) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.LiquidationsConfig.subaccount_block_limits)
}
inline ::dydxprotocol::clob::SubaccountBlockLimits* LiquidationsConfig::release_subaccount_block_limits() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::clob::SubaccountBlockLimits* temp = _impl_.subaccount_block_limits_;
  _impl_.subaccount_block_limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::SubaccountBlockLimits* LiquidationsConfig::unsafe_arena_release_subaccount_block_limits() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.LiquidationsConfig.subaccount_block_limits)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::clob::SubaccountBlockLimits* temp = _impl_.subaccount_block_limits_;
  _impl_.subaccount_block_limits_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::SubaccountBlockLimits* LiquidationsConfig::_internal_mutable_subaccount_block_limits() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.subaccount_block_limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::SubaccountBlockLimits>(GetArenaForAllocation());
    _impl_.subaccount_block_limits_ = p;
  }
  return _impl_.subaccount_block_limits_;
}
inline ::dydxprotocol::clob::SubaccountBlockLimits* LiquidationsConfig::mutable_subaccount_block_limits() {
  ::dydxprotocol::clob::SubaccountBlockLimits* _msg = _internal_mutable_subaccount_block_limits();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.LiquidationsConfig.subaccount_block_limits)
  return _msg;
}
inline void LiquidationsConfig::set_allocated_subaccount_block_limits(::dydxprotocol::clob::SubaccountBlockLimits* subaccount_block_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.subaccount_block_limits_;
  }
  if (subaccount_block_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subaccount_block_limits);
    if (message_arena != submessage_arena) {
      subaccount_block_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_block_limits, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.subaccount_block_limits_ = subaccount_block_limits;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.LiquidationsConfig.subaccount_block_limits)
}

// .dydxprotocol.clob.FillablePriceConfig fillable_price_config = 5 [(.gogoproto.nullable) = false];
inline bool LiquidationsConfig::has_fillable_price_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fillable_price_config_ != nullptr);
  return value;
}
inline void LiquidationsConfig::clear_fillable_price_config() {
  if (_impl_.fillable_price_config_ != nullptr) _impl_.fillable_price_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::dydxprotocol::clob::FillablePriceConfig& LiquidationsConfig::_internal_fillable_price_config() const {
  const ::dydxprotocol::clob::FillablePriceConfig* p = _impl_.fillable_price_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::FillablePriceConfig&>(
      ::dydxprotocol::clob::_FillablePriceConfig_default_instance_);
}
inline const ::dydxprotocol::clob::FillablePriceConfig& LiquidationsConfig::fillable_price_config() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.LiquidationsConfig.fillable_price_config)
  return _internal_fillable_price_config();
}
inline void LiquidationsConfig::unsafe_arena_set_allocated_fillable_price_config(
    ::dydxprotocol::clob::FillablePriceConfig* fillable_price_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fillable_price_config_);
  }
  _impl_.fillable_price_config_ = fillable_price_config;
  if (fillable_price_config) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.LiquidationsConfig.fillable_price_config)
}
inline ::dydxprotocol::clob::FillablePriceConfig* LiquidationsConfig::release_fillable_price_config() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::dydxprotocol::clob::FillablePriceConfig* temp = _impl_.fillable_price_config_;
  _impl_.fillable_price_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::FillablePriceConfig* LiquidationsConfig::unsafe_arena_release_fillable_price_config() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.LiquidationsConfig.fillable_price_config)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::dydxprotocol::clob::FillablePriceConfig* temp = _impl_.fillable_price_config_;
  _impl_.fillable_price_config_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::FillablePriceConfig* LiquidationsConfig::_internal_mutable_fillable_price_config() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.fillable_price_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::FillablePriceConfig>(GetArenaForAllocation());
    _impl_.fillable_price_config_ = p;
  }
  return _impl_.fillable_price_config_;
}
inline ::dydxprotocol::clob::FillablePriceConfig* LiquidationsConfig::mutable_fillable_price_config() {
  ::dydxprotocol::clob::FillablePriceConfig* _msg = _internal_mutable_fillable_price_config();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.LiquidationsConfig.fillable_price_config)
  return _msg;
}
inline void LiquidationsConfig::set_allocated_fillable_price_config(::dydxprotocol::clob::FillablePriceConfig* fillable_price_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fillable_price_config_;
  }
  if (fillable_price_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fillable_price_config);
    if (message_arena != submessage_arena) {
      fillable_price_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fillable_price_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.fillable_price_config_ = fillable_price_config;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.LiquidationsConfig.fillable_price_config)
}

// -------------------------------------------------------------------

// PositionBlockLimits

// uint64 min_position_notional_liquidated = 1;
inline void PositionBlockLimits::clear_min_position_notional_liquidated() {
  _impl_.min_position_notional_liquidated_ = ::uint64_t{0u};
}
inline ::uint64_t PositionBlockLimits::min_position_notional_liquidated() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.PositionBlockLimits.min_position_notional_liquidated)
  return _internal_min_position_notional_liquidated();
}
inline void PositionBlockLimits::set_min_position_notional_liquidated(::uint64_t value) {
  _internal_set_min_position_notional_liquidated(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.PositionBlockLimits.min_position_notional_liquidated)
}
inline ::uint64_t PositionBlockLimits::_internal_min_position_notional_liquidated() const {
  return _impl_.min_position_notional_liquidated_;
}
inline void PositionBlockLimits::_internal_set_min_position_notional_liquidated(::uint64_t value) {
  ;
  _impl_.min_position_notional_liquidated_ = value;
}

// uint32 max_position_portion_liquidated_ppm = 2;
inline void PositionBlockLimits::clear_max_position_portion_liquidated_ppm() {
  _impl_.max_position_portion_liquidated_ppm_ = 0u;
}
inline ::uint32_t PositionBlockLimits::max_position_portion_liquidated_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.PositionBlockLimits.max_position_portion_liquidated_ppm)
  return _internal_max_position_portion_liquidated_ppm();
}
inline void PositionBlockLimits::set_max_position_portion_liquidated_ppm(::uint32_t value) {
  _internal_set_max_position_portion_liquidated_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.PositionBlockLimits.max_position_portion_liquidated_ppm)
}
inline ::uint32_t PositionBlockLimits::_internal_max_position_portion_liquidated_ppm() const {
  return _impl_.max_position_portion_liquidated_ppm_;
}
inline void PositionBlockLimits::_internal_set_max_position_portion_liquidated_ppm(::uint32_t value) {
  ;
  _impl_.max_position_portion_liquidated_ppm_ = value;
}

// -------------------------------------------------------------------

// SubaccountBlockLimits

// uint64 max_notional_liquidated = 1;
inline void SubaccountBlockLimits::clear_max_notional_liquidated() {
  _impl_.max_notional_liquidated_ = ::uint64_t{0u};
}
inline ::uint64_t SubaccountBlockLimits::max_notional_liquidated() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SubaccountBlockLimits.max_notional_liquidated)
  return _internal_max_notional_liquidated();
}
inline void SubaccountBlockLimits::set_max_notional_liquidated(::uint64_t value) {
  _internal_set_max_notional_liquidated(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SubaccountBlockLimits.max_notional_liquidated)
}
inline ::uint64_t SubaccountBlockLimits::_internal_max_notional_liquidated() const {
  return _impl_.max_notional_liquidated_;
}
inline void SubaccountBlockLimits::_internal_set_max_notional_liquidated(::uint64_t value) {
  ;
  _impl_.max_notional_liquidated_ = value;
}

// uint64 max_quantums_insurance_lost = 2;
inline void SubaccountBlockLimits::clear_max_quantums_insurance_lost() {
  _impl_.max_quantums_insurance_lost_ = ::uint64_t{0u};
}
inline ::uint64_t SubaccountBlockLimits::max_quantums_insurance_lost() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SubaccountBlockLimits.max_quantums_insurance_lost)
  return _internal_max_quantums_insurance_lost();
}
inline void SubaccountBlockLimits::set_max_quantums_insurance_lost(::uint64_t value) {
  _internal_set_max_quantums_insurance_lost(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SubaccountBlockLimits.max_quantums_insurance_lost)
}
inline ::uint64_t SubaccountBlockLimits::_internal_max_quantums_insurance_lost() const {
  return _impl_.max_quantums_insurance_lost_;
}
inline void SubaccountBlockLimits::_internal_set_max_quantums_insurance_lost(::uint64_t value) {
  ;
  _impl_.max_quantums_insurance_lost_ = value;
}

// -------------------------------------------------------------------

// FillablePriceConfig

// uint32 bankruptcy_adjustment_ppm = 1;
inline void FillablePriceConfig::clear_bankruptcy_adjustment_ppm() {
  _impl_.bankruptcy_adjustment_ppm_ = 0u;
}
inline ::uint32_t FillablePriceConfig::bankruptcy_adjustment_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.FillablePriceConfig.bankruptcy_adjustment_ppm)
  return _internal_bankruptcy_adjustment_ppm();
}
inline void FillablePriceConfig::set_bankruptcy_adjustment_ppm(::uint32_t value) {
  _internal_set_bankruptcy_adjustment_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.FillablePriceConfig.bankruptcy_adjustment_ppm)
}
inline ::uint32_t FillablePriceConfig::_internal_bankruptcy_adjustment_ppm() const {
  return _impl_.bankruptcy_adjustment_ppm_;
}
inline void FillablePriceConfig::_internal_set_bankruptcy_adjustment_ppm(::uint32_t value) {
  ;
  _impl_.bankruptcy_adjustment_ppm_ = value;
}

// uint32 spread_to_maintenance_margin_ratio_ppm = 2;
inline void FillablePriceConfig::clear_spread_to_maintenance_margin_ratio_ppm() {
  _impl_.spread_to_maintenance_margin_ratio_ppm_ = 0u;
}
inline ::uint32_t FillablePriceConfig::spread_to_maintenance_margin_ratio_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.FillablePriceConfig.spread_to_maintenance_margin_ratio_ppm)
  return _internal_spread_to_maintenance_margin_ratio_ppm();
}
inline void FillablePriceConfig::set_spread_to_maintenance_margin_ratio_ppm(::uint32_t value) {
  _internal_set_spread_to_maintenance_margin_ratio_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.FillablePriceConfig.spread_to_maintenance_margin_ratio_ppm)
}
inline ::uint32_t FillablePriceConfig::_internal_spread_to_maintenance_margin_ratio_ppm() const {
  return _impl_.spread_to_maintenance_margin_ratio_ppm_;
}
inline void FillablePriceConfig::_internal_set_spread_to_maintenance_margin_ratio_ppm(::uint32_t value) {
  ;
  _impl_.spread_to_maintenance_margin_ratio_ppm_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_2epb_2eh
