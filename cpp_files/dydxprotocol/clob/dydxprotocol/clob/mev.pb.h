// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/mev.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fmev_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fmev_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
#include "dydxprotocol/clob/clob_pair.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fmev_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fmev_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fmev_2eproto;
namespace dydxprotocol {
namespace clob {
class ClobMidPrice;
struct ClobMidPriceDefaultTypeInternal;
extern ClobMidPriceDefaultTypeInternal _ClobMidPrice_default_instance_;
class MEVLiquidationMatch;
struct MEVLiquidationMatchDefaultTypeInternal;
extern MEVLiquidationMatchDefaultTypeInternal _MEVLiquidationMatch_default_instance_;
class MEVMatch;
struct MEVMatchDefaultTypeInternal;
extern MEVMatchDefaultTypeInternal _MEVMatch_default_instance_;
class MevNodeToNodeMetrics;
struct MevNodeToNodeMetricsDefaultTypeInternal;
extern MevNodeToNodeMetricsDefaultTypeInternal _MevNodeToNodeMetrics_default_instance_;
class ValidatorMevMatches;
struct ValidatorMevMatchesDefaultTypeInternal;
extern ValidatorMevMatchesDefaultTypeInternal _ValidatorMevMatches_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::ClobMidPrice* Arena::CreateMaybeMessage<::dydxprotocol::clob::ClobMidPrice>(Arena*);
template <>
::dydxprotocol::clob::MEVLiquidationMatch* Arena::CreateMaybeMessage<::dydxprotocol::clob::MEVLiquidationMatch>(Arena*);
template <>
::dydxprotocol::clob::MEVMatch* Arena::CreateMaybeMessage<::dydxprotocol::clob::MEVMatch>(Arena*);
template <>
::dydxprotocol::clob::MevNodeToNodeMetrics* Arena::CreateMaybeMessage<::dydxprotocol::clob::MevNodeToNodeMetrics>(Arena*);
template <>
::dydxprotocol::clob::ValidatorMevMatches* Arena::CreateMaybeMessage<::dydxprotocol::clob::ValidatorMevMatches>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class MEVMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MEVMatch) */ {
 public:
  inline MEVMatch() : MEVMatch(nullptr) {}
  ~MEVMatch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MEVMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MEVMatch(const MEVMatch& from);
  MEVMatch(MEVMatch&& from) noexcept
    : MEVMatch() {
    *this = ::std::move(from);
  }

  inline MEVMatch& operator=(const MEVMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MEVMatch& operator=(MEVMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MEVMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const MEVMatch* internal_default_instance() {
    return reinterpret_cast<const MEVMatch*>(
               &_MEVMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MEVMatch& a, MEVMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MEVMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MEVMatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MEVMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MEVMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MEVMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MEVMatch& from) {
    MEVMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MEVMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MEVMatch";
  }
  protected:
  explicit MEVMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTakerOrderSubaccountIdFieldNumber = 1,
    kMakerOrderSubaccountIdFieldNumber = 3,
    kTakerFeePpmFieldNumber = 2,
    kMakerOrderIsBuyFieldNumber = 5,
    kMakerOrderSubticksFieldNumber = 4,
    kMakerFeePpmFieldNumber = 6,
    kClobPairIdFieldNumber = 7,
    kFillAmountFieldNumber = 8,
  };
  // .dydxprotocol.subaccounts.SubaccountId taker_order_subaccount_id = 1;
  bool has_taker_order_subaccount_id() const;
  void clear_taker_order_subaccount_id() ;
  const ::dydxprotocol::subaccounts::SubaccountId& taker_order_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_taker_order_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_taker_order_subaccount_id();
  void set_allocated_taker_order_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* taker_order_subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_taker_order_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_taker_order_subaccount_id();
  public:
  void unsafe_arena_set_allocated_taker_order_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* taker_order_subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_taker_order_subaccount_id();
  // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3;
  bool has_maker_order_subaccount_id() const;
  void clear_maker_order_subaccount_id() ;
  const ::dydxprotocol::subaccounts::SubaccountId& maker_order_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_maker_order_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_maker_order_subaccount_id();
  void set_allocated_maker_order_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_maker_order_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_maker_order_subaccount_id();
  public:
  void unsafe_arena_set_allocated_maker_order_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_maker_order_subaccount_id();
  // int32 taker_fee_ppm = 2;
  void clear_taker_fee_ppm() ;
  ::int32_t taker_fee_ppm() const;
  void set_taker_fee_ppm(::int32_t value);

  private:
  ::int32_t _internal_taker_fee_ppm() const;
  void _internal_set_taker_fee_ppm(::int32_t value);

  public:
  // bool maker_order_is_buy = 5;
  void clear_maker_order_is_buy() ;
  bool maker_order_is_buy() const;
  void set_maker_order_is_buy(bool value);

  private:
  bool _internal_maker_order_is_buy() const;
  void _internal_set_maker_order_is_buy(bool value);

  public:
  // uint64 maker_order_subticks = 4;
  void clear_maker_order_subticks() ;
  ::uint64_t maker_order_subticks() const;
  void set_maker_order_subticks(::uint64_t value);

  private:
  ::uint64_t _internal_maker_order_subticks() const;
  void _internal_set_maker_order_subticks(::uint64_t value);

  public:
  // int32 maker_fee_ppm = 6;
  void clear_maker_fee_ppm() ;
  ::int32_t maker_fee_ppm() const;
  void set_maker_fee_ppm(::int32_t value);

  private:
  ::int32_t _internal_maker_fee_ppm() const;
  void _internal_set_maker_fee_ppm(::int32_t value);

  public:
  // uint32 clob_pair_id = 7;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // uint64 fill_amount = 8;
  void clear_fill_amount() ;
  ::uint64_t fill_amount() const;
  void set_fill_amount(::uint64_t value);

  private:
  ::uint64_t _internal_fill_amount() const;
  void _internal_set_fill_amount(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MEVMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::subaccounts::SubaccountId* taker_order_subaccount_id_;
    ::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id_;
    ::int32_t taker_fee_ppm_;
    bool maker_order_is_buy_;
    ::uint64_t maker_order_subticks_;
    ::int32_t maker_fee_ppm_;
    ::uint32_t clob_pair_id_;
    ::uint64_t fill_amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmev_2eproto;
};// -------------------------------------------------------------------

class MEVLiquidationMatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MEVLiquidationMatch) */ {
 public:
  inline MEVLiquidationMatch() : MEVLiquidationMatch(nullptr) {}
  ~MEVLiquidationMatch() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MEVLiquidationMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MEVLiquidationMatch(const MEVLiquidationMatch& from);
  MEVLiquidationMatch(MEVLiquidationMatch&& from) noexcept
    : MEVLiquidationMatch() {
    *this = ::std::move(from);
  }

  inline MEVLiquidationMatch& operator=(const MEVLiquidationMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline MEVLiquidationMatch& operator=(MEVLiquidationMatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MEVLiquidationMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const MEVLiquidationMatch* internal_default_instance() {
    return reinterpret_cast<const MEVLiquidationMatch*>(
               &_MEVLiquidationMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MEVLiquidationMatch& a, MEVLiquidationMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(MEVLiquidationMatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MEVLiquidationMatch* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MEVLiquidationMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MEVLiquidationMatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MEVLiquidationMatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MEVLiquidationMatch& from) {
    MEVLiquidationMatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MEVLiquidationMatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MEVLiquidationMatch";
  }
  protected:
  explicit MEVLiquidationMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiquidatedSubaccountIdFieldNumber = 1,
    kMakerOrderSubaccountIdFieldNumber = 3,
    kInsuranceFundDeltaQuoteQuantumsFieldNumber = 2,
    kMakerOrderSubticksFieldNumber = 4,
    kMakerOrderIsBuyFieldNumber = 5,
    kMakerFeePpmFieldNumber = 6,
    kFillAmountFieldNumber = 8,
    kClobPairIdFieldNumber = 7,
  };
  // .dydxprotocol.subaccounts.SubaccountId liquidated_subaccount_id = 1 [(.gogoproto.nullable) = false];
  bool has_liquidated_subaccount_id() const;
  void clear_liquidated_subaccount_id() ;
  const ::dydxprotocol::subaccounts::SubaccountId& liquidated_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_liquidated_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_liquidated_subaccount_id();
  void set_allocated_liquidated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* liquidated_subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_liquidated_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_liquidated_subaccount_id();
  public:
  void unsafe_arena_set_allocated_liquidated_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* liquidated_subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_liquidated_subaccount_id();
  // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3 [(.gogoproto.nullable) = false];
  bool has_maker_order_subaccount_id() const;
  void clear_maker_order_subaccount_id() ;
  const ::dydxprotocol::subaccounts::SubaccountId& maker_order_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_maker_order_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_maker_order_subaccount_id();
  void set_allocated_maker_order_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_maker_order_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_maker_order_subaccount_id();
  public:
  void unsafe_arena_set_allocated_maker_order_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_maker_order_subaccount_id();
  // int64 insurance_fund_delta_quote_quantums = 2;
  void clear_insurance_fund_delta_quote_quantums() ;
  ::int64_t insurance_fund_delta_quote_quantums() const;
  void set_insurance_fund_delta_quote_quantums(::int64_t value);

  private:
  ::int64_t _internal_insurance_fund_delta_quote_quantums() const;
  void _internal_set_insurance_fund_delta_quote_quantums(::int64_t value);

  public:
  // uint64 maker_order_subticks = 4;
  void clear_maker_order_subticks() ;
  ::uint64_t maker_order_subticks() const;
  void set_maker_order_subticks(::uint64_t value);

  private:
  ::uint64_t _internal_maker_order_subticks() const;
  void _internal_set_maker_order_subticks(::uint64_t value);

  public:
  // bool maker_order_is_buy = 5;
  void clear_maker_order_is_buy() ;
  bool maker_order_is_buy() const;
  void set_maker_order_is_buy(bool value);

  private:
  bool _internal_maker_order_is_buy() const;
  void _internal_set_maker_order_is_buy(bool value);

  public:
  // int32 maker_fee_ppm = 6;
  void clear_maker_fee_ppm() ;
  ::int32_t maker_fee_ppm() const;
  void set_maker_fee_ppm(::int32_t value);

  private:
  ::int32_t _internal_maker_fee_ppm() const;
  void _internal_set_maker_fee_ppm(::int32_t value);

  public:
  // uint64 fill_amount = 8;
  void clear_fill_amount() ;
  ::uint64_t fill_amount() const;
  void set_fill_amount(::uint64_t value);

  private:
  ::uint64_t _internal_fill_amount() const;
  void _internal_set_fill_amount(::uint64_t value);

  public:
  // uint32 clob_pair_id = 7;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MEVLiquidationMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::subaccounts::SubaccountId* liquidated_subaccount_id_;
    ::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id_;
    ::int64_t insurance_fund_delta_quote_quantums_;
    ::uint64_t maker_order_subticks_;
    bool maker_order_is_buy_;
    ::int32_t maker_fee_ppm_;
    ::uint64_t fill_amount_;
    ::uint32_t clob_pair_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmev_2eproto;
};// -------------------------------------------------------------------

class ClobMidPrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.ClobMidPrice) */ {
 public:
  inline ClobMidPrice() : ClobMidPrice(nullptr) {}
  ~ClobMidPrice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClobMidPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClobMidPrice(const ClobMidPrice& from);
  ClobMidPrice(ClobMidPrice&& from) noexcept
    : ClobMidPrice() {
    *this = ::std::move(from);
  }

  inline ClobMidPrice& operator=(const ClobMidPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClobMidPrice& operator=(ClobMidPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClobMidPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClobMidPrice* internal_default_instance() {
    return reinterpret_cast<const ClobMidPrice*>(
               &_ClobMidPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClobMidPrice& a, ClobMidPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(ClobMidPrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClobMidPrice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClobMidPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClobMidPrice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClobMidPrice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClobMidPrice& from) {
    ClobMidPrice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClobMidPrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.ClobMidPrice";
  }
  protected:
  explicit ClobMidPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClobPairFieldNumber = 1,
    kSubticksFieldNumber = 2,
  };
  // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  bool has_clob_pair() const;
  void clear_clob_pair() ;
  const ::dydxprotocol::clob::ClobPair& clob_pair() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobPair* release_clob_pair();
  ::dydxprotocol::clob::ClobPair* mutable_clob_pair();
  void set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair);
  private:
  const ::dydxprotocol::clob::ClobPair& _internal_clob_pair() const;
  ::dydxprotocol::clob::ClobPair* _internal_mutable_clob_pair();
  public:
  void unsafe_arena_set_allocated_clob_pair(
      ::dydxprotocol::clob::ClobPair* clob_pair);
  ::dydxprotocol::clob::ClobPair* unsafe_arena_release_clob_pair();
  // uint64 subticks = 2;
  void clear_subticks() ;
  ::uint64_t subticks() const;
  void set_subticks(::uint64_t value);

  private:
  ::uint64_t _internal_subticks() const;
  void _internal_set_subticks(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.ClobMidPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::ClobPair* clob_pair_;
    ::uint64_t subticks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmev_2eproto;
};// -------------------------------------------------------------------

class ValidatorMevMatches final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.ValidatorMevMatches) */ {
 public:
  inline ValidatorMevMatches() : ValidatorMevMatches(nullptr) {}
  ~ValidatorMevMatches() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorMevMatches(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorMevMatches(const ValidatorMevMatches& from);
  ValidatorMevMatches(ValidatorMevMatches&& from) noexcept
    : ValidatorMevMatches() {
    *this = ::std::move(from);
  }

  inline ValidatorMevMatches& operator=(const ValidatorMevMatches& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorMevMatches& operator=(ValidatorMevMatches&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorMevMatches& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorMevMatches* internal_default_instance() {
    return reinterpret_cast<const ValidatorMevMatches*>(
               &_ValidatorMevMatches_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValidatorMevMatches& a, ValidatorMevMatches& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorMevMatches* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorMevMatches* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorMevMatches* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorMevMatches>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorMevMatches& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidatorMevMatches& from) {
    ValidatorMevMatches::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorMevMatches* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.ValidatorMevMatches";
  }
  protected:
  explicit ValidatorMevMatches(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kLiquidationMatchesFieldNumber = 2,
  };
  // repeated .dydxprotocol.clob.MEVMatch matches = 1 [(.gogoproto.nullable) = false];
  int matches_size() const;
  private:
  int _internal_matches_size() const;

  public:
  void clear_matches() ;
  ::dydxprotocol::clob::MEVMatch* mutable_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVMatch >*
      mutable_matches();
  private:
  const ::dydxprotocol::clob::MEVMatch& _internal_matches(int index) const;
  ::dydxprotocol::clob::MEVMatch* _internal_add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVMatch>& _internal_matches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVMatch>* _internal_mutable_matches();
  public:
  const ::dydxprotocol::clob::MEVMatch& matches(int index) const;
  ::dydxprotocol::clob::MEVMatch* add_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVMatch >&
      matches() const;
  // repeated .dydxprotocol.clob.MEVLiquidationMatch liquidation_matches = 2 [(.gogoproto.nullable) = false];
  int liquidation_matches_size() const;
  private:
  int _internal_liquidation_matches_size() const;

  public:
  void clear_liquidation_matches() ;
  ::dydxprotocol::clob::MEVLiquidationMatch* mutable_liquidation_matches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVLiquidationMatch >*
      mutable_liquidation_matches();
  private:
  const ::dydxprotocol::clob::MEVLiquidationMatch& _internal_liquidation_matches(int index) const;
  ::dydxprotocol::clob::MEVLiquidationMatch* _internal_add_liquidation_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVLiquidationMatch>& _internal_liquidation_matches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVLiquidationMatch>* _internal_mutable_liquidation_matches();
  public:
  const ::dydxprotocol::clob::MEVLiquidationMatch& liquidation_matches(int index) const;
  ::dydxprotocol::clob::MEVLiquidationMatch* add_liquidation_matches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVLiquidationMatch >&
      liquidation_matches() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.ValidatorMevMatches)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVMatch > matches_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVLiquidationMatch > liquidation_matches_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmev_2eproto;
};// -------------------------------------------------------------------

class MevNodeToNodeMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MevNodeToNodeMetrics) */ {
 public:
  inline MevNodeToNodeMetrics() : MevNodeToNodeMetrics(nullptr) {}
  ~MevNodeToNodeMetrics() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MevNodeToNodeMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MevNodeToNodeMetrics(const MevNodeToNodeMetrics& from);
  MevNodeToNodeMetrics(MevNodeToNodeMetrics&& from) noexcept
    : MevNodeToNodeMetrics() {
    *this = ::std::move(from);
  }

  inline MevNodeToNodeMetrics& operator=(const MevNodeToNodeMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline MevNodeToNodeMetrics& operator=(MevNodeToNodeMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MevNodeToNodeMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const MevNodeToNodeMetrics* internal_default_instance() {
    return reinterpret_cast<const MevNodeToNodeMetrics*>(
               &_MevNodeToNodeMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MevNodeToNodeMetrics& a, MevNodeToNodeMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(MevNodeToNodeMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MevNodeToNodeMetrics* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MevNodeToNodeMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MevNodeToNodeMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MevNodeToNodeMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MevNodeToNodeMetrics& from) {
    MevNodeToNodeMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MevNodeToNodeMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MevNodeToNodeMetrics";
  }
  protected:
  explicit MevNodeToNodeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClobMidPricesFieldNumber = 2,
    kValidatorMevMatchesFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.ClobMidPrice clob_mid_prices = 2 [(.gogoproto.nullable) = false];
  int clob_mid_prices_size() const;
  private:
  int _internal_clob_mid_prices_size() const;

  public:
  void clear_clob_mid_prices() ;
  ::dydxprotocol::clob::ClobMidPrice* mutable_clob_mid_prices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobMidPrice >*
      mutable_clob_mid_prices();
  private:
  const ::dydxprotocol::clob::ClobMidPrice& _internal_clob_mid_prices(int index) const;
  ::dydxprotocol::clob::ClobMidPrice* _internal_add_clob_mid_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobMidPrice>& _internal_clob_mid_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobMidPrice>* _internal_mutable_clob_mid_prices();
  public:
  const ::dydxprotocol::clob::ClobMidPrice& clob_mid_prices(int index) const;
  ::dydxprotocol::clob::ClobMidPrice* add_clob_mid_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobMidPrice >&
      clob_mid_prices() const;
  // .dydxprotocol.clob.ValidatorMevMatches validator_mev_matches = 1;
  bool has_validator_mev_matches() const;
  void clear_validator_mev_matches() ;
  const ::dydxprotocol::clob::ValidatorMevMatches& validator_mev_matches() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ValidatorMevMatches* release_validator_mev_matches();
  ::dydxprotocol::clob::ValidatorMevMatches* mutable_validator_mev_matches();
  void set_allocated_validator_mev_matches(::dydxprotocol::clob::ValidatorMevMatches* validator_mev_matches);
  private:
  const ::dydxprotocol::clob::ValidatorMevMatches& _internal_validator_mev_matches() const;
  ::dydxprotocol::clob::ValidatorMevMatches* _internal_mutable_validator_mev_matches();
  public:
  void unsafe_arena_set_allocated_validator_mev_matches(
      ::dydxprotocol::clob::ValidatorMevMatches* validator_mev_matches);
  ::dydxprotocol::clob::ValidatorMevMatches* unsafe_arena_release_validator_mev_matches();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MevNodeToNodeMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobMidPrice > clob_mid_prices_;
    ::dydxprotocol::clob::ValidatorMevMatches* validator_mev_matches_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fmev_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MEVMatch

// .dydxprotocol.subaccounts.SubaccountId taker_order_subaccount_id = 1;
inline bool MEVMatch::has_taker_order_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.taker_order_subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVMatch::_internal_taker_order_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.taker_order_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVMatch::taker_order_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.taker_order_subaccount_id)
  return _internal_taker_order_subaccount_id();
}
inline void MEVMatch::unsafe_arena_set_allocated_taker_order_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* taker_order_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taker_order_subaccount_id_);
  }
  _impl_.taker_order_subaccount_id_ = taker_order_subaccount_id;
  if (taker_order_subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MEVMatch.taker_order_subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::release_taker_order_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.taker_order_subaccount_id_;
  _impl_.taker_order_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::unsafe_arena_release_taker_order_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MEVMatch.taker_order_subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.taker_order_subaccount_id_;
  _impl_.taker_order_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::_internal_mutable_taker_order_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.taker_order_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.taker_order_subaccount_id_ = p;
  }
  return _impl_.taker_order_subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::mutable_taker_order_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_taker_order_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MEVMatch.taker_order_subaccount_id)
  return _msg;
}
inline void MEVMatch::set_allocated_taker_order_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* taker_order_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taker_order_subaccount_id_);
  }
  if (taker_order_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(taker_order_subaccount_id));
    if (message_arena != submessage_arena) {
      taker_order_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taker_order_subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.taker_order_subaccount_id_ = taker_order_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MEVMatch.taker_order_subaccount_id)
}

// int32 taker_fee_ppm = 2;
inline void MEVMatch::clear_taker_fee_ppm() {
  _impl_.taker_fee_ppm_ = 0;
}
inline ::int32_t MEVMatch::taker_fee_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.taker_fee_ppm)
  return _internal_taker_fee_ppm();
}
inline void MEVMatch::set_taker_fee_ppm(::int32_t value) {
  _internal_set_taker_fee_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVMatch.taker_fee_ppm)
}
inline ::int32_t MEVMatch::_internal_taker_fee_ppm() const {
  return _impl_.taker_fee_ppm_;
}
inline void MEVMatch::_internal_set_taker_fee_ppm(::int32_t value) {
  ;
  _impl_.taker_fee_ppm_ = value;
}

// .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3;
inline bool MEVMatch::has_maker_order_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maker_order_subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVMatch::_internal_maker_order_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.maker_order_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVMatch::maker_order_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.maker_order_subaccount_id)
  return _internal_maker_order_subaccount_id();
}
inline void MEVMatch::unsafe_arena_set_allocated_maker_order_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_subaccount_id_);
  }
  _impl_.maker_order_subaccount_id_ = maker_order_subaccount_id;
  if (maker_order_subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MEVMatch.maker_order_subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::release_maker_order_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.maker_order_subaccount_id_;
  _impl_.maker_order_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::unsafe_arena_release_maker_order_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MEVMatch.maker_order_subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.maker_order_subaccount_id_;
  _impl_.maker_order_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::_internal_mutable_maker_order_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.maker_order_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.maker_order_subaccount_id_ = p;
  }
  return _impl_.maker_order_subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVMatch::mutable_maker_order_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_maker_order_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MEVMatch.maker_order_subaccount_id)
  return _msg;
}
inline void MEVMatch::set_allocated_maker_order_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_subaccount_id_);
  }
  if (maker_order_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maker_order_subaccount_id));
    if (message_arena != submessage_arena) {
      maker_order_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maker_order_subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.maker_order_subaccount_id_ = maker_order_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MEVMatch.maker_order_subaccount_id)
}

// uint64 maker_order_subticks = 4;
inline void MEVMatch::clear_maker_order_subticks() {
  _impl_.maker_order_subticks_ = ::uint64_t{0u};
}
inline ::uint64_t MEVMatch::maker_order_subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.maker_order_subticks)
  return _internal_maker_order_subticks();
}
inline void MEVMatch::set_maker_order_subticks(::uint64_t value) {
  _internal_set_maker_order_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVMatch.maker_order_subticks)
}
inline ::uint64_t MEVMatch::_internal_maker_order_subticks() const {
  return _impl_.maker_order_subticks_;
}
inline void MEVMatch::_internal_set_maker_order_subticks(::uint64_t value) {
  ;
  _impl_.maker_order_subticks_ = value;
}

// bool maker_order_is_buy = 5;
inline void MEVMatch::clear_maker_order_is_buy() {
  _impl_.maker_order_is_buy_ = false;
}
inline bool MEVMatch::maker_order_is_buy() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.maker_order_is_buy)
  return _internal_maker_order_is_buy();
}
inline void MEVMatch::set_maker_order_is_buy(bool value) {
  _internal_set_maker_order_is_buy(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVMatch.maker_order_is_buy)
}
inline bool MEVMatch::_internal_maker_order_is_buy() const {
  return _impl_.maker_order_is_buy_;
}
inline void MEVMatch::_internal_set_maker_order_is_buy(bool value) {
  ;
  _impl_.maker_order_is_buy_ = value;
}

// int32 maker_fee_ppm = 6;
inline void MEVMatch::clear_maker_fee_ppm() {
  _impl_.maker_fee_ppm_ = 0;
}
inline ::int32_t MEVMatch::maker_fee_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.maker_fee_ppm)
  return _internal_maker_fee_ppm();
}
inline void MEVMatch::set_maker_fee_ppm(::int32_t value) {
  _internal_set_maker_fee_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVMatch.maker_fee_ppm)
}
inline ::int32_t MEVMatch::_internal_maker_fee_ppm() const {
  return _impl_.maker_fee_ppm_;
}
inline void MEVMatch::_internal_set_maker_fee_ppm(::int32_t value) {
  ;
  _impl_.maker_fee_ppm_ = value;
}

// uint32 clob_pair_id = 7;
inline void MEVMatch::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t MEVMatch::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void MEVMatch::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVMatch.clob_pair_id)
}
inline ::uint32_t MEVMatch::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void MEVMatch::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// uint64 fill_amount = 8;
inline void MEVMatch::clear_fill_amount() {
  _impl_.fill_amount_ = ::uint64_t{0u};
}
inline ::uint64_t MEVMatch::fill_amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVMatch.fill_amount)
  return _internal_fill_amount();
}
inline void MEVMatch::set_fill_amount(::uint64_t value) {
  _internal_set_fill_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVMatch.fill_amount)
}
inline ::uint64_t MEVMatch::_internal_fill_amount() const {
  return _impl_.fill_amount_;
}
inline void MEVMatch::_internal_set_fill_amount(::uint64_t value) {
  ;
  _impl_.fill_amount_ = value;
}

// -------------------------------------------------------------------

// MEVLiquidationMatch

// .dydxprotocol.subaccounts.SubaccountId liquidated_subaccount_id = 1 [(.gogoproto.nullable) = false];
inline bool MEVLiquidationMatch::has_liquidated_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.liquidated_subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVLiquidationMatch::_internal_liquidated_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.liquidated_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVLiquidationMatch::liquidated_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.liquidated_subaccount_id)
  return _internal_liquidated_subaccount_id();
}
inline void MEVLiquidationMatch::unsafe_arena_set_allocated_liquidated_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* liquidated_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_subaccount_id_);
  }
  _impl_.liquidated_subaccount_id_ = liquidated_subaccount_id;
  if (liquidated_subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MEVLiquidationMatch.liquidated_subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::release_liquidated_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.liquidated_subaccount_id_;
  _impl_.liquidated_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::unsafe_arena_release_liquidated_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MEVLiquidationMatch.liquidated_subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.liquidated_subaccount_id_;
  _impl_.liquidated_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::_internal_mutable_liquidated_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.liquidated_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.liquidated_subaccount_id_ = p;
  }
  return _impl_.liquidated_subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::mutable_liquidated_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_liquidated_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MEVLiquidationMatch.liquidated_subaccount_id)
  return _msg;
}
inline void MEVLiquidationMatch::set_allocated_liquidated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* liquidated_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_subaccount_id_);
  }
  if (liquidated_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidated_subaccount_id));
    if (message_arena != submessage_arena) {
      liquidated_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidated_subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.liquidated_subaccount_id_ = liquidated_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MEVLiquidationMatch.liquidated_subaccount_id)
}

// int64 insurance_fund_delta_quote_quantums = 2;
inline void MEVLiquidationMatch::clear_insurance_fund_delta_quote_quantums() {
  _impl_.insurance_fund_delta_quote_quantums_ = ::int64_t{0};
}
inline ::int64_t MEVLiquidationMatch::insurance_fund_delta_quote_quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.insurance_fund_delta_quote_quantums)
  return _internal_insurance_fund_delta_quote_quantums();
}
inline void MEVLiquidationMatch::set_insurance_fund_delta_quote_quantums(::int64_t value) {
  _internal_set_insurance_fund_delta_quote_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVLiquidationMatch.insurance_fund_delta_quote_quantums)
}
inline ::int64_t MEVLiquidationMatch::_internal_insurance_fund_delta_quote_quantums() const {
  return _impl_.insurance_fund_delta_quote_quantums_;
}
inline void MEVLiquidationMatch::_internal_set_insurance_fund_delta_quote_quantums(::int64_t value) {
  ;
  _impl_.insurance_fund_delta_quote_quantums_ = value;
}

// .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3 [(.gogoproto.nullable) = false];
inline bool MEVLiquidationMatch::has_maker_order_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maker_order_subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVLiquidationMatch::_internal_maker_order_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.maker_order_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MEVLiquidationMatch::maker_order_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subaccount_id)
  return _internal_maker_order_subaccount_id();
}
inline void MEVLiquidationMatch::unsafe_arena_set_allocated_maker_order_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_subaccount_id_);
  }
  _impl_.maker_order_subaccount_id_ = maker_order_subaccount_id;
  if (maker_order_subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::release_maker_order_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.maker_order_subaccount_id_;
  _impl_.maker_order_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::unsafe_arena_release_maker_order_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.maker_order_subaccount_id_;
  _impl_.maker_order_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::_internal_mutable_maker_order_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.maker_order_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.maker_order_subaccount_id_ = p;
  }
  return _impl_.maker_order_subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MEVLiquidationMatch::mutable_maker_order_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_maker_order_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subaccount_id)
  return _msg;
}
inline void MEVLiquidationMatch::set_allocated_maker_order_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* maker_order_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_subaccount_id_);
  }
  if (maker_order_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maker_order_subaccount_id));
    if (message_arena != submessage_arena) {
      maker_order_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maker_order_subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.maker_order_subaccount_id_ = maker_order_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subaccount_id)
}

// uint64 maker_order_subticks = 4;
inline void MEVLiquidationMatch::clear_maker_order_subticks() {
  _impl_.maker_order_subticks_ = ::uint64_t{0u};
}
inline ::uint64_t MEVLiquidationMatch::maker_order_subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subticks)
  return _internal_maker_order_subticks();
}
inline void MEVLiquidationMatch::set_maker_order_subticks(::uint64_t value) {
  _internal_set_maker_order_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVLiquidationMatch.maker_order_subticks)
}
inline ::uint64_t MEVLiquidationMatch::_internal_maker_order_subticks() const {
  return _impl_.maker_order_subticks_;
}
inline void MEVLiquidationMatch::_internal_set_maker_order_subticks(::uint64_t value) {
  ;
  _impl_.maker_order_subticks_ = value;
}

// bool maker_order_is_buy = 5;
inline void MEVLiquidationMatch::clear_maker_order_is_buy() {
  _impl_.maker_order_is_buy_ = false;
}
inline bool MEVLiquidationMatch::maker_order_is_buy() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.maker_order_is_buy)
  return _internal_maker_order_is_buy();
}
inline void MEVLiquidationMatch::set_maker_order_is_buy(bool value) {
  _internal_set_maker_order_is_buy(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVLiquidationMatch.maker_order_is_buy)
}
inline bool MEVLiquidationMatch::_internal_maker_order_is_buy() const {
  return _impl_.maker_order_is_buy_;
}
inline void MEVLiquidationMatch::_internal_set_maker_order_is_buy(bool value) {
  ;
  _impl_.maker_order_is_buy_ = value;
}

// int32 maker_fee_ppm = 6;
inline void MEVLiquidationMatch::clear_maker_fee_ppm() {
  _impl_.maker_fee_ppm_ = 0;
}
inline ::int32_t MEVLiquidationMatch::maker_fee_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.maker_fee_ppm)
  return _internal_maker_fee_ppm();
}
inline void MEVLiquidationMatch::set_maker_fee_ppm(::int32_t value) {
  _internal_set_maker_fee_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVLiquidationMatch.maker_fee_ppm)
}
inline ::int32_t MEVLiquidationMatch::_internal_maker_fee_ppm() const {
  return _impl_.maker_fee_ppm_;
}
inline void MEVLiquidationMatch::_internal_set_maker_fee_ppm(::int32_t value) {
  ;
  _impl_.maker_fee_ppm_ = value;
}

// uint32 clob_pair_id = 7;
inline void MEVLiquidationMatch::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t MEVLiquidationMatch::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void MEVLiquidationMatch::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVLiquidationMatch.clob_pair_id)
}
inline ::uint32_t MEVLiquidationMatch::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void MEVLiquidationMatch::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// uint64 fill_amount = 8;
inline void MEVLiquidationMatch::clear_fill_amount() {
  _impl_.fill_amount_ = ::uint64_t{0u};
}
inline ::uint64_t MEVLiquidationMatch::fill_amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MEVLiquidationMatch.fill_amount)
  return _internal_fill_amount();
}
inline void MEVLiquidationMatch::set_fill_amount(::uint64_t value) {
  _internal_set_fill_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MEVLiquidationMatch.fill_amount)
}
inline ::uint64_t MEVLiquidationMatch::_internal_fill_amount() const {
  return _impl_.fill_amount_;
}
inline void MEVLiquidationMatch::_internal_set_fill_amount(::uint64_t value) {
  ;
  _impl_.fill_amount_ = value;
}

// -------------------------------------------------------------------

// ClobMidPrice

// .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
inline bool ClobMidPrice::has_clob_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clob_pair_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::ClobPair& ClobMidPrice::_internal_clob_pair() const {
  const ::dydxprotocol::clob::ClobPair* p = _impl_.clob_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::ClobPair&>(
      ::dydxprotocol::clob::_ClobPair_default_instance_);
}
inline const ::dydxprotocol::clob::ClobPair& ClobMidPrice::clob_pair() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobMidPrice.clob_pair)
  return _internal_clob_pair();
}
inline void ClobMidPrice::unsafe_arena_set_allocated_clob_pair(
    ::dydxprotocol::clob::ClobPair* clob_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  _impl_.clob_pair_ = clob_pair;
  if (clob_pair) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ClobMidPrice.clob_pair)
}
inline ::dydxprotocol::clob::ClobPair* ClobMidPrice::release_clob_pair() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* ClobMidPrice::unsafe_arena_release_clob_pair() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ClobMidPrice.clob_pair)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* ClobMidPrice::_internal_mutable_clob_pair() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.clob_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::ClobPair>(GetArenaForAllocation());
    _impl_.clob_pair_ = p;
  }
  return _impl_.clob_pair_;
}
inline ::dydxprotocol::clob::ClobPair* ClobMidPrice::mutable_clob_pair() {
  ::dydxprotocol::clob::ClobPair* _msg = _internal_mutable_clob_pair();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ClobMidPrice.clob_pair)
  return _msg;
}
inline void ClobMidPrice::set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  if (clob_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clob_pair));
    if (message_arena != submessage_arena) {
      clob_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clob_pair, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.clob_pair_ = clob_pair;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ClobMidPrice.clob_pair)
}

// uint64 subticks = 2;
inline void ClobMidPrice::clear_subticks() {
  _impl_.subticks_ = ::uint64_t{0u};
}
inline ::uint64_t ClobMidPrice::subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobMidPrice.subticks)
  return _internal_subticks();
}
inline void ClobMidPrice::set_subticks(::uint64_t value) {
  _internal_set_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.ClobMidPrice.subticks)
}
inline ::uint64_t ClobMidPrice::_internal_subticks() const {
  return _impl_.subticks_;
}
inline void ClobMidPrice::_internal_set_subticks(::uint64_t value) {
  ;
  _impl_.subticks_ = value;
}

// -------------------------------------------------------------------

// ValidatorMevMatches

// repeated .dydxprotocol.clob.MEVMatch matches = 1 [(.gogoproto.nullable) = false];
inline int ValidatorMevMatches::_internal_matches_size() const {
  return _impl_.matches_.size();
}
inline int ValidatorMevMatches::matches_size() const {
  return _internal_matches_size();
}
inline void ValidatorMevMatches::clear_matches() {
  _internal_mutable_matches()->Clear();
}
inline ::dydxprotocol::clob::MEVMatch* ValidatorMevMatches::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ValidatorMevMatches.matches)
  return _internal_mutable_matches()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVMatch >*
ValidatorMevMatches::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.ValidatorMevMatches.matches)
  return _internal_mutable_matches();
}
inline const ::dydxprotocol::clob::MEVMatch& ValidatorMevMatches::_internal_matches(int index) const {
  return _internal_matches().Get(index);
}
inline const ::dydxprotocol::clob::MEVMatch& ValidatorMevMatches::matches(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ValidatorMevMatches.matches)
  return _internal_matches(index);
}
inline ::dydxprotocol::clob::MEVMatch* ValidatorMevMatches::_internal_add_matches() {
  return _internal_mutable_matches()->Add();
}
inline ::dydxprotocol::clob::MEVMatch* ValidatorMevMatches::add_matches() {
  ::dydxprotocol::clob::MEVMatch* _add = _internal_add_matches();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.ValidatorMevMatches.matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVMatch >&
ValidatorMevMatches::matches() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.ValidatorMevMatches.matches)
  return _internal_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVMatch>&
ValidatorMevMatches::_internal_matches() const {
  return _impl_.matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVMatch>*
ValidatorMevMatches::_internal_mutable_matches() {
  return &_impl_.matches_;
}

// repeated .dydxprotocol.clob.MEVLiquidationMatch liquidation_matches = 2 [(.gogoproto.nullable) = false];
inline int ValidatorMevMatches::_internal_liquidation_matches_size() const {
  return _impl_.liquidation_matches_.size();
}
inline int ValidatorMevMatches::liquidation_matches_size() const {
  return _internal_liquidation_matches_size();
}
inline void ValidatorMevMatches::clear_liquidation_matches() {
  _internal_mutable_liquidation_matches()->Clear();
}
inline ::dydxprotocol::clob::MEVLiquidationMatch* ValidatorMevMatches::mutable_liquidation_matches(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ValidatorMevMatches.liquidation_matches)
  return _internal_mutable_liquidation_matches()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVLiquidationMatch >*
ValidatorMevMatches::mutable_liquidation_matches() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.ValidatorMevMatches.liquidation_matches)
  return _internal_mutable_liquidation_matches();
}
inline const ::dydxprotocol::clob::MEVLiquidationMatch& ValidatorMevMatches::_internal_liquidation_matches(int index) const {
  return _internal_liquidation_matches().Get(index);
}
inline const ::dydxprotocol::clob::MEVLiquidationMatch& ValidatorMevMatches::liquidation_matches(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ValidatorMevMatches.liquidation_matches)
  return _internal_liquidation_matches(index);
}
inline ::dydxprotocol::clob::MEVLiquidationMatch* ValidatorMevMatches::_internal_add_liquidation_matches() {
  return _internal_mutable_liquidation_matches()->Add();
}
inline ::dydxprotocol::clob::MEVLiquidationMatch* ValidatorMevMatches::add_liquidation_matches() {
  ::dydxprotocol::clob::MEVLiquidationMatch* _add = _internal_add_liquidation_matches();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.ValidatorMevMatches.liquidation_matches)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MEVLiquidationMatch >&
ValidatorMevMatches::liquidation_matches() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.ValidatorMevMatches.liquidation_matches)
  return _internal_liquidation_matches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVLiquidationMatch>&
ValidatorMevMatches::_internal_liquidation_matches() const {
  return _impl_.liquidation_matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MEVLiquidationMatch>*
ValidatorMevMatches::_internal_mutable_liquidation_matches() {
  return &_impl_.liquidation_matches_;
}

// -------------------------------------------------------------------

// MevNodeToNodeMetrics

// .dydxprotocol.clob.ValidatorMevMatches validator_mev_matches = 1;
inline bool MevNodeToNodeMetrics::has_validator_mev_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_mev_matches_ != nullptr);
  return value;
}
inline void MevNodeToNodeMetrics::clear_validator_mev_matches() {
  if (_impl_.validator_mev_matches_ != nullptr) _impl_.validator_mev_matches_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::clob::ValidatorMevMatches& MevNodeToNodeMetrics::_internal_validator_mev_matches() const {
  const ::dydxprotocol::clob::ValidatorMevMatches* p = _impl_.validator_mev_matches_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::ValidatorMevMatches&>(
      ::dydxprotocol::clob::_ValidatorMevMatches_default_instance_);
}
inline const ::dydxprotocol::clob::ValidatorMevMatches& MevNodeToNodeMetrics::validator_mev_matches() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeMetrics.validator_mev_matches)
  return _internal_validator_mev_matches();
}
inline void MevNodeToNodeMetrics::unsafe_arena_set_allocated_validator_mev_matches(
    ::dydxprotocol::clob::ValidatorMevMatches* validator_mev_matches) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_mev_matches_);
  }
  _impl_.validator_mev_matches_ = validator_mev_matches;
  if (validator_mev_matches) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MevNodeToNodeMetrics.validator_mev_matches)
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeMetrics::release_validator_mev_matches() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ValidatorMevMatches* temp = _impl_.validator_mev_matches_;
  _impl_.validator_mev_matches_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeMetrics::unsafe_arena_release_validator_mev_matches() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MevNodeToNodeMetrics.validator_mev_matches)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ValidatorMevMatches* temp = _impl_.validator_mev_matches_;
  _impl_.validator_mev_matches_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeMetrics::_internal_mutable_validator_mev_matches() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.validator_mev_matches_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::ValidatorMevMatches>(GetArenaForAllocation());
    _impl_.validator_mev_matches_ = p;
  }
  return _impl_.validator_mev_matches_;
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeMetrics::mutable_validator_mev_matches() {
  ::dydxprotocol::clob::ValidatorMevMatches* _msg = _internal_mutable_validator_mev_matches();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MevNodeToNodeMetrics.validator_mev_matches)
  return _msg;
}
inline void MevNodeToNodeMetrics::set_allocated_validator_mev_matches(::dydxprotocol::clob::ValidatorMevMatches* validator_mev_matches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.validator_mev_matches_;
  }
  if (validator_mev_matches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(validator_mev_matches);
    if (message_arena != submessage_arena) {
      validator_mev_matches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_mev_matches, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.validator_mev_matches_ = validator_mev_matches;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MevNodeToNodeMetrics.validator_mev_matches)
}

// repeated .dydxprotocol.clob.ClobMidPrice clob_mid_prices = 2 [(.gogoproto.nullable) = false];
inline int MevNodeToNodeMetrics::_internal_clob_mid_prices_size() const {
  return _impl_.clob_mid_prices_.size();
}
inline int MevNodeToNodeMetrics::clob_mid_prices_size() const {
  return _internal_clob_mid_prices_size();
}
inline void MevNodeToNodeMetrics::clear_clob_mid_prices() {
  _internal_mutable_clob_mid_prices()->Clear();
}
inline ::dydxprotocol::clob::ClobMidPrice* MevNodeToNodeMetrics::mutable_clob_mid_prices(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MevNodeToNodeMetrics.clob_mid_prices)
  return _internal_mutable_clob_mid_prices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobMidPrice >*
MevNodeToNodeMetrics::mutable_clob_mid_prices() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MevNodeToNodeMetrics.clob_mid_prices)
  return _internal_mutable_clob_mid_prices();
}
inline const ::dydxprotocol::clob::ClobMidPrice& MevNodeToNodeMetrics::_internal_clob_mid_prices(int index) const {
  return _internal_clob_mid_prices().Get(index);
}
inline const ::dydxprotocol::clob::ClobMidPrice& MevNodeToNodeMetrics::clob_mid_prices(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeMetrics.clob_mid_prices)
  return _internal_clob_mid_prices(index);
}
inline ::dydxprotocol::clob::ClobMidPrice* MevNodeToNodeMetrics::_internal_add_clob_mid_prices() {
  return _internal_mutable_clob_mid_prices()->Add();
}
inline ::dydxprotocol::clob::ClobMidPrice* MevNodeToNodeMetrics::add_clob_mid_prices() {
  ::dydxprotocol::clob::ClobMidPrice* _add = _internal_add_clob_mid_prices();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MevNodeToNodeMetrics.clob_mid_prices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobMidPrice >&
MevNodeToNodeMetrics::clob_mid_prices() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MevNodeToNodeMetrics.clob_mid_prices)
  return _internal_clob_mid_prices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobMidPrice>&
MevNodeToNodeMetrics::_internal_clob_mid_prices() const {
  return _impl_.clob_mid_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobMidPrice>*
MevNodeToNodeMetrics::_internal_mutable_clob_mid_prices() {
  return &_impl_.clob_mid_prices_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fmev_2eproto_2epb_2eh
