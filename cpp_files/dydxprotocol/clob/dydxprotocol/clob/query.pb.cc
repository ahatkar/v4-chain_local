// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/query.proto

#include "dydxprotocol/clob/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR QueryGetClobPairRequest::QueryGetClobPairRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryGetClobPairRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGetClobPairRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGetClobPairRequestDefaultTypeInternal() {}
  union {
    QueryGetClobPairRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGetClobPairRequestDefaultTypeInternal _QueryGetClobPairRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryClobPairResponse::QueryClobPairResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clob_pair_)*/nullptr} {}
struct QueryClobPairResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryClobPairResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryClobPairResponseDefaultTypeInternal() {}
  union {
    QueryClobPairResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryClobPairResponseDefaultTypeInternal _QueryClobPairResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllClobPairRequest::QueryAllClobPairRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllClobPairRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllClobPairRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllClobPairRequestDefaultTypeInternal() {}
  union {
    QueryAllClobPairRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllClobPairRequestDefaultTypeInternal _QueryAllClobPairRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryClobPairAllResponse::QueryClobPairAllResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clob_pair_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryClobPairAllResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryClobPairAllResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryClobPairAllResponseDefaultTypeInternal() {}
  union {
    QueryClobPairAllResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryClobPairAllResponseDefaultTypeInternal _QueryClobPairAllResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableRequest::AreSubaccountsLiquidatableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subaccount_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AreSubaccountsLiquidatableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreSubaccountsLiquidatableRequestDefaultTypeInternal() {}
  union {
    AreSubaccountsLiquidatableRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreSubaccountsLiquidatableRequestDefaultTypeInternal _AreSubaccountsLiquidatableRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableResponse_Result::AreSubaccountsLiquidatableResponse_Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/nullptr
  , /*decltype(_impl_.is_liquidatable_)*/ false
} {}
struct AreSubaccountsLiquidatableResponse_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableResponse_ResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreSubaccountsLiquidatableResponse_ResultDefaultTypeInternal() {}
  union {
    AreSubaccountsLiquidatableResponse_Result _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreSubaccountsLiquidatableResponse_ResultDefaultTypeInternal _AreSubaccountsLiquidatableResponse_Result_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableResponse::AreSubaccountsLiquidatableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AreSubaccountsLiquidatableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreSubaccountsLiquidatableResponseDefaultTypeInternal() {}
  union {
    AreSubaccountsLiquidatableResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreSubaccountsLiquidatableResponseDefaultTypeInternal _AreSubaccountsLiquidatableResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MevNodeToNodeCalculationRequest::MevNodeToNodeCalculationRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_proposer_matches_)*/nullptr
  , /*decltype(_impl_.validator_mev_metrics_)*/nullptr} {}
struct MevNodeToNodeCalculationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MevNodeToNodeCalculationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MevNodeToNodeCalculationRequestDefaultTypeInternal() {}
  union {
    MevNodeToNodeCalculationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MevNodeToNodeCalculationRequestDefaultTypeInternal _MevNodeToNodeCalculationRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MevNodeToNodeCalculationResponse_MevAndVolumePerClob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clob_pair_id_)*/ 0u

  , /*decltype(_impl_.mev_)*/ 0

  , /*decltype(_impl_.volume_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MevNodeToNodeCalculationResponse_MevAndVolumePerClobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MevNodeToNodeCalculationResponse_MevAndVolumePerClobDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MevNodeToNodeCalculationResponse_MevAndVolumePerClobDefaultTypeInternal() {}
  union {
    MevNodeToNodeCalculationResponse_MevAndVolumePerClob _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MevNodeToNodeCalculationResponse_MevAndVolumePerClobDefaultTypeInternal _MevNodeToNodeCalculationResponse_MevAndVolumePerClob_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MevNodeToNodeCalculationResponse::MevNodeToNodeCalculationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MevNodeToNodeCalculationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MevNodeToNodeCalculationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MevNodeToNodeCalculationResponseDefaultTypeInternal() {}
  union {
    MevNodeToNodeCalculationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MevNodeToNodeCalculationResponseDefaultTypeInternal _MevNodeToNodeCalculationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryEquityTierLimitConfigurationRequest::QueryEquityTierLimitConfigurationRequest(
    ::_pbi::ConstantInitialized) {}
struct QueryEquityTierLimitConfigurationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEquityTierLimitConfigurationRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEquityTierLimitConfigurationRequestDefaultTypeInternal() {}
  union {
    QueryEquityTierLimitConfigurationRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEquityTierLimitConfigurationRequestDefaultTypeInternal _QueryEquityTierLimitConfigurationRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryEquityTierLimitConfigurationResponse::QueryEquityTierLimitConfigurationResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.equity_tier_limit_config_)*/nullptr} {}
struct QueryEquityTierLimitConfigurationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEquityTierLimitConfigurationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEquityTierLimitConfigurationResponseDefaultTypeInternal() {}
  union {
    QueryEquityTierLimitConfigurationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEquityTierLimitConfigurationResponseDefaultTypeInternal _QueryEquityTierLimitConfigurationResponse_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[12];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryGetClobPairRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryGetClobPairRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairResponse, _impl_.clob_pair_),
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryAllClobPairRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryAllClobPairRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryAllClobPairRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairAllResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairAllResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairAllResponse, _impl_.clob_pair_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryClobPairAllResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableRequest, _impl_.subaccount_ids_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result, _impl_.is_liquidatable_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse, _impl_.results_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationRequest, _impl_.block_proposer_matches_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationRequest, _impl_.validator_mev_metrics_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob, _impl_.clob_pair_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob, _impl_.mev_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob, _impl_.volume_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeCalculationResponse, _impl_.results_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse, _impl_.equity_tier_limit_config_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::clob::QueryGetClobPairRequest)},
        { 9, 18, -1, sizeof(::dydxprotocol::clob::QueryClobPairResponse)},
        { 19, 28, -1, sizeof(::dydxprotocol::clob::QueryAllClobPairRequest)},
        { 29, 39, -1, sizeof(::dydxprotocol::clob::QueryClobPairAllResponse)},
        { 41, -1, -1, sizeof(::dydxprotocol::clob::AreSubaccountsLiquidatableRequest)},
        { 50, 60, -1, sizeof(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result)},
        { 62, -1, -1, sizeof(::dydxprotocol::clob::AreSubaccountsLiquidatableResponse)},
        { 71, 81, -1, sizeof(::dydxprotocol::clob::MevNodeToNodeCalculationRequest)},
        { 83, -1, -1, sizeof(::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob)},
        { 94, -1, -1, sizeof(::dydxprotocol::clob::MevNodeToNodeCalculationResponse)},
        { 103, -1, -1, sizeof(::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest)},
        { 111, 120, -1, sizeof(::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_QueryGetClobPairRequest_default_instance_._instance,
    &::dydxprotocol::clob::_QueryClobPairResponse_default_instance_._instance,
    &::dydxprotocol::clob::_QueryAllClobPairRequest_default_instance_._instance,
    &::dydxprotocol::clob::_QueryClobPairAllResponse_default_instance_._instance,
    &::dydxprotocol::clob::_AreSubaccountsLiquidatableRequest_default_instance_._instance,
    &::dydxprotocol::clob::_AreSubaccountsLiquidatableResponse_Result_default_instance_._instance,
    &::dydxprotocol::clob::_AreSubaccountsLiquidatableResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MevNodeToNodeCalculationRequest_default_instance_._instance,
    &::dydxprotocol::clob::_MevNodeToNodeCalculationResponse_MevAndVolumePerClob_default_instance_._instance,
    &::dydxprotocol::clob::_MevNodeToNodeCalculationResponse_default_instance_._instance,
    &::dydxprotocol::clob::_QueryEquityTierLimitConfigurationRequest_default_instance_._instance,
    &::dydxprotocol::clob::_QueryEquityTierLimitConfigurationResponse_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035dydxprotocol/clob/query.proto\022\021dydxpro"
    "tocol.clob\032\024gogoproto/gogo.proto\032\034google"
    "/api/annotations.proto\032*cosmos/base/quer"
    "y/v1beta1/pagination.proto\032!dydxprotocol"
    "/clob/clob_pair.proto\0320dydxprotocol/clob"
    "/equity_tier_limit_config.proto\032\033dydxpro"
    "tocol/clob/mev.proto\032)dydxprotocol/subac"
    "counts/subaccount.proto\"%\n\027QueryGetClobP"
    "airRequest\022\n\n\002id\030\001 \001(\r\"M\n\025QueryClobPairR"
    "esponse\0224\n\tclob_pair\030\001 \001(\0132\033.dydxprotoco"
    "l.clob.ClobPairB\004\310\336\037\000\"U\n\027QueryAllClobPai"
    "rRequest\022:\n\npagination\030\001 \001(\0132&.cosmos.ba"
    "se.query.v1beta1.PageRequest\"\215\001\n\030QueryCl"
    "obPairAllResponse\0224\n\tclob_pair\030\001 \003(\0132\033.d"
    "ydxprotocol.clob.ClobPairB\004\310\336\037\000\022;\n\npagin"
    "ation\030\002 \001(\0132\'.cosmos.base.query.v1beta1."
    "PageResponse\"i\n!AreSubaccountsLiquidatab"
    "leRequest\022D\n\016subaccount_ids\030\001 \003(\0132&.dydx"
    "protocol.subaccounts.SubaccountIdB\004\310\336\037\000\""
    "\341\001\n\"AreSubaccountsLiquidatableResponse\022S"
    "\n\007results\030\001 \003(\0132<.dydxprotocol.clob.AreS"
    "ubaccountsLiquidatableResponse.ResultB\004\310"
    "\336\037\000\032f\n\006Result\022C\n\rsubaccount_id\030\001 \001(\0132&.d"
    "ydxprotocol.subaccounts.SubaccountIdB\004\310\336"
    "\037\000\022\027\n\017is_liquidatable\030\002 \001(\010\"\261\001\n\037MevNodeT"
    "oNodeCalculationRequest\022F\n\026block_propose"
    "r_matches\030\001 \001(\0132&.dydxprotocol.clob.Vali"
    "datorMevMatches\022F\n\025validator_mev_metrics"
    "\030\002 \001(\0132\'.dydxprotocol.clob.MevNodeToNode"
    "Metrics\"\314\001\n MevNodeToNodeCalculationResp"
    "onse\022^\n\007results\030\001 \003(\0132G.dydxprotocol.clo"
    "b.MevNodeToNodeCalculationResponse.MevAn"
    "dVolumePerClobB\004\310\336\037\000\032H\n\023MevAndVolumePerC"
    "lob\022\024\n\014clob_pair_id\030\001 \001(\r\022\013\n\003mev\030\002 \001(\002\022\016"
    "\n\006volume\030\003 \001(\004\"*\n(QueryEquityTierLimitCo"
    "nfigurationRequest\"\204\001\n)QueryEquityTierLi"
    "mitConfigurationResponse\022W\n\030equity_tier_"
    "limit_config\030\001 \001(\0132/.dydxprotocol.clob.E"
    "quityTierLimitConfigurationB\004\310\336\037\0002\266\006\n\005Qu"
    "ery\022\213\001\n\010ClobPair\022*.dydxprotocol.clob.Que"
    "ryGetClobPairRequest\032(.dydxprotocol.clob"
    ".QueryClobPairResponse\")\202\323\344\223\002#\022!/dydxpro"
    "tocol/clob/clob_pair/{id}\022\214\001\n\013ClobPairAl"
    "l\022*.dydxprotocol.clob.QueryAllClobPairRe"
    "quest\032+.dydxprotocol.clob.QueryClobPairA"
    "llResponse\"$\202\323\344\223\002\036\022\034/dydxprotocol/clob/c"
    "lob_pair\022\211\001\n\032AreSubaccountsLiquidatable\022"
    "4.dydxprotocol.clob.AreSubaccountsLiquid"
    "atableRequest\0325.dydxprotocol.clob.AreSub"
    "accountsLiquidatableResponse\022\277\001\n\030MevNode"
    "ToNodeCalculation\0222.dydxprotocol.clob.Me"
    "vNodeToNodeCalculationRequest\0323.dydxprot"
    "ocol.clob.MevNodeToNodeCalculationRespon"
    "se\":\202\323\344\223\0024\"//dydxprotocol/clob/mev_node_"
    "to_node_calculation:\001*\022\301\001\n\034EquityTierLim"
    "itConfiguration\022;.dydxprotocol.clob.Quer"
    "yEquityTierLimitConfigurationRequest\032<.d"
    "ydxprotocol.clob.QueryEquityTierLimitCon"
    "figurationResponse\"&\202\323\344\223\002 \022\036/dydxprotoco"
    "l/clob/equity_tierB8Z6github.com/dydxpro"
    "tocol/v4-chain/protocol/x/clob/typesb\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_deps[7] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fmev_2eproto,
        &::descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fquery_2eproto = {
    false,
    false,
    2444,
    descriptor_table_protodef_dydxprotocol_2fclob_2fquery_2eproto,
    "dydxprotocol/clob/query.proto",
    &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_deps,
    7,
    12,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2fquery_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2fquery_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fquery_2eproto(&descriptor_table_dydxprotocol_2fclob_2fquery_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class QueryGetClobPairRequest::_Internal {
 public:
};

QueryGetClobPairRequest::QueryGetClobPairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.QueryGetClobPairRequest)
}
QueryGetClobPairRequest::QueryGetClobPairRequest(const QueryGetClobPairRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.QueryGetClobPairRequest)
}

inline void QueryGetClobPairRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryGetClobPairRequest::~QueryGetClobPairRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.QueryGetClobPairRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGetClobPairRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryGetClobPairRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGetClobPairRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.QueryGetClobPairRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGetClobPairRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGetClobPairRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.QueryGetClobPairRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.QueryGetClobPairRequest)
  return target;
}

::size_t QueryGetClobPairRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.QueryGetClobPairRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGetClobPairRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGetClobPairRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGetClobPairRequest::GetClassData() const { return &_class_data_; }


void QueryGetClobPairRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGetClobPairRequest*>(&to_msg);
  auto& from = static_cast<const QueryGetClobPairRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.QueryGetClobPairRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGetClobPairRequest::CopyFrom(const QueryGetClobPairRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.QueryGetClobPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGetClobPairRequest::IsInitialized() const {
  return true;
}

void QueryGetClobPairRequest::InternalSwap(QueryGetClobPairRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGetClobPairRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[0]);
}
// ===================================================================

class QueryClobPairResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryClobPairResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryClobPairResponse, _impl_._has_bits_);
  static const ::dydxprotocol::clob::ClobPair& clob_pair(const QueryClobPairResponse* msg);
  static void set_has_clob_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::ClobPair&
QueryClobPairResponse::_Internal::clob_pair(const QueryClobPairResponse* msg) {
  return *msg->_impl_.clob_pair_;
}
void QueryClobPairResponse::clear_clob_pair() {
  if (_impl_.clob_pair_ != nullptr) _impl_.clob_pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryClobPairResponse::QueryClobPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.QueryClobPairResponse)
}
QueryClobPairResponse::QueryClobPairResponse(const QueryClobPairResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryClobPairResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_pair_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.clob_pair_ = new ::dydxprotocol::clob::ClobPair(*from._impl_.clob_pair_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.QueryClobPairResponse)
}

inline void QueryClobPairResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_pair_){nullptr}
  };
}

QueryClobPairResponse::~QueryClobPairResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.QueryClobPairResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryClobPairResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clob_pair_;
}

void QueryClobPairResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryClobPairResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.QueryClobPairResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.clob_pair_ != nullptr);
    _impl_.clob_pair_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryClobPairResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clob_pair(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryClobPairResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.QueryClobPairResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::clob_pair(this),
        _Internal::clob_pair(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.QueryClobPairResponse)
  return target;
}

::size_t QueryClobPairResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.QueryClobPairResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clob_pair_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryClobPairResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryClobPairResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryClobPairResponse::GetClassData() const { return &_class_data_; }


void QueryClobPairResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryClobPairResponse*>(&to_msg);
  auto& from = static_cast<const QueryClobPairResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.QueryClobPairResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_clob_pair()->::dydxprotocol::clob::ClobPair::MergeFrom(
        from._internal_clob_pair());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryClobPairResponse::CopyFrom(const QueryClobPairResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.QueryClobPairResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClobPairResponse::IsInitialized() const {
  return true;
}

void QueryClobPairResponse::InternalSwap(QueryClobPairResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.clob_pair_, other->_impl_.clob_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryClobPairResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[1]);
}
// ===================================================================

class QueryAllClobPairRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllClobPairRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllClobPairRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryAllClobPairRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryAllClobPairRequest::_Internal::pagination(const QueryAllClobPairRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllClobPairRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllClobPairRequest::QueryAllClobPairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.QueryAllClobPairRequest)
}
QueryAllClobPairRequest::QueryAllClobPairRequest(const QueryAllClobPairRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllClobPairRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.QueryAllClobPairRequest)
}

inline void QueryAllClobPairRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllClobPairRequest::~QueryAllClobPairRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.QueryAllClobPairRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllClobPairRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllClobPairRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllClobPairRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.QueryAllClobPairRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllClobPairRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllClobPairRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.QueryAllClobPairRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.QueryAllClobPairRequest)
  return target;
}

::size_t QueryAllClobPairRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.QueryAllClobPairRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllClobPairRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllClobPairRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllClobPairRequest::GetClassData() const { return &_class_data_; }


void QueryAllClobPairRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllClobPairRequest*>(&to_msg);
  auto& from = static_cast<const QueryAllClobPairRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.QueryAllClobPairRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllClobPairRequest::CopyFrom(const QueryAllClobPairRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.QueryAllClobPairRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllClobPairRequest::IsInitialized() const {
  return true;
}

void QueryAllClobPairRequest::InternalSwap(QueryAllClobPairRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllClobPairRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[2]);
}
// ===================================================================

class QueryClobPairAllResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryClobPairAllResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryClobPairAllResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryClobPairAllResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryClobPairAllResponse::_Internal::pagination(const QueryClobPairAllResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryClobPairAllResponse::clear_clob_pair() {
  _internal_mutable_clob_pair()->Clear();
}
void QueryClobPairAllResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryClobPairAllResponse::QueryClobPairAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.QueryClobPairAllResponse)
}
QueryClobPairAllResponse::QueryClobPairAllResponse(const QueryClobPairAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryClobPairAllResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_pair_){from._impl_.clob_pair_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.QueryClobPairAllResponse)
}

inline void QueryClobPairAllResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_pair_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryClobPairAllResponse::~QueryClobPairAllResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.QueryClobPairAllResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryClobPairAllResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_clob_pair()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryClobPairAllResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryClobPairAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.QueryClobPairAllResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_clob_pair()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryClobPairAllResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clob_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryClobPairAllResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.QueryClobPairAllResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clob_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_clob_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.QueryClobPairAllResponse)
  return target;
}

::size_t QueryClobPairAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.QueryClobPairAllResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_clob_pair_size();
  for (const auto& msg : this->_internal_clob_pair()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryClobPairAllResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryClobPairAllResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryClobPairAllResponse::GetClassData() const { return &_class_data_; }


void QueryClobPairAllResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryClobPairAllResponse*>(&to_msg);
  auto& from = static_cast<const QueryClobPairAllResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.QueryClobPairAllResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_clob_pair()->MergeFrom(from._internal_clob_pair());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryClobPairAllResponse::CopyFrom(const QueryClobPairAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.QueryClobPairAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryClobPairAllResponse::IsInitialized() const {
  return true;
}

void QueryClobPairAllResponse::InternalSwap(QueryClobPairAllResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_clob_pair()->InternalSwap(other->_internal_mutable_clob_pair());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryClobPairAllResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[3]);
}
// ===================================================================

class AreSubaccountsLiquidatableRequest::_Internal {
 public:
};

void AreSubaccountsLiquidatableRequest::clear_subaccount_ids() {
  _internal_mutable_subaccount_ids()->Clear();
}
AreSubaccountsLiquidatableRequest::AreSubaccountsLiquidatableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
}
AreSubaccountsLiquidatableRequest::AreSubaccountsLiquidatableRequest(const AreSubaccountsLiquidatableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AreSubaccountsLiquidatableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_ids_){from._impl_.subaccount_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
}

inline void AreSubaccountsLiquidatableRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subaccount_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AreSubaccountsLiquidatableRequest::~AreSubaccountsLiquidatableRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AreSubaccountsLiquidatableRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_subaccount_ids()->~RepeatedPtrField();
}

void AreSubaccountsLiquidatableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AreSubaccountsLiquidatableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_subaccount_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AreSubaccountsLiquidatableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.subaccounts.SubaccountId subaccount_ids = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subaccount_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AreSubaccountsLiquidatableRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.subaccounts.SubaccountId subaccount_ids = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subaccount_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_subaccount_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  return target;
}

::size_t AreSubaccountsLiquidatableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.subaccounts.SubaccountId subaccount_ids = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_subaccount_ids_size();
  for (const auto& msg : this->_internal_subaccount_ids()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AreSubaccountsLiquidatableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AreSubaccountsLiquidatableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AreSubaccountsLiquidatableRequest::GetClassData() const { return &_class_data_; }


void AreSubaccountsLiquidatableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AreSubaccountsLiquidatableRequest*>(&to_msg);
  auto& from = static_cast<const AreSubaccountsLiquidatableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subaccount_ids()->MergeFrom(from._internal_subaccount_ids());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AreSubaccountsLiquidatableRequest::CopyFrom(const AreSubaccountsLiquidatableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreSubaccountsLiquidatableRequest::IsInitialized() const {
  return true;
}

void AreSubaccountsLiquidatableRequest::InternalSwap(AreSubaccountsLiquidatableRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_subaccount_ids()->InternalSwap(other->_internal_mutable_subaccount_ids());
}

::PROTOBUF_NAMESPACE_ID::Metadata AreSubaccountsLiquidatableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[4]);
}
// ===================================================================

class AreSubaccountsLiquidatableResponse_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<AreSubaccountsLiquidatableResponse_Result>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AreSubaccountsLiquidatableResponse_Result, _impl_._has_bits_);
  static const ::dydxprotocol::subaccounts::SubaccountId& subaccount_id(const AreSubaccountsLiquidatableResponse_Result* msg);
  static void set_has_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::subaccounts::SubaccountId&
AreSubaccountsLiquidatableResponse_Result::_Internal::subaccount_id(const AreSubaccountsLiquidatableResponse_Result* msg) {
  return *msg->_impl_.subaccount_id_;
}
void AreSubaccountsLiquidatableResponse_Result::clear_subaccount_id() {
  if (_impl_.subaccount_id_ != nullptr) _impl_.subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AreSubaccountsLiquidatableResponse_Result::AreSubaccountsLiquidatableResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
}
AreSubaccountsLiquidatableResponse_Result::AreSubaccountsLiquidatableResponse_Result(const AreSubaccountsLiquidatableResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AreSubaccountsLiquidatableResponse_Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.is_liquidatable_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.subaccount_id_);
  }
  _this->_impl_.is_liquidatable_ = from._impl_.is_liquidatable_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
}

inline void AreSubaccountsLiquidatableResponse_Result::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.is_liquidatable_) { false }

  };
}

AreSubaccountsLiquidatableResponse_Result::~AreSubaccountsLiquidatableResponse_Result() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AreSubaccountsLiquidatableResponse_Result::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subaccount_id_;
}

void AreSubaccountsLiquidatableResponse_Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AreSubaccountsLiquidatableResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subaccount_id_ != nullptr);
    _impl_.subaccount_id_->Clear();
  }
  _impl_.is_liquidatable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AreSubaccountsLiquidatableResponse_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_liquidatable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_liquidatable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AreSubaccountsLiquidatableResponse_Result::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subaccount_id(this),
        _Internal::subaccount_id(this).GetCachedSize(), target, stream);
  }

  // bool is_liquidatable = 2;
  if (this->_internal_is_liquidatable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_liquidatable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  return target;
}

::size_t AreSubaccountsLiquidatableResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subaccount_id_);
  }

  // bool is_liquidatable = 2;
  if (this->_internal_is_liquidatable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AreSubaccountsLiquidatableResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AreSubaccountsLiquidatableResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AreSubaccountsLiquidatableResponse_Result::GetClassData() const { return &_class_data_; }


void AreSubaccountsLiquidatableResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AreSubaccountsLiquidatableResponse_Result*>(&to_msg);
  auto& from = static_cast<const AreSubaccountsLiquidatableResponse_Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_subaccount_id());
  }
  if (from._internal_is_liquidatable() != 0) {
    _this->_internal_set_is_liquidatable(from._internal_is_liquidatable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AreSubaccountsLiquidatableResponse_Result::CopyFrom(const AreSubaccountsLiquidatableResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreSubaccountsLiquidatableResponse_Result::IsInitialized() const {
  return true;
}

void AreSubaccountsLiquidatableResponse_Result::InternalSwap(AreSubaccountsLiquidatableResponse_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AreSubaccountsLiquidatableResponse_Result, _impl_.is_liquidatable_)
      + sizeof(AreSubaccountsLiquidatableResponse_Result::_impl_.is_liquidatable_)
      - PROTOBUF_FIELD_OFFSET(AreSubaccountsLiquidatableResponse_Result, _impl_.subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AreSubaccountsLiquidatableResponse_Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[5]);
}
// ===================================================================

class AreSubaccountsLiquidatableResponse::_Internal {
 public:
};

AreSubaccountsLiquidatableResponse::AreSubaccountsLiquidatableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
}
AreSubaccountsLiquidatableResponse::AreSubaccountsLiquidatableResponse(const AreSubaccountsLiquidatableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AreSubaccountsLiquidatableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
}

inline void AreSubaccountsLiquidatableResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AreSubaccountsLiquidatableResponse::~AreSubaccountsLiquidatableResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AreSubaccountsLiquidatableResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_results()->~RepeatedPtrField();
}

void AreSubaccountsLiquidatableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AreSubaccountsLiquidatableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_results()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AreSubaccountsLiquidatableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result results = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AreSubaccountsLiquidatableResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result results = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  return target;
}

::size_t AreSubaccountsLiquidatableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result results = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_internal_results()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AreSubaccountsLiquidatableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AreSubaccountsLiquidatableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AreSubaccountsLiquidatableResponse::GetClassData() const { return &_class_data_; }


void AreSubaccountsLiquidatableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AreSubaccountsLiquidatableResponse*>(&to_msg);
  auto& from = static_cast<const AreSubaccountsLiquidatableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_results()->MergeFrom(from._internal_results());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AreSubaccountsLiquidatableResponse::CopyFrom(const AreSubaccountsLiquidatableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreSubaccountsLiquidatableResponse::IsInitialized() const {
  return true;
}

void AreSubaccountsLiquidatableResponse::InternalSwap(AreSubaccountsLiquidatableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_results()->InternalSwap(other->_internal_mutable_results());
}

::PROTOBUF_NAMESPACE_ID::Metadata AreSubaccountsLiquidatableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[6]);
}
// ===================================================================

class MevNodeToNodeCalculationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MevNodeToNodeCalculationRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MevNodeToNodeCalculationRequest, _impl_._has_bits_);
  static const ::dydxprotocol::clob::ValidatorMevMatches& block_proposer_matches(const MevNodeToNodeCalculationRequest* msg);
  static void set_has_block_proposer_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dydxprotocol::clob::MevNodeToNodeMetrics& validator_mev_metrics(const MevNodeToNodeCalculationRequest* msg);
  static void set_has_validator_mev_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dydxprotocol::clob::ValidatorMevMatches&
MevNodeToNodeCalculationRequest::_Internal::block_proposer_matches(const MevNodeToNodeCalculationRequest* msg) {
  return *msg->_impl_.block_proposer_matches_;
}
const ::dydxprotocol::clob::MevNodeToNodeMetrics&
MevNodeToNodeCalculationRequest::_Internal::validator_mev_metrics(const MevNodeToNodeCalculationRequest* msg) {
  return *msg->_impl_.validator_mev_metrics_;
}
void MevNodeToNodeCalculationRequest::clear_block_proposer_matches() {
  if (_impl_.block_proposer_matches_ != nullptr) _impl_.block_proposer_matches_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MevNodeToNodeCalculationRequest::clear_validator_mev_metrics() {
  if (_impl_.validator_mev_metrics_ != nullptr) _impl_.validator_mev_metrics_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MevNodeToNodeCalculationRequest::MevNodeToNodeCalculationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
}
MevNodeToNodeCalculationRequest::MevNodeToNodeCalculationRequest(const MevNodeToNodeCalculationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MevNodeToNodeCalculationRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_proposer_matches_){nullptr}
    , decltype(_impl_.validator_mev_metrics_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_proposer_matches_ = new ::dydxprotocol::clob::ValidatorMevMatches(*from._impl_.block_proposer_matches_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.validator_mev_metrics_ = new ::dydxprotocol::clob::MevNodeToNodeMetrics(*from._impl_.validator_mev_metrics_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
}

inline void MevNodeToNodeCalculationRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_proposer_matches_){nullptr}
    , decltype(_impl_.validator_mev_metrics_){nullptr}
  };
}

MevNodeToNodeCalculationRequest::~MevNodeToNodeCalculationRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MevNodeToNodeCalculationRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_proposer_matches_;
  if (this != internal_default_instance()) delete _impl_.validator_mev_metrics_;
}

void MevNodeToNodeCalculationRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MevNodeToNodeCalculationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_proposer_matches_ != nullptr);
      _impl_.block_proposer_matches_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.validator_mev_metrics_ != nullptr);
      _impl_.validator_mev_metrics_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MevNodeToNodeCalculationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ValidatorMevMatches block_proposer_matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_proposer_matches(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.MevNodeToNodeMetrics validator_mev_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_mev_metrics(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MevNodeToNodeCalculationRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.ValidatorMevMatches block_proposer_matches = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block_proposer_matches(this),
        _Internal::block_proposer_matches(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.MevNodeToNodeMetrics validator_mev_metrics = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validator_mev_metrics(this),
        _Internal::validator_mev_metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  return target;
}

::size_t MevNodeToNodeCalculationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .dydxprotocol.clob.ValidatorMevMatches block_proposer_matches = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_proposer_matches_);
    }

    // .dydxprotocol.clob.MevNodeToNodeMetrics validator_mev_metrics = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validator_mev_metrics_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MevNodeToNodeCalculationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MevNodeToNodeCalculationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MevNodeToNodeCalculationRequest::GetClassData() const { return &_class_data_; }


void MevNodeToNodeCalculationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MevNodeToNodeCalculationRequest*>(&to_msg);
  auto& from = static_cast<const MevNodeToNodeCalculationRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_proposer_matches()->::dydxprotocol::clob::ValidatorMevMatches::MergeFrom(
          from._internal_block_proposer_matches());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_validator_mev_metrics()->::dydxprotocol::clob::MevNodeToNodeMetrics::MergeFrom(
          from._internal_validator_mev_metrics());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MevNodeToNodeCalculationRequest::CopyFrom(const MevNodeToNodeCalculationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MevNodeToNodeCalculationRequest::IsInitialized() const {
  return true;
}

void MevNodeToNodeCalculationRequest::InternalSwap(MevNodeToNodeCalculationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MevNodeToNodeCalculationRequest, _impl_.validator_mev_metrics_)
      + sizeof(MevNodeToNodeCalculationRequest::_impl_.validator_mev_metrics_)
      - PROTOBUF_FIELD_OFFSET(MevNodeToNodeCalculationRequest, _impl_.block_proposer_matches_)>(
          reinterpret_cast<char*>(&_impl_.block_proposer_matches_),
          reinterpret_cast<char*>(&other->_impl_.block_proposer_matches_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MevNodeToNodeCalculationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[7]);
}
// ===================================================================

class MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_Internal {
 public:
};

MevNodeToNodeCalculationResponse_MevAndVolumePerClob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
}
MevNodeToNodeCalculationResponse_MevAndVolumePerClob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob(const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
}

inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.clob_pair_id_) { 0u }

    , decltype(_impl_.mev_) { 0 }

    , decltype(_impl_.volume_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MevNodeToNodeCalculationResponse_MevAndVolumePerClob::~MevNodeToNodeCalculationResponse_MevAndVolumePerClob() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.clob_pair_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.clob_pair_id_)) + sizeof(_impl_.volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 clob_pair_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.clob_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float mev = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.mev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clob_pair_id = 1;
  if (this->_internal_clob_pair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_clob_pair_id(), target);
  }

  // float mev = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_mev = this->_internal_mev();
  ::uint32_t raw_mev;
  memcpy(&raw_mev, &tmp_mev, sizeof(tmp_mev));
  if (raw_mev != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_mev(), target);
  }

  // uint64 volume = 3;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  return target;
}

::size_t MevNodeToNodeCalculationResponse_MevAndVolumePerClob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 clob_pair_id = 1;
  if (this->_internal_clob_pair_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_clob_pair_id());
  }

  // float mev = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_mev = this->_internal_mev();
  ::uint32_t raw_mev;
  memcpy(&raw_mev, &tmp_mev, sizeof(tmp_mev));
  if (raw_mev != 0) {
    total_size += 5;
  }

  // uint64 volume = 3;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MevNodeToNodeCalculationResponse_MevAndVolumePerClob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MevNodeToNodeCalculationResponse_MevAndVolumePerClob::GetClassData() const { return &_class_data_; }


void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MevNodeToNodeCalculationResponse_MevAndVolumePerClob*>(&to_msg);
  auto& from = static_cast<const MevNodeToNodeCalculationResponse_MevAndVolumePerClob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_clob_pair_id() != 0) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_mev = from._internal_mev();
  ::uint32_t raw_mev;
  memcpy(&raw_mev, &tmp_mev, sizeof(tmp_mev));
  if (raw_mev != 0) {
    _this->_internal_set_mev(from._internal_mev());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::CopyFrom(const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MevNodeToNodeCalculationResponse_MevAndVolumePerClob::IsInitialized() const {
  return true;
}

void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::InternalSwap(MevNodeToNodeCalculationResponse_MevAndVolumePerClob* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MevNodeToNodeCalculationResponse_MevAndVolumePerClob, _impl_.volume_)
      + sizeof(MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(MevNodeToNodeCalculationResponse_MevAndVolumePerClob, _impl_.clob_pair_id_)>(
          reinterpret_cast<char*>(&_impl_.clob_pair_id_),
          reinterpret_cast<char*>(&other->_impl_.clob_pair_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MevNodeToNodeCalculationResponse_MevAndVolumePerClob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[8]);
}
// ===================================================================

class MevNodeToNodeCalculationResponse::_Internal {
 public:
};

MevNodeToNodeCalculationResponse::MevNodeToNodeCalculationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
}
MevNodeToNodeCalculationResponse::MevNodeToNodeCalculationResponse(const MevNodeToNodeCalculationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MevNodeToNodeCalculationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
}

inline void MevNodeToNodeCalculationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MevNodeToNodeCalculationResponse::~MevNodeToNodeCalculationResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MevNodeToNodeCalculationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_results()->~RepeatedPtrField();
}

void MevNodeToNodeCalculationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MevNodeToNodeCalculationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_results()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MevNodeToNodeCalculationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob results = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MevNodeToNodeCalculationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob results = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  return target;
}

::size_t MevNodeToNodeCalculationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob results = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_internal_results()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MevNodeToNodeCalculationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MevNodeToNodeCalculationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MevNodeToNodeCalculationResponse::GetClassData() const { return &_class_data_; }


void MevNodeToNodeCalculationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MevNodeToNodeCalculationResponse*>(&to_msg);
  auto& from = static_cast<const MevNodeToNodeCalculationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_results()->MergeFrom(from._internal_results());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MevNodeToNodeCalculationResponse::CopyFrom(const MevNodeToNodeCalculationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MevNodeToNodeCalculationResponse::IsInitialized() const {
  return true;
}

void MevNodeToNodeCalculationResponse::InternalSwap(MevNodeToNodeCalculationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_results()->InternalSwap(other->_internal_mutable_results());
}

::PROTOBUF_NAMESPACE_ID::Metadata MevNodeToNodeCalculationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[9]);
}
// ===================================================================

class QueryEquityTierLimitConfigurationRequest::_Internal {
 public:
};

QueryEquityTierLimitConfigurationRequest::QueryEquityTierLimitConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.QueryEquityTierLimitConfigurationRequest)
}
QueryEquityTierLimitConfigurationRequest::QueryEquityTierLimitConfigurationRequest(const QueryEquityTierLimitConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  QueryEquityTierLimitConfigurationRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.QueryEquityTierLimitConfigurationRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryEquityTierLimitConfigurationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryEquityTierLimitConfigurationRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata QueryEquityTierLimitConfigurationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[10]);
}
// ===================================================================

class QueryEquityTierLimitConfigurationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryEquityTierLimitConfigurationResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryEquityTierLimitConfigurationResponse, _impl_._has_bits_);
  static const ::dydxprotocol::clob::EquityTierLimitConfiguration& equity_tier_limit_config(const QueryEquityTierLimitConfigurationResponse* msg);
  static void set_has_equity_tier_limit_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::EquityTierLimitConfiguration&
QueryEquityTierLimitConfigurationResponse::_Internal::equity_tier_limit_config(const QueryEquityTierLimitConfigurationResponse* msg) {
  return *msg->_impl_.equity_tier_limit_config_;
}
void QueryEquityTierLimitConfigurationResponse::clear_equity_tier_limit_config() {
  if (_impl_.equity_tier_limit_config_ != nullptr) _impl_.equity_tier_limit_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryEquityTierLimitConfigurationResponse::QueryEquityTierLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
}
QueryEquityTierLimitConfigurationResponse::QueryEquityTierLimitConfigurationResponse(const QueryEquityTierLimitConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryEquityTierLimitConfigurationResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.equity_tier_limit_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.equity_tier_limit_config_ = new ::dydxprotocol::clob::EquityTierLimitConfiguration(*from._impl_.equity_tier_limit_config_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
}

inline void QueryEquityTierLimitConfigurationResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.equity_tier_limit_config_){nullptr}
  };
}

QueryEquityTierLimitConfigurationResponse::~QueryEquityTierLimitConfigurationResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryEquityTierLimitConfigurationResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.equity_tier_limit_config_;
}

void QueryEquityTierLimitConfigurationResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryEquityTierLimitConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.equity_tier_limit_config_ != nullptr);
    _impl_.equity_tier_limit_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryEquityTierLimitConfigurationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_equity_tier_limit_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryEquityTierLimitConfigurationResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::equity_tier_limit_config(this),
        _Internal::equity_tier_limit_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  return target;
}

::size_t QueryEquityTierLimitConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equity_tier_limit_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryEquityTierLimitConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryEquityTierLimitConfigurationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryEquityTierLimitConfigurationResponse::GetClassData() const { return &_class_data_; }


void QueryEquityTierLimitConfigurationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryEquityTierLimitConfigurationResponse*>(&to_msg);
  auto& from = static_cast<const QueryEquityTierLimitConfigurationResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_equity_tier_limit_config()->::dydxprotocol::clob::EquityTierLimitConfiguration::MergeFrom(
        from._internal_equity_tier_limit_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEquityTierLimitConfigurationResponse::CopyFrom(const QueryEquityTierLimitConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEquityTierLimitConfigurationResponse::IsInitialized() const {
  return true;
}

void QueryEquityTierLimitConfigurationResponse::InternalSwap(QueryEquityTierLimitConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.equity_tier_limit_config_, other->_impl_.equity_tier_limit_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryEquityTierLimitConfigurationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fquery_2eproto[11]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::QueryGetClobPairRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::QueryGetClobPairRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::QueryGetClobPairRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::QueryClobPairResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::QueryClobPairResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::QueryClobPairResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::QueryAllClobPairRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::QueryAllClobPairRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::QueryAllClobPairRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::QueryClobPairAllResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::QueryClobPairAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::QueryClobPairAllResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::AreSubaccountsLiquidatableRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::AreSubaccountsLiquidatableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::AreSubaccountsLiquidatableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MevNodeToNodeCalculationRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MevNodeToNodeCalculationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MevNodeToNodeCalculationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MevNodeToNodeCalculationResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
