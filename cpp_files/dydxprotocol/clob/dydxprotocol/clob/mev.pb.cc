// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/mev.proto

#include "dydxprotocol/clob/mev.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR MEVMatch::MEVMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.taker_order_subaccount_id_)*/nullptr
  , /*decltype(_impl_.maker_order_subaccount_id_)*/nullptr
  , /*decltype(_impl_.taker_fee_ppm_)*/ 0

  , /*decltype(_impl_.maker_order_is_buy_)*/ false

  , /*decltype(_impl_.maker_order_subticks_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.maker_fee_ppm_)*/ 0

  , /*decltype(_impl_.clob_pair_id_)*/ 0u

  , /*decltype(_impl_.fill_amount_)*/ ::uint64_t{0u}
} {}
struct MEVMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MEVMatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MEVMatchDefaultTypeInternal() {}
  union {
    MEVMatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MEVMatchDefaultTypeInternal _MEVMatch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MEVLiquidationMatch::MEVLiquidationMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.liquidated_subaccount_id_)*/nullptr
  , /*decltype(_impl_.maker_order_subaccount_id_)*/nullptr
  , /*decltype(_impl_.insurance_fund_delta_quote_quantums_)*/ ::int64_t{0}

  , /*decltype(_impl_.maker_order_subticks_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.maker_order_is_buy_)*/ false

  , /*decltype(_impl_.maker_fee_ppm_)*/ 0

  , /*decltype(_impl_.fill_amount_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.clob_pair_id_)*/ 0u
} {}
struct MEVLiquidationMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MEVLiquidationMatchDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MEVLiquidationMatchDefaultTypeInternal() {}
  union {
    MEVLiquidationMatch _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MEVLiquidationMatchDefaultTypeInternal _MEVLiquidationMatch_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClobMidPrice::ClobMidPrice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clob_pair_)*/nullptr
  , /*decltype(_impl_.subticks_)*/ ::uint64_t{0u}
} {}
struct ClobMidPriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClobMidPriceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClobMidPriceDefaultTypeInternal() {}
  union {
    ClobMidPrice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClobMidPriceDefaultTypeInternal _ClobMidPrice_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValidatorMevMatches::ValidatorMevMatches(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.matches_)*/{}
  , /*decltype(_impl_.liquidation_matches_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValidatorMevMatchesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValidatorMevMatchesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValidatorMevMatchesDefaultTypeInternal() {}
  union {
    ValidatorMevMatches _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValidatorMevMatchesDefaultTypeInternal _ValidatorMevMatches_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MevNodeToNodeMetrics::MevNodeToNodeMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.clob_mid_prices_)*/{}
  , /*decltype(_impl_.validator_mev_matches_)*/nullptr} {}
struct MevNodeToNodeMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MevNodeToNodeMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MevNodeToNodeMetricsDefaultTypeInternal() {}
  union {
    MevNodeToNodeMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MevNodeToNodeMetricsDefaultTypeInternal _MevNodeToNodeMetrics_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2fmev_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2fmev_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2fmev_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.taker_order_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.taker_fee_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.maker_order_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.maker_order_subticks_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.maker_order_is_buy_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.maker_fee_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.clob_pair_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVMatch, _impl_.fill_amount_),
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.liquidated_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.insurance_fund_delta_quote_quantums_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.maker_order_subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.maker_order_subticks_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.maker_order_is_buy_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.maker_fee_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.clob_pair_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MEVLiquidationMatch, _impl_.fill_amount_),
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMidPrice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMidPrice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMidPrice, _impl_.clob_pair_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobMidPrice, _impl_.subticks_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ValidatorMevMatches, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ValidatorMevMatches, _impl_.matches_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ValidatorMevMatches, _impl_.liquidation_matches_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeMetrics, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeMetrics, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeMetrics, _impl_.validator_mev_matches_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MevNodeToNodeMetrics, _impl_.clob_mid_prices_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 16, -1, sizeof(::dydxprotocol::clob::MEVMatch)},
        { 24, 40, -1, sizeof(::dydxprotocol::clob::MEVLiquidationMatch)},
        { 48, 58, -1, sizeof(::dydxprotocol::clob::ClobMidPrice)},
        { 60, -1, -1, sizeof(::dydxprotocol::clob::ValidatorMevMatches)},
        { 70, 80, -1, sizeof(::dydxprotocol::clob::MevNodeToNodeMetrics)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_MEVMatch_default_instance_._instance,
    &::dydxprotocol::clob::_MEVLiquidationMatch_default_instance_._instance,
    &::dydxprotocol::clob::_ClobMidPrice_default_instance_._instance,
    &::dydxprotocol::clob::_ValidatorMevMatches_default_instance_._instance,
    &::dydxprotocol::clob::_MevNodeToNodeMetrics_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2fmev_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\033dydxprotocol/clob/mev.proto\022\021dydxproto"
    "col.clob\032\024gogoproto/gogo.proto\032)dydxprot"
    "ocol/subaccounts/subaccount.proto\032!dydxp"
    "rotocol/clob/clob_pair.proto\"\263\002\n\010MEVMatc"
    "h\022I\n\031taker_order_subaccount_id\030\001 \001(\0132&.d"
    "ydxprotocol.subaccounts.SubaccountId\022\025\n\r"
    "taker_fee_ppm\030\002 \001(\005\022I\n\031maker_order_subac"
    "count_id\030\003 \001(\0132&.dydxprotocol.subaccount"
    "s.SubaccountId\022\034\n\024maker_order_subticks\030\004"
    " \001(\004\022\032\n\022maker_order_is_buy\030\005 \001(\010\022\025\n\rmake"
    "r_fee_ppm\030\006 \001(\005\022\024\n\014clob_pair_id\030\007 \001(\r\022\023\n"
    "\013fill_amount\030\010 \001(\004\"\337\002\n\023MEVLiquidationMat"
    "ch\022N\n\030liquidated_subaccount_id\030\001 \001(\0132&.d"
    "ydxprotocol.subaccounts.SubaccountIdB\004\310\336"
    "\037\000\022+\n#insurance_fund_delta_quote_quantum"
    "s\030\002 \001(\003\022O\n\031maker_order_subaccount_id\030\003 \001"
    "(\0132&.dydxprotocol.subaccounts.Subaccount"
    "IdB\004\310\336\037\000\022\034\n\024maker_order_subticks\030\004 \001(\004\022\032"
    "\n\022maker_order_is_buy\030\005 \001(\010\022\025\n\rmaker_fee_"
    "ppm\030\006 \001(\005\022\024\n\014clob_pair_id\030\007 \001(\r\022\023\n\013fill_"
    "amount\030\010 \001(\004\"V\n\014ClobMidPrice\0224\n\tclob_pai"
    "r\030\001 \001(\0132\033.dydxprotocol.clob.ClobPairB\004\310\336"
    "\037\000\022\020\n\010subticks\030\002 \001(\004\"\224\001\n\023ValidatorMevMat"
    "ches\0222\n\007matches\030\001 \003(\0132\033.dydxprotocol.clo"
    "b.MEVMatchB\004\310\336\037\000\022I\n\023liquidation_matches\030"
    "\002 \003(\0132&.dydxprotocol.clob.MEVLiquidation"
    "MatchB\004\310\336\037\000\"\235\001\n\024MevNodeToNodeMetrics\022E\n\025"
    "validator_mev_matches\030\001 \001(\0132&.dydxprotoc"
    "ol.clob.ValidatorMevMatches\022>\n\017clob_mid_"
    "prices\030\002 \003(\0132\037.dydxprotocol.clob.ClobMid"
    "PriceB\004\310\336\037\000B8Z6github.com/dydxprotocol/v"
    "4-chain/protocol/x/clob/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_deps[3] =
    {
        &::descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
        &::descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fmev_2eproto = {
    false,
    false,
    1277,
    descriptor_table_protodef_dydxprotocol_2fclob_2fmev_2eproto,
    "dydxprotocol/clob/mev.proto",
    &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2fmev_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2fmev_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fmev_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fmev_2eproto(&descriptor_table_dydxprotocol_2fclob_2fmev_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class MEVMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<MEVMatch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MEVMatch, _impl_._has_bits_);
  static const ::dydxprotocol::subaccounts::SubaccountId& taker_order_subaccount_id(const MEVMatch* msg);
  static void set_has_taker_order_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dydxprotocol::subaccounts::SubaccountId& maker_order_subaccount_id(const MEVMatch* msg);
  static void set_has_maker_order_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dydxprotocol::subaccounts::SubaccountId&
MEVMatch::_Internal::taker_order_subaccount_id(const MEVMatch* msg) {
  return *msg->_impl_.taker_order_subaccount_id_;
}
const ::dydxprotocol::subaccounts::SubaccountId&
MEVMatch::_Internal::maker_order_subaccount_id(const MEVMatch* msg) {
  return *msg->_impl_.maker_order_subaccount_id_;
}
void MEVMatch::clear_taker_order_subaccount_id() {
  if (_impl_.taker_order_subaccount_id_ != nullptr) _impl_.taker_order_subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MEVMatch::clear_maker_order_subaccount_id() {
  if (_impl_.maker_order_subaccount_id_ != nullptr) _impl_.maker_order_subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MEVMatch::MEVMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MEVMatch)
}
MEVMatch::MEVMatch(const MEVMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MEVMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.taker_order_subaccount_id_){nullptr}
    , decltype(_impl_.maker_order_subaccount_id_){nullptr}
    , decltype(_impl_.taker_fee_ppm_) {}

    , decltype(_impl_.maker_order_is_buy_) {}

    , decltype(_impl_.maker_order_subticks_) {}

    , decltype(_impl_.maker_fee_ppm_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.fill_amount_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.taker_order_subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.taker_order_subaccount_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.maker_order_subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.maker_order_subaccount_id_);
  }
  ::memcpy(&_impl_.taker_fee_ppm_, &from._impl_.taker_fee_ppm_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.fill_amount_) -
    reinterpret_cast<char*>(&_impl_.taker_fee_ppm_)) + sizeof(_impl_.fill_amount_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MEVMatch)
}

inline void MEVMatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.taker_order_subaccount_id_){nullptr}
    , decltype(_impl_.maker_order_subaccount_id_){nullptr}
    , decltype(_impl_.taker_fee_ppm_) { 0 }

    , decltype(_impl_.maker_order_is_buy_) { false }

    , decltype(_impl_.maker_order_subticks_) { ::uint64_t{0u} }

    , decltype(_impl_.maker_fee_ppm_) { 0 }

    , decltype(_impl_.clob_pair_id_) { 0u }

    , decltype(_impl_.fill_amount_) { ::uint64_t{0u} }

  };
}

MEVMatch::~MEVMatch() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MEVMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MEVMatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.taker_order_subaccount_id_;
  if (this != internal_default_instance()) delete _impl_.maker_order_subaccount_id_;
}

void MEVMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MEVMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MEVMatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.taker_order_subaccount_id_ != nullptr);
      _impl_.taker_order_subaccount_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.maker_order_subaccount_id_ != nullptr);
      _impl_.maker_order_subaccount_id_->Clear();
    }
  }
  ::memset(&_impl_.taker_fee_ppm_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fill_amount_) -
      reinterpret_cast<char*>(&_impl_.taker_fee_ppm_)) + sizeof(_impl_.fill_amount_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MEVMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId taker_order_subaccount_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_taker_order_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 taker_fee_ppm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.taker_fee_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maker_order_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 maker_order_subticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.maker_order_subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool maker_order_is_buy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.maker_order_is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 maker_fee_ppm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.maker_fee_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 clob_pair_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.clob_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 fill_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.fill_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MEVMatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MEVMatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.subaccounts.SubaccountId taker_order_subaccount_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::taker_order_subaccount_id(this),
        _Internal::taker_order_subaccount_id(this).GetCachedSize(), target, stream);
  }

  // int32 taker_fee_ppm = 2;
  if (this->_internal_taker_fee_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_taker_fee_ppm(), target);
  }

  // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::maker_order_subaccount_id(this),
        _Internal::maker_order_subaccount_id(this).GetCachedSize(), target, stream);
  }

  // uint64 maker_order_subticks = 4;
  if (this->_internal_maker_order_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_maker_order_subticks(), target);
  }

  // bool maker_order_is_buy = 5;
  if (this->_internal_maker_order_is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_maker_order_is_buy(), target);
  }

  // int32 maker_fee_ppm = 6;
  if (this->_internal_maker_fee_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_maker_fee_ppm(), target);
  }

  // uint32 clob_pair_id = 7;
  if (this->_internal_clob_pair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_clob_pair_id(), target);
  }

  // uint64 fill_amount = 8;
  if (this->_internal_fill_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_fill_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MEVMatch)
  return target;
}

::size_t MEVMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MEVMatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .dydxprotocol.subaccounts.SubaccountId taker_order_subaccount_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.taker_order_subaccount_id_);
    }

    // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maker_order_subaccount_id_);
    }

  }
  // int32 taker_fee_ppm = 2;
  if (this->_internal_taker_fee_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_taker_fee_ppm());
  }

  // bool maker_order_is_buy = 5;
  if (this->_internal_maker_order_is_buy() != 0) {
    total_size += 2;
  }

  // uint64 maker_order_subticks = 4;
  if (this->_internal_maker_order_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_maker_order_subticks());
  }

  // int32 maker_fee_ppm = 6;
  if (this->_internal_maker_fee_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_maker_fee_ppm());
  }

  // uint32 clob_pair_id = 7;
  if (this->_internal_clob_pair_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_clob_pair_id());
  }

  // uint64 fill_amount = 8;
  if (this->_internal_fill_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fill_amount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MEVMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MEVMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MEVMatch::GetClassData() const { return &_class_data_; }


void MEVMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MEVMatch*>(&to_msg);
  auto& from = static_cast<const MEVMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MEVMatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_taker_order_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
          from._internal_taker_order_subaccount_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_maker_order_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
          from._internal_maker_order_subaccount_id());
    }
  }
  if (from._internal_taker_fee_ppm() != 0) {
    _this->_internal_set_taker_fee_ppm(from._internal_taker_fee_ppm());
  }
  if (from._internal_maker_order_is_buy() != 0) {
    _this->_internal_set_maker_order_is_buy(from._internal_maker_order_is_buy());
  }
  if (from._internal_maker_order_subticks() != 0) {
    _this->_internal_set_maker_order_subticks(from._internal_maker_order_subticks());
  }
  if (from._internal_maker_fee_ppm() != 0) {
    _this->_internal_set_maker_fee_ppm(from._internal_maker_fee_ppm());
  }
  if (from._internal_clob_pair_id() != 0) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  if (from._internal_fill_amount() != 0) {
    _this->_internal_set_fill_amount(from._internal_fill_amount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MEVMatch::CopyFrom(const MEVMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MEVMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEVMatch::IsInitialized() const {
  return true;
}

void MEVMatch::InternalSwap(MEVMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MEVMatch, _impl_.fill_amount_)
      + sizeof(MEVMatch::_impl_.fill_amount_)
      - PROTOBUF_FIELD_OFFSET(MEVMatch, _impl_.taker_order_subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.taker_order_subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.taker_order_subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MEVMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto[0]);
}
// ===================================================================

class MEVLiquidationMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<MEVLiquidationMatch>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MEVLiquidationMatch, _impl_._has_bits_);
  static const ::dydxprotocol::subaccounts::SubaccountId& liquidated_subaccount_id(const MEVLiquidationMatch* msg);
  static void set_has_liquidated_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dydxprotocol::subaccounts::SubaccountId& maker_order_subaccount_id(const MEVLiquidationMatch* msg);
  static void set_has_maker_order_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dydxprotocol::subaccounts::SubaccountId&
MEVLiquidationMatch::_Internal::liquidated_subaccount_id(const MEVLiquidationMatch* msg) {
  return *msg->_impl_.liquidated_subaccount_id_;
}
const ::dydxprotocol::subaccounts::SubaccountId&
MEVLiquidationMatch::_Internal::maker_order_subaccount_id(const MEVLiquidationMatch* msg) {
  return *msg->_impl_.maker_order_subaccount_id_;
}
void MEVLiquidationMatch::clear_liquidated_subaccount_id() {
  if (_impl_.liquidated_subaccount_id_ != nullptr) _impl_.liquidated_subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MEVLiquidationMatch::clear_maker_order_subaccount_id() {
  if (_impl_.maker_order_subaccount_id_ != nullptr) _impl_.maker_order_subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MEVLiquidationMatch::MEVLiquidationMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MEVLiquidationMatch)
}
MEVLiquidationMatch::MEVLiquidationMatch(const MEVLiquidationMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MEVLiquidationMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.liquidated_subaccount_id_){nullptr}
    , decltype(_impl_.maker_order_subaccount_id_){nullptr}
    , decltype(_impl_.insurance_fund_delta_quote_quantums_) {}

    , decltype(_impl_.maker_order_subticks_) {}

    , decltype(_impl_.maker_order_is_buy_) {}

    , decltype(_impl_.maker_fee_ppm_) {}

    , decltype(_impl_.fill_amount_) {}

    , decltype(_impl_.clob_pair_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.liquidated_subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.liquidated_subaccount_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.maker_order_subaccount_id_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.maker_order_subaccount_id_);
  }
  ::memcpy(&_impl_.insurance_fund_delta_quote_quantums_, &from._impl_.insurance_fund_delta_quote_quantums_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.clob_pair_id_) -
    reinterpret_cast<char*>(&_impl_.insurance_fund_delta_quote_quantums_)) + sizeof(_impl_.clob_pair_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MEVLiquidationMatch)
}

inline void MEVLiquidationMatch::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.liquidated_subaccount_id_){nullptr}
    , decltype(_impl_.maker_order_subaccount_id_){nullptr}
    , decltype(_impl_.insurance_fund_delta_quote_quantums_) { ::int64_t{0} }

    , decltype(_impl_.maker_order_subticks_) { ::uint64_t{0u} }

    , decltype(_impl_.maker_order_is_buy_) { false }

    , decltype(_impl_.maker_fee_ppm_) { 0 }

    , decltype(_impl_.fill_amount_) { ::uint64_t{0u} }

    , decltype(_impl_.clob_pair_id_) { 0u }

  };
}

MEVLiquidationMatch::~MEVLiquidationMatch() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MEVLiquidationMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MEVLiquidationMatch::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.liquidated_subaccount_id_;
  if (this != internal_default_instance()) delete _impl_.maker_order_subaccount_id_;
}

void MEVLiquidationMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MEVLiquidationMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MEVLiquidationMatch)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.liquidated_subaccount_id_ != nullptr);
      _impl_.liquidated_subaccount_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.maker_order_subaccount_id_ != nullptr);
      _impl_.maker_order_subaccount_id_->Clear();
    }
  }
  ::memset(&_impl_.insurance_fund_delta_quote_quantums_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.clob_pair_id_) -
      reinterpret_cast<char*>(&_impl_.insurance_fund_delta_quote_quantums_)) + sizeof(_impl_.clob_pair_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MEVLiquidationMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId liquidated_subaccount_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidated_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 insurance_fund_delta_quote_quantums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.insurance_fund_delta_quote_quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maker_order_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 maker_order_subticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.maker_order_subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool maker_order_is_buy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.maker_order_is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 maker_fee_ppm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.maker_fee_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 clob_pair_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.clob_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 fill_amount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.fill_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MEVLiquidationMatch::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MEVLiquidationMatch)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.subaccounts.SubaccountId liquidated_subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::liquidated_subaccount_id(this),
        _Internal::liquidated_subaccount_id(this).GetCachedSize(), target, stream);
  }

  // int64 insurance_fund_delta_quote_quantums = 2;
  if (this->_internal_insurance_fund_delta_quote_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_insurance_fund_delta_quote_quantums(), target);
  }

  // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::maker_order_subaccount_id(this),
        _Internal::maker_order_subaccount_id(this).GetCachedSize(), target, stream);
  }

  // uint64 maker_order_subticks = 4;
  if (this->_internal_maker_order_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_maker_order_subticks(), target);
  }

  // bool maker_order_is_buy = 5;
  if (this->_internal_maker_order_is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_maker_order_is_buy(), target);
  }

  // int32 maker_fee_ppm = 6;
  if (this->_internal_maker_fee_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_maker_fee_ppm(), target);
  }

  // uint32 clob_pair_id = 7;
  if (this->_internal_clob_pair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_clob_pair_id(), target);
  }

  // uint64 fill_amount = 8;
  if (this->_internal_fill_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_fill_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MEVLiquidationMatch)
  return target;
}

::size_t MEVLiquidationMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MEVLiquidationMatch)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .dydxprotocol.subaccounts.SubaccountId liquidated_subaccount_id = 1 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.liquidated_subaccount_id_);
    }

    // .dydxprotocol.subaccounts.SubaccountId maker_order_subaccount_id = 3 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maker_order_subaccount_id_);
    }

  }
  // int64 insurance_fund_delta_quote_quantums = 2;
  if (this->_internal_insurance_fund_delta_quote_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_insurance_fund_delta_quote_quantums());
  }

  // uint64 maker_order_subticks = 4;
  if (this->_internal_maker_order_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_maker_order_subticks());
  }

  // bool maker_order_is_buy = 5;
  if (this->_internal_maker_order_is_buy() != 0) {
    total_size += 2;
  }

  // int32 maker_fee_ppm = 6;
  if (this->_internal_maker_fee_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_maker_fee_ppm());
  }

  // uint64 fill_amount = 8;
  if (this->_internal_fill_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_fill_amount());
  }

  // uint32 clob_pair_id = 7;
  if (this->_internal_clob_pair_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_clob_pair_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MEVLiquidationMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MEVLiquidationMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MEVLiquidationMatch::GetClassData() const { return &_class_data_; }


void MEVLiquidationMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MEVLiquidationMatch*>(&to_msg);
  auto& from = static_cast<const MEVLiquidationMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MEVLiquidationMatch)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_liquidated_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
          from._internal_liquidated_subaccount_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_maker_order_subaccount_id()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
          from._internal_maker_order_subaccount_id());
    }
  }
  if (from._internal_insurance_fund_delta_quote_quantums() != 0) {
    _this->_internal_set_insurance_fund_delta_quote_quantums(from._internal_insurance_fund_delta_quote_quantums());
  }
  if (from._internal_maker_order_subticks() != 0) {
    _this->_internal_set_maker_order_subticks(from._internal_maker_order_subticks());
  }
  if (from._internal_maker_order_is_buy() != 0) {
    _this->_internal_set_maker_order_is_buy(from._internal_maker_order_is_buy());
  }
  if (from._internal_maker_fee_ppm() != 0) {
    _this->_internal_set_maker_fee_ppm(from._internal_maker_fee_ppm());
  }
  if (from._internal_fill_amount() != 0) {
    _this->_internal_set_fill_amount(from._internal_fill_amount());
  }
  if (from._internal_clob_pair_id() != 0) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MEVLiquidationMatch::CopyFrom(const MEVLiquidationMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MEVLiquidationMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MEVLiquidationMatch::IsInitialized() const {
  return true;
}

void MEVLiquidationMatch::InternalSwap(MEVLiquidationMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MEVLiquidationMatch, _impl_.clob_pair_id_)
      + sizeof(MEVLiquidationMatch::_impl_.clob_pair_id_)
      - PROTOBUF_FIELD_OFFSET(MEVLiquidationMatch, _impl_.liquidated_subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.liquidated_subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.liquidated_subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MEVLiquidationMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto[1]);
}
// ===================================================================

class ClobMidPrice::_Internal {
 public:
  using HasBits = decltype(std::declval<ClobMidPrice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClobMidPrice, _impl_._has_bits_);
  static const ::dydxprotocol::clob::ClobPair& clob_pair(const ClobMidPrice* msg);
  static void set_has_clob_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::ClobPair&
ClobMidPrice::_Internal::clob_pair(const ClobMidPrice* msg) {
  return *msg->_impl_.clob_pair_;
}
void ClobMidPrice::clear_clob_pair() {
  if (_impl_.clob_pair_ != nullptr) _impl_.clob_pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ClobMidPrice::ClobMidPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.ClobMidPrice)
}
ClobMidPrice::ClobMidPrice(const ClobMidPrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClobMidPrice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_pair_){nullptr}
    , decltype(_impl_.subticks_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.clob_pair_ = new ::dydxprotocol::clob::ClobPair(*from._impl_.clob_pair_);
  }
  _this->_impl_.subticks_ = from._impl_.subticks_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.ClobMidPrice)
}

inline void ClobMidPrice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_pair_){nullptr}
    , decltype(_impl_.subticks_) { ::uint64_t{0u} }

  };
}

ClobMidPrice::~ClobMidPrice() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.ClobMidPrice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClobMidPrice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.clob_pair_;
}

void ClobMidPrice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClobMidPrice::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.ClobMidPrice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.clob_pair_ != nullptr);
    _impl_.clob_pair_->Clear();
  }
  _impl_.subticks_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClobMidPrice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clob_pair(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 subticks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClobMidPrice::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.ClobMidPrice)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::clob_pair(this),
        _Internal::clob_pair(this).GetCachedSize(), target, stream);
  }

  // uint64 subticks = 2;
  if (this->_internal_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_subticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.ClobMidPrice)
  return target;
}

::size_t ClobMidPrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.ClobMidPrice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clob_pair_);
  }

  // uint64 subticks = 2;
  if (this->_internal_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_subticks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClobMidPrice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClobMidPrice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClobMidPrice::GetClassData() const { return &_class_data_; }


void ClobMidPrice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClobMidPrice*>(&to_msg);
  auto& from = static_cast<const ClobMidPrice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.ClobMidPrice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_clob_pair()->::dydxprotocol::clob::ClobPair::MergeFrom(
        from._internal_clob_pair());
  }
  if (from._internal_subticks() != 0) {
    _this->_internal_set_subticks(from._internal_subticks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClobMidPrice::CopyFrom(const ClobMidPrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.ClobMidPrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClobMidPrice::IsInitialized() const {
  return true;
}

void ClobMidPrice::InternalSwap(ClobMidPrice* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClobMidPrice, _impl_.subticks_)
      + sizeof(ClobMidPrice::_impl_.subticks_)
      - PROTOBUF_FIELD_OFFSET(ClobMidPrice, _impl_.clob_pair_)>(
          reinterpret_cast<char*>(&_impl_.clob_pair_),
          reinterpret_cast<char*>(&other->_impl_.clob_pair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClobMidPrice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto[2]);
}
// ===================================================================

class ValidatorMevMatches::_Internal {
 public:
};

ValidatorMevMatches::ValidatorMevMatches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.ValidatorMevMatches)
}
ValidatorMevMatches::ValidatorMevMatches(const ValidatorMevMatches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValidatorMevMatches* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){from._impl_.matches_}
    , decltype(_impl_.liquidation_matches_){from._impl_.liquidation_matches_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.ValidatorMevMatches)
}

inline void ValidatorMevMatches::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.matches_){arena}
    , decltype(_impl_.liquidation_matches_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValidatorMevMatches::~ValidatorMevMatches() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.ValidatorMevMatches)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValidatorMevMatches::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_matches()->~RepeatedPtrField();
  _internal_mutable_liquidation_matches()->~RepeatedPtrField();
}

void ValidatorMevMatches::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValidatorMevMatches::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.ValidatorMevMatches)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_matches()->Clear();
  _internal_mutable_liquidation_matches()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidatorMevMatches::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.MEVMatch matches = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.clob.MEVLiquidationMatch liquidation_matches = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_liquidation_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValidatorMevMatches::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.ValidatorMevMatches)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MEVMatch matches = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.clob.MEVLiquidationMatch liquidation_matches = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_liquidation_matches_size()); i < n; i++) {
    const auto& repfield = this->_internal_liquidation_matches(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.ValidatorMevMatches)
  return target;
}

::size_t ValidatorMevMatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.ValidatorMevMatches)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MEVMatch matches = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->_internal_matches()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dydxprotocol.clob.MEVLiquidationMatch liquidation_matches = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_liquidation_matches_size();
  for (const auto& msg : this->_internal_liquidation_matches()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidatorMevMatches::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValidatorMevMatches::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidatorMevMatches::GetClassData() const { return &_class_data_; }


void ValidatorMevMatches::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValidatorMevMatches*>(&to_msg);
  auto& from = static_cast<const ValidatorMevMatches&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.ValidatorMevMatches)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_matches()->MergeFrom(from._internal_matches());
  _this->_internal_mutable_liquidation_matches()->MergeFrom(from._internal_liquidation_matches());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidatorMevMatches::CopyFrom(const ValidatorMevMatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.ValidatorMevMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidatorMevMatches::IsInitialized() const {
  return true;
}

void ValidatorMevMatches::InternalSwap(ValidatorMevMatches* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_matches()->InternalSwap(other->_internal_mutable_matches());
  _internal_mutable_liquidation_matches()->InternalSwap(other->_internal_mutable_liquidation_matches());
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidatorMevMatches::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto[3]);
}
// ===================================================================

class MevNodeToNodeMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<MevNodeToNodeMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MevNodeToNodeMetrics, _impl_._has_bits_);
  static const ::dydxprotocol::clob::ValidatorMevMatches& validator_mev_matches(const MevNodeToNodeMetrics* msg);
  static void set_has_validator_mev_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::ValidatorMevMatches&
MevNodeToNodeMetrics::_Internal::validator_mev_matches(const MevNodeToNodeMetrics* msg) {
  return *msg->_impl_.validator_mev_matches_;
}
MevNodeToNodeMetrics::MevNodeToNodeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MevNodeToNodeMetrics)
}
MevNodeToNodeMetrics::MevNodeToNodeMetrics(const MevNodeToNodeMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MevNodeToNodeMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_mid_prices_){from._impl_.clob_mid_prices_}
    , decltype(_impl_.validator_mev_matches_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.validator_mev_matches_ = new ::dydxprotocol::clob::ValidatorMevMatches(*from._impl_.validator_mev_matches_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MevNodeToNodeMetrics)
}

inline void MevNodeToNodeMetrics::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.clob_mid_prices_){arena}
    , decltype(_impl_.validator_mev_matches_){nullptr}
  };
}

MevNodeToNodeMetrics::~MevNodeToNodeMetrics() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MevNodeToNodeMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MevNodeToNodeMetrics::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_clob_mid_prices()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.validator_mev_matches_;
}

void MevNodeToNodeMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MevNodeToNodeMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MevNodeToNodeMetrics)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_clob_mid_prices()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.validator_mev_matches_ != nullptr);
    _impl_.validator_mev_matches_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MevNodeToNodeMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ValidatorMevMatches validator_mev_matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_mev_matches(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.clob.ClobMidPrice clob_mid_prices = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clob_mid_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MevNodeToNodeMetrics::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MevNodeToNodeMetrics)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.ValidatorMevMatches validator_mev_matches = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::validator_mev_matches(this),
        _Internal::validator_mev_matches(this).GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.clob.ClobMidPrice clob_mid_prices = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clob_mid_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_clob_mid_prices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MevNodeToNodeMetrics)
  return target;
}

::size_t MevNodeToNodeMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MevNodeToNodeMetrics)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.ClobMidPrice clob_mid_prices = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_clob_mid_prices_size();
  for (const auto& msg : this->_internal_clob_mid_prices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dydxprotocol.clob.ValidatorMevMatches validator_mev_matches = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.validator_mev_matches_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MevNodeToNodeMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MevNodeToNodeMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MevNodeToNodeMetrics::GetClassData() const { return &_class_data_; }


void MevNodeToNodeMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MevNodeToNodeMetrics*>(&to_msg);
  auto& from = static_cast<const MevNodeToNodeMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MevNodeToNodeMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_clob_mid_prices()->MergeFrom(from._internal_clob_mid_prices());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_validator_mev_matches()->::dydxprotocol::clob::ValidatorMevMatches::MergeFrom(
        from._internal_validator_mev_matches());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MevNodeToNodeMetrics::CopyFrom(const MevNodeToNodeMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MevNodeToNodeMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MevNodeToNodeMetrics::IsInitialized() const {
  return true;
}

void MevNodeToNodeMetrics::InternalSwap(MevNodeToNodeMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_clob_mid_prices()->InternalSwap(other->_internal_mutable_clob_mid_prices());
  swap(_impl_.validator_mev_matches_, other->_impl_.validator_mev_matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MevNodeToNodeMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fmev_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fmev_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MEVMatch*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MEVMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MEVMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MEVLiquidationMatch*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MEVLiquidationMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MEVLiquidationMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::ClobMidPrice*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::ClobMidPrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::ClobMidPrice >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::ValidatorMevMatches*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::ValidatorMevMatches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::ValidatorMevMatches >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MevNodeToNodeMetrics*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MevNodeToNodeMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MevNodeToNodeMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
