// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/tx.proto

#include "dydxprotocol/clob/tx.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR MsgCreateClobPair::MsgCreateClobPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clob_pair_)*/nullptr} {}
struct MsgCreateClobPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateClobPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateClobPairDefaultTypeInternal() {}
  union {
    MsgCreateClobPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateClobPairDefaultTypeInternal _MsgCreateClobPair_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCreateClobPairResponse::MsgCreateClobPairResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgCreateClobPairResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCreateClobPairResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCreateClobPairResponseDefaultTypeInternal() {}
  union {
    MsgCreateClobPairResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCreateClobPairResponseDefaultTypeInternal _MsgCreateClobPairResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgProposedOperations::MsgProposedOperations(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operations_queue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgProposedOperationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgProposedOperationsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgProposedOperationsDefaultTypeInternal() {}
  union {
    MsgProposedOperations _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgProposedOperationsDefaultTypeInternal _MsgProposedOperations_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgProposedOperationsResponse::MsgProposedOperationsResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgProposedOperationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgProposedOperationsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgProposedOperationsResponseDefaultTypeInternal() {}
  union {
    MsgProposedOperationsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgProposedOperationsResponseDefaultTypeInternal _MsgProposedOperationsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPlaceOrder::MsgPlaceOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/nullptr} {}
struct MsgPlaceOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPlaceOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPlaceOrderDefaultTypeInternal() {}
  union {
    MsgPlaceOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPlaceOrderDefaultTypeInternal _MsgPlaceOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPlaceOrderResponse::MsgPlaceOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgPlaceOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPlaceOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPlaceOrderResponseDefaultTypeInternal() {}
  union {
    MsgPlaceOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPlaceOrderResponseDefaultTypeInternal _MsgPlaceOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelOrder::MsgCancelOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_id_)*/nullptr
  , /*decltype(_impl_.good_til_oneof_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MsgCancelOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelOrderDefaultTypeInternal() {}
  union {
    MsgCancelOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelOrderDefaultTypeInternal _MsgCancelOrder_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgCancelOrderResponse::MsgCancelOrderResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgCancelOrderResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCancelOrderResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCancelOrderResponseDefaultTypeInternal() {}
  union {
    MsgCancelOrderResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCancelOrderResponseDefaultTypeInternal _MsgCancelOrderResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateClobPair::MsgUpdateClobPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clob_pair_)*/nullptr} {}
struct MsgUpdateClobPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateClobPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateClobPairDefaultTypeInternal() {}
  union {
    MsgUpdateClobPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateClobPairDefaultTypeInternal _MsgUpdateClobPair_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateClobPairResponse::MsgUpdateClobPairResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgUpdateClobPairResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateClobPairResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateClobPairResponseDefaultTypeInternal() {}
  union {
    MsgUpdateClobPairResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateClobPairResponseDefaultTypeInternal _MsgUpdateClobPairResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OperationRaw::OperationRaw(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OperationRawDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationRawDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationRawDefaultTypeInternal() {}
  union {
    OperationRaw _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationRawDefaultTypeInternal _OperationRaw_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateEquityTierLimitConfiguration::MsgUpdateEquityTierLimitConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.equity_tier_limit_config_)*/nullptr} {}
struct MsgUpdateEquityTierLimitConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateEquityTierLimitConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateEquityTierLimitConfigurationDefaultTypeInternal() {}
  union {
    MsgUpdateEquityTierLimitConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateEquityTierLimitConfigurationDefaultTypeInternal _MsgUpdateEquityTierLimitConfiguration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateEquityTierLimitConfigurationResponse::MsgUpdateEquityTierLimitConfigurationResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgUpdateEquityTierLimitConfigurationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateEquityTierLimitConfigurationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateEquityTierLimitConfigurationResponseDefaultTypeInternal() {}
  union {
    MsgUpdateEquityTierLimitConfigurationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateEquityTierLimitConfigurationResponseDefaultTypeInternal _MsgUpdateEquityTierLimitConfigurationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateBlockRateLimitConfiguration::MsgUpdateBlockRateLimitConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_rate_limit_config_)*/nullptr} {}
struct MsgUpdateBlockRateLimitConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateBlockRateLimitConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateBlockRateLimitConfigurationDefaultTypeInternal() {}
  union {
    MsgUpdateBlockRateLimitConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateBlockRateLimitConfigurationDefaultTypeInternal _MsgUpdateBlockRateLimitConfiguration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateBlockRateLimitConfigurationResponse::MsgUpdateBlockRateLimitConfigurationResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgUpdateBlockRateLimitConfigurationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateBlockRateLimitConfigurationResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateBlockRateLimitConfigurationResponseDefaultTypeInternal() {}
  union {
    MsgUpdateBlockRateLimitConfigurationResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateBlockRateLimitConfigurationResponseDefaultTypeInternal _MsgUpdateBlockRateLimitConfigurationResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateLiquidationsConfig::MsgUpdateLiquidationsConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.liquidations_config_)*/nullptr} {}
struct MsgUpdateLiquidationsConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateLiquidationsConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateLiquidationsConfigDefaultTypeInternal() {}
  union {
    MsgUpdateLiquidationsConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateLiquidationsConfigDefaultTypeInternal _MsgUpdateLiquidationsConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateLiquidationsConfigResponse::MsgUpdateLiquidationsConfigResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgUpdateLiquidationsConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateLiquidationsConfigResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateLiquidationsConfigResponseDefaultTypeInternal() {}
  union {
    MsgUpdateLiquidationsConfigResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateLiquidationsConfigResponseDefaultTypeInternal _MsgUpdateLiquidationsConfigResponse_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[17];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2ftx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2ftx_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCreateClobPair, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCreateClobPair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCreateClobPair, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCreateClobPair, _impl_.clob_pair_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCreateClobPairResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgProposedOperations, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgProposedOperations, _impl_.operations_queue_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgProposedOperationsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrder, _impl_.order_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgPlaceOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_.order_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_.good_til_oneof_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrderResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateClobPair, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateClobPair, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateClobPair, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateClobPair, _impl_.clob_pair_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateClobPairResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _impl_.operation_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration, _impl_.equity_tier_limit_config_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration, _impl_.block_rate_limit_config_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateLiquidationsConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateLiquidationsConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateLiquidationsConfig, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateLiquidationsConfig, _impl_.liquidations_config_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::dydxprotocol::clob::MsgCreateClobPair)},
        { 12, -1, -1, sizeof(::dydxprotocol::clob::MsgCreateClobPairResponse)},
        { 20, -1, -1, sizeof(::dydxprotocol::clob::MsgProposedOperations)},
        { 29, -1, -1, sizeof(::dydxprotocol::clob::MsgProposedOperationsResponse)},
        { 37, 46, -1, sizeof(::dydxprotocol::clob::MsgPlaceOrder)},
        { 47, -1, -1, sizeof(::dydxprotocol::clob::MsgPlaceOrderResponse)},
        { 55, 67, -1, sizeof(::dydxprotocol::clob::MsgCancelOrder)},
        { 70, -1, -1, sizeof(::dydxprotocol::clob::MsgCancelOrderResponse)},
        { 78, 88, -1, sizeof(::dydxprotocol::clob::MsgUpdateClobPair)},
        { 90, -1, -1, sizeof(::dydxprotocol::clob::MsgUpdateClobPairResponse)},
        { 98, -1, -1, sizeof(::dydxprotocol::clob::OperationRaw)},
        { 110, 120, -1, sizeof(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration)},
        { 122, -1, -1, sizeof(::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse)},
        { 130, 140, -1, sizeof(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration)},
        { 142, -1, -1, sizeof(::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse)},
        { 150, 160, -1, sizeof(::dydxprotocol::clob::MsgUpdateLiquidationsConfig)},
        { 162, -1, -1, sizeof(::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_MsgCreateClobPair_default_instance_._instance,
    &::dydxprotocol::clob::_MsgCreateClobPairResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MsgProposedOperations_default_instance_._instance,
    &::dydxprotocol::clob::_MsgProposedOperationsResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MsgPlaceOrder_default_instance_._instance,
    &::dydxprotocol::clob::_MsgPlaceOrderResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MsgCancelOrder_default_instance_._instance,
    &::dydxprotocol::clob::_MsgCancelOrderResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateClobPair_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateClobPairResponse_default_instance_._instance,
    &::dydxprotocol::clob::_OperationRaw_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateEquityTierLimitConfiguration_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateEquityTierLimitConfigurationResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateBlockRateLimitConfiguration_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateBlockRateLimitConfigurationResponse_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateLiquidationsConfig_default_instance_._instance,
    &::dydxprotocol::clob::_MsgUpdateLiquidationsConfigResponse_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\032dydxprotocol/clob/tx.proto\022\021dydxprotoc"
    "ol.clob\032\031cosmos_proto/cosmos.proto\032\027cosm"
    "os/msg/v1/msg.proto\032\024gogoproto/gogo.prot"
    "o\032/dydxprotocol/clob/block_rate_limit_co"
    "nfig.proto\032!dydxprotocol/clob/clob_pair."
    "proto\0320dydxprotocol/clob/equity_tier_lim"
    "it_config.proto\032\037dydxprotocol/clob/match"
    "es.proto\032\035dydxprotocol/clob/order.proto\032"
    "&dydxprotocol/clob/order_removals.proto\032"
    "+dydxprotocol/clob/liquidations_config.p"
    "roto\"\206\001\n\021MsgCreateClobPair\022+\n\tauthority\030"
    "\001 \001(\tB\030\322\264-\024cosmos.AddressString\0224\n\tclob_"
    "pair\030\002 \001(\0132\033.dydxprotocol.clob.ClobPairB"
    "\004\310\336\037\000:\016\202\347\260*\tauthority\"\033\n\031MsgCreateClobPa"
    "irResponse\"X\n\025MsgProposedOperations\022\?\n\020o"
    "perations_queue\030\001 \003(\0132\037.dydxprotocol.clo"
    "b.OperationRawB\004\310\336\037\000\"\037\n\035MsgProposedOpera"
    "tionsResponse\">\n\rMsgPlaceOrder\022-\n\005order\030"
    "\001 \001(\0132\030.dydxprotocol.clob.OrderB\004\310\336\037\000\"\027\n"
    "\025MsgPlaceOrderResponse\"\217\001\n\016MsgCancelOrde"
    "r\0222\n\010order_id\030\001 \001(\0132\032.dydxprotocol.clob."
    "OrderIdB\004\310\336\037\000\022\030\n\016good_til_block\030\002 \001(\rH\000\022"
    "\035\n\023good_til_block_time\030\003 \001(\007H\000B\020\n\016good_t"
    "il_oneof\"\030\n\026MsgCancelOrderResponse\"\206\001\n\021M"
    "sgUpdateClobPair\022+\n\tauthority\030\001 \001(\tB\030\322\264-"
    "\024cosmos.AddressString\0224\n\tclob_pair\030\002 \001(\013"
    "2\033.dydxprotocol.clob.ClobPairB\004\310\336\037\000:\016\202\347\260"
    "*\tauthority\"\033\n\031MsgUpdateClobPairResponse"
    "\"\252\001\n\014OperationRaw\022-\n\005match\030\001 \001(\0132\034.dydxp"
    "rotocol.clob.ClobMatchH\000\022$\n\032short_term_o"
    "rder_placement\030\002 \001(\014H\000\0228\n\rorder_removal\030"
    "\003 \001(\0132\037.dydxprotocol.clob.OrderRemovalH\000"
    "B\013\n\toperation\"\275\001\n%MsgUpdateEquityTierLim"
    "itConfiguration\022+\n\tauthority\030\001 \001(\tB\030\322\264-\024"
    "cosmos.AddressString\022W\n\030equity_tier_limi"
    "t_config\030\002 \001(\0132/.dydxprotocol.clob.Equit"
    "yTierLimitConfigurationB\004\310\336\037\000:\016\202\347\260*\tauth"
    "ority\"/\n-MsgUpdateEquityTierLimitConfigu"
    "rationResponse\"\272\001\n$MsgUpdateBlockRateLim"
    "itConfiguration\022+\n\tauthority\030\001 \001(\tB\030\322\264-\024"
    "cosmos.AddressString\022U\n\027block_rate_limit"
    "_config\030\003 \001(\0132..dydxprotocol.clob.BlockR"
    "ateLimitConfigurationB\004\310\336\037\000:\016\202\347\260*\tauthor"
    "ity\".\n,MsgUpdateBlockRateLimitConfigurat"
    "ionResponse\"\244\001\n\033MsgUpdateLiquidationsCon"
    "fig\022+\n\tauthority\030\001 \001(\tB\030\322\264-\024cosmos.Addre"
    "ssString\022H\n\023liquidations_config\030\002 \001(\0132%."
    "dydxprotocol.clob.LiquidationsConfigB\004\310\336"
    "\037\000:\016\202\347\260*\tauthority\"%\n#MsgUpdateLiquidati"
    "onsConfigResponse2\302\007\n\003Msg\022p\n\022ProposedOpe"
    "rations\022(.dydxprotocol.clob.MsgProposedO"
    "perations\0320.dydxprotocol.clob.MsgPropose"
    "dOperationsResponse\022X\n\nPlaceOrder\022 .dydx"
    "protocol.clob.MsgPlaceOrder\032(.dydxprotoc"
    "ol.clob.MsgPlaceOrderResponse\022[\n\013CancelO"
    "rder\022!.dydxprotocol.clob.MsgCancelOrder\032"
    ").dydxprotocol.clob.MsgCancelOrderRespon"
    "se\022d\n\016CreateClobPair\022$.dydxprotocol.clob"
    ".MsgCreateClobPair\032,.dydxprotocol.clob.M"
    "sgCreateClobPairResponse\022d\n\016UpdateClobPa"
    "ir\022$.dydxprotocol.clob.MsgUpdateClobPair"
    "\032,.dydxprotocol.clob.MsgUpdateClobPairRe"
    "sponse\022\240\001\n\"UpdateEquityTierLimitConfigur"
    "ation\0228.dydxprotocol.clob.MsgUpdateEquit"
    "yTierLimitConfiguration\032@.dydxprotocol.c"
    "lob.MsgUpdateEquityTierLimitConfiguratio"
    "nResponse\022\235\001\n!UpdateBlockRateLimitConfig"
    "uration\0227.dydxprotocol.clob.MsgUpdateBlo"
    "ckRateLimitConfiguration\032\?.dydxprotocol."
    "clob.MsgUpdateBlockRateLimitConfiguratio"
    "nResponse\022\202\001\n\030UpdateLiquidationsConfig\022."
    ".dydxprotocol.clob.MsgUpdateLiquidations"
    "Config\0326.dydxprotocol.clob.MsgUpdateLiqu"
    "idationsConfigResponseB8Z6github.com/dyd"
    "xprotocol/v4-chain/protocol/x/clob/types"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_deps[10] =
    {
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2forder_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2forder_5fremovals_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2ftx_2eproto = {
    false,
    false,
    3008,
    descriptor_table_protodef_dydxprotocol_2fclob_2ftx_2eproto,
    "dydxprotocol/clob/tx.proto",
    &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_deps,
    10,
    17,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2ftx_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2ftx_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2ftx_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2ftx_2eproto(&descriptor_table_dydxprotocol_2fclob_2ftx_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class MsgCreateClobPair::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCreateClobPair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCreateClobPair, _impl_._has_bits_);
  static const ::dydxprotocol::clob::ClobPair& clob_pair(const MsgCreateClobPair* msg);
  static void set_has_clob_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::ClobPair&
MsgCreateClobPair::_Internal::clob_pair(const MsgCreateClobPair* msg) {
  return *msg->_impl_.clob_pair_;
}
void MsgCreateClobPair::clear_clob_pair() {
  if (_impl_.clob_pair_ != nullptr) _impl_.clob_pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCreateClobPair::MsgCreateClobPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgCreateClobPair)
}
MsgCreateClobPair::MsgCreateClobPair(const MsgCreateClobPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCreateClobPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.clob_pair_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.clob_pair_ = new ::dydxprotocol::clob::ClobPair(*from._impl_.clob_pair_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgCreateClobPair)
}

inline void MsgCreateClobPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.clob_pair_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgCreateClobPair::~MsgCreateClobPair() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgCreateClobPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCreateClobPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.clob_pair_;
}

void MsgCreateClobPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCreateClobPair::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgCreateClobPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.clob_pair_ != nullptr);
    _impl_.clob_pair_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCreateClobPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.clob.MsgCreateClobPair.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clob_pair(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCreateClobPair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgCreateClobPair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.clob.MsgCreateClobPair.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::clob_pair(this),
        _Internal::clob_pair(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgCreateClobPair)
  return target;
}

::size_t MsgCreateClobPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgCreateClobPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clob_pair_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateClobPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCreateClobPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateClobPair::GetClassData() const { return &_class_data_; }


void MsgCreateClobPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCreateClobPair*>(&to_msg);
  auto& from = static_cast<const MsgCreateClobPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgCreateClobPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_clob_pair()->::dydxprotocol::clob::ClobPair::MergeFrom(
        from._internal_clob_pair());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCreateClobPair::CopyFrom(const MsgCreateClobPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgCreateClobPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCreateClobPair::IsInitialized() const {
  return true;
}

void MsgCreateClobPair::InternalSwap(MsgCreateClobPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.clob_pair_, other->_impl_.clob_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateClobPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[0]);
}
// ===================================================================

class MsgCreateClobPairResponse::_Internal {
 public:
};

MsgCreateClobPairResponse::MsgCreateClobPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgCreateClobPairResponse)
}
MsgCreateClobPairResponse::MsgCreateClobPairResponse(const MsgCreateClobPairResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgCreateClobPairResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgCreateClobPairResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCreateClobPairResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCreateClobPairResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgCreateClobPairResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[1]);
}
// ===================================================================

class MsgProposedOperations::_Internal {
 public:
};

MsgProposedOperations::MsgProposedOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgProposedOperations)
}
MsgProposedOperations::MsgProposedOperations(const MsgProposedOperations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgProposedOperations* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_queue_){from._impl_.operations_queue_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgProposedOperations)
}

inline void MsgProposedOperations::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operations_queue_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgProposedOperations::~MsgProposedOperations() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgProposedOperations)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgProposedOperations::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_operations_queue()->~RepeatedPtrField();
}

void MsgProposedOperations::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgProposedOperations::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgProposedOperations)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_operations_queue()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgProposedOperations::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgProposedOperations::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgProposedOperations)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operations_queue_size()); i < n; i++) {
    const auto& repfield = this->_internal_operations_queue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgProposedOperations)
  return target;
}

::size_t MsgProposedOperations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgProposedOperations)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_operations_queue_size();
  for (const auto& msg : this->_internal_operations_queue()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgProposedOperations::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgProposedOperations::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgProposedOperations::GetClassData() const { return &_class_data_; }


void MsgProposedOperations::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgProposedOperations*>(&to_msg);
  auto& from = static_cast<const MsgProposedOperations&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgProposedOperations)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_operations_queue()->MergeFrom(from._internal_operations_queue());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgProposedOperations::CopyFrom(const MsgProposedOperations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgProposedOperations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgProposedOperations::IsInitialized() const {
  return true;
}

void MsgProposedOperations::InternalSwap(MsgProposedOperations* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_operations_queue()->InternalSwap(other->_internal_mutable_operations_queue());
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgProposedOperations::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[2]);
}
// ===================================================================

class MsgProposedOperationsResponse::_Internal {
 public:
};

MsgProposedOperationsResponse::MsgProposedOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgProposedOperationsResponse)
}
MsgProposedOperationsResponse::MsgProposedOperationsResponse(const MsgProposedOperationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgProposedOperationsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgProposedOperationsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgProposedOperationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgProposedOperationsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgProposedOperationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[3]);
}
// ===================================================================

class MsgPlaceOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgPlaceOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgPlaceOrder, _impl_._has_bits_);
  static const ::dydxprotocol::clob::Order& order(const MsgPlaceOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::Order&
MsgPlaceOrder::_Internal::order(const MsgPlaceOrder* msg) {
  return *msg->_impl_.order_;
}
void MsgPlaceOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgPlaceOrder::MsgPlaceOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgPlaceOrder)
}
MsgPlaceOrder::MsgPlaceOrder(const MsgPlaceOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPlaceOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::dydxprotocol::clob::Order(*from._impl_.order_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgPlaceOrder)
}

inline void MsgPlaceOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}
  };
}

MsgPlaceOrder::~MsgPlaceOrder() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgPlaceOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPlaceOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
}

void MsgPlaceOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPlaceOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgPlaceOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPlaceOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgPlaceOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgPlaceOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgPlaceOrder)
  return target;
}

::size_t MsgPlaceOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgPlaceOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPlaceOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPlaceOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPlaceOrder::GetClassData() const { return &_class_data_; }


void MsgPlaceOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPlaceOrder*>(&to_msg);
  auto& from = static_cast<const MsgPlaceOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgPlaceOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::dydxprotocol::clob::Order::MergeFrom(
        from._internal_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPlaceOrder::CopyFrom(const MsgPlaceOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgPlaceOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlaceOrder::IsInitialized() const {
  return true;
}

void MsgPlaceOrder::InternalSwap(MsgPlaceOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.order_, other->_impl_.order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPlaceOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[4]);
}
// ===================================================================

class MsgPlaceOrderResponse::_Internal {
 public:
};

MsgPlaceOrderResponse::MsgPlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgPlaceOrderResponse)
}
MsgPlaceOrderResponse::MsgPlaceOrderResponse(const MsgPlaceOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgPlaceOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgPlaceOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPlaceOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPlaceOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgPlaceOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[5]);
}
// ===================================================================

class MsgCancelOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgCancelOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgCancelOrder, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MsgCancelOrder, _impl_._oneof_case_);
  static const ::dydxprotocol::clob::OrderId& order_id(const MsgCancelOrder* msg);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::OrderId&
MsgCancelOrder::_Internal::order_id(const MsgCancelOrder* msg) {
  return *msg->_impl_.order_id_;
}
void MsgCancelOrder::clear_order_id() {
  if (_impl_.order_id_ != nullptr) _impl_.order_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgCancelOrder::MsgCancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgCancelOrder)
}
MsgCancelOrder::MsgCancelOrder(const MsgCancelOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCancelOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_id_ = new ::dydxprotocol::clob::OrderId(*from._impl_.order_id_);
  }
  clear_has_good_til_oneof();
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgCancelOrder)
}

inline void MsgCancelOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_good_til_oneof();
}

MsgCancelOrder::~MsgCancelOrder() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgCancelOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCancelOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_id_;
  if (has_good_til_oneof()) {
    clear_good_til_oneof();
  }
}

void MsgCancelOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCancelOrder::clear_good_til_oneof() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.MsgCancelOrder)
  switch (good_til_oneof_case()) {
    case kGoodTilBlock: {
      // No need to clear
      break;
    }
    case kGoodTilBlockTime: {
      // No need to clear
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}


void MsgCancelOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgCancelOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_id_ != nullptr);
    _impl_.order_id_->Clear();
  }
  clear_good_til_oneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCancelOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 good_til_block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _internal_set_good_til_block(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // fixed32 good_til_block_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _internal_set_good_til_block_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr));
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgCancelOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgCancelOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order_id(this),
        _Internal::order_id(this).GetCachedSize(), target, stream);
  }

  switch (good_til_oneof_case()) {
    case kGoodTilBlock: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          2, this->_internal_good_til_block(), target);
      break;
    }
    case kGoodTilBlockTime: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          3, this->_internal_good_til_block_time(), target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgCancelOrder)
  return target;
}

::size_t MsgCancelOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgCancelOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_id_);
  }

  switch (good_til_oneof_case()) {
    // uint32 good_til_block = 2;
    case kGoodTilBlock: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_good_til_block());
      break;
    }
    // fixed32 good_til_block_time = 3;
    case kGoodTilBlockTime: {
      total_size += 5;
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCancelOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelOrder::GetClassData() const { return &_class_data_; }


void MsgCancelOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCancelOrder*>(&to_msg);
  auto& from = static_cast<const MsgCancelOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgCancelOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order_id()->::dydxprotocol::clob::OrderId::MergeFrom(
        from._internal_order_id());
  }
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCancelOrder::CopyFrom(const MsgCancelOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgCancelOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCancelOrder::IsInitialized() const {
  return true;
}

void MsgCancelOrder::InternalSwap(MsgCancelOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.order_id_, other->_impl_.order_id_);
  swap(_impl_.good_til_oneof_, other->_impl_.good_til_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[6]);
}
// ===================================================================

class MsgCancelOrderResponse::_Internal {
 public:
};

MsgCancelOrderResponse::MsgCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgCancelOrderResponse)
}
MsgCancelOrderResponse::MsgCancelOrderResponse(const MsgCancelOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgCancelOrderResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgCancelOrderResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCancelOrderResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCancelOrderResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgCancelOrderResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[7]);
}
// ===================================================================

class MsgUpdateClobPair::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgUpdateClobPair>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgUpdateClobPair, _impl_._has_bits_);
  static const ::dydxprotocol::clob::ClobPair& clob_pair(const MsgUpdateClobPair* msg);
  static void set_has_clob_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::ClobPair&
MsgUpdateClobPair::_Internal::clob_pair(const MsgUpdateClobPair* msg) {
  return *msg->_impl_.clob_pair_;
}
void MsgUpdateClobPair::clear_clob_pair() {
  if (_impl_.clob_pair_ != nullptr) _impl_.clob_pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgUpdateClobPair::MsgUpdateClobPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateClobPair)
}
MsgUpdateClobPair::MsgUpdateClobPair(const MsgUpdateClobPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUpdateClobPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.clob_pair_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.clob_pair_ = new ::dydxprotocol::clob::ClobPair(*from._impl_.clob_pair_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateClobPair)
}

inline void MsgUpdateClobPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.clob_pair_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgUpdateClobPair::~MsgUpdateClobPair() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgUpdateClobPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUpdateClobPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.clob_pair_;
}

void MsgUpdateClobPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUpdateClobPair::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgUpdateClobPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.clob_pair_ != nullptr);
    _impl_.clob_pair_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateClobPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.clob.MsgUpdateClobPair.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clob_pair(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgUpdateClobPair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgUpdateClobPair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.clob.MsgUpdateClobPair.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::clob_pair(this),
        _Internal::clob_pair(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgUpdateClobPair)
  return target;
}

::size_t MsgUpdateClobPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgUpdateClobPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.clob_pair_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateClobPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUpdateClobPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateClobPair::GetClassData() const { return &_class_data_; }


void MsgUpdateClobPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUpdateClobPair*>(&to_msg);
  auto& from = static_cast<const MsgUpdateClobPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgUpdateClobPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_clob_pair()->::dydxprotocol::clob::ClobPair::MergeFrom(
        from._internal_clob_pair());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUpdateClobPair::CopyFrom(const MsgUpdateClobPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgUpdateClobPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateClobPair::IsInitialized() const {
  return true;
}

void MsgUpdateClobPair::InternalSwap(MsgUpdateClobPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.clob_pair_, other->_impl_.clob_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateClobPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[8]);
}
// ===================================================================

class MsgUpdateClobPairResponse::_Internal {
 public:
};

MsgUpdateClobPairResponse::MsgUpdateClobPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateClobPairResponse)
}
MsgUpdateClobPairResponse::MsgUpdateClobPairResponse(const MsgUpdateClobPairResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgUpdateClobPairResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateClobPairResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateClobPairResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateClobPairResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateClobPairResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[9]);
}
// ===================================================================

class OperationRaw::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::OperationRaw, _impl_._oneof_case_);
  static const ::dydxprotocol::clob::ClobMatch& match(const OperationRaw* msg);
  static const ::dydxprotocol::clob::OrderRemoval& order_removal(const OperationRaw* msg);
};

const ::dydxprotocol::clob::ClobMatch&
OperationRaw::_Internal::match(const OperationRaw* msg) {
  return *msg->_impl_.operation_.match_;
}
const ::dydxprotocol::clob::OrderRemoval&
OperationRaw::_Internal::order_removal(const OperationRaw* msg) {
  return *msg->_impl_.operation_.order_removal_;
}
void OperationRaw::set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OperationRaw.match)
}
void OperationRaw::clear_match() {
  if (operation_case() == kMatch) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.match_;
    }
    clear_has_operation();
  }
}
void OperationRaw::set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (order_removal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_removal));
    if (message_arena != submessage_arena) {
      order_removal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_removal, submessage_arena);
    }
    set_has_order_removal();
    _impl_.operation_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OperationRaw.order_removal)
}
void OperationRaw::clear_order_removal() {
  if (operation_case() == kOrderRemoval) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.order_removal_;
    }
    clear_has_operation();
  }
}
OperationRaw::OperationRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.OperationRaw)
}
OperationRaw::OperationRaw(const OperationRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationRaw* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_set_short_term_order_placement(from._internal_short_term_order_placement());
      break;
    }
    case kOrderRemoval: {
      _this->_internal_mutable_order_removal()->::dydxprotocol::clob::OrderRemoval::MergeFrom(
          from._internal_order_removal());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.OperationRaw)
}

inline void OperationRaw::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_operation();
}

OperationRaw::~OperationRaw() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.OperationRaw)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationRaw::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void OperationRaw::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationRaw::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.OperationRaw)
  switch (operation_case()) {
    case kMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.match_;
      }
      break;
    }
    case kShortTermOrderPlacement: {
      _impl_.operation_.short_term_order_placement_.Destroy();
      break;
    }
    case kOrderRemoval: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.order_removal_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}


void OperationRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.OperationRaw)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationRaw::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ClobMatch match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes short_term_order_placement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_short_term_order_placement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.OrderRemoval order_removal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_removal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OperationRaw::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.OperationRaw)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (operation_case()) {
    case kMatch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::match(this),
          _Internal::match(this).GetCachedSize(), target, stream);
      break;
    }
    case kShortTermOrderPlacement: {
      const std::string& _s = this->_internal_short_term_order_placement();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
      break;
    }
    case kOrderRemoval: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::order_removal(this),
          _Internal::order_removal(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.OperationRaw)
  return target;
}

::size_t OperationRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.OperationRaw)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .dydxprotocol.clob.ClobMatch match = 1;
    case kMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.match_);
      break;
    }
    // bytes short_term_order_placement = 2;
    case kShortTermOrderPlacement: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_short_term_order_placement());
      break;
    }
    // .dydxprotocol.clob.OrderRemoval order_removal = 3;
    case kOrderRemoval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.order_removal_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationRaw::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationRaw::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationRaw::GetClassData() const { return &_class_data_; }


void OperationRaw::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationRaw*>(&to_msg);
  auto& from = static_cast<const OperationRaw&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.OperationRaw)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_set_short_term_order_placement(from._internal_short_term_order_placement());
      break;
    }
    case kOrderRemoval: {
      _this->_internal_mutable_order_removal()->::dydxprotocol::clob::OrderRemoval::MergeFrom(
          from._internal_order_removal());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationRaw::CopyFrom(const OperationRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.OperationRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationRaw::IsInitialized() const {
  return true;
}

void OperationRaw::InternalSwap(OperationRaw* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationRaw::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[10]);
}
// ===================================================================

class MsgUpdateEquityTierLimitConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgUpdateEquityTierLimitConfiguration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgUpdateEquityTierLimitConfiguration, _impl_._has_bits_);
  static const ::dydxprotocol::clob::EquityTierLimitConfiguration& equity_tier_limit_config(const MsgUpdateEquityTierLimitConfiguration* msg);
  static void set_has_equity_tier_limit_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::EquityTierLimitConfiguration&
MsgUpdateEquityTierLimitConfiguration::_Internal::equity_tier_limit_config(const MsgUpdateEquityTierLimitConfiguration* msg) {
  return *msg->_impl_.equity_tier_limit_config_;
}
void MsgUpdateEquityTierLimitConfiguration::clear_equity_tier_limit_config() {
  if (_impl_.equity_tier_limit_config_ != nullptr) _impl_.equity_tier_limit_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgUpdateEquityTierLimitConfiguration::MsgUpdateEquityTierLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
}
MsgUpdateEquityTierLimitConfiguration::MsgUpdateEquityTierLimitConfiguration(const MsgUpdateEquityTierLimitConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUpdateEquityTierLimitConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.equity_tier_limit_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.equity_tier_limit_config_ = new ::dydxprotocol::clob::EquityTierLimitConfiguration(*from._impl_.equity_tier_limit_config_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
}

inline void MsgUpdateEquityTierLimitConfiguration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.equity_tier_limit_config_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgUpdateEquityTierLimitConfiguration::~MsgUpdateEquityTierLimitConfiguration() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUpdateEquityTierLimitConfiguration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.equity_tier_limit_config_;
}

void MsgUpdateEquityTierLimitConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUpdateEquityTierLimitConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.equity_tier_limit_config_ != nullptr);
    _impl_.equity_tier_limit_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateEquityTierLimitConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_equity_tier_limit_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgUpdateEquityTierLimitConfiguration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::equity_tier_limit_config(this),
        _Internal::equity_tier_limit_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  return target;
}

::size_t MsgUpdateEquityTierLimitConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.equity_tier_limit_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateEquityTierLimitConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUpdateEquityTierLimitConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateEquityTierLimitConfiguration::GetClassData() const { return &_class_data_; }


void MsgUpdateEquityTierLimitConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUpdateEquityTierLimitConfiguration*>(&to_msg);
  auto& from = static_cast<const MsgUpdateEquityTierLimitConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_equity_tier_limit_config()->::dydxprotocol::clob::EquityTierLimitConfiguration::MergeFrom(
        from._internal_equity_tier_limit_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUpdateEquityTierLimitConfiguration::CopyFrom(const MsgUpdateEquityTierLimitConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateEquityTierLimitConfiguration::IsInitialized() const {
  return true;
}

void MsgUpdateEquityTierLimitConfiguration::InternalSwap(MsgUpdateEquityTierLimitConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.equity_tier_limit_config_, other->_impl_.equity_tier_limit_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateEquityTierLimitConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[11]);
}
// ===================================================================

class MsgUpdateEquityTierLimitConfigurationResponse::_Internal {
 public:
};

MsgUpdateEquityTierLimitConfigurationResponse::MsgUpdateEquityTierLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateEquityTierLimitConfigurationResponse)
}
MsgUpdateEquityTierLimitConfigurationResponse::MsgUpdateEquityTierLimitConfigurationResponse(const MsgUpdateEquityTierLimitConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgUpdateEquityTierLimitConfigurationResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateEquityTierLimitConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateEquityTierLimitConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateEquityTierLimitConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateEquityTierLimitConfigurationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[12]);
}
// ===================================================================

class MsgUpdateBlockRateLimitConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgUpdateBlockRateLimitConfiguration>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgUpdateBlockRateLimitConfiguration, _impl_._has_bits_);
  static const ::dydxprotocol::clob::BlockRateLimitConfiguration& block_rate_limit_config(const MsgUpdateBlockRateLimitConfiguration* msg);
  static void set_has_block_rate_limit_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::BlockRateLimitConfiguration&
MsgUpdateBlockRateLimitConfiguration::_Internal::block_rate_limit_config(const MsgUpdateBlockRateLimitConfiguration* msg) {
  return *msg->_impl_.block_rate_limit_config_;
}
void MsgUpdateBlockRateLimitConfiguration::clear_block_rate_limit_config() {
  if (_impl_.block_rate_limit_config_ != nullptr) _impl_.block_rate_limit_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgUpdateBlockRateLimitConfiguration::MsgUpdateBlockRateLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
}
MsgUpdateBlockRateLimitConfiguration::MsgUpdateBlockRateLimitConfiguration(const MsgUpdateBlockRateLimitConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUpdateBlockRateLimitConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.block_rate_limit_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_rate_limit_config_ = new ::dydxprotocol::clob::BlockRateLimitConfiguration(*from._impl_.block_rate_limit_config_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
}

inline void MsgUpdateBlockRateLimitConfiguration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.block_rate_limit_config_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgUpdateBlockRateLimitConfiguration::~MsgUpdateBlockRateLimitConfiguration() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUpdateBlockRateLimitConfiguration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.block_rate_limit_config_;
}

void MsgUpdateBlockRateLimitConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUpdateBlockRateLimitConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.block_rate_limit_config_ != nullptr);
    _impl_.block_rate_limit_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateBlockRateLimitConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.BlockRateLimitConfiguration block_rate_limit_config = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_rate_limit_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgUpdateBlockRateLimitConfiguration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.BlockRateLimitConfiguration block_rate_limit_config = 3 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block_rate_limit_config(this),
        _Internal::block_rate_limit_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  return target;
}

::size_t MsgUpdateBlockRateLimitConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .dydxprotocol.clob.BlockRateLimitConfiguration block_rate_limit_config = 3 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_rate_limit_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateBlockRateLimitConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUpdateBlockRateLimitConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateBlockRateLimitConfiguration::GetClassData() const { return &_class_data_; }


void MsgUpdateBlockRateLimitConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUpdateBlockRateLimitConfiguration*>(&to_msg);
  auto& from = static_cast<const MsgUpdateBlockRateLimitConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_block_rate_limit_config()->::dydxprotocol::clob::BlockRateLimitConfiguration::MergeFrom(
        from._internal_block_rate_limit_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUpdateBlockRateLimitConfiguration::CopyFrom(const MsgUpdateBlockRateLimitConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateBlockRateLimitConfiguration::IsInitialized() const {
  return true;
}

void MsgUpdateBlockRateLimitConfiguration::InternalSwap(MsgUpdateBlockRateLimitConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.block_rate_limit_config_, other->_impl_.block_rate_limit_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateBlockRateLimitConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[13]);
}
// ===================================================================

class MsgUpdateBlockRateLimitConfigurationResponse::_Internal {
 public:
};

MsgUpdateBlockRateLimitConfigurationResponse::MsgUpdateBlockRateLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateBlockRateLimitConfigurationResponse)
}
MsgUpdateBlockRateLimitConfigurationResponse::MsgUpdateBlockRateLimitConfigurationResponse(const MsgUpdateBlockRateLimitConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgUpdateBlockRateLimitConfigurationResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateBlockRateLimitConfigurationResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateBlockRateLimitConfigurationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateBlockRateLimitConfigurationResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateBlockRateLimitConfigurationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[14]);
}
// ===================================================================

class MsgUpdateLiquidationsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgUpdateLiquidationsConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgUpdateLiquidationsConfig, _impl_._has_bits_);
  static const ::dydxprotocol::clob::LiquidationsConfig& liquidations_config(const MsgUpdateLiquidationsConfig* msg);
  static void set_has_liquidations_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::clob::LiquidationsConfig&
MsgUpdateLiquidationsConfig::_Internal::liquidations_config(const MsgUpdateLiquidationsConfig* msg) {
  return *msg->_impl_.liquidations_config_;
}
void MsgUpdateLiquidationsConfig::clear_liquidations_config() {
  if (_impl_.liquidations_config_ != nullptr) _impl_.liquidations_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgUpdateLiquidationsConfig::MsgUpdateLiquidationsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
}
MsgUpdateLiquidationsConfig::MsgUpdateLiquidationsConfig(const MsgUpdateLiquidationsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUpdateLiquidationsConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.liquidations_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.liquidations_config_ = new ::dydxprotocol::clob::LiquidationsConfig(*from._impl_.liquidations_config_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
}

inline void MsgUpdateLiquidationsConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.liquidations_config_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgUpdateLiquidationsConfig::~MsgUpdateLiquidationsConfig() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUpdateLiquidationsConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.liquidations_config_;
}

void MsgUpdateLiquidationsConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUpdateLiquidationsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.liquidations_config_ != nullptr);
    _impl_.liquidations_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateLiquidationsConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.LiquidationsConfig liquidations_config = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_liquidations_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgUpdateLiquidationsConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.LiquidationsConfig liquidations_config = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::liquidations_config(this),
        _Internal::liquidations_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  return target;
}

::size_t MsgUpdateLiquidationsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .dydxprotocol.clob.LiquidationsConfig liquidations_config = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.liquidations_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateLiquidationsConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUpdateLiquidationsConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateLiquidationsConfig::GetClassData() const { return &_class_data_; }


void MsgUpdateLiquidationsConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUpdateLiquidationsConfig*>(&to_msg);
  auto& from = static_cast<const MsgUpdateLiquidationsConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_liquidations_config()->::dydxprotocol::clob::LiquidationsConfig::MergeFrom(
        from._internal_liquidations_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUpdateLiquidationsConfig::CopyFrom(const MsgUpdateLiquidationsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateLiquidationsConfig::IsInitialized() const {
  return true;
}

void MsgUpdateLiquidationsConfig::InternalSwap(MsgUpdateLiquidationsConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.liquidations_config_, other->_impl_.liquidations_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateLiquidationsConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[15]);
}
// ===================================================================

class MsgUpdateLiquidationsConfigResponse::_Internal {
 public:
};

MsgUpdateLiquidationsConfigResponse::MsgUpdateLiquidationsConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MsgUpdateLiquidationsConfigResponse)
}
MsgUpdateLiquidationsConfigResponse::MsgUpdateLiquidationsConfigResponse(const MsgUpdateLiquidationsConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgUpdateLiquidationsConfigResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MsgUpdateLiquidationsConfigResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateLiquidationsConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateLiquidationsConfigResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateLiquidationsConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2ftx_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2ftx_2eproto[16]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgCreateClobPair*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgCreateClobPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgCreateClobPair >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgCreateClobPairResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgCreateClobPairResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgCreateClobPairResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgProposedOperations*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgProposedOperations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgProposedOperations >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgProposedOperationsResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgProposedOperationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgProposedOperationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgPlaceOrder*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgPlaceOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgPlaceOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgPlaceOrderResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgPlaceOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgPlaceOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgCancelOrder*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgCancelOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgCancelOrder >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgCancelOrderResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgCancelOrderResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgCancelOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateClobPair*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateClobPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateClobPair >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateClobPairResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateClobPairResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateClobPairResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::OperationRaw*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::OperationRaw >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::OperationRaw >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateLiquidationsConfig*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateLiquidationsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateLiquidationsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
