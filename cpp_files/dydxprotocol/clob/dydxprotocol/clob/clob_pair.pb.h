// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/clob_pair.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fclob_5fpair_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fclob_5fpair_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fclob_5fpair_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fclob_5fpair_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto;
namespace dydxprotocol {
namespace clob {
class ClobPair;
struct ClobPairDefaultTypeInternal;
extern ClobPairDefaultTypeInternal _ClobPair_default_instance_;
class PerpetualClobMetadata;
struct PerpetualClobMetadataDefaultTypeInternal;
extern PerpetualClobMetadataDefaultTypeInternal _PerpetualClobMetadata_default_instance_;
class SpotClobMetadata;
struct SpotClobMetadataDefaultTypeInternal;
extern SpotClobMetadataDefaultTypeInternal _SpotClobMetadata_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::ClobPair* Arena::CreateMaybeMessage<::dydxprotocol::clob::ClobPair>(Arena*);
template <>
::dydxprotocol::clob::PerpetualClobMetadata* Arena::CreateMaybeMessage<::dydxprotocol::clob::PerpetualClobMetadata>(Arena*);
template <>
::dydxprotocol::clob::SpotClobMetadata* Arena::CreateMaybeMessage<::dydxprotocol::clob::SpotClobMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {
enum ClobPair_Status : int {
  ClobPair_Status_STATUS_UNSPECIFIED = 0,
  ClobPair_Status_STATUS_ACTIVE = 1,
  ClobPair_Status_STATUS_PAUSED = 2,
  ClobPair_Status_STATUS_CANCEL_ONLY = 3,
  ClobPair_Status_STATUS_POST_ONLY = 4,
  ClobPair_Status_STATUS_INITIALIZING = 5,
  ClobPair_Status_ClobPair_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClobPair_Status_ClobPair_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ClobPair_Status_IsValid(int value);
constexpr ClobPair_Status ClobPair_Status_Status_MIN = static_cast<ClobPair_Status>(0);
constexpr ClobPair_Status ClobPair_Status_Status_MAX = static_cast<ClobPair_Status>(5);
constexpr int ClobPair_Status_Status_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ClobPair_Status_descriptor();
template <typename T>
const std::string& ClobPair_Status_Name(T value) {
  static_assert(std::is_same<T, ClobPair_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return ClobPair_Status_Name(static_cast<ClobPair_Status>(value));
}
template <>
inline const std::string& ClobPair_Status_Name(ClobPair_Status value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ClobPair_Status_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ClobPair_Status_Parse(absl::string_view name, ClobPair_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClobPair_Status>(
      ClobPair_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PerpetualClobMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.PerpetualClobMetadata) */ {
 public:
  inline PerpetualClobMetadata() : PerpetualClobMetadata(nullptr) {}
  ~PerpetualClobMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualClobMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualClobMetadata(const PerpetualClobMetadata& from);
  PerpetualClobMetadata(PerpetualClobMetadata&& from) noexcept
    : PerpetualClobMetadata() {
    *this = ::std::move(from);
  }

  inline PerpetualClobMetadata& operator=(const PerpetualClobMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualClobMetadata& operator=(PerpetualClobMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualClobMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualClobMetadata* internal_default_instance() {
    return reinterpret_cast<const PerpetualClobMetadata*>(
               &_PerpetualClobMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerpetualClobMetadata& a, PerpetualClobMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualClobMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualClobMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualClobMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualClobMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualClobMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualClobMetadata& from) {
    PerpetualClobMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualClobMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.PerpetualClobMetadata";
  }
  protected:
  explicit PerpetualClobMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerpetualIdFieldNumber = 1,
  };
  // uint32 perpetual_id = 1;
  void clear_perpetual_id() ;
  ::uint32_t perpetual_id() const;
  void set_perpetual_id(::uint32_t value);

  private:
  ::uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.PerpetualClobMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t perpetual_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fclob_5fpair_2eproto;
};// -------------------------------------------------------------------

class SpotClobMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.SpotClobMetadata) */ {
 public:
  inline SpotClobMetadata() : SpotClobMetadata(nullptr) {}
  ~SpotClobMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SpotClobMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotClobMetadata(const SpotClobMetadata& from);
  SpotClobMetadata(SpotClobMetadata&& from) noexcept
    : SpotClobMetadata() {
    *this = ::std::move(from);
  }

  inline SpotClobMetadata& operator=(const SpotClobMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotClobMetadata& operator=(SpotClobMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpotClobMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotClobMetadata* internal_default_instance() {
    return reinterpret_cast<const SpotClobMetadata*>(
               &_SpotClobMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SpotClobMetadata& a, SpotClobMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotClobMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotClobMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotClobMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotClobMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpotClobMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpotClobMetadata& from) {
    SpotClobMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpotClobMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.SpotClobMetadata";
  }
  protected:
  explicit SpotClobMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseAssetIdFieldNumber = 1,
    kQuoteAssetIdFieldNumber = 2,
  };
  // uint32 base_asset_id = 1;
  void clear_base_asset_id() ;
  ::uint32_t base_asset_id() const;
  void set_base_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_base_asset_id() const;
  void _internal_set_base_asset_id(::uint32_t value);

  public:
  // uint32 quote_asset_id = 2;
  void clear_quote_asset_id() ;
  ::uint32_t quote_asset_id() const;
  void set_quote_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_quote_asset_id() const;
  void _internal_set_quote_asset_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.SpotClobMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t base_asset_id_;
    ::uint32_t quote_asset_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fclob_5fpair_2eproto;
};// -------------------------------------------------------------------

class ClobPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.ClobPair) */ {
 public:
  inline ClobPair() : ClobPair(nullptr) {}
  ~ClobPair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClobPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClobPair(const ClobPair& from);
  ClobPair(ClobPair&& from) noexcept
    : ClobPair() {
    *this = ::std::move(from);
  }

  inline ClobPair& operator=(const ClobPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClobPair& operator=(ClobPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClobPair& default_instance() {
    return *internal_default_instance();
  }
  enum MetadataCase {
    kPerpetualClobMetadata = 2,
    kSpotClobMetadata = 3,
    METADATA_NOT_SET = 0,
  };

  static inline const ClobPair* internal_default_instance() {
    return reinterpret_cast<const ClobPair*>(
               &_ClobPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClobPair& a, ClobPair& b) {
    a.Swap(&b);
  }
  inline void Swap(ClobPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClobPair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClobPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClobPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClobPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClobPair& from) {
    ClobPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClobPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.ClobPair";
  }
  protected:
  explicit ClobPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = ClobPair_Status;
  static constexpr Status STATUS_UNSPECIFIED = ClobPair_Status_STATUS_UNSPECIFIED;
  static constexpr Status STATUS_ACTIVE = ClobPair_Status_STATUS_ACTIVE;
  static constexpr Status STATUS_PAUSED = ClobPair_Status_STATUS_PAUSED;
  static constexpr Status STATUS_CANCEL_ONLY = ClobPair_Status_STATUS_CANCEL_ONLY;
  static constexpr Status STATUS_POST_ONLY = ClobPair_Status_STATUS_POST_ONLY;
  static constexpr Status STATUS_INITIALIZING = ClobPair_Status_STATUS_INITIALIZING;
  static inline bool Status_IsValid(int value) {
    return ClobPair_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = ClobPair_Status_Status_MIN;
  static constexpr Status Status_MAX = ClobPair_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = ClobPair_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
    return ClobPair_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return ClobPair_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return ClobPair_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSubticksPerTickFieldNumber = 5,
    kStepBaseQuantumsFieldNumber = 4,
    kQuantumConversionExponentFieldNumber = 6,
    kStatusFieldNumber = 7,
    kPerpetualClobMetadataFieldNumber = 2,
    kSpotClobMetadataFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 subticks_per_tick = 5;
  void clear_subticks_per_tick() ;
  ::uint32_t subticks_per_tick() const;
  void set_subticks_per_tick(::uint32_t value);

  private:
  ::uint32_t _internal_subticks_per_tick() const;
  void _internal_set_subticks_per_tick(::uint32_t value);

  public:
  // uint64 step_base_quantums = 4;
  void clear_step_base_quantums() ;
  ::uint64_t step_base_quantums() const;
  void set_step_base_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_step_base_quantums() const;
  void _internal_set_step_base_quantums(::uint64_t value);

  public:
  // sint32 quantum_conversion_exponent = 6;
  void clear_quantum_conversion_exponent() ;
  ::int32_t quantum_conversion_exponent() const;
  void set_quantum_conversion_exponent(::int32_t value);

  private:
  ::int32_t _internal_quantum_conversion_exponent() const;
  void _internal_set_quantum_conversion_exponent(::int32_t value);

  public:
  // .dydxprotocol.clob.ClobPair.Status status = 7;
  void clear_status() ;
  ::dydxprotocol::clob::ClobPair_Status status() const;
  void set_status(::dydxprotocol::clob::ClobPair_Status value);

  private:
  ::dydxprotocol::clob::ClobPair_Status _internal_status() const;
  void _internal_set_status(::dydxprotocol::clob::ClobPair_Status value);

  public:
  // .dydxprotocol.clob.PerpetualClobMetadata perpetual_clob_metadata = 2;
  bool has_perpetual_clob_metadata() const;
  private:
  bool _internal_has_perpetual_clob_metadata() const;

  public:
  void clear_perpetual_clob_metadata() ;
  const ::dydxprotocol::clob::PerpetualClobMetadata& perpetual_clob_metadata() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::PerpetualClobMetadata* release_perpetual_clob_metadata();
  ::dydxprotocol::clob::PerpetualClobMetadata* mutable_perpetual_clob_metadata();
  void set_allocated_perpetual_clob_metadata(::dydxprotocol::clob::PerpetualClobMetadata* perpetual_clob_metadata);
  private:
  const ::dydxprotocol::clob::PerpetualClobMetadata& _internal_perpetual_clob_metadata() const;
  ::dydxprotocol::clob::PerpetualClobMetadata* _internal_mutable_perpetual_clob_metadata();
  public:
  void unsafe_arena_set_allocated_perpetual_clob_metadata(
      ::dydxprotocol::clob::PerpetualClobMetadata* perpetual_clob_metadata);
  ::dydxprotocol::clob::PerpetualClobMetadata* unsafe_arena_release_perpetual_clob_metadata();
  // .dydxprotocol.clob.SpotClobMetadata spot_clob_metadata = 3;
  bool has_spot_clob_metadata() const;
  private:
  bool _internal_has_spot_clob_metadata() const;

  public:
  void clear_spot_clob_metadata() ;
  const ::dydxprotocol::clob::SpotClobMetadata& spot_clob_metadata() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::SpotClobMetadata* release_spot_clob_metadata();
  ::dydxprotocol::clob::SpotClobMetadata* mutable_spot_clob_metadata();
  void set_allocated_spot_clob_metadata(::dydxprotocol::clob::SpotClobMetadata* spot_clob_metadata);
  private:
  const ::dydxprotocol::clob::SpotClobMetadata& _internal_spot_clob_metadata() const;
  ::dydxprotocol::clob::SpotClobMetadata* _internal_mutable_spot_clob_metadata();
  public:
  void unsafe_arena_set_allocated_spot_clob_metadata(
      ::dydxprotocol::clob::SpotClobMetadata* spot_clob_metadata);
  ::dydxprotocol::clob::SpotClobMetadata* unsafe_arena_release_spot_clob_metadata();
  void clear_metadata();
  MetadataCase metadata_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.ClobPair)
 private:
  class _Internal;
  void set_has_perpetual_clob_metadata();
  void set_has_spot_clob_metadata();

  inline bool has_metadata() const;
  inline void clear_has_metadata();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    ::uint32_t subticks_per_tick_;
    ::uint64_t step_base_quantums_;
    ::int32_t quantum_conversion_exponent_;
    int status_;
    union MetadataUnion {
      constexpr MetadataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::clob::PerpetualClobMetadata* perpetual_clob_metadata_;
      ::dydxprotocol::clob::SpotClobMetadata* spot_clob_metadata_;
    } metadata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fclob_5fpair_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PerpetualClobMetadata

// uint32 perpetual_id = 1;
inline void PerpetualClobMetadata::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline ::uint32_t PerpetualClobMetadata::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.PerpetualClobMetadata.perpetual_id)
  return _internal_perpetual_id();
}
inline void PerpetualClobMetadata::set_perpetual_id(::uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.PerpetualClobMetadata.perpetual_id)
}
inline ::uint32_t PerpetualClobMetadata::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline void PerpetualClobMetadata::_internal_set_perpetual_id(::uint32_t value) {
  ;
  _impl_.perpetual_id_ = value;
}

// -------------------------------------------------------------------

// SpotClobMetadata

// uint32 base_asset_id = 1;
inline void SpotClobMetadata::clear_base_asset_id() {
  _impl_.base_asset_id_ = 0u;
}
inline ::uint32_t SpotClobMetadata::base_asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SpotClobMetadata.base_asset_id)
  return _internal_base_asset_id();
}
inline void SpotClobMetadata::set_base_asset_id(::uint32_t value) {
  _internal_set_base_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SpotClobMetadata.base_asset_id)
}
inline ::uint32_t SpotClobMetadata::_internal_base_asset_id() const {
  return _impl_.base_asset_id_;
}
inline void SpotClobMetadata::_internal_set_base_asset_id(::uint32_t value) {
  ;
  _impl_.base_asset_id_ = value;
}

// uint32 quote_asset_id = 2;
inline void SpotClobMetadata::clear_quote_asset_id() {
  _impl_.quote_asset_id_ = 0u;
}
inline ::uint32_t SpotClobMetadata::quote_asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SpotClobMetadata.quote_asset_id)
  return _internal_quote_asset_id();
}
inline void SpotClobMetadata::set_quote_asset_id(::uint32_t value) {
  _internal_set_quote_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SpotClobMetadata.quote_asset_id)
}
inline ::uint32_t SpotClobMetadata::_internal_quote_asset_id() const {
  return _impl_.quote_asset_id_;
}
inline void SpotClobMetadata::_internal_set_quote_asset_id(::uint32_t value) {
  ;
  _impl_.quote_asset_id_ = value;
}

// -------------------------------------------------------------------

// ClobPair

// uint32 id = 1;
inline void ClobPair::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t ClobPair::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.id)
  return _internal_id();
}
inline void ClobPair::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.ClobPair.id)
}
inline ::uint32_t ClobPair::_internal_id() const {
  return _impl_.id_;
}
inline void ClobPair::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// .dydxprotocol.clob.PerpetualClobMetadata perpetual_clob_metadata = 2;
inline bool ClobPair::has_perpetual_clob_metadata() const {
  return metadata_case() == kPerpetualClobMetadata;
}
inline bool ClobPair::_internal_has_perpetual_clob_metadata() const {
  return metadata_case() == kPerpetualClobMetadata;
}
inline void ClobPair::set_has_perpetual_clob_metadata() {
  _impl_._oneof_case_[0] = kPerpetualClobMetadata;
}
inline void ClobPair::clear_perpetual_clob_metadata() {
  if (metadata_case() == kPerpetualClobMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.metadata_.perpetual_clob_metadata_;
    }
    clear_has_metadata();
  }
}
inline ::dydxprotocol::clob::PerpetualClobMetadata* ClobPair::release_perpetual_clob_metadata() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ClobPair.perpetual_clob_metadata)
  if (metadata_case() == kPerpetualClobMetadata) {
    clear_has_metadata();
    ::dydxprotocol::clob::PerpetualClobMetadata* temp = _impl_.metadata_.perpetual_clob_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.metadata_.perpetual_clob_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::PerpetualClobMetadata& ClobPair::_internal_perpetual_clob_metadata() const {
  return metadata_case() == kPerpetualClobMetadata
      ? *_impl_.metadata_.perpetual_clob_metadata_
      : reinterpret_cast<::dydxprotocol::clob::PerpetualClobMetadata&>(::dydxprotocol::clob::_PerpetualClobMetadata_default_instance_);
}
inline const ::dydxprotocol::clob::PerpetualClobMetadata& ClobPair::perpetual_clob_metadata() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.perpetual_clob_metadata)
  return _internal_perpetual_clob_metadata();
}
inline ::dydxprotocol::clob::PerpetualClobMetadata* ClobPair::unsafe_arena_release_perpetual_clob_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.ClobPair.perpetual_clob_metadata)
  if (metadata_case() == kPerpetualClobMetadata) {
    clear_has_metadata();
    ::dydxprotocol::clob::PerpetualClobMetadata* temp = _impl_.metadata_.perpetual_clob_metadata_;
    _impl_.metadata_.perpetual_clob_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClobPair::unsafe_arena_set_allocated_perpetual_clob_metadata(::dydxprotocol::clob::PerpetualClobMetadata* perpetual_clob_metadata) {
  clear_metadata();
  if (perpetual_clob_metadata) {
    set_has_perpetual_clob_metadata();
    _impl_.metadata_.perpetual_clob_metadata_ = perpetual_clob_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ClobPair.perpetual_clob_metadata)
}
inline ::dydxprotocol::clob::PerpetualClobMetadata* ClobPair::_internal_mutable_perpetual_clob_metadata() {
  if (metadata_case() != kPerpetualClobMetadata) {
    clear_metadata();
    set_has_perpetual_clob_metadata();
    _impl_.metadata_.perpetual_clob_metadata_ = CreateMaybeMessage< ::dydxprotocol::clob::PerpetualClobMetadata >(GetArenaForAllocation());
  }
  return _impl_.metadata_.perpetual_clob_metadata_;
}
inline ::dydxprotocol::clob::PerpetualClobMetadata* ClobPair::mutable_perpetual_clob_metadata() {
  ::dydxprotocol::clob::PerpetualClobMetadata* _msg = _internal_mutable_perpetual_clob_metadata();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ClobPair.perpetual_clob_metadata)
  return _msg;
}

// .dydxprotocol.clob.SpotClobMetadata spot_clob_metadata = 3;
inline bool ClobPair::has_spot_clob_metadata() const {
  return metadata_case() == kSpotClobMetadata;
}
inline bool ClobPair::_internal_has_spot_clob_metadata() const {
  return metadata_case() == kSpotClobMetadata;
}
inline void ClobPair::set_has_spot_clob_metadata() {
  _impl_._oneof_case_[0] = kSpotClobMetadata;
}
inline void ClobPair::clear_spot_clob_metadata() {
  if (metadata_case() == kSpotClobMetadata) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.metadata_.spot_clob_metadata_;
    }
    clear_has_metadata();
  }
}
inline ::dydxprotocol::clob::SpotClobMetadata* ClobPair::release_spot_clob_metadata() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.ClobPair.spot_clob_metadata)
  if (metadata_case() == kSpotClobMetadata) {
    clear_has_metadata();
    ::dydxprotocol::clob::SpotClobMetadata* temp = _impl_.metadata_.spot_clob_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.metadata_.spot_clob_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::SpotClobMetadata& ClobPair::_internal_spot_clob_metadata() const {
  return metadata_case() == kSpotClobMetadata
      ? *_impl_.metadata_.spot_clob_metadata_
      : reinterpret_cast<::dydxprotocol::clob::SpotClobMetadata&>(::dydxprotocol::clob::_SpotClobMetadata_default_instance_);
}
inline const ::dydxprotocol::clob::SpotClobMetadata& ClobPair::spot_clob_metadata() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.spot_clob_metadata)
  return _internal_spot_clob_metadata();
}
inline ::dydxprotocol::clob::SpotClobMetadata* ClobPair::unsafe_arena_release_spot_clob_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.ClobPair.spot_clob_metadata)
  if (metadata_case() == kSpotClobMetadata) {
    clear_has_metadata();
    ::dydxprotocol::clob::SpotClobMetadata* temp = _impl_.metadata_.spot_clob_metadata_;
    _impl_.metadata_.spot_clob_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClobPair::unsafe_arena_set_allocated_spot_clob_metadata(::dydxprotocol::clob::SpotClobMetadata* spot_clob_metadata) {
  clear_metadata();
  if (spot_clob_metadata) {
    set_has_spot_clob_metadata();
    _impl_.metadata_.spot_clob_metadata_ = spot_clob_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.ClobPair.spot_clob_metadata)
}
inline ::dydxprotocol::clob::SpotClobMetadata* ClobPair::_internal_mutable_spot_clob_metadata() {
  if (metadata_case() != kSpotClobMetadata) {
    clear_metadata();
    set_has_spot_clob_metadata();
    _impl_.metadata_.spot_clob_metadata_ = CreateMaybeMessage< ::dydxprotocol::clob::SpotClobMetadata >(GetArenaForAllocation());
  }
  return _impl_.metadata_.spot_clob_metadata_;
}
inline ::dydxprotocol::clob::SpotClobMetadata* ClobPair::mutable_spot_clob_metadata() {
  ::dydxprotocol::clob::SpotClobMetadata* _msg = _internal_mutable_spot_clob_metadata();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.ClobPair.spot_clob_metadata)
  return _msg;
}

// uint64 step_base_quantums = 4;
inline void ClobPair::clear_step_base_quantums() {
  _impl_.step_base_quantums_ = ::uint64_t{0u};
}
inline ::uint64_t ClobPair::step_base_quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.step_base_quantums)
  return _internal_step_base_quantums();
}
inline void ClobPair::set_step_base_quantums(::uint64_t value) {
  _internal_set_step_base_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.ClobPair.step_base_quantums)
}
inline ::uint64_t ClobPair::_internal_step_base_quantums() const {
  return _impl_.step_base_quantums_;
}
inline void ClobPair::_internal_set_step_base_quantums(::uint64_t value) {
  ;
  _impl_.step_base_quantums_ = value;
}

// uint32 subticks_per_tick = 5;
inline void ClobPair::clear_subticks_per_tick() {
  _impl_.subticks_per_tick_ = 0u;
}
inline ::uint32_t ClobPair::subticks_per_tick() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.subticks_per_tick)
  return _internal_subticks_per_tick();
}
inline void ClobPair::set_subticks_per_tick(::uint32_t value) {
  _internal_set_subticks_per_tick(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.ClobPair.subticks_per_tick)
}
inline ::uint32_t ClobPair::_internal_subticks_per_tick() const {
  return _impl_.subticks_per_tick_;
}
inline void ClobPair::_internal_set_subticks_per_tick(::uint32_t value) {
  ;
  _impl_.subticks_per_tick_ = value;
}

// sint32 quantum_conversion_exponent = 6;
inline void ClobPair::clear_quantum_conversion_exponent() {
  _impl_.quantum_conversion_exponent_ = 0;
}
inline ::int32_t ClobPair::quantum_conversion_exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.quantum_conversion_exponent)
  return _internal_quantum_conversion_exponent();
}
inline void ClobPair::set_quantum_conversion_exponent(::int32_t value) {
  _internal_set_quantum_conversion_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.ClobPair.quantum_conversion_exponent)
}
inline ::int32_t ClobPair::_internal_quantum_conversion_exponent() const {
  return _impl_.quantum_conversion_exponent_;
}
inline void ClobPair::_internal_set_quantum_conversion_exponent(::int32_t value) {
  ;
  _impl_.quantum_conversion_exponent_ = value;
}

// .dydxprotocol.clob.ClobPair.Status status = 7;
inline void ClobPair::clear_status() {
  _impl_.status_ = 0;
}
inline ::dydxprotocol::clob::ClobPair_Status ClobPair::status() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.ClobPair.status)
  return _internal_status();
}
inline void ClobPair::set_status(::dydxprotocol::clob::ClobPair_Status value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.ClobPair.status)
}
inline ::dydxprotocol::clob::ClobPair_Status ClobPair::_internal_status() const {
  return static_cast<::dydxprotocol::clob::ClobPair_Status>(_impl_.status_);
}
inline void ClobPair::_internal_set_status(::dydxprotocol::clob::ClobPair_Status value) {
  ;
  _impl_.status_ = value;
}

inline bool ClobPair::has_metadata() const {
  return metadata_case() != METADATA_NOT_SET;
}
inline void ClobPair::clear_has_metadata() {
  _impl_._oneof_case_[0] = METADATA_NOT_SET;
}
inline ClobPair::MetadataCase ClobPair::metadata_case() const {
  return ClobPair::MetadataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::dydxprotocol::clob::ClobPair_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::clob::ClobPair_Status>() {
  return ::dydxprotocol::clob::ClobPair_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fclob_5fpair_2eproto_2epb_2eh
