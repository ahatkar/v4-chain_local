// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/liquidations_config.proto

#include "dydxprotocol/clob/liquidations_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR LiquidationsConfig::LiquidationsConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.position_block_limits_)*/nullptr
  , /*decltype(_impl_.subaccount_block_limits_)*/nullptr
  , /*decltype(_impl_.fillable_price_config_)*/nullptr
  , /*decltype(_impl_.max_insurance_fund_quantums_for_deleveraging_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_liquidation_fee_ppm_)*/ 0u
} {}
struct LiquidationsConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiquidationsConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiquidationsConfigDefaultTypeInternal() {}
  union {
    LiquidationsConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiquidationsConfigDefaultTypeInternal _LiquidationsConfig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PositionBlockLimits::PositionBlockLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.min_position_notional_liquidated_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_position_portion_liquidated_ppm_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionBlockLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionBlockLimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionBlockLimitsDefaultTypeInternal() {}
  union {
    PositionBlockLimits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionBlockLimitsDefaultTypeInternal _PositionBlockLimits_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountBlockLimits::SubaccountBlockLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_notional_liquidated_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.max_quantums_insurance_lost_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubaccountBlockLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountBlockLimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountBlockLimitsDefaultTypeInternal() {}
  union {
    SubaccountBlockLimits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountBlockLimitsDefaultTypeInternal _SubaccountBlockLimits_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FillablePriceConfig::FillablePriceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bankruptcy_adjustment_ppm_)*/ 0u

  , /*decltype(_impl_.spread_to_maintenance_margin_ratio_ppm_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FillablePriceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FillablePriceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FillablePriceConfigDefaultTypeInternal() {}
  union {
    FillablePriceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FillablePriceConfigDefaultTypeInternal _FillablePriceConfig_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _impl_.max_insurance_fund_quantums_for_deleveraging_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _impl_.max_liquidation_fee_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _impl_.position_block_limits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _impl_.subaccount_block_limits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::LiquidationsConfig, _impl_.fillable_price_config_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PositionBlockLimits, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PositionBlockLimits, _impl_.min_position_notional_liquidated_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PositionBlockLimits, _impl_.max_position_portion_liquidated_ppm_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::SubaccountBlockLimits, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::SubaccountBlockLimits, _impl_.max_notional_liquidated_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::SubaccountBlockLimits, _impl_.max_quantums_insurance_lost_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::FillablePriceConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::FillablePriceConfig, _impl_.bankruptcy_adjustment_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::FillablePriceConfig, _impl_.spread_to_maintenance_margin_ratio_ppm_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::dydxprotocol::clob::LiquidationsConfig)},
        { 18, -1, -1, sizeof(::dydxprotocol::clob::PositionBlockLimits)},
        { 28, -1, -1, sizeof(::dydxprotocol::clob::SubaccountBlockLimits)},
        { 38, -1, -1, sizeof(::dydxprotocol::clob::FillablePriceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_LiquidationsConfig_default_instance_._instance,
    &::dydxprotocol::clob::_PositionBlockLimits_default_instance_._instance,
    &::dydxprotocol::clob::_SubaccountBlockLimits_default_instance_._instance,
    &::dydxprotocol::clob::_FillablePriceConfig_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+dydxprotocol/clob/liquidations_config."
    "proto\022\021dydxprotocol.clob\032\024gogoproto/gogo"
    ".proto\"\326\002\n\022LiquidationsConfig\0224\n,max_ins"
    "urance_fund_quantums_for_deleveraging\030\001 "
    "\001(\004\022\037\n\027max_liquidation_fee_ppm\030\002 \001(\r\022K\n\025"
    "position_block_limits\030\003 \001(\0132&.dydxprotoc"
    "ol.clob.PositionBlockLimitsB\004\310\336\037\000\022O\n\027sub"
    "account_block_limits\030\004 \001(\0132(.dydxprotoco"
    "l.clob.SubaccountBlockLimitsB\004\310\336\037\000\022K\n\025fi"
    "llable_price_config\030\005 \001(\0132&.dydxprotocol"
    ".clob.FillablePriceConfigB\004\310\336\037\000\"l\n\023Posit"
    "ionBlockLimits\022(\n min_position_notional_"
    "liquidated\030\001 \001(\004\022+\n#max_position_portion"
    "_liquidated_ppm\030\002 \001(\r\"]\n\025SubaccountBlock"
    "Limits\022\037\n\027max_notional_liquidated\030\001 \001(\004\022"
    "#\n\033max_quantums_insurance_lost\030\002 \001(\004\"h\n\023"
    "FillablePriceConfig\022!\n\031bankruptcy_adjust"
    "ment_ppm\030\001 \001(\r\022.\n&spread_to_maintenance_"
    "margin_ratio_ppm\030\002 \001(\rB8Z6github.com/dyd"
    "xprotocol/v4-chain/protocol/x/clob/types"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto = {
    false,
    false,
    808,
    descriptor_table_protodef_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto,
    "dydxprotocol/clob/liquidations_config.proto",
    &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto(&descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class LiquidationsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<LiquidationsConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LiquidationsConfig, _impl_._has_bits_);
  static const ::dydxprotocol::clob::PositionBlockLimits& position_block_limits(const LiquidationsConfig* msg);
  static void set_has_position_block_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dydxprotocol::clob::SubaccountBlockLimits& subaccount_block_limits(const LiquidationsConfig* msg);
  static void set_has_subaccount_block_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::dydxprotocol::clob::FillablePriceConfig& fillable_price_config(const LiquidationsConfig* msg);
  static void set_has_fillable_price_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::dydxprotocol::clob::PositionBlockLimits&
LiquidationsConfig::_Internal::position_block_limits(const LiquidationsConfig* msg) {
  return *msg->_impl_.position_block_limits_;
}
const ::dydxprotocol::clob::SubaccountBlockLimits&
LiquidationsConfig::_Internal::subaccount_block_limits(const LiquidationsConfig* msg) {
  return *msg->_impl_.subaccount_block_limits_;
}
const ::dydxprotocol::clob::FillablePriceConfig&
LiquidationsConfig::_Internal::fillable_price_config(const LiquidationsConfig* msg) {
  return *msg->_impl_.fillable_price_config_;
}
LiquidationsConfig::LiquidationsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.LiquidationsConfig)
}
LiquidationsConfig::LiquidationsConfig(const LiquidationsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiquidationsConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_block_limits_){nullptr}
    , decltype(_impl_.subaccount_block_limits_){nullptr}
    , decltype(_impl_.fillable_price_config_){nullptr}
    , decltype(_impl_.max_insurance_fund_quantums_for_deleveraging_) {}

    , decltype(_impl_.max_liquidation_fee_ppm_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.position_block_limits_ = new ::dydxprotocol::clob::PositionBlockLimits(*from._impl_.position_block_limits_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.subaccount_block_limits_ = new ::dydxprotocol::clob::SubaccountBlockLimits(*from._impl_.subaccount_block_limits_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.fillable_price_config_ = new ::dydxprotocol::clob::FillablePriceConfig(*from._impl_.fillable_price_config_);
  }
  ::memcpy(&_impl_.max_insurance_fund_quantums_for_deleveraging_, &from._impl_.max_insurance_fund_quantums_for_deleveraging_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.max_liquidation_fee_ppm_) -
    reinterpret_cast<char*>(&_impl_.max_insurance_fund_quantums_for_deleveraging_)) + sizeof(_impl_.max_liquidation_fee_ppm_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.LiquidationsConfig)
}

inline void LiquidationsConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.position_block_limits_){nullptr}
    , decltype(_impl_.subaccount_block_limits_){nullptr}
    , decltype(_impl_.fillable_price_config_){nullptr}
    , decltype(_impl_.max_insurance_fund_quantums_for_deleveraging_) { ::uint64_t{0u} }

    , decltype(_impl_.max_liquidation_fee_ppm_) { 0u }

  };
}

LiquidationsConfig::~LiquidationsConfig() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.LiquidationsConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiquidationsConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_block_limits_;
  if (this != internal_default_instance()) delete _impl_.subaccount_block_limits_;
  if (this != internal_default_instance()) delete _impl_.fillable_price_config_;
}

void LiquidationsConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiquidationsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.LiquidationsConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_block_limits_ != nullptr);
      _impl_.position_block_limits_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.subaccount_block_limits_ != nullptr);
      _impl_.subaccount_block_limits_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.fillable_price_config_ != nullptr);
      _impl_.fillable_price_config_->Clear();
    }
  }
  ::memset(&_impl_.max_insurance_fund_quantums_for_deleveraging_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_liquidation_fee_ppm_) -
      reinterpret_cast<char*>(&_impl_.max_insurance_fund_quantums_for_deleveraging_)) + sizeof(_impl_.max_liquidation_fee_ppm_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidationsConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 max_insurance_fund_quantums_for_deleveraging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.max_insurance_fund_quantums_for_deleveraging_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 max_liquidation_fee_ppm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_liquidation_fee_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.PositionBlockLimits position_block_limits = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position_block_limits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.SubaccountBlockLimits subaccount_block_limits = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subaccount_block_limits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.FillablePriceConfig fillable_price_config = 5 [(.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fillable_price_config(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LiquidationsConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.LiquidationsConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_insurance_fund_quantums_for_deleveraging = 1;
  if (this->_internal_max_insurance_fund_quantums_for_deleveraging() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_max_insurance_fund_quantums_for_deleveraging(), target);
  }

  // uint32 max_liquidation_fee_ppm = 2;
  if (this->_internal_max_liquidation_fee_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_liquidation_fee_ppm(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.clob.PositionBlockLimits position_block_limits = 3 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position_block_limits(this),
        _Internal::position_block_limits(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.SubaccountBlockLimits subaccount_block_limits = 4 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::subaccount_block_limits(this),
        _Internal::subaccount_block_limits(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.clob.FillablePriceConfig fillable_price_config = 5 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fillable_price_config(this),
        _Internal::fillable_price_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.LiquidationsConfig)
  return target;
}

::size_t LiquidationsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.LiquidationsConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .dydxprotocol.clob.PositionBlockLimits position_block_limits = 3 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.position_block_limits_);
    }

    // .dydxprotocol.clob.SubaccountBlockLimits subaccount_block_limits = 4 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.subaccount_block_limits_);
    }

    // .dydxprotocol.clob.FillablePriceConfig fillable_price_config = 5 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.fillable_price_config_);
    }

  }
  // uint64 max_insurance_fund_quantums_for_deleveraging = 1;
  if (this->_internal_max_insurance_fund_quantums_for_deleveraging() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_insurance_fund_quantums_for_deleveraging());
  }

  // uint32 max_liquidation_fee_ppm = 2;
  if (this->_internal_max_liquidation_fee_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_liquidation_fee_ppm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiquidationsConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiquidationsConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiquidationsConfig::GetClassData() const { return &_class_data_; }


void LiquidationsConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiquidationsConfig*>(&to_msg);
  auto& from = static_cast<const LiquidationsConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.LiquidationsConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position_block_limits()->::dydxprotocol::clob::PositionBlockLimits::MergeFrom(
          from._internal_position_block_limits());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_subaccount_block_limits()->::dydxprotocol::clob::SubaccountBlockLimits::MergeFrom(
          from._internal_subaccount_block_limits());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_fillable_price_config()->::dydxprotocol::clob::FillablePriceConfig::MergeFrom(
          from._internal_fillable_price_config());
    }
  }
  if (from._internal_max_insurance_fund_quantums_for_deleveraging() != 0) {
    _this->_internal_set_max_insurance_fund_quantums_for_deleveraging(from._internal_max_insurance_fund_quantums_for_deleveraging());
  }
  if (from._internal_max_liquidation_fee_ppm() != 0) {
    _this->_internal_set_max_liquidation_fee_ppm(from._internal_max_liquidation_fee_ppm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiquidationsConfig::CopyFrom(const LiquidationsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.LiquidationsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidationsConfig::IsInitialized() const {
  return true;
}

void LiquidationsConfig::InternalSwap(LiquidationsConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidationsConfig, _impl_.max_liquidation_fee_ppm_)
      + sizeof(LiquidationsConfig::_impl_.max_liquidation_fee_ppm_)
      - PROTOBUF_FIELD_OFFSET(LiquidationsConfig, _impl_.position_block_limits_)>(
          reinterpret_cast<char*>(&_impl_.position_block_limits_),
          reinterpret_cast<char*>(&other->_impl_.position_block_limits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidationsConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto[0]);
}
// ===================================================================

class PositionBlockLimits::_Internal {
 public:
};

PositionBlockLimits::PositionBlockLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.PositionBlockLimits)
}
PositionBlockLimits::PositionBlockLimits(const PositionBlockLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.PositionBlockLimits)
}

inline void PositionBlockLimits::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.min_position_notional_liquidated_) { ::uint64_t{0u} }

    , decltype(_impl_.max_position_portion_liquidated_ppm_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PositionBlockLimits::~PositionBlockLimits() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.PositionBlockLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PositionBlockLimits::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PositionBlockLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PositionBlockLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.PositionBlockLimits)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.min_position_notional_liquidated_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_position_portion_liquidated_ppm_) -
      reinterpret_cast<char*>(&_impl_.min_position_notional_liquidated_)) + sizeof(_impl_.max_position_portion_liquidated_ppm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionBlockLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 min_position_notional_liquidated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.min_position_notional_liquidated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 max_position_portion_liquidated_ppm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_position_portion_liquidated_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PositionBlockLimits::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.PositionBlockLimits)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_position_notional_liquidated = 1;
  if (this->_internal_min_position_notional_liquidated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_min_position_notional_liquidated(), target);
  }

  // uint32 max_position_portion_liquidated_ppm = 2;
  if (this->_internal_max_position_portion_liquidated_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_max_position_portion_liquidated_ppm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.PositionBlockLimits)
  return target;
}

::size_t PositionBlockLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.PositionBlockLimits)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 min_position_notional_liquidated = 1;
  if (this->_internal_min_position_notional_liquidated() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_min_position_notional_liquidated());
  }

  // uint32 max_position_portion_liquidated_ppm = 2;
  if (this->_internal_max_position_portion_liquidated_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_position_portion_liquidated_ppm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PositionBlockLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PositionBlockLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PositionBlockLimits::GetClassData() const { return &_class_data_; }


void PositionBlockLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PositionBlockLimits*>(&to_msg);
  auto& from = static_cast<const PositionBlockLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.PositionBlockLimits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_min_position_notional_liquidated() != 0) {
    _this->_internal_set_min_position_notional_liquidated(from._internal_min_position_notional_liquidated());
  }
  if (from._internal_max_position_portion_liquidated_ppm() != 0) {
    _this->_internal_set_max_position_portion_liquidated_ppm(from._internal_max_position_portion_liquidated_ppm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PositionBlockLimits::CopyFrom(const PositionBlockLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.PositionBlockLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionBlockLimits::IsInitialized() const {
  return true;
}

void PositionBlockLimits::InternalSwap(PositionBlockLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionBlockLimits, _impl_.max_position_portion_liquidated_ppm_)
      + sizeof(PositionBlockLimits::_impl_.max_position_portion_liquidated_ppm_)
      - PROTOBUF_FIELD_OFFSET(PositionBlockLimits, _impl_.min_position_notional_liquidated_)>(
          reinterpret_cast<char*>(&_impl_.min_position_notional_liquidated_),
          reinterpret_cast<char*>(&other->_impl_.min_position_notional_liquidated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionBlockLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto[1]);
}
// ===================================================================

class SubaccountBlockLimits::_Internal {
 public:
};

SubaccountBlockLimits::SubaccountBlockLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.SubaccountBlockLimits)
}
SubaccountBlockLimits::SubaccountBlockLimits(const SubaccountBlockLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.SubaccountBlockLimits)
}

inline void SubaccountBlockLimits::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_notional_liquidated_) { ::uint64_t{0u} }

    , decltype(_impl_.max_quantums_insurance_lost_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubaccountBlockLimits::~SubaccountBlockLimits() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.SubaccountBlockLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountBlockLimits::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubaccountBlockLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountBlockLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.SubaccountBlockLimits)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.max_notional_liquidated_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_quantums_insurance_lost_) -
      reinterpret_cast<char*>(&_impl_.max_notional_liquidated_)) + sizeof(_impl_.max_quantums_insurance_lost_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountBlockLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 max_notional_liquidated = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.max_notional_liquidated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 max_quantums_insurance_lost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.max_quantums_insurance_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountBlockLimits::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.SubaccountBlockLimits)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_notional_liquidated = 1;
  if (this->_internal_max_notional_liquidated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_max_notional_liquidated(), target);
  }

  // uint64 max_quantums_insurance_lost = 2;
  if (this->_internal_max_quantums_insurance_lost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_max_quantums_insurance_lost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.SubaccountBlockLimits)
  return target;
}

::size_t SubaccountBlockLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.SubaccountBlockLimits)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_notional_liquidated = 1;
  if (this->_internal_max_notional_liquidated() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_notional_liquidated());
  }

  // uint64 max_quantums_insurance_lost = 2;
  if (this->_internal_max_quantums_insurance_lost() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_quantums_insurance_lost());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountBlockLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountBlockLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountBlockLimits::GetClassData() const { return &_class_data_; }


void SubaccountBlockLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountBlockLimits*>(&to_msg);
  auto& from = static_cast<const SubaccountBlockLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.SubaccountBlockLimits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_notional_liquidated() != 0) {
    _this->_internal_set_max_notional_liquidated(from._internal_max_notional_liquidated());
  }
  if (from._internal_max_quantums_insurance_lost() != 0) {
    _this->_internal_set_max_quantums_insurance_lost(from._internal_max_quantums_insurance_lost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountBlockLimits::CopyFrom(const SubaccountBlockLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.SubaccountBlockLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountBlockLimits::IsInitialized() const {
  return true;
}

void SubaccountBlockLimits::InternalSwap(SubaccountBlockLimits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubaccountBlockLimits, _impl_.max_quantums_insurance_lost_)
      + sizeof(SubaccountBlockLimits::_impl_.max_quantums_insurance_lost_)
      - PROTOBUF_FIELD_OFFSET(SubaccountBlockLimits, _impl_.max_notional_liquidated_)>(
          reinterpret_cast<char*>(&_impl_.max_notional_liquidated_),
          reinterpret_cast<char*>(&other->_impl_.max_notional_liquidated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountBlockLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto[2]);
}
// ===================================================================

class FillablePriceConfig::_Internal {
 public:
};

FillablePriceConfig::FillablePriceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.FillablePriceConfig)
}
FillablePriceConfig::FillablePriceConfig(const FillablePriceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.FillablePriceConfig)
}

inline void FillablePriceConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bankruptcy_adjustment_ppm_) { 0u }

    , decltype(_impl_.spread_to_maintenance_margin_ratio_ppm_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FillablePriceConfig::~FillablePriceConfig() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.FillablePriceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FillablePriceConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void FillablePriceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FillablePriceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.FillablePriceConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bankruptcy_adjustment_ppm_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.spread_to_maintenance_margin_ratio_ppm_) -
      reinterpret_cast<char*>(&_impl_.bankruptcy_adjustment_ppm_)) + sizeof(_impl_.spread_to_maintenance_margin_ratio_ppm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FillablePriceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bankruptcy_adjustment_ppm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.bankruptcy_adjustment_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 spread_to_maintenance_margin_ratio_ppm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.spread_to_maintenance_margin_ratio_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FillablePriceConfig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.FillablePriceConfig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bankruptcy_adjustment_ppm = 1;
  if (this->_internal_bankruptcy_adjustment_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_bankruptcy_adjustment_ppm(), target);
  }

  // uint32 spread_to_maintenance_margin_ratio_ppm = 2;
  if (this->_internal_spread_to_maintenance_margin_ratio_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_spread_to_maintenance_margin_ratio_ppm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.FillablePriceConfig)
  return target;
}

::size_t FillablePriceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.FillablePriceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 bankruptcy_adjustment_ppm = 1;
  if (this->_internal_bankruptcy_adjustment_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_bankruptcy_adjustment_ppm());
  }

  // uint32 spread_to_maintenance_margin_ratio_ppm = 2;
  if (this->_internal_spread_to_maintenance_margin_ratio_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_spread_to_maintenance_margin_ratio_ppm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FillablePriceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FillablePriceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FillablePriceConfig::GetClassData() const { return &_class_data_; }


void FillablePriceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FillablePriceConfig*>(&to_msg);
  auto& from = static_cast<const FillablePriceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.FillablePriceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bankruptcy_adjustment_ppm() != 0) {
    _this->_internal_set_bankruptcy_adjustment_ppm(from._internal_bankruptcy_adjustment_ppm());
  }
  if (from._internal_spread_to_maintenance_margin_ratio_ppm() != 0) {
    _this->_internal_set_spread_to_maintenance_margin_ratio_ppm(from._internal_spread_to_maintenance_margin_ratio_ppm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FillablePriceConfig::CopyFrom(const FillablePriceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.FillablePriceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillablePriceConfig::IsInitialized() const {
  return true;
}

void FillablePriceConfig::InternalSwap(FillablePriceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillablePriceConfig, _impl_.spread_to_maintenance_margin_ratio_ppm_)
      + sizeof(FillablePriceConfig::_impl_.spread_to_maintenance_margin_ratio_ppm_)
      - PROTOBUF_FIELD_OFFSET(FillablePriceConfig, _impl_.bankruptcy_adjustment_ppm_)>(
          reinterpret_cast<char*>(&_impl_.bankruptcy_adjustment_ppm_),
          reinterpret_cast<char*>(&other->_impl_.bankruptcy_adjustment_ppm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FillablePriceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fliquidations_5fconfig_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::LiquidationsConfig*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::LiquidationsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::LiquidationsConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::PositionBlockLimits*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::PositionBlockLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::PositionBlockLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::SubaccountBlockLimits*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::SubaccountBlockLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::SubaccountBlockLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::FillablePriceConfig*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::FillablePriceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::FillablePriceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
