// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/clob/block_rate_limit_config.pb.h"
#include "dydxprotocol/clob/clob_pair.pb.h"
#include "dydxprotocol/clob/equity_tier_limit_config.pb.h"
#include "dydxprotocol/clob/matches.pb.h"
#include "dydxprotocol/clob/order.pb.h"
#include "dydxprotocol/clob/order_removals.pb.h"
#include "dydxprotocol/clob/liquidations_config.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2ftx_2eproto;
namespace dydxprotocol {
namespace clob {
class MsgCancelOrder;
struct MsgCancelOrderDefaultTypeInternal;
extern MsgCancelOrderDefaultTypeInternal _MsgCancelOrder_default_instance_;
class MsgCancelOrderResponse;
struct MsgCancelOrderResponseDefaultTypeInternal;
extern MsgCancelOrderResponseDefaultTypeInternal _MsgCancelOrderResponse_default_instance_;
class MsgCreateClobPair;
struct MsgCreateClobPairDefaultTypeInternal;
extern MsgCreateClobPairDefaultTypeInternal _MsgCreateClobPair_default_instance_;
class MsgCreateClobPairResponse;
struct MsgCreateClobPairResponseDefaultTypeInternal;
extern MsgCreateClobPairResponseDefaultTypeInternal _MsgCreateClobPairResponse_default_instance_;
class MsgPlaceOrder;
struct MsgPlaceOrderDefaultTypeInternal;
extern MsgPlaceOrderDefaultTypeInternal _MsgPlaceOrder_default_instance_;
class MsgPlaceOrderResponse;
struct MsgPlaceOrderResponseDefaultTypeInternal;
extern MsgPlaceOrderResponseDefaultTypeInternal _MsgPlaceOrderResponse_default_instance_;
class MsgProposedOperations;
struct MsgProposedOperationsDefaultTypeInternal;
extern MsgProposedOperationsDefaultTypeInternal _MsgProposedOperations_default_instance_;
class MsgProposedOperationsResponse;
struct MsgProposedOperationsResponseDefaultTypeInternal;
extern MsgProposedOperationsResponseDefaultTypeInternal _MsgProposedOperationsResponse_default_instance_;
class MsgUpdateBlockRateLimitConfiguration;
struct MsgUpdateBlockRateLimitConfigurationDefaultTypeInternal;
extern MsgUpdateBlockRateLimitConfigurationDefaultTypeInternal _MsgUpdateBlockRateLimitConfiguration_default_instance_;
class MsgUpdateBlockRateLimitConfigurationResponse;
struct MsgUpdateBlockRateLimitConfigurationResponseDefaultTypeInternal;
extern MsgUpdateBlockRateLimitConfigurationResponseDefaultTypeInternal _MsgUpdateBlockRateLimitConfigurationResponse_default_instance_;
class MsgUpdateClobPair;
struct MsgUpdateClobPairDefaultTypeInternal;
extern MsgUpdateClobPairDefaultTypeInternal _MsgUpdateClobPair_default_instance_;
class MsgUpdateClobPairResponse;
struct MsgUpdateClobPairResponseDefaultTypeInternal;
extern MsgUpdateClobPairResponseDefaultTypeInternal _MsgUpdateClobPairResponse_default_instance_;
class MsgUpdateEquityTierLimitConfiguration;
struct MsgUpdateEquityTierLimitConfigurationDefaultTypeInternal;
extern MsgUpdateEquityTierLimitConfigurationDefaultTypeInternal _MsgUpdateEquityTierLimitConfiguration_default_instance_;
class MsgUpdateEquityTierLimitConfigurationResponse;
struct MsgUpdateEquityTierLimitConfigurationResponseDefaultTypeInternal;
extern MsgUpdateEquityTierLimitConfigurationResponseDefaultTypeInternal _MsgUpdateEquityTierLimitConfigurationResponse_default_instance_;
class MsgUpdateLiquidationsConfig;
struct MsgUpdateLiquidationsConfigDefaultTypeInternal;
extern MsgUpdateLiquidationsConfigDefaultTypeInternal _MsgUpdateLiquidationsConfig_default_instance_;
class MsgUpdateLiquidationsConfigResponse;
struct MsgUpdateLiquidationsConfigResponseDefaultTypeInternal;
extern MsgUpdateLiquidationsConfigResponseDefaultTypeInternal _MsgUpdateLiquidationsConfigResponse_default_instance_;
class OperationRaw;
struct OperationRawDefaultTypeInternal;
extern OperationRawDefaultTypeInternal _OperationRaw_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::MsgCancelOrder* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgCancelOrder>(Arena*);
template <>
::dydxprotocol::clob::MsgCancelOrderResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgCancelOrderResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgCreateClobPair* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgCreateClobPair>(Arena*);
template <>
::dydxprotocol::clob::MsgCreateClobPairResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgCreateClobPairResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgPlaceOrder* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgPlaceOrder>(Arena*);
template <>
::dydxprotocol::clob::MsgPlaceOrderResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgPlaceOrderResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgProposedOperations* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgProposedOperations>(Arena*);
template <>
::dydxprotocol::clob::MsgProposedOperationsResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgProposedOperationsResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateBlockRateLimitConfiguration>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateBlockRateLimitConfigurationResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateClobPair* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateClobPair>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateClobPairResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateClobPairResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateEquityTierLimitConfiguration>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateEquityTierLimitConfigurationResponse>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateLiquidationsConfig* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateLiquidationsConfig>(Arena*);
template <>
::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MsgUpdateLiquidationsConfigResponse>(Arena*);
template <>
::dydxprotocol::clob::OperationRaw* Arena::CreateMaybeMessage<::dydxprotocol::clob::OperationRaw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class MsgCreateClobPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgCreateClobPair) */ {
 public:
  inline MsgCreateClobPair() : MsgCreateClobPair(nullptr) {}
  ~MsgCreateClobPair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateClobPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateClobPair(const MsgCreateClobPair& from);
  MsgCreateClobPair(MsgCreateClobPair&& from) noexcept
    : MsgCreateClobPair() {
    *this = ::std::move(from);
  }

  inline MsgCreateClobPair& operator=(const MsgCreateClobPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateClobPair& operator=(MsgCreateClobPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateClobPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateClobPair* internal_default_instance() {
    return reinterpret_cast<const MsgCreateClobPair*>(
               &_MsgCreateClobPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgCreateClobPair& a, MsgCreateClobPair& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateClobPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateClobPair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateClobPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateClobPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCreateClobPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCreateClobPair& from) {
    MsgCreateClobPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCreateClobPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgCreateClobPair";
  }
  protected:
  explicit MsgCreateClobPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kClobPairFieldNumber = 2,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
  bool has_clob_pair() const;
  void clear_clob_pair() ;
  const ::dydxprotocol::clob::ClobPair& clob_pair() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobPair* release_clob_pair();
  ::dydxprotocol::clob::ClobPair* mutable_clob_pair();
  void set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair);
  private:
  const ::dydxprotocol::clob::ClobPair& _internal_clob_pair() const;
  ::dydxprotocol::clob::ClobPair* _internal_mutable_clob_pair();
  public:
  void unsafe_arena_set_allocated_clob_pair(
      ::dydxprotocol::clob::ClobPair* clob_pair);
  ::dydxprotocol::clob::ClobPair* unsafe_arena_release_clob_pair();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgCreateClobPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::dydxprotocol::clob::ClobPair* clob_pair_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCreateClobPairResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgCreateClobPairResponse) */ {
 public:
  inline MsgCreateClobPairResponse() : MsgCreateClobPairResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCreateClobPairResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCreateClobPairResponse(const MsgCreateClobPairResponse& from);
  MsgCreateClobPairResponse(MsgCreateClobPairResponse&& from) noexcept
    : MsgCreateClobPairResponse() {
    *this = ::std::move(from);
  }

  inline MsgCreateClobPairResponse& operator=(const MsgCreateClobPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCreateClobPairResponse& operator=(MsgCreateClobPairResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCreateClobPairResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCreateClobPairResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCreateClobPairResponse*>(
               &_MsgCreateClobPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgCreateClobPairResponse& a, MsgCreateClobPairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCreateClobPairResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCreateClobPairResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCreateClobPairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCreateClobPairResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCreateClobPairResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCreateClobPairResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgCreateClobPairResponse";
  }
  protected:
  explicit MsgCreateClobPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgCreateClobPairResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgProposedOperations final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgProposedOperations) */ {
 public:
  inline MsgProposedOperations() : MsgProposedOperations(nullptr) {}
  ~MsgProposedOperations() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgProposedOperations(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgProposedOperations(const MsgProposedOperations& from);
  MsgProposedOperations(MsgProposedOperations&& from) noexcept
    : MsgProposedOperations() {
    *this = ::std::move(from);
  }

  inline MsgProposedOperations& operator=(const MsgProposedOperations& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgProposedOperations& operator=(MsgProposedOperations&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgProposedOperations& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgProposedOperations* internal_default_instance() {
    return reinterpret_cast<const MsgProposedOperations*>(
               &_MsgProposedOperations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgProposedOperations& a, MsgProposedOperations& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgProposedOperations* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgProposedOperations* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgProposedOperations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgProposedOperations>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgProposedOperations& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgProposedOperations& from) {
    MsgProposedOperations::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgProposedOperations* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgProposedOperations";
  }
  protected:
  explicit MsgProposedOperations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsQueueFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
  int operations_queue_size() const;
  private:
  int _internal_operations_queue_size() const;

  public:
  void clear_operations_queue() ;
  ::dydxprotocol::clob::OperationRaw* mutable_operations_queue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >*
      mutable_operations_queue();
  private:
  const ::dydxprotocol::clob::OperationRaw& _internal_operations_queue(int index) const;
  ::dydxprotocol::clob::OperationRaw* _internal_add_operations_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::OperationRaw>& _internal_operations_queue() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::OperationRaw>* _internal_mutable_operations_queue();
  public:
  const ::dydxprotocol::clob::OperationRaw& operations_queue(int index) const;
  ::dydxprotocol::clob::OperationRaw* add_operations_queue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >&
      operations_queue() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgProposedOperations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw > operations_queue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgProposedOperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgProposedOperationsResponse) */ {
 public:
  inline MsgProposedOperationsResponse() : MsgProposedOperationsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgProposedOperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgProposedOperationsResponse(const MsgProposedOperationsResponse& from);
  MsgProposedOperationsResponse(MsgProposedOperationsResponse&& from) noexcept
    : MsgProposedOperationsResponse() {
    *this = ::std::move(from);
  }

  inline MsgProposedOperationsResponse& operator=(const MsgProposedOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgProposedOperationsResponse& operator=(MsgProposedOperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgProposedOperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgProposedOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgProposedOperationsResponse*>(
               &_MsgProposedOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgProposedOperationsResponse& a, MsgProposedOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgProposedOperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgProposedOperationsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgProposedOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgProposedOperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgProposedOperationsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgProposedOperationsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgProposedOperationsResponse";
  }
  protected:
  explicit MsgProposedOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgProposedOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgPlaceOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgPlaceOrder) */ {
 public:
  inline MsgPlaceOrder() : MsgPlaceOrder(nullptr) {}
  ~MsgPlaceOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgPlaceOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPlaceOrder(const MsgPlaceOrder& from);
  MsgPlaceOrder(MsgPlaceOrder&& from) noexcept
    : MsgPlaceOrder() {
    *this = ::std::move(from);
  }

  inline MsgPlaceOrder& operator=(const MsgPlaceOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlaceOrder& operator=(MsgPlaceOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPlaceOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPlaceOrder* internal_default_instance() {
    return reinterpret_cast<const MsgPlaceOrder*>(
               &_MsgPlaceOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgPlaceOrder& a, MsgPlaceOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlaceOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlaceOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPlaceOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPlaceOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgPlaceOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgPlaceOrder& from) {
    MsgPlaceOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPlaceOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgPlaceOrder";
  }
  protected:
  explicit MsgPlaceOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
  bool has_order() const;
  void clear_order() ;
  const ::dydxprotocol::clob::Order& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::Order* release_order();
  ::dydxprotocol::clob::Order* mutable_order();
  void set_allocated_order(::dydxprotocol::clob::Order* order);
  private:
  const ::dydxprotocol::clob::Order& _internal_order() const;
  ::dydxprotocol::clob::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::clob::Order* order);
  ::dydxprotocol::clob::Order* unsafe_arena_release_order();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgPlaceOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::Order* order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgPlaceOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgPlaceOrderResponse) */ {
 public:
  inline MsgPlaceOrderResponse() : MsgPlaceOrderResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgPlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPlaceOrderResponse(const MsgPlaceOrderResponse& from);
  MsgPlaceOrderResponse(MsgPlaceOrderResponse&& from) noexcept
    : MsgPlaceOrderResponse() {
    *this = ::std::move(from);
  }

  inline MsgPlaceOrderResponse& operator=(const MsgPlaceOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPlaceOrderResponse& operator=(MsgPlaceOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPlaceOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPlaceOrderResponse* internal_default_instance() {
    return reinterpret_cast<const MsgPlaceOrderResponse*>(
               &_MsgPlaceOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgPlaceOrderResponse& a, MsgPlaceOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPlaceOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPlaceOrderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPlaceOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPlaceOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgPlaceOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgPlaceOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgPlaceOrderResponse";
  }
  protected:
  explicit MsgPlaceOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgPlaceOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCancelOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgCancelOrder) */ {
 public:
  inline MsgCancelOrder() : MsgCancelOrder(nullptr) {}
  ~MsgCancelOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelOrder(const MsgCancelOrder& from);
  MsgCancelOrder(MsgCancelOrder&& from) noexcept
    : MsgCancelOrder() {
    *this = ::std::move(from);
  }

  inline MsgCancelOrder& operator=(const MsgCancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelOrder& operator=(MsgCancelOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelOrder& default_instance() {
    return *internal_default_instance();
  }
  enum GoodTilOneofCase {
    kGoodTilBlock = 2,
    kGoodTilBlockTime = 3,
    GOOD_TIL_ONEOF_NOT_SET = 0,
  };

  static inline const MsgCancelOrder* internal_default_instance() {
    return reinterpret_cast<const MsgCancelOrder*>(
               &_MsgCancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgCancelOrder& a, MsgCancelOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgCancelOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgCancelOrder& from) {
    MsgCancelOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgCancelOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgCancelOrder";
  }
  protected:
  explicit MsgCancelOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kGoodTilBlockFieldNumber = 2,
    kGoodTilBlockTimeFieldNumber = 3,
  };
  // .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
  bool has_order_id() const;
  void clear_order_id() ;
  const ::dydxprotocol::clob::OrderId& order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_order_id();
  ::dydxprotocol::clob::OrderId* mutable_order_id();
  void set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_order_id() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_order_id();
  public:
  void unsafe_arena_set_allocated_order_id(
      ::dydxprotocol::clob::OrderId* order_id);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_order_id();
  // uint32 good_til_block = 2;
  bool has_good_til_block() const;
  void clear_good_til_block() ;
  ::uint32_t good_til_block() const;
  void set_good_til_block(::uint32_t value);

  private:
  ::uint32_t _internal_good_til_block() const;
  void _internal_set_good_til_block(::uint32_t value);

  public:
  // fixed32 good_til_block_time = 3;
  bool has_good_til_block_time() const;
  void clear_good_til_block_time() ;
  ::uint32_t good_til_block_time() const;
  void set_good_til_block_time(::uint32_t value);

  private:
  ::uint32_t _internal_good_til_block_time() const;
  void _internal_set_good_til_block_time(::uint32_t value);

  public:
  void clear_good_til_oneof();
  GoodTilOneofCase good_til_oneof_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgCancelOrder)
 private:
  class _Internal;
  void set_has_good_til_block();
  void set_has_good_til_block_time();

  inline bool has_good_til_oneof() const;
  inline void clear_has_good_til_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::OrderId* order_id_;
    union GoodTilOneofUnion {
      constexpr GoodTilOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint32_t good_til_block_;
      ::uint32_t good_til_block_time_;
    } good_til_oneof_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgCancelOrderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgCancelOrderResponse) */ {
 public:
  inline MsgCancelOrderResponse() : MsgCancelOrderResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgCancelOrderResponse(const MsgCancelOrderResponse& from);
  MsgCancelOrderResponse(MsgCancelOrderResponse&& from) noexcept
    : MsgCancelOrderResponse() {
    *this = ::std::move(from);
  }

  inline MsgCancelOrderResponse& operator=(const MsgCancelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgCancelOrderResponse& operator=(MsgCancelOrderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgCancelOrderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgCancelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const MsgCancelOrderResponse*>(
               &_MsgCancelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgCancelOrderResponse& a, MsgCancelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgCancelOrderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgCancelOrderResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgCancelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgCancelOrderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgCancelOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgCancelOrderResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgCancelOrderResponse";
  }
  protected:
  explicit MsgCancelOrderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgCancelOrderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateClobPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateClobPair) */ {
 public:
  inline MsgUpdateClobPair() : MsgUpdateClobPair(nullptr) {}
  ~MsgUpdateClobPair() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateClobPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateClobPair(const MsgUpdateClobPair& from);
  MsgUpdateClobPair(MsgUpdateClobPair&& from) noexcept
    : MsgUpdateClobPair() {
    *this = ::std::move(from);
  }

  inline MsgUpdateClobPair& operator=(const MsgUpdateClobPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateClobPair& operator=(MsgUpdateClobPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateClobPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateClobPair* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateClobPair*>(
               &_MsgUpdateClobPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgUpdateClobPair& a, MsgUpdateClobPair& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateClobPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateClobPair* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateClobPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateClobPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateClobPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateClobPair& from) {
    MsgUpdateClobPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateClobPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateClobPair";
  }
  protected:
  explicit MsgUpdateClobPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kClobPairFieldNumber = 2,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
  bool has_clob_pair() const;
  void clear_clob_pair() ;
  const ::dydxprotocol::clob::ClobPair& clob_pair() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobPair* release_clob_pair();
  ::dydxprotocol::clob::ClobPair* mutable_clob_pair();
  void set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair);
  private:
  const ::dydxprotocol::clob::ClobPair& _internal_clob_pair() const;
  ::dydxprotocol::clob::ClobPair* _internal_mutable_clob_pair();
  public:
  void unsafe_arena_set_allocated_clob_pair(
      ::dydxprotocol::clob::ClobPair* clob_pair);
  ::dydxprotocol::clob::ClobPair* unsafe_arena_release_clob_pair();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateClobPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::dydxprotocol::clob::ClobPair* clob_pair_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateClobPairResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateClobPairResponse) */ {
 public:
  inline MsgUpdateClobPairResponse() : MsgUpdateClobPairResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateClobPairResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateClobPairResponse(const MsgUpdateClobPairResponse& from);
  MsgUpdateClobPairResponse(MsgUpdateClobPairResponse&& from) noexcept
    : MsgUpdateClobPairResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateClobPairResponse& operator=(const MsgUpdateClobPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateClobPairResponse& operator=(MsgUpdateClobPairResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateClobPairResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateClobPairResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateClobPairResponse*>(
               &_MsgUpdateClobPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgUpdateClobPairResponse& a, MsgUpdateClobPairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateClobPairResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateClobPairResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateClobPairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateClobPairResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateClobPairResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateClobPairResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateClobPairResponse";
  }
  protected:
  explicit MsgUpdateClobPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateClobPairResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class OperationRaw final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.OperationRaw) */ {
 public:
  inline OperationRaw() : OperationRaw(nullptr) {}
  ~OperationRaw() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OperationRaw(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OperationRaw(const OperationRaw& from);
  OperationRaw(OperationRaw&& from) noexcept
    : OperationRaw() {
    *this = ::std::move(from);
  }

  inline OperationRaw& operator=(const OperationRaw& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationRaw& operator=(OperationRaw&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OperationRaw& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kMatch = 1,
    kShortTermOrderPlacement = 2,
    kOrderRemoval = 3,
    OPERATION_NOT_SET = 0,
  };

  static inline const OperationRaw* internal_default_instance() {
    return reinterpret_cast<const OperationRaw*>(
               &_OperationRaw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OperationRaw& a, OperationRaw& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationRaw* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationRaw* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OperationRaw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OperationRaw>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OperationRaw& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OperationRaw& from) {
    OperationRaw::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationRaw* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.OperationRaw";
  }
  protected:
  explicit OperationRaw(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kShortTermOrderPlacementFieldNumber = 2,
    kOrderRemovalFieldNumber = 3,
  };
  // .dydxprotocol.clob.ClobMatch match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;

  public:
  void clear_match() ;
  const ::dydxprotocol::clob::ClobMatch& match() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobMatch* release_match();
  ::dydxprotocol::clob::ClobMatch* mutable_match();
  void set_allocated_match(::dydxprotocol::clob::ClobMatch* match);
  private:
  const ::dydxprotocol::clob::ClobMatch& _internal_match() const;
  ::dydxprotocol::clob::ClobMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::dydxprotocol::clob::ClobMatch* match);
  ::dydxprotocol::clob::ClobMatch* unsafe_arena_release_match();
  // bytes short_term_order_placement = 2;
  bool has_short_term_order_placement() const;
  void clear_short_term_order_placement() ;
  const std::string& short_term_order_placement() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_short_term_order_placement(Arg_&& arg, Args_... args);
  std::string* mutable_short_term_order_placement();
  PROTOBUF_NODISCARD std::string* release_short_term_order_placement();
  void set_allocated_short_term_order_placement(std::string* ptr);

  private:
  const std::string& _internal_short_term_order_placement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_short_term_order_placement(
      const std::string& value);
  std::string* _internal_mutable_short_term_order_placement();

  public:
  // .dydxprotocol.clob.OrderRemoval order_removal = 3;
  bool has_order_removal() const;
  private:
  bool _internal_has_order_removal() const;

  public:
  void clear_order_removal() ;
  const ::dydxprotocol::clob::OrderRemoval& order_removal() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderRemoval* release_order_removal();
  ::dydxprotocol::clob::OrderRemoval* mutable_order_removal();
  void set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal);
  private:
  const ::dydxprotocol::clob::OrderRemoval& _internal_order_removal() const;
  ::dydxprotocol::clob::OrderRemoval* _internal_mutable_order_removal();
  public:
  void unsafe_arena_set_allocated_order_removal(
      ::dydxprotocol::clob::OrderRemoval* order_removal);
  ::dydxprotocol::clob::OrderRemoval* unsafe_arena_release_order_removal();
  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.OperationRaw)
 private:
  class _Internal;
  void set_has_match();
  void set_has_short_term_order_placement();
  void set_has_order_removal();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OperationUnion {
      constexpr OperationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::clob::ClobMatch* match_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr short_term_order_placement_;
      ::dydxprotocol::clob::OrderRemoval* order_removal_;
    } operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateEquityTierLimitConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration) */ {
 public:
  inline MsgUpdateEquityTierLimitConfiguration() : MsgUpdateEquityTierLimitConfiguration(nullptr) {}
  ~MsgUpdateEquityTierLimitConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateEquityTierLimitConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateEquityTierLimitConfiguration(const MsgUpdateEquityTierLimitConfiguration& from);
  MsgUpdateEquityTierLimitConfiguration(MsgUpdateEquityTierLimitConfiguration&& from) noexcept
    : MsgUpdateEquityTierLimitConfiguration() {
    *this = ::std::move(from);
  }

  inline MsgUpdateEquityTierLimitConfiguration& operator=(const MsgUpdateEquityTierLimitConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateEquityTierLimitConfiguration& operator=(MsgUpdateEquityTierLimitConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateEquityTierLimitConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateEquityTierLimitConfiguration* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateEquityTierLimitConfiguration*>(
               &_MsgUpdateEquityTierLimitConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MsgUpdateEquityTierLimitConfiguration& a, MsgUpdateEquityTierLimitConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateEquityTierLimitConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateEquityTierLimitConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateEquityTierLimitConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateEquityTierLimitConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateEquityTierLimitConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateEquityTierLimitConfiguration& from) {
    MsgUpdateEquityTierLimitConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateEquityTierLimitConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration";
  }
  protected:
  explicit MsgUpdateEquityTierLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kEquityTierLimitConfigFieldNumber = 2,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 2 [(.gogoproto.nullable) = false];
  bool has_equity_tier_limit_config() const;
  void clear_equity_tier_limit_config() ;
  const ::dydxprotocol::clob::EquityTierLimitConfiguration& equity_tier_limit_config() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::EquityTierLimitConfiguration* release_equity_tier_limit_config();
  ::dydxprotocol::clob::EquityTierLimitConfiguration* mutable_equity_tier_limit_config();
  void set_allocated_equity_tier_limit_config(::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config);
  private:
  const ::dydxprotocol::clob::EquityTierLimitConfiguration& _internal_equity_tier_limit_config() const;
  ::dydxprotocol::clob::EquityTierLimitConfiguration* _internal_mutable_equity_tier_limit_config();
  public:
  void unsafe_arena_set_allocated_equity_tier_limit_config(
      ::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config);
  ::dydxprotocol::clob::EquityTierLimitConfiguration* unsafe_arena_release_equity_tier_limit_config();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateEquityTierLimitConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateEquityTierLimitConfigurationResponse) */ {
 public:
  inline MsgUpdateEquityTierLimitConfigurationResponse() : MsgUpdateEquityTierLimitConfigurationResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateEquityTierLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateEquityTierLimitConfigurationResponse(const MsgUpdateEquityTierLimitConfigurationResponse& from);
  MsgUpdateEquityTierLimitConfigurationResponse(MsgUpdateEquityTierLimitConfigurationResponse&& from) noexcept
    : MsgUpdateEquityTierLimitConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateEquityTierLimitConfigurationResponse& operator=(const MsgUpdateEquityTierLimitConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateEquityTierLimitConfigurationResponse& operator=(MsgUpdateEquityTierLimitConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateEquityTierLimitConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateEquityTierLimitConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateEquityTierLimitConfigurationResponse*>(
               &_MsgUpdateEquityTierLimitConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MsgUpdateEquityTierLimitConfigurationResponse& a, MsgUpdateEquityTierLimitConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateEquityTierLimitConfigurationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateEquityTierLimitConfigurationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateEquityTierLimitConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateEquityTierLimitConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateEquityTierLimitConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateEquityTierLimitConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateEquityTierLimitConfigurationResponse";
  }
  protected:
  explicit MsgUpdateEquityTierLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateEquityTierLimitConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateBlockRateLimitConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration) */ {
 public:
  inline MsgUpdateBlockRateLimitConfiguration() : MsgUpdateBlockRateLimitConfiguration(nullptr) {}
  ~MsgUpdateBlockRateLimitConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateBlockRateLimitConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateBlockRateLimitConfiguration(const MsgUpdateBlockRateLimitConfiguration& from);
  MsgUpdateBlockRateLimitConfiguration(MsgUpdateBlockRateLimitConfiguration&& from) noexcept
    : MsgUpdateBlockRateLimitConfiguration() {
    *this = ::std::move(from);
  }

  inline MsgUpdateBlockRateLimitConfiguration& operator=(const MsgUpdateBlockRateLimitConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateBlockRateLimitConfiguration& operator=(MsgUpdateBlockRateLimitConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateBlockRateLimitConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateBlockRateLimitConfiguration* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateBlockRateLimitConfiguration*>(
               &_MsgUpdateBlockRateLimitConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MsgUpdateBlockRateLimitConfiguration& a, MsgUpdateBlockRateLimitConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateBlockRateLimitConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateBlockRateLimitConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateBlockRateLimitConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateBlockRateLimitConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateBlockRateLimitConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateBlockRateLimitConfiguration& from) {
    MsgUpdateBlockRateLimitConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateBlockRateLimitConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration";
  }
  protected:
  explicit MsgUpdateBlockRateLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kBlockRateLimitConfigFieldNumber = 3,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .dydxprotocol.clob.BlockRateLimitConfiguration block_rate_limit_config = 3 [(.gogoproto.nullable) = false];
  bool has_block_rate_limit_config() const;
  void clear_block_rate_limit_config() ;
  const ::dydxprotocol::clob::BlockRateLimitConfiguration& block_rate_limit_config() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::BlockRateLimitConfiguration* release_block_rate_limit_config();
  ::dydxprotocol::clob::BlockRateLimitConfiguration* mutable_block_rate_limit_config();
  void set_allocated_block_rate_limit_config(::dydxprotocol::clob::BlockRateLimitConfiguration* block_rate_limit_config);
  private:
  const ::dydxprotocol::clob::BlockRateLimitConfiguration& _internal_block_rate_limit_config() const;
  ::dydxprotocol::clob::BlockRateLimitConfiguration* _internal_mutable_block_rate_limit_config();
  public:
  void unsafe_arena_set_allocated_block_rate_limit_config(
      ::dydxprotocol::clob::BlockRateLimitConfiguration* block_rate_limit_config);
  ::dydxprotocol::clob::BlockRateLimitConfiguration* unsafe_arena_release_block_rate_limit_config();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::dydxprotocol::clob::BlockRateLimitConfiguration* block_rate_limit_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateBlockRateLimitConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateBlockRateLimitConfigurationResponse) */ {
 public:
  inline MsgUpdateBlockRateLimitConfigurationResponse() : MsgUpdateBlockRateLimitConfigurationResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateBlockRateLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateBlockRateLimitConfigurationResponse(const MsgUpdateBlockRateLimitConfigurationResponse& from);
  MsgUpdateBlockRateLimitConfigurationResponse(MsgUpdateBlockRateLimitConfigurationResponse&& from) noexcept
    : MsgUpdateBlockRateLimitConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateBlockRateLimitConfigurationResponse& operator=(const MsgUpdateBlockRateLimitConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateBlockRateLimitConfigurationResponse& operator=(MsgUpdateBlockRateLimitConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateBlockRateLimitConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateBlockRateLimitConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateBlockRateLimitConfigurationResponse*>(
               &_MsgUpdateBlockRateLimitConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MsgUpdateBlockRateLimitConfigurationResponse& a, MsgUpdateBlockRateLimitConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateBlockRateLimitConfigurationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateBlockRateLimitConfigurationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateBlockRateLimitConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateBlockRateLimitConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateBlockRateLimitConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateBlockRateLimitConfigurationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateBlockRateLimitConfigurationResponse";
  }
  protected:
  explicit MsgUpdateBlockRateLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateBlockRateLimitConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateLiquidationsConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateLiquidationsConfig) */ {
 public:
  inline MsgUpdateLiquidationsConfig() : MsgUpdateLiquidationsConfig(nullptr) {}
  ~MsgUpdateLiquidationsConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateLiquidationsConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateLiquidationsConfig(const MsgUpdateLiquidationsConfig& from);
  MsgUpdateLiquidationsConfig(MsgUpdateLiquidationsConfig&& from) noexcept
    : MsgUpdateLiquidationsConfig() {
    *this = ::std::move(from);
  }

  inline MsgUpdateLiquidationsConfig& operator=(const MsgUpdateLiquidationsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateLiquidationsConfig& operator=(MsgUpdateLiquidationsConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateLiquidationsConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateLiquidationsConfig* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateLiquidationsConfig*>(
               &_MsgUpdateLiquidationsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MsgUpdateLiquidationsConfig& a, MsgUpdateLiquidationsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateLiquidationsConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateLiquidationsConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateLiquidationsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateLiquidationsConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateLiquidationsConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateLiquidationsConfig& from) {
    MsgUpdateLiquidationsConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateLiquidationsConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateLiquidationsConfig";
  }
  protected:
  explicit MsgUpdateLiquidationsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kLiquidationsConfigFieldNumber = 2,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .dydxprotocol.clob.LiquidationsConfig liquidations_config = 2 [(.gogoproto.nullable) = false];
  bool has_liquidations_config() const;
  void clear_liquidations_config() ;
  const ::dydxprotocol::clob::LiquidationsConfig& liquidations_config() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::LiquidationsConfig* release_liquidations_config();
  ::dydxprotocol::clob::LiquidationsConfig* mutable_liquidations_config();
  void set_allocated_liquidations_config(::dydxprotocol::clob::LiquidationsConfig* liquidations_config);
  private:
  const ::dydxprotocol::clob::LiquidationsConfig& _internal_liquidations_config() const;
  ::dydxprotocol::clob::LiquidationsConfig* _internal_mutable_liquidations_config();
  public:
  void unsafe_arena_set_allocated_liquidations_config(
      ::dydxprotocol::clob::LiquidationsConfig* liquidations_config);
  ::dydxprotocol::clob::LiquidationsConfig* unsafe_arena_release_liquidations_config();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateLiquidationsConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::dydxprotocol::clob::LiquidationsConfig* liquidations_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateLiquidationsConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MsgUpdateLiquidationsConfigResponse) */ {
 public:
  inline MsgUpdateLiquidationsConfigResponse() : MsgUpdateLiquidationsConfigResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateLiquidationsConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateLiquidationsConfigResponse(const MsgUpdateLiquidationsConfigResponse& from);
  MsgUpdateLiquidationsConfigResponse(MsgUpdateLiquidationsConfigResponse&& from) noexcept
    : MsgUpdateLiquidationsConfigResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateLiquidationsConfigResponse& operator=(const MsgUpdateLiquidationsConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateLiquidationsConfigResponse& operator=(MsgUpdateLiquidationsConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateLiquidationsConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateLiquidationsConfigResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateLiquidationsConfigResponse*>(
               &_MsgUpdateLiquidationsConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MsgUpdateLiquidationsConfigResponse& a, MsgUpdateLiquidationsConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateLiquidationsConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateLiquidationsConfigResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateLiquidationsConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateLiquidationsConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateLiquidationsConfigResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateLiquidationsConfigResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MsgUpdateLiquidationsConfigResponse";
  }
  protected:
  explicit MsgUpdateLiquidationsConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MsgUpdateLiquidationsConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgCreateClobPair

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgCreateClobPair::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgCreateClobPair::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCreateClobPair.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgCreateClobPair::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgCreateClobPair.authority)
}
inline std::string* MsgCreateClobPair::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgCreateClobPair.authority)
  return _s;
}
inline const std::string& MsgCreateClobPair::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgCreateClobPair::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgCreateClobPair::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgCreateClobPair::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgCreateClobPair.authority)
  return _impl_.authority_.Release();
}
inline void MsgCreateClobPair::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgCreateClobPair.authority)
}

// .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
inline bool MsgCreateClobPair::has_clob_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clob_pair_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::ClobPair& MsgCreateClobPair::_internal_clob_pair() const {
  const ::dydxprotocol::clob::ClobPair* p = _impl_.clob_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::ClobPair&>(
      ::dydxprotocol::clob::_ClobPair_default_instance_);
}
inline const ::dydxprotocol::clob::ClobPair& MsgCreateClobPair::clob_pair() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCreateClobPair.clob_pair)
  return _internal_clob_pair();
}
inline void MsgCreateClobPair::unsafe_arena_set_allocated_clob_pair(
    ::dydxprotocol::clob::ClobPair* clob_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  _impl_.clob_pair_ = clob_pair;
  if (clob_pair) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgCreateClobPair.clob_pair)
}
inline ::dydxprotocol::clob::ClobPair* MsgCreateClobPair::release_clob_pair() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* MsgCreateClobPair::unsafe_arena_release_clob_pair() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgCreateClobPair.clob_pair)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* MsgCreateClobPair::_internal_mutable_clob_pair() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.clob_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::ClobPair>(GetArenaForAllocation());
    _impl_.clob_pair_ = p;
  }
  return _impl_.clob_pair_;
}
inline ::dydxprotocol::clob::ClobPair* MsgCreateClobPair::mutable_clob_pair() {
  ::dydxprotocol::clob::ClobPair* _msg = _internal_mutable_clob_pair();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgCreateClobPair.clob_pair)
  return _msg;
}
inline void MsgCreateClobPair::set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  if (clob_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clob_pair));
    if (message_arena != submessage_arena) {
      clob_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clob_pair, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.clob_pair_ = clob_pair;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgCreateClobPair.clob_pair)
}

// -------------------------------------------------------------------

// MsgCreateClobPairResponse

// -------------------------------------------------------------------

// MsgProposedOperations

// repeated .dydxprotocol.clob.OperationRaw operations_queue = 1 [(.gogoproto.nullable) = false];
inline int MsgProposedOperations::_internal_operations_queue_size() const {
  return _impl_.operations_queue_.size();
}
inline int MsgProposedOperations::operations_queue_size() const {
  return _internal_operations_queue_size();
}
inline void MsgProposedOperations::clear_operations_queue() {
  _internal_mutable_operations_queue()->Clear();
}
inline ::dydxprotocol::clob::OperationRaw* MsgProposedOperations::mutable_operations_queue(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _internal_mutable_operations_queue()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >*
MsgProposedOperations::mutable_operations_queue() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _internal_mutable_operations_queue();
}
inline const ::dydxprotocol::clob::OperationRaw& MsgProposedOperations::_internal_operations_queue(int index) const {
  return _internal_operations_queue().Get(index);
}
inline const ::dydxprotocol::clob::OperationRaw& MsgProposedOperations::operations_queue(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _internal_operations_queue(index);
}
inline ::dydxprotocol::clob::OperationRaw* MsgProposedOperations::_internal_add_operations_queue() {
  return _internal_mutable_operations_queue()->Add();
}
inline ::dydxprotocol::clob::OperationRaw* MsgProposedOperations::add_operations_queue() {
  ::dydxprotocol::clob::OperationRaw* _add = _internal_add_operations_queue();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::OperationRaw >&
MsgProposedOperations::operations_queue() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MsgProposedOperations.operations_queue)
  return _internal_operations_queue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::OperationRaw>&
MsgProposedOperations::_internal_operations_queue() const {
  return _impl_.operations_queue_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::OperationRaw>*
MsgProposedOperations::_internal_mutable_operations_queue() {
  return &_impl_.operations_queue_;
}

// -------------------------------------------------------------------

// MsgProposedOperationsResponse

// -------------------------------------------------------------------

// MsgPlaceOrder

// .dydxprotocol.clob.Order order = 1 [(.gogoproto.nullable) = false];
inline bool MsgPlaceOrder::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::Order& MsgPlaceOrder::_internal_order() const {
  const ::dydxprotocol::clob::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::Order&>(
      ::dydxprotocol::clob::_Order_default_instance_);
}
inline const ::dydxprotocol::clob::Order& MsgPlaceOrder::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgPlaceOrder.order)
  return _internal_order();
}
inline void MsgPlaceOrder::unsafe_arena_set_allocated_order(
    ::dydxprotocol::clob::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgPlaceOrder.order)
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::release_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgPlaceOrder.order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::_internal_mutable_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::clob::Order* MsgPlaceOrder::mutable_order() {
  ::dydxprotocol::clob::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgPlaceOrder.order)
  return _msg;
}
inline void MsgPlaceOrder::set_allocated_order(::dydxprotocol::clob::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgPlaceOrder.order)
}

// -------------------------------------------------------------------

// MsgPlaceOrderResponse

// -------------------------------------------------------------------

// MsgCancelOrder

// .dydxprotocol.clob.OrderId order_id = 1 [(.gogoproto.nullable) = false];
inline bool MsgCancelOrder::has_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::OrderId& MsgCancelOrder::_internal_order_id() const {
  const ::dydxprotocol::clob::OrderId* p = _impl_.order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::OrderId&>(
      ::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& MsgCancelOrder::order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCancelOrder.order_id)
  return _internal_order_id();
}
inline void MsgCancelOrder::unsafe_arena_set_allocated_order_id(
    ::dydxprotocol::clob::OrderId* order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  _impl_.order_id_ = order_id;
  if (order_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgCancelOrder.order_id)
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::release_order_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgCancelOrder.order_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::OrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::_internal_mutable_order_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::OrderId>(GetArenaForAllocation());
    _impl_.order_id_ = p;
  }
  return _impl_.order_id_;
}
inline ::dydxprotocol::clob::OrderId* MsgCancelOrder::mutable_order_id() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgCancelOrder.order_id)
  return _msg;
}
inline void MsgCancelOrder::set_allocated_order_id(::dydxprotocol::clob::OrderId* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_id));
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgCancelOrder.order_id)
}

// uint32 good_til_block = 2;
inline bool MsgCancelOrder::has_good_til_block() const {
  return good_til_oneof_case() == kGoodTilBlock;
}
inline void MsgCancelOrder::set_has_good_til_block() {
  _impl_._oneof_case_[0] = kGoodTilBlock;
}
inline void MsgCancelOrder::clear_good_til_block() {
  if (good_til_oneof_case() == kGoodTilBlock) {
    _impl_.good_til_oneof_.good_til_block_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline ::uint32_t MsgCancelOrder::good_til_block() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCancelOrder.good_til_block)
  return _internal_good_til_block();
}
inline void MsgCancelOrder::set_good_til_block(::uint32_t value) {
  _internal_set_good_til_block(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgCancelOrder.good_til_block)
}
inline ::uint32_t MsgCancelOrder::_internal_good_til_block() const {
  if (good_til_oneof_case() == kGoodTilBlock) {
    return _impl_.good_til_oneof_.good_til_block_;
  }
  return 0u;
}
inline void MsgCancelOrder::_internal_set_good_til_block(::uint32_t value) {
  if (good_til_oneof_case() != kGoodTilBlock) {
    clear_good_til_oneof();
    set_has_good_til_block();
  }
  _impl_.good_til_oneof_.good_til_block_ = value;
}

// fixed32 good_til_block_time = 3;
inline bool MsgCancelOrder::has_good_til_block_time() const {
  return good_til_oneof_case() == kGoodTilBlockTime;
}
inline void MsgCancelOrder::set_has_good_til_block_time() {
  _impl_._oneof_case_[0] = kGoodTilBlockTime;
}
inline void MsgCancelOrder::clear_good_til_block_time() {
  if (good_til_oneof_case() == kGoodTilBlockTime) {
    _impl_.good_til_oneof_.good_til_block_time_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline ::uint32_t MsgCancelOrder::good_til_block_time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgCancelOrder.good_til_block_time)
  return _internal_good_til_block_time();
}
inline void MsgCancelOrder::set_good_til_block_time(::uint32_t value) {
  _internal_set_good_til_block_time(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgCancelOrder.good_til_block_time)
}
inline ::uint32_t MsgCancelOrder::_internal_good_til_block_time() const {
  if (good_til_oneof_case() == kGoodTilBlockTime) {
    return _impl_.good_til_oneof_.good_til_block_time_;
  }
  return 0u;
}
inline void MsgCancelOrder::_internal_set_good_til_block_time(::uint32_t value) {
  if (good_til_oneof_case() != kGoodTilBlockTime) {
    clear_good_til_oneof();
    set_has_good_til_block_time();
  }
  _impl_.good_til_oneof_.good_til_block_time_ = value;
}

inline bool MsgCancelOrder::has_good_til_oneof() const {
  return good_til_oneof_case() != GOOD_TIL_ONEOF_NOT_SET;
}
inline void MsgCancelOrder::clear_has_good_til_oneof() {
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}
inline MsgCancelOrder::GoodTilOneofCase MsgCancelOrder::good_til_oneof_case() const {
  return MsgCancelOrder::GoodTilOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MsgCancelOrderResponse

// -------------------------------------------------------------------

// MsgUpdateClobPair

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateClobPair::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateClobPair::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateClobPair.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateClobPair::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgUpdateClobPair.authority)
}
inline std::string* MsgUpdateClobPair::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateClobPair.authority)
  return _s;
}
inline const std::string& MsgUpdateClobPair::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateClobPair::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateClobPair::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateClobPair::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateClobPair.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateClobPair::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateClobPair.authority)
}

// .dydxprotocol.clob.ClobPair clob_pair = 2 [(.gogoproto.nullable) = false];
inline bool MsgUpdateClobPair::has_clob_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clob_pair_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::ClobPair& MsgUpdateClobPair::_internal_clob_pair() const {
  const ::dydxprotocol::clob::ClobPair* p = _impl_.clob_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::ClobPair&>(
      ::dydxprotocol::clob::_ClobPair_default_instance_);
}
inline const ::dydxprotocol::clob::ClobPair& MsgUpdateClobPair::clob_pair() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateClobPair.clob_pair)
  return _internal_clob_pair();
}
inline void MsgUpdateClobPair::unsafe_arena_set_allocated_clob_pair(
    ::dydxprotocol::clob::ClobPair* clob_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  _impl_.clob_pair_ = clob_pair;
  if (clob_pair) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgUpdateClobPair.clob_pair)
}
inline ::dydxprotocol::clob::ClobPair* MsgUpdateClobPair::release_clob_pair() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* MsgUpdateClobPair::unsafe_arena_release_clob_pair() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateClobPair.clob_pair)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* MsgUpdateClobPair::_internal_mutable_clob_pair() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.clob_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::ClobPair>(GetArenaForAllocation());
    _impl_.clob_pair_ = p;
  }
  return _impl_.clob_pair_;
}
inline ::dydxprotocol::clob::ClobPair* MsgUpdateClobPair::mutable_clob_pair() {
  ::dydxprotocol::clob::ClobPair* _msg = _internal_mutable_clob_pair();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateClobPair.clob_pair)
  return _msg;
}
inline void MsgUpdateClobPair::set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  if (clob_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clob_pair));
    if (message_arena != submessage_arena) {
      clob_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clob_pair, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.clob_pair_ = clob_pair;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateClobPair.clob_pair)
}

// -------------------------------------------------------------------

// MsgUpdateClobPairResponse

// -------------------------------------------------------------------

// OperationRaw

// .dydxprotocol.clob.ClobMatch match = 1;
inline bool OperationRaw::has_match() const {
  return operation_case() == kMatch;
}
inline bool OperationRaw::_internal_has_match() const {
  return operation_case() == kMatch;
}
inline void OperationRaw::set_has_match() {
  _impl_._oneof_case_[0] = kMatch;
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::release_match() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OperationRaw.match)
  if (operation_case() == kMatch) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::ClobMatch& OperationRaw::_internal_match() const {
  return operation_case() == kMatch
      ? *_impl_.operation_.match_
      : reinterpret_cast<::dydxprotocol::clob::ClobMatch&>(::dydxprotocol::clob::_ClobMatch_default_instance_);
}
inline const ::dydxprotocol::clob::ClobMatch& OperationRaw::match() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OperationRaw.match)
  return _internal_match();
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.OperationRaw.match)
  if (operation_case() == kMatch) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationRaw::unsafe_arena_set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  clear_operation();
  if (match) {
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.OperationRaw.match)
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::_internal_mutable_match() {
  if (operation_case() != kMatch) {
    clear_operation();
    set_has_match();
    _impl_.operation_.match_ = CreateMaybeMessage< ::dydxprotocol::clob::ClobMatch >(GetArenaForAllocation());
  }
  return _impl_.operation_.match_;
}
inline ::dydxprotocol::clob::ClobMatch* OperationRaw::mutable_match() {
  ::dydxprotocol::clob::ClobMatch* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OperationRaw.match)
  return _msg;
}

// bytes short_term_order_placement = 2;
inline bool OperationRaw::has_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement;
}
inline void OperationRaw::set_has_short_term_order_placement() {
  _impl_._oneof_case_[0] = kShortTermOrderPlacement;
}
inline void OperationRaw::clear_short_term_order_placement() {
  if (operation_case() == kShortTermOrderPlacement) {
    _impl_.operation_.short_term_order_placement_.Destroy();
    clear_has_operation();
  }
}
inline const std::string& OperationRaw::short_term_order_placement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OperationRaw.short_term_order_placement)
  return _internal_short_term_order_placement();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OperationRaw::set_short_term_order_placement(Arg_&& arg,
                                                     Args_... args) {
  if (operation_case() != kShortTermOrderPlacement) {
    clear_operation();

    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitDefault();
  }
  _impl_.operation_.short_term_order_placement_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.OperationRaw.short_term_order_placement)
}
inline std::string* OperationRaw::mutable_short_term_order_placement() {
  std::string* _s = _internal_mutable_short_term_order_placement();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OperationRaw.short_term_order_placement)
  return _s;
}
inline const std::string& OperationRaw::_internal_short_term_order_placement() const {
  if (operation_case() != kShortTermOrderPlacement) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.operation_.short_term_order_placement_.Get();
}
inline void OperationRaw::_internal_set_short_term_order_placement(const std::string& value) {
  if (operation_case() != kShortTermOrderPlacement) {
    clear_operation();

    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitDefault();
  }


  _impl_.operation_.short_term_order_placement_.Set(value, GetArenaForAllocation());
}
inline std::string* OperationRaw::_internal_mutable_short_term_order_placement() {
  if (operation_case() != kShortTermOrderPlacement) {
    clear_operation();

    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitDefault();
  }
  return _impl_.operation_.short_term_order_placement_.Mutable( GetArenaForAllocation());
}
inline std::string* OperationRaw::release_short_term_order_placement() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OperationRaw.short_term_order_placement)
  if (operation_case() != kShortTermOrderPlacement) {
    return nullptr;
  }
  clear_has_operation();
  return _impl_.operation_.short_term_order_placement_.Release();
}
inline void OperationRaw::set_allocated_short_term_order_placement(std::string* value) {
  if (has_operation()) {
    clear_operation();
  }
  if (value != nullptr) {
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.OperationRaw.short_term_order_placement)
}

// .dydxprotocol.clob.OrderRemoval order_removal = 3;
inline bool OperationRaw::has_order_removal() const {
  return operation_case() == kOrderRemoval;
}
inline bool OperationRaw::_internal_has_order_removal() const {
  return operation_case() == kOrderRemoval;
}
inline void OperationRaw::set_has_order_removal() {
  _impl_._oneof_case_[0] = kOrderRemoval;
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::release_order_removal() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.OperationRaw.order_removal)
  if (operation_case() == kOrderRemoval) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderRemoval* temp = _impl_.operation_.order_removal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::OrderRemoval& OperationRaw::_internal_order_removal() const {
  return operation_case() == kOrderRemoval
      ? *_impl_.operation_.order_removal_
      : reinterpret_cast<::dydxprotocol::clob::OrderRemoval&>(::dydxprotocol::clob::_OrderRemoval_default_instance_);
}
inline const ::dydxprotocol::clob::OrderRemoval& OperationRaw::order_removal() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.OperationRaw.order_removal)
  return _internal_order_removal();
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::unsafe_arena_release_order_removal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.OperationRaw.order_removal)
  if (operation_case() == kOrderRemoval) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderRemoval* temp = _impl_.operation_.order_removal_;
    _impl_.operation_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OperationRaw::unsafe_arena_set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal) {
  clear_operation();
  if (order_removal) {
    set_has_order_removal();
    _impl_.operation_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.OperationRaw.order_removal)
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::_internal_mutable_order_removal() {
  if (operation_case() != kOrderRemoval) {
    clear_operation();
    set_has_order_removal();
    _impl_.operation_.order_removal_ = CreateMaybeMessage< ::dydxprotocol::clob::OrderRemoval >(GetArenaForAllocation());
  }
  return _impl_.operation_.order_removal_;
}
inline ::dydxprotocol::clob::OrderRemoval* OperationRaw::mutable_order_removal() {
  ::dydxprotocol::clob::OrderRemoval* _msg = _internal_mutable_order_removal();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.OperationRaw.order_removal)
  return _msg;
}

inline bool OperationRaw::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void OperationRaw::clear_has_operation() {
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}
inline OperationRaw::OperationCase OperationRaw::operation_case() const {
  return OperationRaw::OperationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MsgUpdateEquityTierLimitConfiguration

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateEquityTierLimitConfiguration::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateEquityTierLimitConfiguration::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateEquityTierLimitConfiguration::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority)
}
inline std::string* MsgUpdateEquityTierLimitConfiguration::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority)
  return _s;
}
inline const std::string& MsgUpdateEquityTierLimitConfiguration::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateEquityTierLimitConfiguration::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateEquityTierLimitConfiguration::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateEquityTierLimitConfiguration::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateEquityTierLimitConfiguration::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.authority)
}

// .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 2 [(.gogoproto.nullable) = false];
inline bool MsgUpdateEquityTierLimitConfiguration::has_equity_tier_limit_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.equity_tier_limit_config_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::EquityTierLimitConfiguration& MsgUpdateEquityTierLimitConfiguration::_internal_equity_tier_limit_config() const {
  const ::dydxprotocol::clob::EquityTierLimitConfiguration* p = _impl_.equity_tier_limit_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::EquityTierLimitConfiguration&>(
      ::dydxprotocol::clob::_EquityTierLimitConfiguration_default_instance_);
}
inline const ::dydxprotocol::clob::EquityTierLimitConfiguration& MsgUpdateEquityTierLimitConfiguration::equity_tier_limit_config() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.equity_tier_limit_config)
  return _internal_equity_tier_limit_config();
}
inline void MsgUpdateEquityTierLimitConfiguration::unsafe_arena_set_allocated_equity_tier_limit_config(
    ::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equity_tier_limit_config_);
  }
  _impl_.equity_tier_limit_config_ = equity_tier_limit_config;
  if (equity_tier_limit_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.equity_tier_limit_config)
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* MsgUpdateEquityTierLimitConfiguration::release_equity_tier_limit_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::EquityTierLimitConfiguration* temp = _impl_.equity_tier_limit_config_;
  _impl_.equity_tier_limit_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* MsgUpdateEquityTierLimitConfiguration::unsafe_arena_release_equity_tier_limit_config() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.equity_tier_limit_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::EquityTierLimitConfiguration* temp = _impl_.equity_tier_limit_config_;
  _impl_.equity_tier_limit_config_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* MsgUpdateEquityTierLimitConfiguration::_internal_mutable_equity_tier_limit_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.equity_tier_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::EquityTierLimitConfiguration>(GetArenaForAllocation());
    _impl_.equity_tier_limit_config_ = p;
  }
  return _impl_.equity_tier_limit_config_;
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* MsgUpdateEquityTierLimitConfiguration::mutable_equity_tier_limit_config() {
  ::dydxprotocol::clob::EquityTierLimitConfiguration* _msg = _internal_mutable_equity_tier_limit_config();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.equity_tier_limit_config)
  return _msg;
}
inline void MsgUpdateEquityTierLimitConfiguration::set_allocated_equity_tier_limit_config(::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equity_tier_limit_config_);
  }
  if (equity_tier_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equity_tier_limit_config));
    if (message_arena != submessage_arena) {
      equity_tier_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equity_tier_limit_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.equity_tier_limit_config_ = equity_tier_limit_config;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateEquityTierLimitConfiguration.equity_tier_limit_config)
}

// -------------------------------------------------------------------

// MsgUpdateEquityTierLimitConfigurationResponse

// -------------------------------------------------------------------

// MsgUpdateBlockRateLimitConfiguration

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateBlockRateLimitConfiguration::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateBlockRateLimitConfiguration::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateBlockRateLimitConfiguration::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority)
}
inline std::string* MsgUpdateBlockRateLimitConfiguration::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority)
  return _s;
}
inline const std::string& MsgUpdateBlockRateLimitConfiguration::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateBlockRateLimitConfiguration::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateBlockRateLimitConfiguration::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateBlockRateLimitConfiguration::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateBlockRateLimitConfiguration::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.authority)
}

// .dydxprotocol.clob.BlockRateLimitConfiguration block_rate_limit_config = 3 [(.gogoproto.nullable) = false];
inline bool MsgUpdateBlockRateLimitConfiguration::has_block_rate_limit_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_rate_limit_config_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::BlockRateLimitConfiguration& MsgUpdateBlockRateLimitConfiguration::_internal_block_rate_limit_config() const {
  const ::dydxprotocol::clob::BlockRateLimitConfiguration* p = _impl_.block_rate_limit_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::BlockRateLimitConfiguration&>(
      ::dydxprotocol::clob::_BlockRateLimitConfiguration_default_instance_);
}
inline const ::dydxprotocol::clob::BlockRateLimitConfiguration& MsgUpdateBlockRateLimitConfiguration::block_rate_limit_config() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.block_rate_limit_config)
  return _internal_block_rate_limit_config();
}
inline void MsgUpdateBlockRateLimitConfiguration::unsafe_arena_set_allocated_block_rate_limit_config(
    ::dydxprotocol::clob::BlockRateLimitConfiguration* block_rate_limit_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_rate_limit_config_);
  }
  _impl_.block_rate_limit_config_ = block_rate_limit_config;
  if (block_rate_limit_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.block_rate_limit_config)
}
inline ::dydxprotocol::clob::BlockRateLimitConfiguration* MsgUpdateBlockRateLimitConfiguration::release_block_rate_limit_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::BlockRateLimitConfiguration* temp = _impl_.block_rate_limit_config_;
  _impl_.block_rate_limit_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::BlockRateLimitConfiguration* MsgUpdateBlockRateLimitConfiguration::unsafe_arena_release_block_rate_limit_config() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.block_rate_limit_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::BlockRateLimitConfiguration* temp = _impl_.block_rate_limit_config_;
  _impl_.block_rate_limit_config_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::BlockRateLimitConfiguration* MsgUpdateBlockRateLimitConfiguration::_internal_mutable_block_rate_limit_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_rate_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::BlockRateLimitConfiguration>(GetArenaForAllocation());
    _impl_.block_rate_limit_config_ = p;
  }
  return _impl_.block_rate_limit_config_;
}
inline ::dydxprotocol::clob::BlockRateLimitConfiguration* MsgUpdateBlockRateLimitConfiguration::mutable_block_rate_limit_config() {
  ::dydxprotocol::clob::BlockRateLimitConfiguration* _msg = _internal_mutable_block_rate_limit_config();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.block_rate_limit_config)
  return _msg;
}
inline void MsgUpdateBlockRateLimitConfiguration::set_allocated_block_rate_limit_config(::dydxprotocol::clob::BlockRateLimitConfiguration* block_rate_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_rate_limit_config_);
  }
  if (block_rate_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_rate_limit_config));
    if (message_arena != submessage_arena) {
      block_rate_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_rate_limit_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_rate_limit_config_ = block_rate_limit_config;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateBlockRateLimitConfiguration.block_rate_limit_config)
}

// -------------------------------------------------------------------

// MsgUpdateBlockRateLimitConfigurationResponse

// -------------------------------------------------------------------

// MsgUpdateLiquidationsConfig

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgUpdateLiquidationsConfig::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateLiquidationsConfig::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateLiquidationsConfig::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority)
}
inline std::string* MsgUpdateLiquidationsConfig::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority)
  return _s;
}
inline const std::string& MsgUpdateLiquidationsConfig::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateLiquidationsConfig::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateLiquidationsConfig::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateLiquidationsConfig::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateLiquidationsConfig::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateLiquidationsConfig.authority)
}

// .dydxprotocol.clob.LiquidationsConfig liquidations_config = 2 [(.gogoproto.nullable) = false];
inline bool MsgUpdateLiquidationsConfig::has_liquidations_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.liquidations_config_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::LiquidationsConfig& MsgUpdateLiquidationsConfig::_internal_liquidations_config() const {
  const ::dydxprotocol::clob::LiquidationsConfig* p = _impl_.liquidations_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::LiquidationsConfig&>(
      ::dydxprotocol::clob::_LiquidationsConfig_default_instance_);
}
inline const ::dydxprotocol::clob::LiquidationsConfig& MsgUpdateLiquidationsConfig::liquidations_config() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MsgUpdateLiquidationsConfig.liquidations_config)
  return _internal_liquidations_config();
}
inline void MsgUpdateLiquidationsConfig::unsafe_arena_set_allocated_liquidations_config(
    ::dydxprotocol::clob::LiquidationsConfig* liquidations_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidations_config_);
  }
  _impl_.liquidations_config_ = liquidations_config;
  if (liquidations_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MsgUpdateLiquidationsConfig.liquidations_config)
}
inline ::dydxprotocol::clob::LiquidationsConfig* MsgUpdateLiquidationsConfig::release_liquidations_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::LiquidationsConfig* temp = _impl_.liquidations_config_;
  _impl_.liquidations_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::LiquidationsConfig* MsgUpdateLiquidationsConfig::unsafe_arena_release_liquidations_config() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MsgUpdateLiquidationsConfig.liquidations_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::LiquidationsConfig* temp = _impl_.liquidations_config_;
  _impl_.liquidations_config_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::LiquidationsConfig* MsgUpdateLiquidationsConfig::_internal_mutable_liquidations_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.liquidations_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::LiquidationsConfig>(GetArenaForAllocation());
    _impl_.liquidations_config_ = p;
  }
  return _impl_.liquidations_config_;
}
inline ::dydxprotocol::clob::LiquidationsConfig* MsgUpdateLiquidationsConfig::mutable_liquidations_config() {
  ::dydxprotocol::clob::LiquidationsConfig* _msg = _internal_mutable_liquidations_config();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MsgUpdateLiquidationsConfig.liquidations_config)
  return _msg;
}
inline void MsgUpdateLiquidationsConfig::set_allocated_liquidations_config(::dydxprotocol::clob::LiquidationsConfig* liquidations_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidations_config_);
  }
  if (liquidations_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidations_config));
    if (message_arena != submessage_arena) {
      liquidations_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidations_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.liquidations_config_ = liquidations_config;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MsgUpdateLiquidationsConfig.liquidations_config)
}

// -------------------------------------------------------------------

// MsgUpdateLiquidationsConfigResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2ftx_2eproto_2epb_2eh
