// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/operation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2foperation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2foperation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "dydxprotocol/clob/matches.pb.h"
#include "dydxprotocol/clob/order.pb.h"
#include "dydxprotocol/clob/order_removals.pb.h"
#include "dydxprotocol/clob/tx.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2foperation_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2foperation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2foperation_2eproto;
namespace dydxprotocol {
namespace clob {
class InternalOperation;
struct InternalOperationDefaultTypeInternal;
extern InternalOperationDefaultTypeInternal _InternalOperation_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::InternalOperation* Arena::CreateMaybeMessage<::dydxprotocol::clob::InternalOperation>(Arena*);
template <>
::dydxprotocol::clob::Operation* Arena::CreateMaybeMessage<::dydxprotocol::clob::Operation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kMatch = 1,
    kShortTermOrderPlacement = 2,
    kShortTermOrderCancellation = 3,
    kPreexistingStatefulOrder = 4,
    OPERATION_NOT_SET = 0,
  };

  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Operation& from) {
    Operation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kShortTermOrderPlacementFieldNumber = 2,
    kShortTermOrderCancellationFieldNumber = 3,
    kPreexistingStatefulOrderFieldNumber = 4,
  };
  // .dydxprotocol.clob.ClobMatch match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;

  public:
  void clear_match() ;
  const ::dydxprotocol::clob::ClobMatch& match() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobMatch* release_match();
  ::dydxprotocol::clob::ClobMatch* mutable_match();
  void set_allocated_match(::dydxprotocol::clob::ClobMatch* match);
  private:
  const ::dydxprotocol::clob::ClobMatch& _internal_match() const;
  ::dydxprotocol::clob::ClobMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::dydxprotocol::clob::ClobMatch* match);
  ::dydxprotocol::clob::ClobMatch* unsafe_arena_release_match();
  // .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
  bool has_short_term_order_placement() const;
  private:
  bool _internal_has_short_term_order_placement() const;

  public:
  void clear_short_term_order_placement() ;
  const ::dydxprotocol::clob::MsgPlaceOrder& short_term_order_placement() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MsgPlaceOrder* release_short_term_order_placement();
  ::dydxprotocol::clob::MsgPlaceOrder* mutable_short_term_order_placement();
  void set_allocated_short_term_order_placement(::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement);
  private:
  const ::dydxprotocol::clob::MsgPlaceOrder& _internal_short_term_order_placement() const;
  ::dydxprotocol::clob::MsgPlaceOrder* _internal_mutable_short_term_order_placement();
  public:
  void unsafe_arena_set_allocated_short_term_order_placement(
      ::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement);
  ::dydxprotocol::clob::MsgPlaceOrder* unsafe_arena_release_short_term_order_placement();
  // .dydxprotocol.clob.MsgCancelOrder short_term_order_cancellation = 3;
  bool has_short_term_order_cancellation() const;
  private:
  bool _internal_has_short_term_order_cancellation() const;

  public:
  void clear_short_term_order_cancellation() ;
  const ::dydxprotocol::clob::MsgCancelOrder& short_term_order_cancellation() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MsgCancelOrder* release_short_term_order_cancellation();
  ::dydxprotocol::clob::MsgCancelOrder* mutable_short_term_order_cancellation();
  void set_allocated_short_term_order_cancellation(::dydxprotocol::clob::MsgCancelOrder* short_term_order_cancellation);
  private:
  const ::dydxprotocol::clob::MsgCancelOrder& _internal_short_term_order_cancellation() const;
  ::dydxprotocol::clob::MsgCancelOrder* _internal_mutable_short_term_order_cancellation();
  public:
  void unsafe_arena_set_allocated_short_term_order_cancellation(
      ::dydxprotocol::clob::MsgCancelOrder* short_term_order_cancellation);
  ::dydxprotocol::clob::MsgCancelOrder* unsafe_arena_release_short_term_order_cancellation();
  // .dydxprotocol.clob.OrderId preexisting_stateful_order = 4;
  bool has_preexisting_stateful_order() const;
  private:
  bool _internal_has_preexisting_stateful_order() const;

  public:
  void clear_preexisting_stateful_order() ;
  const ::dydxprotocol::clob::OrderId& preexisting_stateful_order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_preexisting_stateful_order();
  ::dydxprotocol::clob::OrderId* mutable_preexisting_stateful_order();
  void set_allocated_preexisting_stateful_order(::dydxprotocol::clob::OrderId* preexisting_stateful_order);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_preexisting_stateful_order() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_preexisting_stateful_order();
  public:
  void unsafe_arena_set_allocated_preexisting_stateful_order(
      ::dydxprotocol::clob::OrderId* preexisting_stateful_order);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_preexisting_stateful_order();
  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.Operation)
 private:
  class _Internal;
  void set_has_match();
  void set_has_short_term_order_placement();
  void set_has_short_term_order_cancellation();
  void set_has_preexisting_stateful_order();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OperationUnion {
      constexpr OperationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::clob::ClobMatch* match_;
      ::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement_;
      ::dydxprotocol::clob::MsgCancelOrder* short_term_order_cancellation_;
      ::dydxprotocol::clob::OrderId* preexisting_stateful_order_;
    } operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2foperation_2eproto;
};// -------------------------------------------------------------------

class InternalOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.InternalOperation) */ {
 public:
  inline InternalOperation() : InternalOperation(nullptr) {}
  ~InternalOperation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InternalOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalOperation(const InternalOperation& from);
  InternalOperation(InternalOperation&& from) noexcept
    : InternalOperation() {
    *this = ::std::move(from);
  }

  inline InternalOperation& operator=(const InternalOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalOperation& operator=(InternalOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalOperation& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kMatch = 1,
    kShortTermOrderPlacement = 2,
    kPreexistingStatefulOrder = 3,
    kOrderRemoval = 4,
    OPERATION_NOT_SET = 0,
  };

  static inline const InternalOperation* internal_default_instance() {
    return reinterpret_cast<const InternalOperation*>(
               &_InternalOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalOperation& a, InternalOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalOperation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalOperation& from) {
    InternalOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.InternalOperation";
  }
  protected:
  explicit InternalOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kShortTermOrderPlacementFieldNumber = 2,
    kPreexistingStatefulOrderFieldNumber = 3,
    kOrderRemovalFieldNumber = 4,
  };
  // .dydxprotocol.clob.ClobMatch match = 1;
  bool has_match() const;
  private:
  bool _internal_has_match() const;

  public:
  void clear_match() ;
  const ::dydxprotocol::clob::ClobMatch& match() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobMatch* release_match();
  ::dydxprotocol::clob::ClobMatch* mutable_match();
  void set_allocated_match(::dydxprotocol::clob::ClobMatch* match);
  private:
  const ::dydxprotocol::clob::ClobMatch& _internal_match() const;
  ::dydxprotocol::clob::ClobMatch* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::dydxprotocol::clob::ClobMatch* match);
  ::dydxprotocol::clob::ClobMatch* unsafe_arena_release_match();
  // .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
  bool has_short_term_order_placement() const;
  private:
  bool _internal_has_short_term_order_placement() const;

  public:
  void clear_short_term_order_placement() ;
  const ::dydxprotocol::clob::MsgPlaceOrder& short_term_order_placement() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MsgPlaceOrder* release_short_term_order_placement();
  ::dydxprotocol::clob::MsgPlaceOrder* mutable_short_term_order_placement();
  void set_allocated_short_term_order_placement(::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement);
  private:
  const ::dydxprotocol::clob::MsgPlaceOrder& _internal_short_term_order_placement() const;
  ::dydxprotocol::clob::MsgPlaceOrder* _internal_mutable_short_term_order_placement();
  public:
  void unsafe_arena_set_allocated_short_term_order_placement(
      ::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement);
  ::dydxprotocol::clob::MsgPlaceOrder* unsafe_arena_release_short_term_order_placement();
  // .dydxprotocol.clob.OrderId preexisting_stateful_order = 3;
  bool has_preexisting_stateful_order() const;
  private:
  bool _internal_has_preexisting_stateful_order() const;

  public:
  void clear_preexisting_stateful_order() ;
  const ::dydxprotocol::clob::OrderId& preexisting_stateful_order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderId* release_preexisting_stateful_order();
  ::dydxprotocol::clob::OrderId* mutable_preexisting_stateful_order();
  void set_allocated_preexisting_stateful_order(::dydxprotocol::clob::OrderId* preexisting_stateful_order);
  private:
  const ::dydxprotocol::clob::OrderId& _internal_preexisting_stateful_order() const;
  ::dydxprotocol::clob::OrderId* _internal_mutable_preexisting_stateful_order();
  public:
  void unsafe_arena_set_allocated_preexisting_stateful_order(
      ::dydxprotocol::clob::OrderId* preexisting_stateful_order);
  ::dydxprotocol::clob::OrderId* unsafe_arena_release_preexisting_stateful_order();
  // .dydxprotocol.clob.OrderRemoval order_removal = 4;
  bool has_order_removal() const;
  private:
  bool _internal_has_order_removal() const;

  public:
  void clear_order_removal() ;
  const ::dydxprotocol::clob::OrderRemoval& order_removal() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::OrderRemoval* release_order_removal();
  ::dydxprotocol::clob::OrderRemoval* mutable_order_removal();
  void set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal);
  private:
  const ::dydxprotocol::clob::OrderRemoval& _internal_order_removal() const;
  ::dydxprotocol::clob::OrderRemoval* _internal_mutable_order_removal();
  public:
  void unsafe_arena_set_allocated_order_removal(
      ::dydxprotocol::clob::OrderRemoval* order_removal);
  ::dydxprotocol::clob::OrderRemoval* unsafe_arena_release_order_removal();
  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.InternalOperation)
 private:
  class _Internal;
  void set_has_match();
  void set_has_short_term_order_placement();
  void set_has_preexisting_stateful_order();
  void set_has_order_removal();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OperationUnion {
      constexpr OperationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::clob::ClobMatch* match_;
      ::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement_;
      ::dydxprotocol::clob::OrderId* preexisting_stateful_order_;
      ::dydxprotocol::clob::OrderRemoval* order_removal_;
    } operation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2foperation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Operation

// .dydxprotocol.clob.ClobMatch match = 1;
inline bool Operation::has_match() const {
  return operation_case() == kMatch;
}
inline bool Operation::_internal_has_match() const {
  return operation_case() == kMatch;
}
inline void Operation::set_has_match() {
  _impl_._oneof_case_[0] = kMatch;
}
inline ::dydxprotocol::clob::ClobMatch* Operation::release_match() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.Operation.match)
  if (operation_case() == kMatch) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::ClobMatch& Operation::_internal_match() const {
  return operation_case() == kMatch
      ? *_impl_.operation_.match_
      : reinterpret_cast<::dydxprotocol::clob::ClobMatch&>(::dydxprotocol::clob::_ClobMatch_default_instance_);
}
inline const ::dydxprotocol::clob::ClobMatch& Operation::match() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Operation.match)
  return _internal_match();
}
inline ::dydxprotocol::clob::ClobMatch* Operation::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.Operation.match)
  if (operation_case() == kMatch) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  clear_operation();
  if (match) {
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.Operation.match)
}
inline ::dydxprotocol::clob::ClobMatch* Operation::_internal_mutable_match() {
  if (operation_case() != kMatch) {
    clear_operation();
    set_has_match();
    _impl_.operation_.match_ = CreateMaybeMessage< ::dydxprotocol::clob::ClobMatch >(GetArenaForAllocation());
  }
  return _impl_.operation_.match_;
}
inline ::dydxprotocol::clob::ClobMatch* Operation::mutable_match() {
  ::dydxprotocol::clob::ClobMatch* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.Operation.match)
  return _msg;
}

// .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
inline bool Operation::has_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement;
}
inline bool Operation::_internal_has_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement;
}
inline void Operation::set_has_short_term_order_placement() {
  _impl_._oneof_case_[0] = kShortTermOrderPlacement;
}
inline ::dydxprotocol::clob::MsgPlaceOrder* Operation::release_short_term_order_placement() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.Operation.short_term_order_placement)
  if (operation_case() == kShortTermOrderPlacement) {
    clear_has_operation();
    ::dydxprotocol::clob::MsgPlaceOrder* temp = _impl_.operation_.short_term_order_placement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.short_term_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::MsgPlaceOrder& Operation::_internal_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement
      ? *_impl_.operation_.short_term_order_placement_
      : reinterpret_cast<::dydxprotocol::clob::MsgPlaceOrder&>(::dydxprotocol::clob::_MsgPlaceOrder_default_instance_);
}
inline const ::dydxprotocol::clob::MsgPlaceOrder& Operation::short_term_order_placement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Operation.short_term_order_placement)
  return _internal_short_term_order_placement();
}
inline ::dydxprotocol::clob::MsgPlaceOrder* Operation::unsafe_arena_release_short_term_order_placement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.Operation.short_term_order_placement)
  if (operation_case() == kShortTermOrderPlacement) {
    clear_has_operation();
    ::dydxprotocol::clob::MsgPlaceOrder* temp = _impl_.operation_.short_term_order_placement_;
    _impl_.operation_.short_term_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_short_term_order_placement(::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement) {
  clear_operation();
  if (short_term_order_placement) {
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_ = short_term_order_placement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.Operation.short_term_order_placement)
}
inline ::dydxprotocol::clob::MsgPlaceOrder* Operation::_internal_mutable_short_term_order_placement() {
  if (operation_case() != kShortTermOrderPlacement) {
    clear_operation();
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_ = CreateMaybeMessage< ::dydxprotocol::clob::MsgPlaceOrder >(GetArenaForAllocation());
  }
  return _impl_.operation_.short_term_order_placement_;
}
inline ::dydxprotocol::clob::MsgPlaceOrder* Operation::mutable_short_term_order_placement() {
  ::dydxprotocol::clob::MsgPlaceOrder* _msg = _internal_mutable_short_term_order_placement();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.Operation.short_term_order_placement)
  return _msg;
}

// .dydxprotocol.clob.MsgCancelOrder short_term_order_cancellation = 3;
inline bool Operation::has_short_term_order_cancellation() const {
  return operation_case() == kShortTermOrderCancellation;
}
inline bool Operation::_internal_has_short_term_order_cancellation() const {
  return operation_case() == kShortTermOrderCancellation;
}
inline void Operation::set_has_short_term_order_cancellation() {
  _impl_._oneof_case_[0] = kShortTermOrderCancellation;
}
inline ::dydxprotocol::clob::MsgCancelOrder* Operation::release_short_term_order_cancellation() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.Operation.short_term_order_cancellation)
  if (operation_case() == kShortTermOrderCancellation) {
    clear_has_operation();
    ::dydxprotocol::clob::MsgCancelOrder* temp = _impl_.operation_.short_term_order_cancellation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.short_term_order_cancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::MsgCancelOrder& Operation::_internal_short_term_order_cancellation() const {
  return operation_case() == kShortTermOrderCancellation
      ? *_impl_.operation_.short_term_order_cancellation_
      : reinterpret_cast<::dydxprotocol::clob::MsgCancelOrder&>(::dydxprotocol::clob::_MsgCancelOrder_default_instance_);
}
inline const ::dydxprotocol::clob::MsgCancelOrder& Operation::short_term_order_cancellation() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Operation.short_term_order_cancellation)
  return _internal_short_term_order_cancellation();
}
inline ::dydxprotocol::clob::MsgCancelOrder* Operation::unsafe_arena_release_short_term_order_cancellation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.Operation.short_term_order_cancellation)
  if (operation_case() == kShortTermOrderCancellation) {
    clear_has_operation();
    ::dydxprotocol::clob::MsgCancelOrder* temp = _impl_.operation_.short_term_order_cancellation_;
    _impl_.operation_.short_term_order_cancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_short_term_order_cancellation(::dydxprotocol::clob::MsgCancelOrder* short_term_order_cancellation) {
  clear_operation();
  if (short_term_order_cancellation) {
    set_has_short_term_order_cancellation();
    _impl_.operation_.short_term_order_cancellation_ = short_term_order_cancellation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.Operation.short_term_order_cancellation)
}
inline ::dydxprotocol::clob::MsgCancelOrder* Operation::_internal_mutable_short_term_order_cancellation() {
  if (operation_case() != kShortTermOrderCancellation) {
    clear_operation();
    set_has_short_term_order_cancellation();
    _impl_.operation_.short_term_order_cancellation_ = CreateMaybeMessage< ::dydxprotocol::clob::MsgCancelOrder >(GetArenaForAllocation());
  }
  return _impl_.operation_.short_term_order_cancellation_;
}
inline ::dydxprotocol::clob::MsgCancelOrder* Operation::mutable_short_term_order_cancellation() {
  ::dydxprotocol::clob::MsgCancelOrder* _msg = _internal_mutable_short_term_order_cancellation();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.Operation.short_term_order_cancellation)
  return _msg;
}

// .dydxprotocol.clob.OrderId preexisting_stateful_order = 4;
inline bool Operation::has_preexisting_stateful_order() const {
  return operation_case() == kPreexistingStatefulOrder;
}
inline bool Operation::_internal_has_preexisting_stateful_order() const {
  return operation_case() == kPreexistingStatefulOrder;
}
inline void Operation::set_has_preexisting_stateful_order() {
  _impl_._oneof_case_[0] = kPreexistingStatefulOrder;
}
inline ::dydxprotocol::clob::OrderId* Operation::release_preexisting_stateful_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.Operation.preexisting_stateful_order)
  if (operation_case() == kPreexistingStatefulOrder) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderId* temp = _impl_.operation_.preexisting_stateful_order_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.preexisting_stateful_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::OrderId& Operation::_internal_preexisting_stateful_order() const {
  return operation_case() == kPreexistingStatefulOrder
      ? *_impl_.operation_.preexisting_stateful_order_
      : reinterpret_cast<::dydxprotocol::clob::OrderId&>(::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& Operation::preexisting_stateful_order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.Operation.preexisting_stateful_order)
  return _internal_preexisting_stateful_order();
}
inline ::dydxprotocol::clob::OrderId* Operation::unsafe_arena_release_preexisting_stateful_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.Operation.preexisting_stateful_order)
  if (operation_case() == kPreexistingStatefulOrder) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderId* temp = _impl_.operation_.preexisting_stateful_order_;
    _impl_.operation_.preexisting_stateful_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_preexisting_stateful_order(::dydxprotocol::clob::OrderId* preexisting_stateful_order) {
  clear_operation();
  if (preexisting_stateful_order) {
    set_has_preexisting_stateful_order();
    _impl_.operation_.preexisting_stateful_order_ = preexisting_stateful_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.Operation.preexisting_stateful_order)
}
inline ::dydxprotocol::clob::OrderId* Operation::_internal_mutable_preexisting_stateful_order() {
  if (operation_case() != kPreexistingStatefulOrder) {
    clear_operation();
    set_has_preexisting_stateful_order();
    _impl_.operation_.preexisting_stateful_order_ = CreateMaybeMessage< ::dydxprotocol::clob::OrderId >(GetArenaForAllocation());
  }
  return _impl_.operation_.preexisting_stateful_order_;
}
inline ::dydxprotocol::clob::OrderId* Operation::mutable_preexisting_stateful_order() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_preexisting_stateful_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.Operation.preexisting_stateful_order)
  return _msg;
}

inline bool Operation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void Operation::clear_has_operation() {
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}
inline Operation::OperationCase Operation::operation_case() const {
  return Operation::OperationCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// InternalOperation

// .dydxprotocol.clob.ClobMatch match = 1;
inline bool InternalOperation::has_match() const {
  return operation_case() == kMatch;
}
inline bool InternalOperation::_internal_has_match() const {
  return operation_case() == kMatch;
}
inline void InternalOperation::set_has_match() {
  _impl_._oneof_case_[0] = kMatch;
}
inline ::dydxprotocol::clob::ClobMatch* InternalOperation::release_match() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.InternalOperation.match)
  if (operation_case() == kMatch) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::ClobMatch& InternalOperation::_internal_match() const {
  return operation_case() == kMatch
      ? *_impl_.operation_.match_
      : reinterpret_cast<::dydxprotocol::clob::ClobMatch&>(::dydxprotocol::clob::_ClobMatch_default_instance_);
}
inline const ::dydxprotocol::clob::ClobMatch& InternalOperation::match() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.InternalOperation.match)
  return _internal_match();
}
inline ::dydxprotocol::clob::ClobMatch* InternalOperation::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.InternalOperation.match)
  if (operation_case() == kMatch) {
    clear_has_operation();
    ::dydxprotocol::clob::ClobMatch* temp = _impl_.operation_.match_;
    _impl_.operation_.match_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalOperation::unsafe_arena_set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  clear_operation();
  if (match) {
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.InternalOperation.match)
}
inline ::dydxprotocol::clob::ClobMatch* InternalOperation::_internal_mutable_match() {
  if (operation_case() != kMatch) {
    clear_operation();
    set_has_match();
    _impl_.operation_.match_ = CreateMaybeMessage< ::dydxprotocol::clob::ClobMatch >(GetArenaForAllocation());
  }
  return _impl_.operation_.match_;
}
inline ::dydxprotocol::clob::ClobMatch* InternalOperation::mutable_match() {
  ::dydxprotocol::clob::ClobMatch* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.InternalOperation.match)
  return _msg;
}

// .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
inline bool InternalOperation::has_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement;
}
inline bool InternalOperation::_internal_has_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement;
}
inline void InternalOperation::set_has_short_term_order_placement() {
  _impl_._oneof_case_[0] = kShortTermOrderPlacement;
}
inline ::dydxprotocol::clob::MsgPlaceOrder* InternalOperation::release_short_term_order_placement() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.InternalOperation.short_term_order_placement)
  if (operation_case() == kShortTermOrderPlacement) {
    clear_has_operation();
    ::dydxprotocol::clob::MsgPlaceOrder* temp = _impl_.operation_.short_term_order_placement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.short_term_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::MsgPlaceOrder& InternalOperation::_internal_short_term_order_placement() const {
  return operation_case() == kShortTermOrderPlacement
      ? *_impl_.operation_.short_term_order_placement_
      : reinterpret_cast<::dydxprotocol::clob::MsgPlaceOrder&>(::dydxprotocol::clob::_MsgPlaceOrder_default_instance_);
}
inline const ::dydxprotocol::clob::MsgPlaceOrder& InternalOperation::short_term_order_placement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.InternalOperation.short_term_order_placement)
  return _internal_short_term_order_placement();
}
inline ::dydxprotocol::clob::MsgPlaceOrder* InternalOperation::unsafe_arena_release_short_term_order_placement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.InternalOperation.short_term_order_placement)
  if (operation_case() == kShortTermOrderPlacement) {
    clear_has_operation();
    ::dydxprotocol::clob::MsgPlaceOrder* temp = _impl_.operation_.short_term_order_placement_;
    _impl_.operation_.short_term_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalOperation::unsafe_arena_set_allocated_short_term_order_placement(::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement) {
  clear_operation();
  if (short_term_order_placement) {
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_ = short_term_order_placement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.InternalOperation.short_term_order_placement)
}
inline ::dydxprotocol::clob::MsgPlaceOrder* InternalOperation::_internal_mutable_short_term_order_placement() {
  if (operation_case() != kShortTermOrderPlacement) {
    clear_operation();
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_ = CreateMaybeMessage< ::dydxprotocol::clob::MsgPlaceOrder >(GetArenaForAllocation());
  }
  return _impl_.operation_.short_term_order_placement_;
}
inline ::dydxprotocol::clob::MsgPlaceOrder* InternalOperation::mutable_short_term_order_placement() {
  ::dydxprotocol::clob::MsgPlaceOrder* _msg = _internal_mutable_short_term_order_placement();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.InternalOperation.short_term_order_placement)
  return _msg;
}

// .dydxprotocol.clob.OrderId preexisting_stateful_order = 3;
inline bool InternalOperation::has_preexisting_stateful_order() const {
  return operation_case() == kPreexistingStatefulOrder;
}
inline bool InternalOperation::_internal_has_preexisting_stateful_order() const {
  return operation_case() == kPreexistingStatefulOrder;
}
inline void InternalOperation::set_has_preexisting_stateful_order() {
  _impl_._oneof_case_[0] = kPreexistingStatefulOrder;
}
inline ::dydxprotocol::clob::OrderId* InternalOperation::release_preexisting_stateful_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.InternalOperation.preexisting_stateful_order)
  if (operation_case() == kPreexistingStatefulOrder) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderId* temp = _impl_.operation_.preexisting_stateful_order_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.preexisting_stateful_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::OrderId& InternalOperation::_internal_preexisting_stateful_order() const {
  return operation_case() == kPreexistingStatefulOrder
      ? *_impl_.operation_.preexisting_stateful_order_
      : reinterpret_cast<::dydxprotocol::clob::OrderId&>(::dydxprotocol::clob::_OrderId_default_instance_);
}
inline const ::dydxprotocol::clob::OrderId& InternalOperation::preexisting_stateful_order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.InternalOperation.preexisting_stateful_order)
  return _internal_preexisting_stateful_order();
}
inline ::dydxprotocol::clob::OrderId* InternalOperation::unsafe_arena_release_preexisting_stateful_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.InternalOperation.preexisting_stateful_order)
  if (operation_case() == kPreexistingStatefulOrder) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderId* temp = _impl_.operation_.preexisting_stateful_order_;
    _impl_.operation_.preexisting_stateful_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalOperation::unsafe_arena_set_allocated_preexisting_stateful_order(::dydxprotocol::clob::OrderId* preexisting_stateful_order) {
  clear_operation();
  if (preexisting_stateful_order) {
    set_has_preexisting_stateful_order();
    _impl_.operation_.preexisting_stateful_order_ = preexisting_stateful_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.InternalOperation.preexisting_stateful_order)
}
inline ::dydxprotocol::clob::OrderId* InternalOperation::_internal_mutable_preexisting_stateful_order() {
  if (operation_case() != kPreexistingStatefulOrder) {
    clear_operation();
    set_has_preexisting_stateful_order();
    _impl_.operation_.preexisting_stateful_order_ = CreateMaybeMessage< ::dydxprotocol::clob::OrderId >(GetArenaForAllocation());
  }
  return _impl_.operation_.preexisting_stateful_order_;
}
inline ::dydxprotocol::clob::OrderId* InternalOperation::mutable_preexisting_stateful_order() {
  ::dydxprotocol::clob::OrderId* _msg = _internal_mutable_preexisting_stateful_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.InternalOperation.preexisting_stateful_order)
  return _msg;
}

// .dydxprotocol.clob.OrderRemoval order_removal = 4;
inline bool InternalOperation::has_order_removal() const {
  return operation_case() == kOrderRemoval;
}
inline bool InternalOperation::_internal_has_order_removal() const {
  return operation_case() == kOrderRemoval;
}
inline void InternalOperation::set_has_order_removal() {
  _impl_._oneof_case_[0] = kOrderRemoval;
}
inline ::dydxprotocol::clob::OrderRemoval* InternalOperation::release_order_removal() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.InternalOperation.order_removal)
  if (operation_case() == kOrderRemoval) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderRemoval* temp = _impl_.operation_.order_removal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.operation_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::clob::OrderRemoval& InternalOperation::_internal_order_removal() const {
  return operation_case() == kOrderRemoval
      ? *_impl_.operation_.order_removal_
      : reinterpret_cast<::dydxprotocol::clob::OrderRemoval&>(::dydxprotocol::clob::_OrderRemoval_default_instance_);
}
inline const ::dydxprotocol::clob::OrderRemoval& InternalOperation::order_removal() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.InternalOperation.order_removal)
  return _internal_order_removal();
}
inline ::dydxprotocol::clob::OrderRemoval* InternalOperation::unsafe_arena_release_order_removal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.clob.InternalOperation.order_removal)
  if (operation_case() == kOrderRemoval) {
    clear_has_operation();
    ::dydxprotocol::clob::OrderRemoval* temp = _impl_.operation_.order_removal_;
    _impl_.operation_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void InternalOperation::unsafe_arena_set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal) {
  clear_operation();
  if (order_removal) {
    set_has_order_removal();
    _impl_.operation_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.InternalOperation.order_removal)
}
inline ::dydxprotocol::clob::OrderRemoval* InternalOperation::_internal_mutable_order_removal() {
  if (operation_case() != kOrderRemoval) {
    clear_operation();
    set_has_order_removal();
    _impl_.operation_.order_removal_ = CreateMaybeMessage< ::dydxprotocol::clob::OrderRemoval >(GetArenaForAllocation());
  }
  return _impl_.operation_.order_removal_;
}
inline ::dydxprotocol::clob::OrderRemoval* InternalOperation::mutable_order_removal() {
  ::dydxprotocol::clob::OrderRemoval* _msg = _internal_mutable_order_removal();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.InternalOperation.order_removal)
  return _msg;
}

inline bool InternalOperation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void InternalOperation::clear_has_operation() {
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}
inline InternalOperation::OperationCase InternalOperation::operation_case() const {
  return InternalOperation::OperationCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2foperation_2eproto_2epb_2eh
