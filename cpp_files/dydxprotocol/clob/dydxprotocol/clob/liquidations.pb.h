// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/liquidations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fliquidations_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fliquidations_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fliquidations_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fliquidations_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fliquidations_2eproto;
namespace dydxprotocol {
namespace clob {
class PerpetualLiquidationInfo;
struct PerpetualLiquidationInfoDefaultTypeInternal;
extern PerpetualLiquidationInfoDefaultTypeInternal _PerpetualLiquidationInfo_default_instance_;
class SubaccountLiquidationInfo;
struct SubaccountLiquidationInfoDefaultTypeInternal;
extern SubaccountLiquidationInfoDefaultTypeInternal _SubaccountLiquidationInfo_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::PerpetualLiquidationInfo* Arena::CreateMaybeMessage<::dydxprotocol::clob::PerpetualLiquidationInfo>(Arena*);
template <>
::dydxprotocol::clob::SubaccountLiquidationInfo* Arena::CreateMaybeMessage<::dydxprotocol::clob::SubaccountLiquidationInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class PerpetualLiquidationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.PerpetualLiquidationInfo) */ {
 public:
  inline PerpetualLiquidationInfo() : PerpetualLiquidationInfo(nullptr) {}
  ~PerpetualLiquidationInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualLiquidationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualLiquidationInfo(const PerpetualLiquidationInfo& from);
  PerpetualLiquidationInfo(PerpetualLiquidationInfo&& from) noexcept
    : PerpetualLiquidationInfo() {
    *this = ::std::move(from);
  }

  inline PerpetualLiquidationInfo& operator=(const PerpetualLiquidationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualLiquidationInfo& operator=(PerpetualLiquidationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualLiquidationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualLiquidationInfo* internal_default_instance() {
    return reinterpret_cast<const PerpetualLiquidationInfo*>(
               &_PerpetualLiquidationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerpetualLiquidationInfo& a, PerpetualLiquidationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualLiquidationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualLiquidationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualLiquidationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualLiquidationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualLiquidationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualLiquidationInfo& from) {
    PerpetualLiquidationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualLiquidationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.PerpetualLiquidationInfo";
  }
  protected:
  explicit PerpetualLiquidationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kPerpetualIdFieldNumber = 2,
  };
  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  bool has_subaccount_id() const;
  void clear_subaccount_id() ;
  const ::dydxprotocol::subaccounts::SubaccountId& subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_subaccount_id();
  void set_allocated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_subaccount_id();
  public:
  void unsafe_arena_set_allocated_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_subaccount_id();
  // uint32 perpetual_id = 2;
  void clear_perpetual_id() ;
  ::uint32_t perpetual_id() const;
  void set_perpetual_id(::uint32_t value);

  private:
  ::uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.PerpetualLiquidationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::subaccounts::SubaccountId* subaccount_id_;
    ::uint32_t perpetual_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fliquidations_2eproto;
};// -------------------------------------------------------------------

class SubaccountLiquidationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.SubaccountLiquidationInfo) */ {
 public:
  inline SubaccountLiquidationInfo() : SubaccountLiquidationInfo(nullptr) {}
  ~SubaccountLiquidationInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubaccountLiquidationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubaccountLiquidationInfo(const SubaccountLiquidationInfo& from);
  SubaccountLiquidationInfo(SubaccountLiquidationInfo&& from) noexcept
    : SubaccountLiquidationInfo() {
    *this = ::std::move(from);
  }

  inline SubaccountLiquidationInfo& operator=(const SubaccountLiquidationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubaccountLiquidationInfo& operator=(SubaccountLiquidationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubaccountLiquidationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubaccountLiquidationInfo* internal_default_instance() {
    return reinterpret_cast<const SubaccountLiquidationInfo*>(
               &_SubaccountLiquidationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubaccountLiquidationInfo& a, SubaccountLiquidationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SubaccountLiquidationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubaccountLiquidationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubaccountLiquidationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubaccountLiquidationInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubaccountLiquidationInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubaccountLiquidationInfo& from) {
    SubaccountLiquidationInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubaccountLiquidationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.SubaccountLiquidationInfo";
  }
  protected:
  explicit SubaccountLiquidationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerpetualsLiquidatedFieldNumber = 1,
    kNotionalLiquidatedFieldNumber = 2,
    kQuantumsInsuranceLostFieldNumber = 3,
  };
  // repeated uint32 perpetuals_liquidated = 1;
  int perpetuals_liquidated_size() const;
  private:
  int _internal_perpetuals_liquidated_size() const;

  public:
  void clear_perpetuals_liquidated() ;
  ::uint32_t perpetuals_liquidated(int index) const;
  void set_perpetuals_liquidated(int index, ::uint32_t value);
  void add_perpetuals_liquidated(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& perpetuals_liquidated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_perpetuals_liquidated();

  private:
  ::uint32_t _internal_perpetuals_liquidated(int index) const;
  void _internal_add_perpetuals_liquidated(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_perpetuals_liquidated() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_perpetuals_liquidated();

  public:
  // uint64 notional_liquidated = 2;
  void clear_notional_liquidated() ;
  ::uint64_t notional_liquidated() const;
  void set_notional_liquidated(::uint64_t value);

  private:
  ::uint64_t _internal_notional_liquidated() const;
  void _internal_set_notional_liquidated(::uint64_t value);

  public:
  // uint64 quantums_insurance_lost = 3;
  void clear_quantums_insurance_lost() ;
  ::uint64_t quantums_insurance_lost() const;
  void set_quantums_insurance_lost(::uint64_t value);

  private:
  ::uint64_t _internal_quantums_insurance_lost() const;
  void _internal_set_quantums_insurance_lost(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.SubaccountLiquidationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> perpetuals_liquidated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _perpetuals_liquidated_cached_byte_size_;
    ::uint64_t notional_liquidated_;
    ::uint64_t quantums_insurance_lost_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fliquidations_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PerpetualLiquidationInfo

// .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
inline bool PerpetualLiquidationInfo::has_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& PerpetualLiquidationInfo::_internal_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& PerpetualLiquidationInfo::subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.PerpetualLiquidationInfo.subaccount_id)
  return _internal_subaccount_id();
}
inline void PerpetualLiquidationInfo::unsafe_arena_set_allocated_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  _impl_.subaccount_id_ = subaccount_id;
  if (subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.PerpetualLiquidationInfo.subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* PerpetualLiquidationInfo::release_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* PerpetualLiquidationInfo::unsafe_arena_release_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.PerpetualLiquidationInfo.subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* PerpetualLiquidationInfo::_internal_mutable_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.subaccount_id_ = p;
  }
  return _impl_.subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* PerpetualLiquidationInfo::mutable_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.PerpetualLiquidationInfo.subaccount_id)
  return _msg;
}
inline void PerpetualLiquidationInfo::set_allocated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  if (subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount_id));
    if (message_arena != submessage_arena) {
      subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subaccount_id_ = subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.PerpetualLiquidationInfo.subaccount_id)
}

// uint32 perpetual_id = 2;
inline void PerpetualLiquidationInfo::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline ::uint32_t PerpetualLiquidationInfo::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.PerpetualLiquidationInfo.perpetual_id)
  return _internal_perpetual_id();
}
inline void PerpetualLiquidationInfo::set_perpetual_id(::uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.PerpetualLiquidationInfo.perpetual_id)
}
inline ::uint32_t PerpetualLiquidationInfo::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline void PerpetualLiquidationInfo::_internal_set_perpetual_id(::uint32_t value) {
  ;
  _impl_.perpetual_id_ = value;
}

// -------------------------------------------------------------------

// SubaccountLiquidationInfo

// repeated uint32 perpetuals_liquidated = 1;
inline int SubaccountLiquidationInfo::_internal_perpetuals_liquidated_size() const {
  return _impl_.perpetuals_liquidated_.size();
}
inline int SubaccountLiquidationInfo::perpetuals_liquidated_size() const {
  return _internal_perpetuals_liquidated_size();
}
inline void SubaccountLiquidationInfo::clear_perpetuals_liquidated() {
  _internal_mutable_perpetuals_liquidated()->Clear();
}
inline ::uint32_t SubaccountLiquidationInfo::perpetuals_liquidated(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SubaccountLiquidationInfo.perpetuals_liquidated)
  return _internal_perpetuals_liquidated(index);
}
inline void SubaccountLiquidationInfo::set_perpetuals_liquidated(int index, ::uint32_t value) {
  _internal_mutable_perpetuals_liquidated()->Set(index, value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SubaccountLiquidationInfo.perpetuals_liquidated)
}
inline void SubaccountLiquidationInfo::add_perpetuals_liquidated(::uint32_t value) {
  _internal_add_perpetuals_liquidated(value);
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.SubaccountLiquidationInfo.perpetuals_liquidated)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& SubaccountLiquidationInfo::perpetuals_liquidated() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.SubaccountLiquidationInfo.perpetuals_liquidated)
  return _internal_perpetuals_liquidated();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* SubaccountLiquidationInfo::mutable_perpetuals_liquidated() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.SubaccountLiquidationInfo.perpetuals_liquidated)
  return _internal_mutable_perpetuals_liquidated();
}

inline ::uint32_t SubaccountLiquidationInfo::_internal_perpetuals_liquidated(int index) const {
  return _internal_perpetuals_liquidated().Get(index);
}
inline void SubaccountLiquidationInfo::_internal_add_perpetuals_liquidated(::uint32_t value) {
  _internal_mutable_perpetuals_liquidated()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& SubaccountLiquidationInfo::_internal_perpetuals_liquidated() const {
  return _impl_.perpetuals_liquidated_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* SubaccountLiquidationInfo::_internal_mutable_perpetuals_liquidated() {
  return &_impl_.perpetuals_liquidated_;
}

// uint64 notional_liquidated = 2;
inline void SubaccountLiquidationInfo::clear_notional_liquidated() {
  _impl_.notional_liquidated_ = ::uint64_t{0u};
}
inline ::uint64_t SubaccountLiquidationInfo::notional_liquidated() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SubaccountLiquidationInfo.notional_liquidated)
  return _internal_notional_liquidated();
}
inline void SubaccountLiquidationInfo::set_notional_liquidated(::uint64_t value) {
  _internal_set_notional_liquidated(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SubaccountLiquidationInfo.notional_liquidated)
}
inline ::uint64_t SubaccountLiquidationInfo::_internal_notional_liquidated() const {
  return _impl_.notional_liquidated_;
}
inline void SubaccountLiquidationInfo::_internal_set_notional_liquidated(::uint64_t value) {
  ;
  _impl_.notional_liquidated_ = value;
}

// uint64 quantums_insurance_lost = 3;
inline void SubaccountLiquidationInfo::clear_quantums_insurance_lost() {
  _impl_.quantums_insurance_lost_ = ::uint64_t{0u};
}
inline ::uint64_t SubaccountLiquidationInfo::quantums_insurance_lost() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.SubaccountLiquidationInfo.quantums_insurance_lost)
  return _internal_quantums_insurance_lost();
}
inline void SubaccountLiquidationInfo::set_quantums_insurance_lost(::uint64_t value) {
  _internal_set_quantums_insurance_lost(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.SubaccountLiquidationInfo.quantums_insurance_lost)
}
inline ::uint64_t SubaccountLiquidationInfo::_internal_quantums_insurance_lost() const {
  return _impl_.quantums_insurance_lost_;
}
inline void SubaccountLiquidationInfo::_internal_set_quantums_insurance_lost(::uint64_t value) {
  ;
  _impl_.quantums_insurance_lost_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fliquidations_2eproto_2epb_2eh
