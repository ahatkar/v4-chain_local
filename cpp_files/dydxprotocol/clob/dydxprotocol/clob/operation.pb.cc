// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/operation.proto

#include "dydxprotocol/clob/operation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR Operation::Operation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationDefaultTypeInternal _Operation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InternalOperation::InternalOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct InternalOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalOperationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalOperationDefaultTypeInternal() {}
  union {
    InternalOperation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalOperationDefaultTypeInternal _InternalOperation_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2foperation_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2foperation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2foperation_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2foperation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Operation, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Operation, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Operation, _impl_.operation_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::InternalOperation, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::InternalOperation, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::InternalOperation, _impl_.operation_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::clob::Operation)},
        { 13, -1, -1, sizeof(::dydxprotocol::clob::InternalOperation)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_Operation_default_instance_._instance,
    &::dydxprotocol::clob::_InternalOperation_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2foperation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!dydxprotocol/clob/operation.proto\022\021dyd"
    "xprotocol.clob\032\037dydxprotocol/clob/matche"
    "s.proto\032\035dydxprotocol/clob/order.proto\032&"
    "dydxprotocol/clob/order_removals.proto\032\032"
    "dydxprotocol/clob/tx.proto\"\235\002\n\tOperation"
    "\022-\n\005match\030\001 \001(\0132\034.dydxprotocol.clob.Clob"
    "MatchH\000\022F\n\032short_term_order_placement\030\002 "
    "\001(\0132 .dydxprotocol.clob.MsgPlaceOrderH\000\022"
    "J\n\035short_term_order_cancellation\030\003 \001(\0132!"
    ".dydxprotocol.clob.MsgCancelOrderH\000\022@\n\032p"
    "reexisting_stateful_order\030\004 \001(\0132\032.dydxpr"
    "otocol.clob.OrderIdH\000B\013\n\toperation\"\223\002\n\021I"
    "nternalOperation\022-\n\005match\030\001 \001(\0132\034.dydxpr"
    "otocol.clob.ClobMatchH\000\022F\n\032short_term_or"
    "der_placement\030\002 \001(\0132 .dydxprotocol.clob."
    "MsgPlaceOrderH\000\022@\n\032preexisting_stateful_"
    "order\030\003 \001(\0132\032.dydxprotocol.clob.OrderIdH"
    "\000\0228\n\rorder_removal\030\004 \001(\0132\037.dydxprotocol."
    "clob.OrderRemovalH\000B\013\n\toperationB8Z6gith"
    "ub.com/dydxprotocol/v4-chain/protocol/x/"
    "clob/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_deps[4] =
    {
        &::descriptor_table_dydxprotocol_2fclob_2fmatches_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2forder_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2forder_5fremovals_2eproto,
        &::descriptor_table_dydxprotocol_2fclob_2ftx_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2foperation_2eproto = {
    false,
    false,
    818,
    descriptor_table_protodef_dydxprotocol_2fclob_2foperation_2eproto,
    "dydxprotocol/clob/operation.proto",
    &descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_deps,
    4,
    2,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2foperation_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2foperation_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2foperation_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2foperation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2foperation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2foperation_2eproto(&descriptor_table_dydxprotocol_2fclob_2foperation_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class Operation::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::Operation, _impl_._oneof_case_);
  static const ::dydxprotocol::clob::ClobMatch& match(const Operation* msg);
  static const ::dydxprotocol::clob::MsgPlaceOrder& short_term_order_placement(const Operation* msg);
  static const ::dydxprotocol::clob::MsgCancelOrder& short_term_order_cancellation(const Operation* msg);
  static const ::dydxprotocol::clob::OrderId& preexisting_stateful_order(const Operation* msg);
};

const ::dydxprotocol::clob::ClobMatch&
Operation::_Internal::match(const Operation* msg) {
  return *msg->_impl_.operation_.match_;
}
const ::dydxprotocol::clob::MsgPlaceOrder&
Operation::_Internal::short_term_order_placement(const Operation* msg) {
  return *msg->_impl_.operation_.short_term_order_placement_;
}
const ::dydxprotocol::clob::MsgCancelOrder&
Operation::_Internal::short_term_order_cancellation(const Operation* msg) {
  return *msg->_impl_.operation_.short_term_order_cancellation_;
}
const ::dydxprotocol::clob::OrderId&
Operation::_Internal::preexisting_stateful_order(const Operation* msg) {
  return *msg->_impl_.operation_.preexisting_stateful_order_;
}
void Operation::set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.Operation.match)
}
void Operation::clear_match() {
  if (operation_case() == kMatch) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.match_;
    }
    clear_has_operation();
  }
}
void Operation::set_allocated_short_term_order_placement(::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (short_term_order_placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_term_order_placement));
    if (message_arena != submessage_arena) {
      short_term_order_placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_term_order_placement, submessage_arena);
    }
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_ = short_term_order_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.Operation.short_term_order_placement)
}
void Operation::clear_short_term_order_placement() {
  if (operation_case() == kShortTermOrderPlacement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.short_term_order_placement_;
    }
    clear_has_operation();
  }
}
void Operation::set_allocated_short_term_order_cancellation(::dydxprotocol::clob::MsgCancelOrder* short_term_order_cancellation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (short_term_order_cancellation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_term_order_cancellation));
    if (message_arena != submessage_arena) {
      short_term_order_cancellation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_term_order_cancellation, submessage_arena);
    }
    set_has_short_term_order_cancellation();
    _impl_.operation_.short_term_order_cancellation_ = short_term_order_cancellation;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.Operation.short_term_order_cancellation)
}
void Operation::clear_short_term_order_cancellation() {
  if (operation_case() == kShortTermOrderCancellation) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.short_term_order_cancellation_;
    }
    clear_has_operation();
  }
}
void Operation::set_allocated_preexisting_stateful_order(::dydxprotocol::clob::OrderId* preexisting_stateful_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (preexisting_stateful_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preexisting_stateful_order));
    if (message_arena != submessage_arena) {
      preexisting_stateful_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preexisting_stateful_order, submessage_arena);
    }
    set_has_preexisting_stateful_order();
    _impl_.operation_.preexisting_stateful_order_ = preexisting_stateful_order;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.Operation.preexisting_stateful_order)
}
void Operation::clear_preexisting_stateful_order() {
  if (operation_case() == kPreexistingStatefulOrder) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.preexisting_stateful_order_;
    }
    clear_has_operation();
  }
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_mutable_short_term_order_placement()->::dydxprotocol::clob::MsgPlaceOrder::MergeFrom(
          from._internal_short_term_order_placement());
      break;
    }
    case kShortTermOrderCancellation: {
      _this->_internal_mutable_short_term_order_cancellation()->::dydxprotocol::clob::MsgCancelOrder::MergeFrom(
          from._internal_short_term_order_cancellation());
      break;
    }
    case kPreexistingStatefulOrder: {
      _this->_internal_mutable_preexisting_stateful_order()->::dydxprotocol::clob::OrderId::MergeFrom(
          from._internal_preexisting_stateful_order());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.Operation)
}

inline void Operation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_operation();
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.Operation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.Operation)
  switch (operation_case()) {
    case kMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.match_;
      }
      break;
    }
    case kShortTermOrderPlacement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.short_term_order_placement_;
      }
      break;
    }
    case kShortTermOrderCancellation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.short_term_order_cancellation_;
      }
      break;
    }
    case kPreexistingStatefulOrder: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.preexisting_stateful_order_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.Operation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ClobMatch match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_short_term_order_placement(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.MsgCancelOrder short_term_order_cancellation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_short_term_order_cancellation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.OrderId preexisting_stateful_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_preexisting_stateful_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Operation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.Operation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (operation_case()) {
    case kMatch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::match(this),
          _Internal::match(this).GetCachedSize(), target, stream);
      break;
    }
    case kShortTermOrderPlacement: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::short_term_order_placement(this),
          _Internal::short_term_order_placement(this).GetCachedSize(), target, stream);
      break;
    }
    case kShortTermOrderCancellation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::short_term_order_cancellation(this),
          _Internal::short_term_order_cancellation(this).GetCachedSize(), target, stream);
      break;
    }
    case kPreexistingStatefulOrder: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::preexisting_stateful_order(this),
          _Internal::preexisting_stateful_order(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.Operation)
  return target;
}

::size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.Operation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .dydxprotocol.clob.ClobMatch match = 1;
    case kMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.match_);
      break;
    }
    // .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
    case kShortTermOrderPlacement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.short_term_order_placement_);
      break;
    }
    // .dydxprotocol.clob.MsgCancelOrder short_term_order_cancellation = 3;
    case kShortTermOrderCancellation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.short_term_order_cancellation_);
      break;
    }
    // .dydxprotocol.clob.OrderId preexisting_stateful_order = 4;
    case kPreexistingStatefulOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.preexisting_stateful_order_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }


void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operation*>(&to_msg);
  auto& from = static_cast<const Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.Operation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_mutable_short_term_order_placement()->::dydxprotocol::clob::MsgPlaceOrder::MergeFrom(
          from._internal_short_term_order_placement());
      break;
    }
    case kShortTermOrderCancellation: {
      _this->_internal_mutable_short_term_order_cancellation()->::dydxprotocol::clob::MsgCancelOrder::MergeFrom(
          from._internal_short_term_order_cancellation());
      break;
    }
    case kPreexistingStatefulOrder: {
      _this->_internal_mutable_preexisting_stateful_order()->::dydxprotocol::clob::OrderId::MergeFrom(
          from._internal_preexisting_stateful_order());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2foperation_2eproto[0]);
}
// ===================================================================

class InternalOperation::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::InternalOperation, _impl_._oneof_case_);
  static const ::dydxprotocol::clob::ClobMatch& match(const InternalOperation* msg);
  static const ::dydxprotocol::clob::MsgPlaceOrder& short_term_order_placement(const InternalOperation* msg);
  static const ::dydxprotocol::clob::OrderId& preexisting_stateful_order(const InternalOperation* msg);
  static const ::dydxprotocol::clob::OrderRemoval& order_removal(const InternalOperation* msg);
};

const ::dydxprotocol::clob::ClobMatch&
InternalOperation::_Internal::match(const InternalOperation* msg) {
  return *msg->_impl_.operation_.match_;
}
const ::dydxprotocol::clob::MsgPlaceOrder&
InternalOperation::_Internal::short_term_order_placement(const InternalOperation* msg) {
  return *msg->_impl_.operation_.short_term_order_placement_;
}
const ::dydxprotocol::clob::OrderId&
InternalOperation::_Internal::preexisting_stateful_order(const InternalOperation* msg) {
  return *msg->_impl_.operation_.preexisting_stateful_order_;
}
const ::dydxprotocol::clob::OrderRemoval&
InternalOperation::_Internal::order_removal(const InternalOperation* msg) {
  return *msg->_impl_.operation_.order_removal_;
}
void InternalOperation::set_allocated_match(::dydxprotocol::clob::ClobMatch* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match));
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    set_has_match();
    _impl_.operation_.match_ = match;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.InternalOperation.match)
}
void InternalOperation::clear_match() {
  if (operation_case() == kMatch) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.match_;
    }
    clear_has_operation();
  }
}
void InternalOperation::set_allocated_short_term_order_placement(::dydxprotocol::clob::MsgPlaceOrder* short_term_order_placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (short_term_order_placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(short_term_order_placement));
    if (message_arena != submessage_arena) {
      short_term_order_placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, short_term_order_placement, submessage_arena);
    }
    set_has_short_term_order_placement();
    _impl_.operation_.short_term_order_placement_ = short_term_order_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.InternalOperation.short_term_order_placement)
}
void InternalOperation::clear_short_term_order_placement() {
  if (operation_case() == kShortTermOrderPlacement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.short_term_order_placement_;
    }
    clear_has_operation();
  }
}
void InternalOperation::set_allocated_preexisting_stateful_order(::dydxprotocol::clob::OrderId* preexisting_stateful_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (preexisting_stateful_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preexisting_stateful_order));
    if (message_arena != submessage_arena) {
      preexisting_stateful_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preexisting_stateful_order, submessage_arena);
    }
    set_has_preexisting_stateful_order();
    _impl_.operation_.preexisting_stateful_order_ = preexisting_stateful_order;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.InternalOperation.preexisting_stateful_order)
}
void InternalOperation::clear_preexisting_stateful_order() {
  if (operation_case() == kPreexistingStatefulOrder) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.preexisting_stateful_order_;
    }
    clear_has_operation();
  }
}
void InternalOperation::set_allocated_order_removal(::dydxprotocol::clob::OrderRemoval* order_removal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (order_removal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_removal));
    if (message_arena != submessage_arena) {
      order_removal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_removal, submessage_arena);
    }
    set_has_order_removal();
    _impl_.operation_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.InternalOperation.order_removal)
}
void InternalOperation::clear_order_removal() {
  if (operation_case() == kOrderRemoval) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.operation_.order_removal_;
    }
    clear_has_operation();
  }
}
InternalOperation::InternalOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.InternalOperation)
}
InternalOperation::InternalOperation(const InternalOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_mutable_short_term_order_placement()->::dydxprotocol::clob::MsgPlaceOrder::MergeFrom(
          from._internal_short_term_order_placement());
      break;
    }
    case kPreexistingStatefulOrder: {
      _this->_internal_mutable_preexisting_stateful_order()->::dydxprotocol::clob::OrderId::MergeFrom(
          from._internal_preexisting_stateful_order());
      break;
    }
    case kOrderRemoval: {
      _this->_internal_mutable_order_removal()->::dydxprotocol::clob::OrderRemoval::MergeFrom(
          from._internal_order_removal());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.InternalOperation)
}

inline void InternalOperation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.operation_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_operation();
}

InternalOperation::~InternalOperation() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.InternalOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalOperation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void InternalOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalOperation::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.InternalOperation)
  switch (operation_case()) {
    case kMatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.match_;
      }
      break;
    }
    case kShortTermOrderPlacement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.short_term_order_placement_;
      }
      break;
    }
    case kPreexistingStatefulOrder: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.preexisting_stateful_order_;
      }
      break;
    }
    case kOrderRemoval: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.operation_.order_removal_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPERATION_NOT_SET;
}


void InternalOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.InternalOperation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.clob.ClobMatch match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_short_term_order_placement(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.OrderId preexisting_stateful_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preexisting_stateful_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.OrderRemoval order_removal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_removal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InternalOperation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.InternalOperation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (operation_case()) {
    case kMatch: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::match(this),
          _Internal::match(this).GetCachedSize(), target, stream);
      break;
    }
    case kShortTermOrderPlacement: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::short_term_order_placement(this),
          _Internal::short_term_order_placement(this).GetCachedSize(), target, stream);
      break;
    }
    case kPreexistingStatefulOrder: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::preexisting_stateful_order(this),
          _Internal::preexisting_stateful_order(this).GetCachedSize(), target, stream);
      break;
    }
    case kOrderRemoval: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::order_removal(this),
          _Internal::order_removal(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.InternalOperation)
  return target;
}

::size_t InternalOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.InternalOperation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .dydxprotocol.clob.ClobMatch match = 1;
    case kMatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.match_);
      break;
    }
    // .dydxprotocol.clob.MsgPlaceOrder short_term_order_placement = 2;
    case kShortTermOrderPlacement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.short_term_order_placement_);
      break;
    }
    // .dydxprotocol.clob.OrderId preexisting_stateful_order = 3;
    case kPreexistingStatefulOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.preexisting_stateful_order_);
      break;
    }
    // .dydxprotocol.clob.OrderRemoval order_removal = 4;
    case kOrderRemoval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_.order_removal_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalOperation::GetClassData() const { return &_class_data_; }


void InternalOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalOperation*>(&to_msg);
  auto& from = static_cast<const InternalOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.InternalOperation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kMatch: {
      _this->_internal_mutable_match()->::dydxprotocol::clob::ClobMatch::MergeFrom(
          from._internal_match());
      break;
    }
    case kShortTermOrderPlacement: {
      _this->_internal_mutable_short_term_order_placement()->::dydxprotocol::clob::MsgPlaceOrder::MergeFrom(
          from._internal_short_term_order_placement());
      break;
    }
    case kPreexistingStatefulOrder: {
      _this->_internal_mutable_preexisting_stateful_order()->::dydxprotocol::clob::OrderId::MergeFrom(
          from._internal_preexisting_stateful_order());
      break;
    }
    case kOrderRemoval: {
      _this->_internal_mutable_order_removal()->::dydxprotocol::clob::OrderRemoval::MergeFrom(
          from._internal_order_removal());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalOperation::CopyFrom(const InternalOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.InternalOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalOperation::IsInitialized() const {
  return true;
}

void InternalOperation::InternalSwap(InternalOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.operation_, other->_impl_.operation_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2foperation_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2foperation_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::Operation*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::InternalOperation*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::InternalOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::InternalOperation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
