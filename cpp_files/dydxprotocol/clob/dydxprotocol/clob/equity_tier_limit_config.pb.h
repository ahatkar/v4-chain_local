// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/equity_tier_limit_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto;
namespace dydxprotocol {
namespace clob {
class EquityTierLimit;
struct EquityTierLimitDefaultTypeInternal;
extern EquityTierLimitDefaultTypeInternal _EquityTierLimit_default_instance_;
class EquityTierLimitConfiguration;
struct EquityTierLimitConfigurationDefaultTypeInternal;
extern EquityTierLimitConfigurationDefaultTypeInternal _EquityTierLimitConfiguration_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::EquityTierLimit* Arena::CreateMaybeMessage<::dydxprotocol::clob::EquityTierLimit>(Arena*);
template <>
::dydxprotocol::clob::EquityTierLimitConfiguration* Arena::CreateMaybeMessage<::dydxprotocol::clob::EquityTierLimitConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class EquityTierLimitConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.EquityTierLimitConfiguration) */ {
 public:
  inline EquityTierLimitConfiguration() : EquityTierLimitConfiguration(nullptr) {}
  ~EquityTierLimitConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EquityTierLimitConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquityTierLimitConfiguration(const EquityTierLimitConfiguration& from);
  EquityTierLimitConfiguration(EquityTierLimitConfiguration&& from) noexcept
    : EquityTierLimitConfiguration() {
    *this = ::std::move(from);
  }

  inline EquityTierLimitConfiguration& operator=(const EquityTierLimitConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquityTierLimitConfiguration& operator=(EquityTierLimitConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquityTierLimitConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquityTierLimitConfiguration* internal_default_instance() {
    return reinterpret_cast<const EquityTierLimitConfiguration*>(
               &_EquityTierLimitConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EquityTierLimitConfiguration& a, EquityTierLimitConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(EquityTierLimitConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquityTierLimitConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquityTierLimitConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquityTierLimitConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquityTierLimitConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EquityTierLimitConfiguration& from) {
    EquityTierLimitConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquityTierLimitConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.EquityTierLimitConfiguration";
  }
  protected:
  explicit EquityTierLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortTermOrderEquityTiersFieldNumber = 1,
    kStatefulOrderEquityTiersFieldNumber = 2,
  };
  // repeated .dydxprotocol.clob.EquityTierLimit short_term_order_equity_tiers = 1 [(.gogoproto.nullable) = false];
  int short_term_order_equity_tiers_size() const;
  private:
  int _internal_short_term_order_equity_tiers_size() const;

  public:
  void clear_short_term_order_equity_tiers() ;
  ::dydxprotocol::clob::EquityTierLimit* mutable_short_term_order_equity_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >*
      mutable_short_term_order_equity_tiers();
  private:
  const ::dydxprotocol::clob::EquityTierLimit& _internal_short_term_order_equity_tiers(int index) const;
  ::dydxprotocol::clob::EquityTierLimit* _internal_add_short_term_order_equity_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>& _internal_short_term_order_equity_tiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>* _internal_mutable_short_term_order_equity_tiers();
  public:
  const ::dydxprotocol::clob::EquityTierLimit& short_term_order_equity_tiers(int index) const;
  ::dydxprotocol::clob::EquityTierLimit* add_short_term_order_equity_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >&
      short_term_order_equity_tiers() const;
  // repeated .dydxprotocol.clob.EquityTierLimit stateful_order_equity_tiers = 2 [(.gogoproto.nullable) = false];
  int stateful_order_equity_tiers_size() const;
  private:
  int _internal_stateful_order_equity_tiers_size() const;

  public:
  void clear_stateful_order_equity_tiers() ;
  ::dydxprotocol::clob::EquityTierLimit* mutable_stateful_order_equity_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >*
      mutable_stateful_order_equity_tiers();
  private:
  const ::dydxprotocol::clob::EquityTierLimit& _internal_stateful_order_equity_tiers(int index) const;
  ::dydxprotocol::clob::EquityTierLimit* _internal_add_stateful_order_equity_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>& _internal_stateful_order_equity_tiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>* _internal_mutable_stateful_order_equity_tiers();
  public:
  const ::dydxprotocol::clob::EquityTierLimit& stateful_order_equity_tiers(int index) const;
  ::dydxprotocol::clob::EquityTierLimit* add_stateful_order_equity_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >&
      stateful_order_equity_tiers() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.EquityTierLimitConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit > short_term_order_equity_tiers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit > stateful_order_equity_tiers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto;
};// -------------------------------------------------------------------

class EquityTierLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.EquityTierLimit) */ {
 public:
  inline EquityTierLimit() : EquityTierLimit(nullptr) {}
  ~EquityTierLimit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EquityTierLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EquityTierLimit(const EquityTierLimit& from);
  EquityTierLimit(EquityTierLimit&& from) noexcept
    : EquityTierLimit() {
    *this = ::std::move(from);
  }

  inline EquityTierLimit& operator=(const EquityTierLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquityTierLimit& operator=(EquityTierLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquityTierLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquityTierLimit* internal_default_instance() {
    return reinterpret_cast<const EquityTierLimit*>(
               &_EquityTierLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EquityTierLimit& a, EquityTierLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(EquityTierLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquityTierLimit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquityTierLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquityTierLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EquityTierLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EquityTierLimit& from) {
    EquityTierLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EquityTierLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.EquityTierLimit";
  }
  protected:
  explicit EquityTierLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsdTncRequiredFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // bytes usd_tnc_required = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_usd_tnc_required() ;
  const std::string& usd_tnc_required() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_usd_tnc_required(Arg_&& arg, Args_... args);
  std::string* mutable_usd_tnc_required();
  PROTOBUF_NODISCARD std::string* release_usd_tnc_required();
  void set_allocated_usd_tnc_required(std::string* ptr);

  private:
  const std::string& _internal_usd_tnc_required() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usd_tnc_required(
      const std::string& value);
  std::string* _internal_mutable_usd_tnc_required();

  public:
  // uint32 limit = 2;
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.EquityTierLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usd_tnc_required_;
    ::uint32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EquityTierLimitConfiguration

// repeated .dydxprotocol.clob.EquityTierLimit short_term_order_equity_tiers = 1 [(.gogoproto.nullable) = false];
inline int EquityTierLimitConfiguration::_internal_short_term_order_equity_tiers_size() const {
  return _impl_.short_term_order_equity_tiers_.size();
}
inline int EquityTierLimitConfiguration::short_term_order_equity_tiers_size() const {
  return _internal_short_term_order_equity_tiers_size();
}
inline void EquityTierLimitConfiguration::clear_short_term_order_equity_tiers() {
  _internal_mutable_short_term_order_equity_tiers()->Clear();
}
inline ::dydxprotocol::clob::EquityTierLimit* EquityTierLimitConfiguration::mutable_short_term_order_equity_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.EquityTierLimitConfiguration.short_term_order_equity_tiers)
  return _internal_mutable_short_term_order_equity_tiers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >*
EquityTierLimitConfiguration::mutable_short_term_order_equity_tiers() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.EquityTierLimitConfiguration.short_term_order_equity_tiers)
  return _internal_mutable_short_term_order_equity_tiers();
}
inline const ::dydxprotocol::clob::EquityTierLimit& EquityTierLimitConfiguration::_internal_short_term_order_equity_tiers(int index) const {
  return _internal_short_term_order_equity_tiers().Get(index);
}
inline const ::dydxprotocol::clob::EquityTierLimit& EquityTierLimitConfiguration::short_term_order_equity_tiers(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.EquityTierLimitConfiguration.short_term_order_equity_tiers)
  return _internal_short_term_order_equity_tiers(index);
}
inline ::dydxprotocol::clob::EquityTierLimit* EquityTierLimitConfiguration::_internal_add_short_term_order_equity_tiers() {
  return _internal_mutable_short_term_order_equity_tiers()->Add();
}
inline ::dydxprotocol::clob::EquityTierLimit* EquityTierLimitConfiguration::add_short_term_order_equity_tiers() {
  ::dydxprotocol::clob::EquityTierLimit* _add = _internal_add_short_term_order_equity_tiers();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.EquityTierLimitConfiguration.short_term_order_equity_tiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >&
EquityTierLimitConfiguration::short_term_order_equity_tiers() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.EquityTierLimitConfiguration.short_term_order_equity_tiers)
  return _internal_short_term_order_equity_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>&
EquityTierLimitConfiguration::_internal_short_term_order_equity_tiers() const {
  return _impl_.short_term_order_equity_tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>*
EquityTierLimitConfiguration::_internal_mutable_short_term_order_equity_tiers() {
  return &_impl_.short_term_order_equity_tiers_;
}

// repeated .dydxprotocol.clob.EquityTierLimit stateful_order_equity_tiers = 2 [(.gogoproto.nullable) = false];
inline int EquityTierLimitConfiguration::_internal_stateful_order_equity_tiers_size() const {
  return _impl_.stateful_order_equity_tiers_.size();
}
inline int EquityTierLimitConfiguration::stateful_order_equity_tiers_size() const {
  return _internal_stateful_order_equity_tiers_size();
}
inline void EquityTierLimitConfiguration::clear_stateful_order_equity_tiers() {
  _internal_mutable_stateful_order_equity_tiers()->Clear();
}
inline ::dydxprotocol::clob::EquityTierLimit* EquityTierLimitConfiguration::mutable_stateful_order_equity_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.EquityTierLimitConfiguration.stateful_order_equity_tiers)
  return _internal_mutable_stateful_order_equity_tiers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >*
EquityTierLimitConfiguration::mutable_stateful_order_equity_tiers() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.EquityTierLimitConfiguration.stateful_order_equity_tiers)
  return _internal_mutable_stateful_order_equity_tiers();
}
inline const ::dydxprotocol::clob::EquityTierLimit& EquityTierLimitConfiguration::_internal_stateful_order_equity_tiers(int index) const {
  return _internal_stateful_order_equity_tiers().Get(index);
}
inline const ::dydxprotocol::clob::EquityTierLimit& EquityTierLimitConfiguration::stateful_order_equity_tiers(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.EquityTierLimitConfiguration.stateful_order_equity_tiers)
  return _internal_stateful_order_equity_tiers(index);
}
inline ::dydxprotocol::clob::EquityTierLimit* EquityTierLimitConfiguration::_internal_add_stateful_order_equity_tiers() {
  return _internal_mutable_stateful_order_equity_tiers()->Add();
}
inline ::dydxprotocol::clob::EquityTierLimit* EquityTierLimitConfiguration::add_stateful_order_equity_tiers() {
  ::dydxprotocol::clob::EquityTierLimit* _add = _internal_add_stateful_order_equity_tiers();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.EquityTierLimitConfiguration.stateful_order_equity_tiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::EquityTierLimit >&
EquityTierLimitConfiguration::stateful_order_equity_tiers() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.EquityTierLimitConfiguration.stateful_order_equity_tiers)
  return _internal_stateful_order_equity_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>&
EquityTierLimitConfiguration::_internal_stateful_order_equity_tiers() const {
  return _impl_.stateful_order_equity_tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::EquityTierLimit>*
EquityTierLimitConfiguration::_internal_mutable_stateful_order_equity_tiers() {
  return &_impl_.stateful_order_equity_tiers_;
}

// -------------------------------------------------------------------

// EquityTierLimit

// bytes usd_tnc_required = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void EquityTierLimit::clear_usd_tnc_required() {
  _impl_.usd_tnc_required_.ClearToEmpty();
}
inline const std::string& EquityTierLimit::usd_tnc_required() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.EquityTierLimit.usd_tnc_required)
  return _internal_usd_tnc_required();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EquityTierLimit::set_usd_tnc_required(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.usd_tnc_required_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.EquityTierLimit.usd_tnc_required)
}
inline std::string* EquityTierLimit::mutable_usd_tnc_required() {
  std::string* _s = _internal_mutable_usd_tnc_required();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.EquityTierLimit.usd_tnc_required)
  return _s;
}
inline const std::string& EquityTierLimit::_internal_usd_tnc_required() const {
  return _impl_.usd_tnc_required_.Get();
}
inline void EquityTierLimit::_internal_set_usd_tnc_required(const std::string& value) {
  ;


  _impl_.usd_tnc_required_.Set(value, GetArenaForAllocation());
}
inline std::string* EquityTierLimit::_internal_mutable_usd_tnc_required() {
  ;
  return _impl_.usd_tnc_required_.Mutable( GetArenaForAllocation());
}
inline std::string* EquityTierLimit::release_usd_tnc_required() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.EquityTierLimit.usd_tnc_required)
  return _impl_.usd_tnc_required_.Release();
}
inline void EquityTierLimit::set_allocated_usd_tnc_required(std::string* value) {
  _impl_.usd_tnc_required_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.usd_tnc_required_.IsDefault()) {
          _impl_.usd_tnc_required_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.EquityTierLimit.usd_tnc_required)
}

// uint32 limit = 2;
inline void EquityTierLimit::clear_limit() {
  _impl_.limit_ = 0u;
}
inline ::uint32_t EquityTierLimit::limit() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.EquityTierLimit.limit)
  return _internal_limit();
}
inline void EquityTierLimit::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.EquityTierLimit.limit)
}
inline ::uint32_t EquityTierLimit::_internal_limit() const {
  return _impl_.limit_;
}
inline void EquityTierLimit::_internal_set_limit(::uint32_t value) {
  ;
  _impl_.limit_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_2epb_2eh
