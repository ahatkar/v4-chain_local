// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/block_rate_limit_config.proto

#include "dydxprotocol/clob/block_rate_limit_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR BlockRateLimitConfiguration::BlockRateLimitConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_short_term_orders_per_n_blocks_)*/{}
  , /*decltype(_impl_.max_stateful_orders_per_n_blocks_)*/{}
  , /*decltype(_impl_.max_short_term_order_cancellations_per_n_blocks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockRateLimitConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockRateLimitConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockRateLimitConfigurationDefaultTypeInternal() {}
  union {
    BlockRateLimitConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockRateLimitConfigurationDefaultTypeInternal _BlockRateLimitConfiguration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MaxPerNBlocksRateLimit::MaxPerNBlocksRateLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_blocks_)*/ 0u

  , /*decltype(_impl_.limit_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MaxPerNBlocksRateLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MaxPerNBlocksRateLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MaxPerNBlocksRateLimitDefaultTypeInternal() {}
  union {
    MaxPerNBlocksRateLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MaxPerNBlocksRateLimitDefaultTypeInternal _MaxPerNBlocksRateLimit_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::BlockRateLimitConfiguration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::BlockRateLimitConfiguration, _impl_.max_short_term_orders_per_n_blocks_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::BlockRateLimitConfiguration, _impl_.max_stateful_orders_per_n_blocks_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::BlockRateLimitConfiguration, _impl_.max_short_term_order_cancellations_per_n_blocks_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MaxPerNBlocksRateLimit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MaxPerNBlocksRateLimit, _impl_.num_blocks_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::MaxPerNBlocksRateLimit, _impl_.limit_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::clob::BlockRateLimitConfiguration)},
        { 11, -1, -1, sizeof(::dydxprotocol::clob::MaxPerNBlocksRateLimit)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_BlockRateLimitConfiguration_default_instance_._instance,
    &::dydxprotocol::clob::_MaxPerNBlocksRateLimit_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/dydxprotocol/clob/block_rate_limit_con"
    "fig.proto\022\021dydxprotocol.clob\032\024gogoproto/"
    "gogo.proto\"\277\002\n\033BlockRateLimitConfigurati"
    "on\022[\n\"max_short_term_orders_per_n_blocks"
    "\030\001 \003(\0132).dydxprotocol.clob.MaxPerNBlocks"
    "RateLimitB\004\310\336\037\000\022Y\n max_stateful_orders_p"
    "er_n_blocks\030\002 \003(\0132).dydxprotocol.clob.Ma"
    "xPerNBlocksRateLimitB\004\310\336\037\000\022h\n/max_short_"
    "term_order_cancellations_per_n_blocks\030\003 "
    "\003(\0132).dydxprotocol.clob.MaxPerNBlocksRat"
    "eLimitB\004\310\336\037\000\";\n\026MaxPerNBlocksRateLimit\022\022"
    "\n\nnum_blocks\030\001 \001(\r\022\r\n\005limit\030\002 \001(\rB8Z6git"
    "hub.com/dydxprotocol/v4-chain/protocol/x"
    "/clob/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto = {
    false,
    false,
    539,
    descriptor_table_protodef_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto,
    "dydxprotocol/clob/block_rate_limit_config.proto",
    &descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto(&descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class BlockRateLimitConfiguration::_Internal {
 public:
};

BlockRateLimitConfiguration::BlockRateLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.BlockRateLimitConfiguration)
}
BlockRateLimitConfiguration::BlockRateLimitConfiguration(const BlockRateLimitConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockRateLimitConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_short_term_orders_per_n_blocks_){from._impl_.max_short_term_orders_per_n_blocks_}
    , decltype(_impl_.max_stateful_orders_per_n_blocks_){from._impl_.max_stateful_orders_per_n_blocks_}
    , decltype(_impl_.max_short_term_order_cancellations_per_n_blocks_){from._impl_.max_short_term_order_cancellations_per_n_blocks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.BlockRateLimitConfiguration)
}

inline void BlockRateLimitConfiguration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_short_term_orders_per_n_blocks_){arena}
    , decltype(_impl_.max_stateful_orders_per_n_blocks_){arena}
    , decltype(_impl_.max_short_term_order_cancellations_per_n_blocks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockRateLimitConfiguration::~BlockRateLimitConfiguration() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.BlockRateLimitConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockRateLimitConfiguration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_max_short_term_orders_per_n_blocks()->~RepeatedPtrField();
  _internal_mutable_max_stateful_orders_per_n_blocks()->~RepeatedPtrField();
  _internal_mutable_max_short_term_order_cancellations_per_n_blocks()->~RepeatedPtrField();
}

void BlockRateLimitConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockRateLimitConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.BlockRateLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_max_short_term_orders_per_n_blocks()->Clear();
  _internal_mutable_max_stateful_orders_per_n_blocks()->Clear();
  _internal_mutable_max_short_term_order_cancellations_per_n_blocks()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockRateLimitConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_orders_per_n_blocks = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_max_short_term_orders_per_n_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_stateful_orders_per_n_blocks = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_max_stateful_orders_per_n_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_order_cancellations_per_n_blocks = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_max_short_term_order_cancellations_per_n_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockRateLimitConfiguration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.BlockRateLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_orders_per_n_blocks = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_max_short_term_orders_per_n_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_max_short_term_orders_per_n_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_stateful_orders_per_n_blocks = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_max_stateful_orders_per_n_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_max_stateful_orders_per_n_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_order_cancellations_per_n_blocks = 3 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_max_short_term_order_cancellations_per_n_blocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_max_short_term_order_cancellations_per_n_blocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.BlockRateLimitConfiguration)
  return target;
}

::size_t BlockRateLimitConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.BlockRateLimitConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_orders_per_n_blocks = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_max_short_term_orders_per_n_blocks_size();
  for (const auto& msg : this->_internal_max_short_term_orders_per_n_blocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_stateful_orders_per_n_blocks = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_max_stateful_orders_per_n_blocks_size();
  for (const auto& msg : this->_internal_max_stateful_orders_per_n_blocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_order_cancellations_per_n_blocks = 3 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_max_short_term_order_cancellations_per_n_blocks_size();
  for (const auto& msg : this->_internal_max_short_term_order_cancellations_per_n_blocks()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockRateLimitConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockRateLimitConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockRateLimitConfiguration::GetClassData() const { return &_class_data_; }


void BlockRateLimitConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockRateLimitConfiguration*>(&to_msg);
  auto& from = static_cast<const BlockRateLimitConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.BlockRateLimitConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_max_short_term_orders_per_n_blocks()->MergeFrom(from._internal_max_short_term_orders_per_n_blocks());
  _this->_internal_mutable_max_stateful_orders_per_n_blocks()->MergeFrom(from._internal_max_stateful_orders_per_n_blocks());
  _this->_internal_mutable_max_short_term_order_cancellations_per_n_blocks()->MergeFrom(from._internal_max_short_term_order_cancellations_per_n_blocks());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockRateLimitConfiguration::CopyFrom(const BlockRateLimitConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.BlockRateLimitConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRateLimitConfiguration::IsInitialized() const {
  return true;
}

void BlockRateLimitConfiguration::InternalSwap(BlockRateLimitConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_max_short_term_orders_per_n_blocks()->InternalSwap(other->_internal_mutable_max_short_term_orders_per_n_blocks());
  _internal_mutable_max_stateful_orders_per_n_blocks()->InternalSwap(other->_internal_mutable_max_stateful_orders_per_n_blocks());
  _internal_mutable_max_short_term_order_cancellations_per_n_blocks()->InternalSwap(other->_internal_mutable_max_short_term_order_cancellations_per_n_blocks());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockRateLimitConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto[0]);
}
// ===================================================================

class MaxPerNBlocksRateLimit::_Internal {
 public:
};

MaxPerNBlocksRateLimit::MaxPerNBlocksRateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.MaxPerNBlocksRateLimit)
}
MaxPerNBlocksRateLimit::MaxPerNBlocksRateLimit(const MaxPerNBlocksRateLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.MaxPerNBlocksRateLimit)
}

inline void MaxPerNBlocksRateLimit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.num_blocks_) { 0u }

    , decltype(_impl_.limit_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MaxPerNBlocksRateLimit::~MaxPerNBlocksRateLimit() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MaxPerNBlocksRateLimit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MaxPerNBlocksRateLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MaxPerNBlocksRateLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_blocks_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.num_blocks_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MaxPerNBlocksRateLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 num_blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.num_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MaxPerNBlocksRateLimit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_blocks = 1;
  if (this->_internal_num_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_num_blocks(), target);
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  return target;
}

::size_t MaxPerNBlocksRateLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_blocks = 1;
  if (this->_internal_num_blocks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_num_blocks());
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MaxPerNBlocksRateLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MaxPerNBlocksRateLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MaxPerNBlocksRateLimit::GetClassData() const { return &_class_data_; }


void MaxPerNBlocksRateLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MaxPerNBlocksRateLimit*>(&to_msg);
  auto& from = static_cast<const MaxPerNBlocksRateLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_blocks() != 0) {
    _this->_internal_set_num_blocks(from._internal_num_blocks());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MaxPerNBlocksRateLimit::CopyFrom(const MaxPerNBlocksRateLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.MaxPerNBlocksRateLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxPerNBlocksRateLimit::IsInitialized() const {
  return true;
}

void MaxPerNBlocksRateLimit::InternalSwap(MaxPerNBlocksRateLimit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MaxPerNBlocksRateLimit, _impl_.limit_)
      + sizeof(MaxPerNBlocksRateLimit::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(MaxPerNBlocksRateLimit, _impl_.num_blocks_)>(
          reinterpret_cast<char*>(&_impl_.num_blocks_),
          reinterpret_cast<char*>(&other->_impl_.num_blocks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MaxPerNBlocksRateLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::BlockRateLimitConfiguration*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::BlockRateLimitConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::BlockRateLimitConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::MaxPerNBlocksRateLimit*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
