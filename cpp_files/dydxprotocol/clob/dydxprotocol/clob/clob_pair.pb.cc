// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/clob_pair.proto

#include "dydxprotocol/clob/clob_pair.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR PerpetualClobMetadata::PerpetualClobMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.perpetual_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualClobMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualClobMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualClobMetadataDefaultTypeInternal() {}
  union {
    PerpetualClobMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualClobMetadataDefaultTypeInternal _PerpetualClobMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SpotClobMetadata::SpotClobMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.base_asset_id_)*/ 0u

  , /*decltype(_impl_.quote_asset_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpotClobMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotClobMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotClobMetadataDefaultTypeInternal() {}
  union {
    SpotClobMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotClobMetadataDefaultTypeInternal _SpotClobMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClobPair::ClobPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.subticks_per_tick_)*/ 0u

  , /*decltype(_impl_.step_base_quantums_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.quantum_conversion_exponent_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.metadata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ClobPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClobPairDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClobPairDefaultTypeInternal() {}
  union {
    ClobPair _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClobPairDefaultTypeInternal _ClobPair_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fclob_5fpair_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2fclob_2fclob_5fpair_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2fclob_5fpair_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2fclob_5fpair_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PerpetualClobMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::PerpetualClobMetadata, _impl_.perpetual_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::SpotClobMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::SpotClobMetadata, _impl_.base_asset_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::SpotClobMetadata, _impl_.quote_asset_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_.id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_.step_base_quantums_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_.subticks_per_tick_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_.quantum_conversion_exponent_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_.metadata_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::clob::PerpetualClobMetadata)},
        { 9, -1, -1, sizeof(::dydxprotocol::clob::SpotClobMetadata)},
        { 19, -1, -1, sizeof(::dydxprotocol::clob::ClobPair)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_PerpetualClobMetadata_default_instance_._instance,
    &::dydxprotocol::clob::_SpotClobMetadata_default_instance_._instance,
    &::dydxprotocol::clob::_ClobPair_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2fclob_5fpair_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!dydxprotocol/clob/clob_pair.proto\022\021dyd"
    "xprotocol.clob\"-\n\025PerpetualClobMetadata\022"
    "\024\n\014perpetual_id\030\001 \001(\r\"A\n\020SpotClobMetadat"
    "a\022\025\n\rbase_asset_id\030\001 \001(\r\022\026\n\016quote_asset_"
    "id\030\002 \001(\r\"\322\003\n\010ClobPair\022\n\n\002id\030\001 \001(\r\022K\n\027per"
    "petual_clob_metadata\030\002 \001(\0132(.dydxprotoco"
    "l.clob.PerpetualClobMetadataH\000\022A\n\022spot_c"
    "lob_metadata\030\003 \001(\0132#.dydxprotocol.clob.S"
    "potClobMetadataH\000\022\032\n\022step_base_quantums\030"
    "\004 \001(\004\022\031\n\021subticks_per_tick\030\005 \001(\r\022#\n\033quan"
    "tum_conversion_exponent\030\006 \001(\021\0222\n\006status\030"
    "\007 \001(\0162\".dydxprotocol.clob.ClobPair.Statu"
    "s\"\215\001\n\006Status\022\026\n\022STATUS_UNSPECIFIED\020\000\022\021\n\r"
    "STATUS_ACTIVE\020\001\022\021\n\rSTATUS_PAUSED\020\002\022\026\n\022ST"
    "ATUS_CANCEL_ONLY\020\003\022\024\n\020STATUS_POST_ONLY\020\004"
    "\022\027\n\023STATUS_INITIALIZING\020\005B\n\n\010metadataB8Z"
    "6github.com/dydxprotocol/v4-chain/protoc"
    "ol/x/clob/typesb\006proto3"
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto = {
    false,
    false,
    703,
    descriptor_table_protodef_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
    "dydxprotocol/clob/clob_pair.proto",
    &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2fclob_5fpair_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fclob_5fpair_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fclob_5fpair_2eproto(&descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto);
namespace dydxprotocol {
namespace clob {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClobPair_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2fclob_2fclob_5fpair_2eproto[0];
}
bool ClobPair_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ClobPair_Status ClobPair::STATUS_UNSPECIFIED;
constexpr ClobPair_Status ClobPair::STATUS_ACTIVE;
constexpr ClobPair_Status ClobPair::STATUS_PAUSED;
constexpr ClobPair_Status ClobPair::STATUS_CANCEL_ONLY;
constexpr ClobPair_Status ClobPair::STATUS_POST_ONLY;
constexpr ClobPair_Status ClobPair::STATUS_INITIALIZING;
constexpr ClobPair_Status ClobPair::Status_MIN;
constexpr ClobPair_Status ClobPair::Status_MAX;
constexpr int ClobPair::Status_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PerpetualClobMetadata::_Internal {
 public:
};

PerpetualClobMetadata::PerpetualClobMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.PerpetualClobMetadata)
}
PerpetualClobMetadata::PerpetualClobMetadata(const PerpetualClobMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.PerpetualClobMetadata)
}

inline void PerpetualClobMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.perpetual_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PerpetualClobMetadata::~PerpetualClobMetadata() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.PerpetualClobMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualClobMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void PerpetualClobMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualClobMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.PerpetualClobMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.perpetual_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualClobMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 perpetual_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.perpetual_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualClobMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.PerpetualClobMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 perpetual_id = 1;
  if (this->_internal_perpetual_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_perpetual_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.PerpetualClobMetadata)
  return target;
}

::size_t PerpetualClobMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.PerpetualClobMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 perpetual_id = 1;
  if (this->_internal_perpetual_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_perpetual_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualClobMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualClobMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualClobMetadata::GetClassData() const { return &_class_data_; }


void PerpetualClobMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualClobMetadata*>(&to_msg);
  auto& from = static_cast<const PerpetualClobMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.PerpetualClobMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_perpetual_id() != 0) {
    _this->_internal_set_perpetual_id(from._internal_perpetual_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualClobMetadata::CopyFrom(const PerpetualClobMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.PerpetualClobMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualClobMetadata::IsInitialized() const {
  return true;
}

void PerpetualClobMetadata::InternalSwap(PerpetualClobMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.perpetual_id_, other->_impl_.perpetual_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualClobMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fclob_5fpair_2eproto[0]);
}
// ===================================================================

class SpotClobMetadata::_Internal {
 public:
};

SpotClobMetadata::SpotClobMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.SpotClobMetadata)
}
SpotClobMetadata::SpotClobMetadata(const SpotClobMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.SpotClobMetadata)
}

inline void SpotClobMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.base_asset_id_) { 0u }

    , decltype(_impl_.quote_asset_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpotClobMetadata::~SpotClobMetadata() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.SpotClobMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotClobMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpotClobMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotClobMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.SpotClobMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.base_asset_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.quote_asset_id_) -
      reinterpret_cast<char*>(&_impl_.base_asset_id_)) + sizeof(_impl_.quote_asset_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotClobMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 base_asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.base_asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 quote_asset_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.quote_asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpotClobMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.SpotClobMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 base_asset_id = 1;
  if (this->_internal_base_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_base_asset_id(), target);
  }

  // uint32 quote_asset_id = 2;
  if (this->_internal_quote_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_quote_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.SpotClobMetadata)
  return target;
}

::size_t SpotClobMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.SpotClobMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 base_asset_id = 1;
  if (this->_internal_base_asset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_base_asset_id());
  }

  // uint32 quote_asset_id = 2;
  if (this->_internal_quote_asset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_quote_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpotClobMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpotClobMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpotClobMetadata::GetClassData() const { return &_class_data_; }


void SpotClobMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpotClobMetadata*>(&to_msg);
  auto& from = static_cast<const SpotClobMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.SpotClobMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_base_asset_id() != 0) {
    _this->_internal_set_base_asset_id(from._internal_base_asset_id());
  }
  if (from._internal_quote_asset_id() != 0) {
    _this->_internal_set_quote_asset_id(from._internal_quote_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpotClobMetadata::CopyFrom(const SpotClobMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.SpotClobMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotClobMetadata::IsInitialized() const {
  return true;
}

void SpotClobMetadata::InternalSwap(SpotClobMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotClobMetadata, _impl_.quote_asset_id_)
      + sizeof(SpotClobMetadata::_impl_.quote_asset_id_)
      - PROTOBUF_FIELD_OFFSET(SpotClobMetadata, _impl_.base_asset_id_)>(
          reinterpret_cast<char*>(&_impl_.base_asset_id_),
          reinterpret_cast<char*>(&other->_impl_.base_asset_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotClobMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fclob_5fpair_2eproto[1]);
}
// ===================================================================

class ClobPair::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::ClobPair, _impl_._oneof_case_);
  static const ::dydxprotocol::clob::PerpetualClobMetadata& perpetual_clob_metadata(const ClobPair* msg);
  static const ::dydxprotocol::clob::SpotClobMetadata& spot_clob_metadata(const ClobPair* msg);
};

const ::dydxprotocol::clob::PerpetualClobMetadata&
ClobPair::_Internal::perpetual_clob_metadata(const ClobPair* msg) {
  return *msg->_impl_.metadata_.perpetual_clob_metadata_;
}
const ::dydxprotocol::clob::SpotClobMetadata&
ClobPair::_Internal::spot_clob_metadata(const ClobPair* msg) {
  return *msg->_impl_.metadata_.spot_clob_metadata_;
}
void ClobPair::set_allocated_perpetual_clob_metadata(::dydxprotocol::clob::PerpetualClobMetadata* perpetual_clob_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata();
  if (perpetual_clob_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(perpetual_clob_metadata);
    if (message_arena != submessage_arena) {
      perpetual_clob_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perpetual_clob_metadata, submessage_arena);
    }
    set_has_perpetual_clob_metadata();
    _impl_.metadata_.perpetual_clob_metadata_ = perpetual_clob_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ClobPair.perpetual_clob_metadata)
}
void ClobPair::set_allocated_spot_clob_metadata(::dydxprotocol::clob::SpotClobMetadata* spot_clob_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_metadata();
  if (spot_clob_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spot_clob_metadata);
    if (message_arena != submessage_arena) {
      spot_clob_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spot_clob_metadata, submessage_arena);
    }
    set_has_spot_clob_metadata();
    _impl_.metadata_.spot_clob_metadata_ = spot_clob_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.ClobPair.spot_clob_metadata)
}
ClobPair::ClobPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.ClobPair)
}
ClobPair::ClobPair(const ClobPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClobPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) {}

    , decltype(_impl_.subticks_per_tick_) {}

    , decltype(_impl_.step_base_quantums_) {}

    , decltype(_impl_.quantum_conversion_exponent_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  clear_has_metadata();
  switch (from.metadata_case()) {
    case kPerpetualClobMetadata: {
      _this->_internal_mutable_perpetual_clob_metadata()->::dydxprotocol::clob::PerpetualClobMetadata::MergeFrom(
          from._internal_perpetual_clob_metadata());
      break;
    }
    case kSpotClobMetadata: {
      _this->_internal_mutable_spot_clob_metadata()->::dydxprotocol::clob::SpotClobMetadata::MergeFrom(
          from._internal_spot_clob_metadata());
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.ClobPair)
}

inline void ClobPair::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0u }

    , decltype(_impl_.subticks_per_tick_) { 0u }

    , decltype(_impl_.step_base_quantums_) { ::uint64_t{0u} }

    , decltype(_impl_.quantum_conversion_exponent_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_metadata();
}

ClobPair::~ClobPair() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.ClobPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClobPair::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_metadata()) {
    clear_metadata();
  }
}

void ClobPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClobPair::clear_metadata() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.clob.ClobPair)
  switch (metadata_case()) {
    case kPerpetualClobMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metadata_.perpetual_clob_metadata_;
      }
      break;
    }
    case kSpotClobMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.metadata_.spot_clob_metadata_;
      }
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = METADATA_NOT_SET;
}


void ClobPair::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.ClobPair)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.status_));
  clear_metadata();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClobPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.PerpetualClobMetadata perpetual_clob_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_perpetual_clob_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.SpotClobMetadata spot_clob_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spot_clob_metadata(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 step_base_quantums = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.step_base_quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 subticks_per_tick = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.subticks_per_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 quantum_conversion_exponent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.quantum_conversion_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.clob.ClobPair.Status status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::dydxprotocol::clob::ClobPair_Status>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClobPair::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.ClobPair)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  switch (metadata_case()) {
    case kPerpetualClobMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::perpetual_clob_metadata(this),
          _Internal::perpetual_clob_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpotClobMetadata: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::spot_clob_metadata(this),
          _Internal::spot_clob_metadata(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // uint64 step_base_quantums = 4;
  if (this->_internal_step_base_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_step_base_quantums(), target);
  }

  // uint32 subticks_per_tick = 5;
  if (this->_internal_subticks_per_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_subticks_per_tick(), target);
  }

  // sint32 quantum_conversion_exponent = 6;
  if (this->_internal_quantum_conversion_exponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        6, this->_internal_quantum_conversion_exponent(), target);
  }

  // .dydxprotocol.clob.ClobPair.Status status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.ClobPair)
  return target;
}

::size_t ClobPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.ClobPair)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 subticks_per_tick = 5;
  if (this->_internal_subticks_per_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_subticks_per_tick());
  }

  // uint64 step_base_quantums = 4;
  if (this->_internal_step_base_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_step_base_quantums());
  }

  // sint32 quantum_conversion_exponent = 6;
  if (this->_internal_quantum_conversion_exponent() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_quantum_conversion_exponent());
  }

  // .dydxprotocol.clob.ClobPair.Status status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (metadata_case()) {
    // .dydxprotocol.clob.PerpetualClobMetadata perpetual_clob_metadata = 2;
    case kPerpetualClobMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_.perpetual_clob_metadata_);
      break;
    }
    // .dydxprotocol.clob.SpotClobMetadata spot_clob_metadata = 3;
    case kSpotClobMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.metadata_.spot_clob_metadata_);
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClobPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClobPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClobPair::GetClassData() const { return &_class_data_; }


void ClobPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClobPair*>(&to_msg);
  auto& from = static_cast<const ClobPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.ClobPair)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_subticks_per_tick() != 0) {
    _this->_internal_set_subticks_per_tick(from._internal_subticks_per_tick());
  }
  if (from._internal_step_base_quantums() != 0) {
    _this->_internal_set_step_base_quantums(from._internal_step_base_quantums());
  }
  if (from._internal_quantum_conversion_exponent() != 0) {
    _this->_internal_set_quantum_conversion_exponent(from._internal_quantum_conversion_exponent());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  switch (from.metadata_case()) {
    case kPerpetualClobMetadata: {
      _this->_internal_mutable_perpetual_clob_metadata()->::dydxprotocol::clob::PerpetualClobMetadata::MergeFrom(
          from._internal_perpetual_clob_metadata());
      break;
    }
    case kSpotClobMetadata: {
      _this->_internal_mutable_spot_clob_metadata()->::dydxprotocol::clob::SpotClobMetadata::MergeFrom(
          from._internal_spot_clob_metadata());
      break;
    }
    case METADATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClobPair::CopyFrom(const ClobPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.ClobPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClobPair::IsInitialized() const {
  return true;
}

void ClobPair::InternalSwap(ClobPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClobPair, _impl_.status_)
      + sizeof(ClobPair::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(ClobPair, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
  swap(_impl_.metadata_, other->_impl_.metadata_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClobPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fclob_5fpair_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fclob_5fpair_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::PerpetualClobMetadata*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::PerpetualClobMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::PerpetualClobMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::SpotClobMetadata*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::SpotClobMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::SpotClobMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::ClobPair*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::ClobPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::ClobPair >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
