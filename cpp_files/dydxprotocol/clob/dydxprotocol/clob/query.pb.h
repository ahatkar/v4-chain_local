// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "dydxprotocol/clob/clob_pair.pb.h"
#include "dydxprotocol/clob/equity_tier_limit_config.pb.h"
#include "dydxprotocol/clob/mev.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fquery_2eproto;
namespace dydxprotocol {
namespace clob {
class AreSubaccountsLiquidatableRequest;
struct AreSubaccountsLiquidatableRequestDefaultTypeInternal;
extern AreSubaccountsLiquidatableRequestDefaultTypeInternal _AreSubaccountsLiquidatableRequest_default_instance_;
class AreSubaccountsLiquidatableResponse;
struct AreSubaccountsLiquidatableResponseDefaultTypeInternal;
extern AreSubaccountsLiquidatableResponseDefaultTypeInternal _AreSubaccountsLiquidatableResponse_default_instance_;
class AreSubaccountsLiquidatableResponse_Result;
struct AreSubaccountsLiquidatableResponse_ResultDefaultTypeInternal;
extern AreSubaccountsLiquidatableResponse_ResultDefaultTypeInternal _AreSubaccountsLiquidatableResponse_Result_default_instance_;
class MevNodeToNodeCalculationRequest;
struct MevNodeToNodeCalculationRequestDefaultTypeInternal;
extern MevNodeToNodeCalculationRequestDefaultTypeInternal _MevNodeToNodeCalculationRequest_default_instance_;
class MevNodeToNodeCalculationResponse;
struct MevNodeToNodeCalculationResponseDefaultTypeInternal;
extern MevNodeToNodeCalculationResponseDefaultTypeInternal _MevNodeToNodeCalculationResponse_default_instance_;
class MevNodeToNodeCalculationResponse_MevAndVolumePerClob;
struct MevNodeToNodeCalculationResponse_MevAndVolumePerClobDefaultTypeInternal;
extern MevNodeToNodeCalculationResponse_MevAndVolumePerClobDefaultTypeInternal _MevNodeToNodeCalculationResponse_MevAndVolumePerClob_default_instance_;
class QueryAllClobPairRequest;
struct QueryAllClobPairRequestDefaultTypeInternal;
extern QueryAllClobPairRequestDefaultTypeInternal _QueryAllClobPairRequest_default_instance_;
class QueryClobPairAllResponse;
struct QueryClobPairAllResponseDefaultTypeInternal;
extern QueryClobPairAllResponseDefaultTypeInternal _QueryClobPairAllResponse_default_instance_;
class QueryClobPairResponse;
struct QueryClobPairResponseDefaultTypeInternal;
extern QueryClobPairResponseDefaultTypeInternal _QueryClobPairResponse_default_instance_;
class QueryEquityTierLimitConfigurationRequest;
struct QueryEquityTierLimitConfigurationRequestDefaultTypeInternal;
extern QueryEquityTierLimitConfigurationRequestDefaultTypeInternal _QueryEquityTierLimitConfigurationRequest_default_instance_;
class QueryEquityTierLimitConfigurationResponse;
struct QueryEquityTierLimitConfigurationResponseDefaultTypeInternal;
extern QueryEquityTierLimitConfigurationResponseDefaultTypeInternal _QueryEquityTierLimitConfigurationResponse_default_instance_;
class QueryGetClobPairRequest;
struct QueryGetClobPairRequestDefaultTypeInternal;
extern QueryGetClobPairRequestDefaultTypeInternal _QueryGetClobPairRequest_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::AreSubaccountsLiquidatableRequest* Arena::CreateMaybeMessage<::dydxprotocol::clob::AreSubaccountsLiquidatableRequest>(Arena*);
template <>
::dydxprotocol::clob::AreSubaccountsLiquidatableResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::AreSubaccountsLiquidatableResponse>(Arena*);
template <>
::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* Arena::CreateMaybeMessage<::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result>(Arena*);
template <>
::dydxprotocol::clob::MevNodeToNodeCalculationRequest* Arena::CreateMaybeMessage<::dydxprotocol::clob::MevNodeToNodeCalculationRequest>(Arena*);
template <>
::dydxprotocol::clob::MevNodeToNodeCalculationResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::MevNodeToNodeCalculationResponse>(Arena*);
template <>
::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* Arena::CreateMaybeMessage<::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob>(Arena*);
template <>
::dydxprotocol::clob::QueryAllClobPairRequest* Arena::CreateMaybeMessage<::dydxprotocol::clob::QueryAllClobPairRequest>(Arena*);
template <>
::dydxprotocol::clob::QueryClobPairAllResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::QueryClobPairAllResponse>(Arena*);
template <>
::dydxprotocol::clob::QueryClobPairResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::QueryClobPairResponse>(Arena*);
template <>
::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest* Arena::CreateMaybeMessage<::dydxprotocol::clob::QueryEquityTierLimitConfigurationRequest>(Arena*);
template <>
::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse* Arena::CreateMaybeMessage<::dydxprotocol::clob::QueryEquityTierLimitConfigurationResponse>(Arena*);
template <>
::dydxprotocol::clob::QueryGetClobPairRequest* Arena::CreateMaybeMessage<::dydxprotocol::clob::QueryGetClobPairRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class QueryGetClobPairRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.QueryGetClobPairRequest) */ {
 public:
  inline QueryGetClobPairRequest() : QueryGetClobPairRequest(nullptr) {}
  ~QueryGetClobPairRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGetClobPairRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGetClobPairRequest(const QueryGetClobPairRequest& from);
  QueryGetClobPairRequest(QueryGetClobPairRequest&& from) noexcept
    : QueryGetClobPairRequest() {
    *this = ::std::move(from);
  }

  inline QueryGetClobPairRequest& operator=(const QueryGetClobPairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGetClobPairRequest& operator=(QueryGetClobPairRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGetClobPairRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGetClobPairRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGetClobPairRequest*>(
               &_QueryGetClobPairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryGetClobPairRequest& a, QueryGetClobPairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGetClobPairRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGetClobPairRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGetClobPairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGetClobPairRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGetClobPairRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGetClobPairRequest& from) {
    QueryGetClobPairRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGetClobPairRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.QueryGetClobPairRequest";
  }
  protected:
  explicit QueryGetClobPairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.QueryGetClobPairRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClobPairResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.QueryClobPairResponse) */ {
 public:
  inline QueryClobPairResponse() : QueryClobPairResponse(nullptr) {}
  ~QueryClobPairResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClobPairResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClobPairResponse(const QueryClobPairResponse& from);
  QueryClobPairResponse(QueryClobPairResponse&& from) noexcept
    : QueryClobPairResponse() {
    *this = ::std::move(from);
  }

  inline QueryClobPairResponse& operator=(const QueryClobPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClobPairResponse& operator=(QueryClobPairResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClobPairResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClobPairResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClobPairResponse*>(
               &_QueryClobPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryClobPairResponse& a, QueryClobPairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClobPairResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClobPairResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClobPairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClobPairResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClobPairResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClobPairResponse& from) {
    QueryClobPairResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClobPairResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.QueryClobPairResponse";
  }
  protected:
  explicit QueryClobPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClobPairFieldNumber = 1,
  };
  // .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  bool has_clob_pair() const;
  void clear_clob_pair() ;
  const ::dydxprotocol::clob::ClobPair& clob_pair() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ClobPair* release_clob_pair();
  ::dydxprotocol::clob::ClobPair* mutable_clob_pair();
  void set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair);
  private:
  const ::dydxprotocol::clob::ClobPair& _internal_clob_pair() const;
  ::dydxprotocol::clob::ClobPair* _internal_mutable_clob_pair();
  public:
  void unsafe_arena_set_allocated_clob_pair(
      ::dydxprotocol::clob::ClobPair* clob_pair);
  ::dydxprotocol::clob::ClobPair* unsafe_arena_release_clob_pair();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.QueryClobPairResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::ClobPair* clob_pair_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllClobPairRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.QueryAllClobPairRequest) */ {
 public:
  inline QueryAllClobPairRequest() : QueryAllClobPairRequest(nullptr) {}
  ~QueryAllClobPairRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllClobPairRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllClobPairRequest(const QueryAllClobPairRequest& from);
  QueryAllClobPairRequest(QueryAllClobPairRequest&& from) noexcept
    : QueryAllClobPairRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllClobPairRequest& operator=(const QueryAllClobPairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllClobPairRequest& operator=(QueryAllClobPairRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllClobPairRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllClobPairRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllClobPairRequest*>(
               &_QueryAllClobPairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllClobPairRequest& a, QueryAllClobPairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllClobPairRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllClobPairRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllClobPairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllClobPairRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllClobPairRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllClobPairRequest& from) {
    QueryAllClobPairRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllClobPairRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.QueryAllClobPairRequest";
  }
  protected:
  explicit QueryAllClobPairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.QueryAllClobPairRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClobPairAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.QueryClobPairAllResponse) */ {
 public:
  inline QueryClobPairAllResponse() : QueryClobPairAllResponse(nullptr) {}
  ~QueryClobPairAllResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClobPairAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClobPairAllResponse(const QueryClobPairAllResponse& from);
  QueryClobPairAllResponse(QueryClobPairAllResponse&& from) noexcept
    : QueryClobPairAllResponse() {
    *this = ::std::move(from);
  }

  inline QueryClobPairAllResponse& operator=(const QueryClobPairAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClobPairAllResponse& operator=(QueryClobPairAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClobPairAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClobPairAllResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClobPairAllResponse*>(
               &_QueryClobPairAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryClobPairAllResponse& a, QueryClobPairAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClobPairAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClobPairAllResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClobPairAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClobPairAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClobPairAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClobPairAllResponse& from) {
    QueryClobPairAllResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClobPairAllResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.QueryClobPairAllResponse";
  }
  protected:
  explicit QueryClobPairAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClobPairFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
  int clob_pair_size() const;
  private:
  int _internal_clob_pair_size() const;

  public:
  void clear_clob_pair() ;
  ::dydxprotocol::clob::ClobPair* mutable_clob_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobPair >*
      mutable_clob_pair();
  private:
  const ::dydxprotocol::clob::ClobPair& _internal_clob_pair(int index) const;
  ::dydxprotocol::clob::ClobPair* _internal_add_clob_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobPair>& _internal_clob_pair() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobPair>* _internal_mutable_clob_pair();
  public:
  const ::dydxprotocol::clob::ClobPair& clob_pair(int index) const;
  ::dydxprotocol::clob::ClobPair* add_clob_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobPair >&
      clob_pair() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.QueryClobPairAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobPair > clob_pair_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class AreSubaccountsLiquidatableRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.AreSubaccountsLiquidatableRequest) */ {
 public:
  inline AreSubaccountsLiquidatableRequest() : AreSubaccountsLiquidatableRequest(nullptr) {}
  ~AreSubaccountsLiquidatableRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreSubaccountsLiquidatableRequest(const AreSubaccountsLiquidatableRequest& from);
  AreSubaccountsLiquidatableRequest(AreSubaccountsLiquidatableRequest&& from) noexcept
    : AreSubaccountsLiquidatableRequest() {
    *this = ::std::move(from);
  }

  inline AreSubaccountsLiquidatableRequest& operator=(const AreSubaccountsLiquidatableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreSubaccountsLiquidatableRequest& operator=(AreSubaccountsLiquidatableRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AreSubaccountsLiquidatableRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreSubaccountsLiquidatableRequest* internal_default_instance() {
    return reinterpret_cast<const AreSubaccountsLiquidatableRequest*>(
               &_AreSubaccountsLiquidatableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AreSubaccountsLiquidatableRequest& a, AreSubaccountsLiquidatableRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AreSubaccountsLiquidatableRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreSubaccountsLiquidatableRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreSubaccountsLiquidatableRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreSubaccountsLiquidatableRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AreSubaccountsLiquidatableRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AreSubaccountsLiquidatableRequest& from) {
    AreSubaccountsLiquidatableRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreSubaccountsLiquidatableRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.AreSubaccountsLiquidatableRequest";
  }
  protected:
  explicit AreSubaccountsLiquidatableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdsFieldNumber = 1,
  };
  // repeated .dydxprotocol.subaccounts.SubaccountId subaccount_ids = 1 [(.gogoproto.nullable) = false];
  int subaccount_ids_size() const;
  private:
  int _internal_subaccount_ids_size() const;

  public:
  void clear_subaccount_ids() ;
  ::dydxprotocol::subaccounts::SubaccountId* mutable_subaccount_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::SubaccountId >*
      mutable_subaccount_ids();
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_subaccount_ids(int index) const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_add_subaccount_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::SubaccountId>& _internal_subaccount_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::SubaccountId>* _internal_mutable_subaccount_ids();
  public:
  const ::dydxprotocol::subaccounts::SubaccountId& subaccount_ids(int index) const;
  ::dydxprotocol::subaccounts::SubaccountId* add_subaccount_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::SubaccountId >&
      subaccount_ids() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.AreSubaccountsLiquidatableRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::SubaccountId > subaccount_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class AreSubaccountsLiquidatableResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result) */ {
 public:
  inline AreSubaccountsLiquidatableResponse_Result() : AreSubaccountsLiquidatableResponse_Result(nullptr) {}
  ~AreSubaccountsLiquidatableResponse_Result() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreSubaccountsLiquidatableResponse_Result(const AreSubaccountsLiquidatableResponse_Result& from);
  AreSubaccountsLiquidatableResponse_Result(AreSubaccountsLiquidatableResponse_Result&& from) noexcept
    : AreSubaccountsLiquidatableResponse_Result() {
    *this = ::std::move(from);
  }

  inline AreSubaccountsLiquidatableResponse_Result& operator=(const AreSubaccountsLiquidatableResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreSubaccountsLiquidatableResponse_Result& operator=(AreSubaccountsLiquidatableResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AreSubaccountsLiquidatableResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreSubaccountsLiquidatableResponse_Result* internal_default_instance() {
    return reinterpret_cast<const AreSubaccountsLiquidatableResponse_Result*>(
               &_AreSubaccountsLiquidatableResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AreSubaccountsLiquidatableResponse_Result& a, AreSubaccountsLiquidatableResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(AreSubaccountsLiquidatableResponse_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreSubaccountsLiquidatableResponse_Result* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreSubaccountsLiquidatableResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreSubaccountsLiquidatableResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AreSubaccountsLiquidatableResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AreSubaccountsLiquidatableResponse_Result& from) {
    AreSubaccountsLiquidatableResponse_Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreSubaccountsLiquidatableResponse_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result";
  }
  protected:
  explicit AreSubaccountsLiquidatableResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kIsLiquidatableFieldNumber = 2,
  };
  // .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  bool has_subaccount_id() const;
  void clear_subaccount_id() ;
  const ::dydxprotocol::subaccounts::SubaccountId& subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_subaccount_id();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_subaccount_id();
  void set_allocated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* subaccount_id);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_subaccount_id() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_subaccount_id();
  public:
  void unsafe_arena_set_allocated_subaccount_id(
      ::dydxprotocol::subaccounts::SubaccountId* subaccount_id);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_subaccount_id();
  // bool is_liquidatable = 2;
  void clear_is_liquidatable() ;
  bool is_liquidatable() const;
  void set_is_liquidatable(bool value);

  private:
  bool _internal_is_liquidatable() const;
  void _internal_set_is_liquidatable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::subaccounts::SubaccountId* subaccount_id_;
    bool is_liquidatable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class AreSubaccountsLiquidatableResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.AreSubaccountsLiquidatableResponse) */ {
 public:
  inline AreSubaccountsLiquidatableResponse() : AreSubaccountsLiquidatableResponse(nullptr) {}
  ~AreSubaccountsLiquidatableResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AreSubaccountsLiquidatableResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AreSubaccountsLiquidatableResponse(const AreSubaccountsLiquidatableResponse& from);
  AreSubaccountsLiquidatableResponse(AreSubaccountsLiquidatableResponse&& from) noexcept
    : AreSubaccountsLiquidatableResponse() {
    *this = ::std::move(from);
  }

  inline AreSubaccountsLiquidatableResponse& operator=(const AreSubaccountsLiquidatableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AreSubaccountsLiquidatableResponse& operator=(AreSubaccountsLiquidatableResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AreSubaccountsLiquidatableResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AreSubaccountsLiquidatableResponse* internal_default_instance() {
    return reinterpret_cast<const AreSubaccountsLiquidatableResponse*>(
               &_AreSubaccountsLiquidatableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AreSubaccountsLiquidatableResponse& a, AreSubaccountsLiquidatableResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AreSubaccountsLiquidatableResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AreSubaccountsLiquidatableResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AreSubaccountsLiquidatableResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AreSubaccountsLiquidatableResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AreSubaccountsLiquidatableResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AreSubaccountsLiquidatableResponse& from) {
    AreSubaccountsLiquidatableResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AreSubaccountsLiquidatableResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.AreSubaccountsLiquidatableResponse";
  }
  protected:
  explicit AreSubaccountsLiquidatableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AreSubaccountsLiquidatableResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result results = 1 [(.gogoproto.nullable) = false];
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result >*
      mutable_results();
  private:
  const ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result& _internal_results(int index) const;
  ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* _internal_add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result>& _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result>* _internal_mutable_results();
  public:
  const ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result& results(int index) const;
  ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result >&
      results() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.AreSubaccountsLiquidatableResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result > results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class MevNodeToNodeCalculationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MevNodeToNodeCalculationRequest) */ {
 public:
  inline MevNodeToNodeCalculationRequest() : MevNodeToNodeCalculationRequest(nullptr) {}
  ~MevNodeToNodeCalculationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MevNodeToNodeCalculationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MevNodeToNodeCalculationRequest(const MevNodeToNodeCalculationRequest& from);
  MevNodeToNodeCalculationRequest(MevNodeToNodeCalculationRequest&& from) noexcept
    : MevNodeToNodeCalculationRequest() {
    *this = ::std::move(from);
  }

  inline MevNodeToNodeCalculationRequest& operator=(const MevNodeToNodeCalculationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MevNodeToNodeCalculationRequest& operator=(MevNodeToNodeCalculationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MevNodeToNodeCalculationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MevNodeToNodeCalculationRequest* internal_default_instance() {
    return reinterpret_cast<const MevNodeToNodeCalculationRequest*>(
               &_MevNodeToNodeCalculationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MevNodeToNodeCalculationRequest& a, MevNodeToNodeCalculationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MevNodeToNodeCalculationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MevNodeToNodeCalculationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MevNodeToNodeCalculationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MevNodeToNodeCalculationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MevNodeToNodeCalculationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MevNodeToNodeCalculationRequest& from) {
    MevNodeToNodeCalculationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MevNodeToNodeCalculationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MevNodeToNodeCalculationRequest";
  }
  protected:
  explicit MevNodeToNodeCalculationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockProposerMatchesFieldNumber = 1,
    kValidatorMevMetricsFieldNumber = 2,
  };
  // .dydxprotocol.clob.ValidatorMevMatches block_proposer_matches = 1;
  bool has_block_proposer_matches() const;
  void clear_block_proposer_matches() ;
  const ::dydxprotocol::clob::ValidatorMevMatches& block_proposer_matches() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::ValidatorMevMatches* release_block_proposer_matches();
  ::dydxprotocol::clob::ValidatorMevMatches* mutable_block_proposer_matches();
  void set_allocated_block_proposer_matches(::dydxprotocol::clob::ValidatorMevMatches* block_proposer_matches);
  private:
  const ::dydxprotocol::clob::ValidatorMevMatches& _internal_block_proposer_matches() const;
  ::dydxprotocol::clob::ValidatorMevMatches* _internal_mutable_block_proposer_matches();
  public:
  void unsafe_arena_set_allocated_block_proposer_matches(
      ::dydxprotocol::clob::ValidatorMevMatches* block_proposer_matches);
  ::dydxprotocol::clob::ValidatorMevMatches* unsafe_arena_release_block_proposer_matches();
  // .dydxprotocol.clob.MevNodeToNodeMetrics validator_mev_metrics = 2;
  bool has_validator_mev_metrics() const;
  void clear_validator_mev_metrics() ;
  const ::dydxprotocol::clob::MevNodeToNodeMetrics& validator_mev_metrics() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::MevNodeToNodeMetrics* release_validator_mev_metrics();
  ::dydxprotocol::clob::MevNodeToNodeMetrics* mutable_validator_mev_metrics();
  void set_allocated_validator_mev_metrics(::dydxprotocol::clob::MevNodeToNodeMetrics* validator_mev_metrics);
  private:
  const ::dydxprotocol::clob::MevNodeToNodeMetrics& _internal_validator_mev_metrics() const;
  ::dydxprotocol::clob::MevNodeToNodeMetrics* _internal_mutable_validator_mev_metrics();
  public:
  void unsafe_arena_set_allocated_validator_mev_metrics(
      ::dydxprotocol::clob::MevNodeToNodeMetrics* validator_mev_metrics);
  ::dydxprotocol::clob::MevNodeToNodeMetrics* unsafe_arena_release_validator_mev_metrics();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MevNodeToNodeCalculationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::ValidatorMevMatches* block_proposer_matches_;
    ::dydxprotocol::clob::MevNodeToNodeMetrics* validator_mev_metrics_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class MevNodeToNodeCalculationResponse_MevAndVolumePerClob final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob) */ {
 public:
  inline MevNodeToNodeCalculationResponse_MevAndVolumePerClob() : MevNodeToNodeCalculationResponse_MevAndVolumePerClob(nullptr) {}
  ~MevNodeToNodeCalculationResponse_MevAndVolumePerClob() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MevNodeToNodeCalculationResponse_MevAndVolumePerClob(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MevNodeToNodeCalculationResponse_MevAndVolumePerClob(const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& from);
  MevNodeToNodeCalculationResponse_MevAndVolumePerClob(MevNodeToNodeCalculationResponse_MevAndVolumePerClob&& from) noexcept
    : MevNodeToNodeCalculationResponse_MevAndVolumePerClob() {
    *this = ::std::move(from);
  }

  inline MevNodeToNodeCalculationResponse_MevAndVolumePerClob& operator=(const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& from) {
    CopyFrom(from);
    return *this;
  }
  inline MevNodeToNodeCalculationResponse_MevAndVolumePerClob& operator=(MevNodeToNodeCalculationResponse_MevAndVolumePerClob&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& default_instance() {
    return *internal_default_instance();
  }
  static inline const MevNodeToNodeCalculationResponse_MevAndVolumePerClob* internal_default_instance() {
    return reinterpret_cast<const MevNodeToNodeCalculationResponse_MevAndVolumePerClob*>(
               &_MevNodeToNodeCalculationResponse_MevAndVolumePerClob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MevNodeToNodeCalculationResponse_MevAndVolumePerClob& a, MevNodeToNodeCalculationResponse_MevAndVolumePerClob& b) {
    a.Swap(&b);
  }
  inline void Swap(MevNodeToNodeCalculationResponse_MevAndVolumePerClob* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MevNodeToNodeCalculationResponse_MevAndVolumePerClob* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MevNodeToNodeCalculationResponse_MevAndVolumePerClob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MevNodeToNodeCalculationResponse_MevAndVolumePerClob>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MevNodeToNodeCalculationResponse_MevAndVolumePerClob& from) {
    MevNodeToNodeCalculationResponse_MevAndVolumePerClob::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MevNodeToNodeCalculationResponse_MevAndVolumePerClob* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob";
  }
  protected:
  explicit MevNodeToNodeCalculationResponse_MevAndVolumePerClob(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClobPairIdFieldNumber = 1,
    kMevFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // uint32 clob_pair_id = 1;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // float mev = 2;
  void clear_mev() ;
  float mev() const;
  void set_mev(float value);

  private:
  float _internal_mev() const;
  void _internal_set_mev(float value);

  public:
  // uint64 volume = 3;
  void clear_volume() ;
  ::uint64_t volume() const;
  void set_volume(::uint64_t value);

  private:
  ::uint64_t _internal_volume() const;
  void _internal_set_volume(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t clob_pair_id_;
    float mev_;
    ::uint64_t volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class MevNodeToNodeCalculationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MevNodeToNodeCalculationResponse) */ {
 public:
  inline MevNodeToNodeCalculationResponse() : MevNodeToNodeCalculationResponse(nullptr) {}
  ~MevNodeToNodeCalculationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MevNodeToNodeCalculationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MevNodeToNodeCalculationResponse(const MevNodeToNodeCalculationResponse& from);
  MevNodeToNodeCalculationResponse(MevNodeToNodeCalculationResponse&& from) noexcept
    : MevNodeToNodeCalculationResponse() {
    *this = ::std::move(from);
  }

  inline MevNodeToNodeCalculationResponse& operator=(const MevNodeToNodeCalculationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MevNodeToNodeCalculationResponse& operator=(MevNodeToNodeCalculationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MevNodeToNodeCalculationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MevNodeToNodeCalculationResponse* internal_default_instance() {
    return reinterpret_cast<const MevNodeToNodeCalculationResponse*>(
               &_MevNodeToNodeCalculationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MevNodeToNodeCalculationResponse& a, MevNodeToNodeCalculationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MevNodeToNodeCalculationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MevNodeToNodeCalculationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MevNodeToNodeCalculationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MevNodeToNodeCalculationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MevNodeToNodeCalculationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MevNodeToNodeCalculationResponse& from) {
    MevNodeToNodeCalculationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MevNodeToNodeCalculationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MevNodeToNodeCalculationResponse";
  }
  protected:
  explicit MevNodeToNodeCalculationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MevNodeToNodeCalculationResponse_MevAndVolumePerClob MevAndVolumePerClob;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob results = 1 [(.gogoproto.nullable) = false];
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob >*
      mutable_results();
  private:
  const ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob& _internal_results(int index) const;
  ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* _internal_add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob>& _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob>* _internal_mutable_results();
  public:
  const ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob& results(int index) const;
  ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob >&
      results() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MevNodeToNodeCalculationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob > results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEquityTierLimitConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.QueryEquityTierLimitConfigurationRequest) */ {
 public:
  inline QueryEquityTierLimitConfigurationRequest() : QueryEquityTierLimitConfigurationRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEquityTierLimitConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEquityTierLimitConfigurationRequest(const QueryEquityTierLimitConfigurationRequest& from);
  QueryEquityTierLimitConfigurationRequest(QueryEquityTierLimitConfigurationRequest&& from) noexcept
    : QueryEquityTierLimitConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline QueryEquityTierLimitConfigurationRequest& operator=(const QueryEquityTierLimitConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEquityTierLimitConfigurationRequest& operator=(QueryEquityTierLimitConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEquityTierLimitConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEquityTierLimitConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const QueryEquityTierLimitConfigurationRequest*>(
               &_QueryEquityTierLimitConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryEquityTierLimitConfigurationRequest& a, QueryEquityTierLimitConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEquityTierLimitConfigurationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEquityTierLimitConfigurationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEquityTierLimitConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEquityTierLimitConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryEquityTierLimitConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryEquityTierLimitConfigurationRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.QueryEquityTierLimitConfigurationRequest";
  }
  protected:
  explicit QueryEquityTierLimitConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.QueryEquityTierLimitConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEquityTierLimitConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse) */ {
 public:
  inline QueryEquityTierLimitConfigurationResponse() : QueryEquityTierLimitConfigurationResponse(nullptr) {}
  ~QueryEquityTierLimitConfigurationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEquityTierLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEquityTierLimitConfigurationResponse(const QueryEquityTierLimitConfigurationResponse& from);
  QueryEquityTierLimitConfigurationResponse(QueryEquityTierLimitConfigurationResponse&& from) noexcept
    : QueryEquityTierLimitConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline QueryEquityTierLimitConfigurationResponse& operator=(const QueryEquityTierLimitConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEquityTierLimitConfigurationResponse& operator=(QueryEquityTierLimitConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEquityTierLimitConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEquityTierLimitConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEquityTierLimitConfigurationResponse*>(
               &_QueryEquityTierLimitConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryEquityTierLimitConfigurationResponse& a, QueryEquityTierLimitConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEquityTierLimitConfigurationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEquityTierLimitConfigurationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEquityTierLimitConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEquityTierLimitConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEquityTierLimitConfigurationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEquityTierLimitConfigurationResponse& from) {
    QueryEquityTierLimitConfigurationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEquityTierLimitConfigurationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse";
  }
  protected:
  explicit QueryEquityTierLimitConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquityTierLimitConfigFieldNumber = 1,
  };
  // .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 1 [(.gogoproto.nullable) = false];
  bool has_equity_tier_limit_config() const;
  void clear_equity_tier_limit_config() ;
  const ::dydxprotocol::clob::EquityTierLimitConfiguration& equity_tier_limit_config() const;
  PROTOBUF_NODISCARD ::dydxprotocol::clob::EquityTierLimitConfiguration* release_equity_tier_limit_config();
  ::dydxprotocol::clob::EquityTierLimitConfiguration* mutable_equity_tier_limit_config();
  void set_allocated_equity_tier_limit_config(::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config);
  private:
  const ::dydxprotocol::clob::EquityTierLimitConfiguration& _internal_equity_tier_limit_config() const;
  ::dydxprotocol::clob::EquityTierLimitConfiguration* _internal_mutable_equity_tier_limit_config();
  public:
  void unsafe_arena_set_allocated_equity_tier_limit_config(
      ::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config);
  ::dydxprotocol::clob::EquityTierLimitConfiguration* unsafe_arena_release_equity_tier_limit_config();
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryGetClobPairRequest

// uint32 id = 1;
inline void QueryGetClobPairRequest::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t QueryGetClobPairRequest::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.QueryGetClobPairRequest.id)
  return _internal_id();
}
inline void QueryGetClobPairRequest::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.QueryGetClobPairRequest.id)
}
inline ::uint32_t QueryGetClobPairRequest::_internal_id() const {
  return _impl_.id_;
}
inline void QueryGetClobPairRequest::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// QueryClobPairResponse

// .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
inline bool QueryClobPairResponse::has_clob_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.clob_pair_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::ClobPair& QueryClobPairResponse::_internal_clob_pair() const {
  const ::dydxprotocol::clob::ClobPair* p = _impl_.clob_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::ClobPair&>(
      ::dydxprotocol::clob::_ClobPair_default_instance_);
}
inline const ::dydxprotocol::clob::ClobPair& QueryClobPairResponse::clob_pair() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.QueryClobPairResponse.clob_pair)
  return _internal_clob_pair();
}
inline void QueryClobPairResponse::unsafe_arena_set_allocated_clob_pair(
    ::dydxprotocol::clob::ClobPair* clob_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  _impl_.clob_pair_ = clob_pair;
  if (clob_pair) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.QueryClobPairResponse.clob_pair)
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairResponse::release_clob_pair() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairResponse::unsafe_arena_release_clob_pair() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.QueryClobPairResponse.clob_pair)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ClobPair* temp = _impl_.clob_pair_;
  _impl_.clob_pair_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairResponse::_internal_mutable_clob_pair() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.clob_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::ClobPair>(GetArenaForAllocation());
    _impl_.clob_pair_ = p;
  }
  return _impl_.clob_pair_;
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairResponse::mutable_clob_pair() {
  ::dydxprotocol::clob::ClobPair* _msg = _internal_mutable_clob_pair();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.QueryClobPairResponse.clob_pair)
  return _msg;
}
inline void QueryClobPairResponse::set_allocated_clob_pair(::dydxprotocol::clob::ClobPair* clob_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clob_pair_);
  }
  if (clob_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clob_pair));
    if (message_arena != submessage_arena) {
      clob_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clob_pair, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.clob_pair_ = clob_pair;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.QueryClobPairResponse.clob_pair)
}

// -------------------------------------------------------------------

// QueryAllClobPairRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1;
inline bool QueryAllClobPairRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllClobPairRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllClobPairRequest::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.QueryAllClobPairRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllClobPairRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.QueryAllClobPairRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllClobPairRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllClobPairRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.QueryAllClobPairRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllClobPairRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllClobPairRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.QueryAllClobPairRequest.pagination)
  return _msg;
}
inline void QueryAllClobPairRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.QueryAllClobPairRequest.pagination)
}

// -------------------------------------------------------------------

// QueryClobPairAllResponse

// repeated .dydxprotocol.clob.ClobPair clob_pair = 1 [(.gogoproto.nullable) = false];
inline int QueryClobPairAllResponse::_internal_clob_pair_size() const {
  return _impl_.clob_pair_.size();
}
inline int QueryClobPairAllResponse::clob_pair_size() const {
  return _internal_clob_pair_size();
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairAllResponse::mutable_clob_pair(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.QueryClobPairAllResponse.clob_pair)
  return _internal_mutable_clob_pair()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobPair >*
QueryClobPairAllResponse::mutable_clob_pair() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.QueryClobPairAllResponse.clob_pair)
  return _internal_mutable_clob_pair();
}
inline const ::dydxprotocol::clob::ClobPair& QueryClobPairAllResponse::_internal_clob_pair(int index) const {
  return _internal_clob_pair().Get(index);
}
inline const ::dydxprotocol::clob::ClobPair& QueryClobPairAllResponse::clob_pair(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.QueryClobPairAllResponse.clob_pair)
  return _internal_clob_pair(index);
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairAllResponse::_internal_add_clob_pair() {
  return _internal_mutable_clob_pair()->Add();
}
inline ::dydxprotocol::clob::ClobPair* QueryClobPairAllResponse::add_clob_pair() {
  ::dydxprotocol::clob::ClobPair* _add = _internal_add_clob_pair();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.QueryClobPairAllResponse.clob_pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::ClobPair >&
QueryClobPairAllResponse::clob_pair() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.QueryClobPairAllResponse.clob_pair)
  return _internal_clob_pair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobPair>&
QueryClobPairAllResponse::_internal_clob_pair() const {
  return _impl_.clob_pair_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::ClobPair>*
QueryClobPairAllResponse::_internal_mutable_clob_pair() {
  return &_impl_.clob_pair_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2;
inline bool QueryClobPairAllResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClobPairAllResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClobPairAllResponse::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.QueryClobPairAllResponse.pagination)
  return _internal_pagination();
}
inline void QueryClobPairAllResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.QueryClobPairAllResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClobPairAllResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClobPairAllResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.QueryClobPairAllResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClobPairAllResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClobPairAllResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.QueryClobPairAllResponse.pagination)
  return _msg;
}
inline void QueryClobPairAllResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.QueryClobPairAllResponse.pagination)
}

// -------------------------------------------------------------------

// AreSubaccountsLiquidatableRequest

// repeated .dydxprotocol.subaccounts.SubaccountId subaccount_ids = 1 [(.gogoproto.nullable) = false];
inline int AreSubaccountsLiquidatableRequest::_internal_subaccount_ids_size() const {
  return _impl_.subaccount_ids_.size();
}
inline int AreSubaccountsLiquidatableRequest::subaccount_ids_size() const {
  return _internal_subaccount_ids_size();
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableRequest::mutable_subaccount_ids(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.AreSubaccountsLiquidatableRequest.subaccount_ids)
  return _internal_mutable_subaccount_ids()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::SubaccountId >*
AreSubaccountsLiquidatableRequest::mutable_subaccount_ids() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.AreSubaccountsLiquidatableRequest.subaccount_ids)
  return _internal_mutable_subaccount_ids();
}
inline const ::dydxprotocol::subaccounts::SubaccountId& AreSubaccountsLiquidatableRequest::_internal_subaccount_ids(int index) const {
  return _internal_subaccount_ids().Get(index);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& AreSubaccountsLiquidatableRequest::subaccount_ids(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.AreSubaccountsLiquidatableRequest.subaccount_ids)
  return _internal_subaccount_ids(index);
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableRequest::_internal_add_subaccount_ids() {
  return _internal_mutable_subaccount_ids()->Add();
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableRequest::add_subaccount_ids() {
  ::dydxprotocol::subaccounts::SubaccountId* _add = _internal_add_subaccount_ids();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.AreSubaccountsLiquidatableRequest.subaccount_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::SubaccountId >&
AreSubaccountsLiquidatableRequest::subaccount_ids() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.AreSubaccountsLiquidatableRequest.subaccount_ids)
  return _internal_subaccount_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::SubaccountId>&
AreSubaccountsLiquidatableRequest::_internal_subaccount_ids() const {
  return _impl_.subaccount_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::SubaccountId>*
AreSubaccountsLiquidatableRequest::_internal_mutable_subaccount_ids() {
  return &_impl_.subaccount_ids_;
}

// -------------------------------------------------------------------

// AreSubaccountsLiquidatableResponse_Result

// .dydxprotocol.subaccounts.SubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
inline bool AreSubaccountsLiquidatableResponse_Result::has_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& AreSubaccountsLiquidatableResponse_Result::_internal_subaccount_id() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& AreSubaccountsLiquidatableResponse_Result::subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.subaccount_id)
  return _internal_subaccount_id();
}
inline void AreSubaccountsLiquidatableResponse_Result::unsafe_arena_set_allocated_subaccount_id(
    ::dydxprotocol::subaccounts::SubaccountId* subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  _impl_.subaccount_id_ = subaccount_id;
  if (subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.subaccount_id)
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableResponse_Result::release_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableResponse_Result::unsafe_arena_release_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableResponse_Result::_internal_mutable_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.subaccount_id_ = p;
  }
  return _impl_.subaccount_id_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* AreSubaccountsLiquidatableResponse_Result::mutable_subaccount_id() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.subaccount_id)
  return _msg;
}
inline void AreSubaccountsLiquidatableResponse_Result::set_allocated_subaccount_id(::dydxprotocol::subaccounts::SubaccountId* subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  if (subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount_id));
    if (message_arena != submessage_arena) {
      subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subaccount_id_ = subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.subaccount_id)
}

// bool is_liquidatable = 2;
inline void AreSubaccountsLiquidatableResponse_Result::clear_is_liquidatable() {
  _impl_.is_liquidatable_ = false;
}
inline bool AreSubaccountsLiquidatableResponse_Result::is_liquidatable() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.is_liquidatable)
  return _internal_is_liquidatable();
}
inline void AreSubaccountsLiquidatableResponse_Result::set_is_liquidatable(bool value) {
  _internal_set_is_liquidatable(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result.is_liquidatable)
}
inline bool AreSubaccountsLiquidatableResponse_Result::_internal_is_liquidatable() const {
  return _impl_.is_liquidatable_;
}
inline void AreSubaccountsLiquidatableResponse_Result::_internal_set_is_liquidatable(bool value) {
  ;
  _impl_.is_liquidatable_ = value;
}

// -------------------------------------------------------------------

// AreSubaccountsLiquidatableResponse

// repeated .dydxprotocol.clob.AreSubaccountsLiquidatableResponse.Result results = 1 [(.gogoproto.nullable) = false];
inline int AreSubaccountsLiquidatableResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int AreSubaccountsLiquidatableResponse::results_size() const {
  return _internal_results_size();
}
inline void AreSubaccountsLiquidatableResponse::clear_results() {
  _internal_mutable_results()->Clear();
}
inline ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* AreSubaccountsLiquidatableResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result >*
AreSubaccountsLiquidatableResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.results)
  return _internal_mutable_results();
}
inline const ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result& AreSubaccountsLiquidatableResponse::_internal_results(int index) const {
  return _internal_results().Get(index);
}
inline const ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result& AreSubaccountsLiquidatableResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.results)
  return _internal_results(index);
}
inline ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* AreSubaccountsLiquidatableResponse::_internal_add_results() {
  return _internal_mutable_results()->Add();
}
inline ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* AreSubaccountsLiquidatableResponse::add_results() {
  ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result >&
AreSubaccountsLiquidatableResponse::results() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.AreSubaccountsLiquidatableResponse.results)
  return _internal_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result>&
AreSubaccountsLiquidatableResponse::_internal_results() const {
  return _impl_.results_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::AreSubaccountsLiquidatableResponse_Result>*
AreSubaccountsLiquidatableResponse::_internal_mutable_results() {
  return &_impl_.results_;
}

// -------------------------------------------------------------------

// MevNodeToNodeCalculationRequest

// .dydxprotocol.clob.ValidatorMevMatches block_proposer_matches = 1;
inline bool MevNodeToNodeCalculationRequest::has_block_proposer_matches() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_proposer_matches_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::ValidatorMevMatches& MevNodeToNodeCalculationRequest::_internal_block_proposer_matches() const {
  const ::dydxprotocol::clob::ValidatorMevMatches* p = _impl_.block_proposer_matches_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::ValidatorMevMatches&>(
      ::dydxprotocol::clob::_ValidatorMevMatches_default_instance_);
}
inline const ::dydxprotocol::clob::ValidatorMevMatches& MevNodeToNodeCalculationRequest::block_proposer_matches() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeCalculationRequest.block_proposer_matches)
  return _internal_block_proposer_matches();
}
inline void MevNodeToNodeCalculationRequest::unsafe_arena_set_allocated_block_proposer_matches(
    ::dydxprotocol::clob::ValidatorMevMatches* block_proposer_matches) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_proposer_matches_);
  }
  _impl_.block_proposer_matches_ = block_proposer_matches;
  if (block_proposer_matches) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MevNodeToNodeCalculationRequest.block_proposer_matches)
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeCalculationRequest::release_block_proposer_matches() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ValidatorMevMatches* temp = _impl_.block_proposer_matches_;
  _impl_.block_proposer_matches_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeCalculationRequest::unsafe_arena_release_block_proposer_matches() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MevNodeToNodeCalculationRequest.block_proposer_matches)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::ValidatorMevMatches* temp = _impl_.block_proposer_matches_;
  _impl_.block_proposer_matches_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeCalculationRequest::_internal_mutable_block_proposer_matches() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_proposer_matches_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::ValidatorMevMatches>(GetArenaForAllocation());
    _impl_.block_proposer_matches_ = p;
  }
  return _impl_.block_proposer_matches_;
}
inline ::dydxprotocol::clob::ValidatorMevMatches* MevNodeToNodeCalculationRequest::mutable_block_proposer_matches() {
  ::dydxprotocol::clob::ValidatorMevMatches* _msg = _internal_mutable_block_proposer_matches();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MevNodeToNodeCalculationRequest.block_proposer_matches)
  return _msg;
}
inline void MevNodeToNodeCalculationRequest::set_allocated_block_proposer_matches(::dydxprotocol::clob::ValidatorMevMatches* block_proposer_matches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_proposer_matches_);
  }
  if (block_proposer_matches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_proposer_matches));
    if (message_arena != submessage_arena) {
      block_proposer_matches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_proposer_matches, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_proposer_matches_ = block_proposer_matches;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MevNodeToNodeCalculationRequest.block_proposer_matches)
}

// .dydxprotocol.clob.MevNodeToNodeMetrics validator_mev_metrics = 2;
inline bool MevNodeToNodeCalculationRequest::has_validator_mev_metrics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_mev_metrics_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::MevNodeToNodeMetrics& MevNodeToNodeCalculationRequest::_internal_validator_mev_metrics() const {
  const ::dydxprotocol::clob::MevNodeToNodeMetrics* p = _impl_.validator_mev_metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::MevNodeToNodeMetrics&>(
      ::dydxprotocol::clob::_MevNodeToNodeMetrics_default_instance_);
}
inline const ::dydxprotocol::clob::MevNodeToNodeMetrics& MevNodeToNodeCalculationRequest::validator_mev_metrics() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeCalculationRequest.validator_mev_metrics)
  return _internal_validator_mev_metrics();
}
inline void MevNodeToNodeCalculationRequest::unsafe_arena_set_allocated_validator_mev_metrics(
    ::dydxprotocol::clob::MevNodeToNodeMetrics* validator_mev_metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_mev_metrics_);
  }
  _impl_.validator_mev_metrics_ = validator_mev_metrics;
  if (validator_mev_metrics) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.MevNodeToNodeCalculationRequest.validator_mev_metrics)
}
inline ::dydxprotocol::clob::MevNodeToNodeMetrics* MevNodeToNodeCalculationRequest::release_validator_mev_metrics() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::clob::MevNodeToNodeMetrics* temp = _impl_.validator_mev_metrics_;
  _impl_.validator_mev_metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::MevNodeToNodeMetrics* MevNodeToNodeCalculationRequest::unsafe_arena_release_validator_mev_metrics() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.MevNodeToNodeCalculationRequest.validator_mev_metrics)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::clob::MevNodeToNodeMetrics* temp = _impl_.validator_mev_metrics_;
  _impl_.validator_mev_metrics_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::MevNodeToNodeMetrics* MevNodeToNodeCalculationRequest::_internal_mutable_validator_mev_metrics() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.validator_mev_metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::MevNodeToNodeMetrics>(GetArenaForAllocation());
    _impl_.validator_mev_metrics_ = p;
  }
  return _impl_.validator_mev_metrics_;
}
inline ::dydxprotocol::clob::MevNodeToNodeMetrics* MevNodeToNodeCalculationRequest::mutable_validator_mev_metrics() {
  ::dydxprotocol::clob::MevNodeToNodeMetrics* _msg = _internal_mutable_validator_mev_metrics();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MevNodeToNodeCalculationRequest.validator_mev_metrics)
  return _msg;
}
inline void MevNodeToNodeCalculationRequest::set_allocated_validator_mev_metrics(::dydxprotocol::clob::MevNodeToNodeMetrics* validator_mev_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_mev_metrics_);
  }
  if (validator_mev_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_mev_metrics));
    if (message_arena != submessage_arena) {
      validator_mev_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_mev_metrics, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.validator_mev_metrics_ = validator_mev_metrics;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.MevNodeToNodeCalculationRequest.validator_mev_metrics)
}

// -------------------------------------------------------------------

// MevNodeToNodeCalculationResponse_MevAndVolumePerClob

// uint32 clob_pair_id = 1;
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t MevNodeToNodeCalculationResponse_MevAndVolumePerClob::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob.clob_pair_id)
}
inline ::uint32_t MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// float mev = 2;
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::clear_mev() {
  _impl_.mev_ = 0;
}
inline float MevNodeToNodeCalculationResponse_MevAndVolumePerClob::mev() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob.mev)
  return _internal_mev();
}
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::set_mev(float value) {
  _internal_set_mev(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob.mev)
}
inline float MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_internal_mev() const {
  return _impl_.mev_;
}
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_internal_set_mev(float value) {
  ;
  _impl_.mev_ = value;
}

// uint64 volume = 3;
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::clear_volume() {
  _impl_.volume_ = ::uint64_t{0u};
}
inline ::uint64_t MevNodeToNodeCalculationResponse_MevAndVolumePerClob::volume() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob.volume)
  return _internal_volume();
}
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::set_volume(::uint64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob.volume)
}
inline ::uint64_t MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_internal_volume() const {
  return _impl_.volume_;
}
inline void MevNodeToNodeCalculationResponse_MevAndVolumePerClob::_internal_set_volume(::uint64_t value) {
  ;
  _impl_.volume_ = value;
}

// -------------------------------------------------------------------

// MevNodeToNodeCalculationResponse

// repeated .dydxprotocol.clob.MevNodeToNodeCalculationResponse.MevAndVolumePerClob results = 1 [(.gogoproto.nullable) = false];
inline int MevNodeToNodeCalculationResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int MevNodeToNodeCalculationResponse::results_size() const {
  return _internal_results_size();
}
inline void MevNodeToNodeCalculationResponse::clear_results() {
  _internal_mutable_results()->Clear();
}
inline ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* MevNodeToNodeCalculationResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.MevNodeToNodeCalculationResponse.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob >*
MevNodeToNodeCalculationResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.MevNodeToNodeCalculationResponse.results)
  return _internal_mutable_results();
}
inline const ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob& MevNodeToNodeCalculationResponse::_internal_results(int index) const {
  return _internal_results().Get(index);
}
inline const ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob& MevNodeToNodeCalculationResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MevNodeToNodeCalculationResponse.results)
  return _internal_results(index);
}
inline ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* MevNodeToNodeCalculationResponse::_internal_add_results() {
  return _internal_mutable_results()->Add();
}
inline ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* MevNodeToNodeCalculationResponse::add_results() {
  ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.MevNodeToNodeCalculationResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob >&
MevNodeToNodeCalculationResponse::results() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.MevNodeToNodeCalculationResponse.results)
  return _internal_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob>&
MevNodeToNodeCalculationResponse::_internal_results() const {
  return _impl_.results_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MevNodeToNodeCalculationResponse_MevAndVolumePerClob>*
MevNodeToNodeCalculationResponse::_internal_mutable_results() {
  return &_impl_.results_;
}

// -------------------------------------------------------------------

// QueryEquityTierLimitConfigurationRequest

// -------------------------------------------------------------------

// QueryEquityTierLimitConfigurationResponse

// .dydxprotocol.clob.EquityTierLimitConfiguration equity_tier_limit_config = 1 [(.gogoproto.nullable) = false];
inline bool QueryEquityTierLimitConfigurationResponse::has_equity_tier_limit_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.equity_tier_limit_config_ != nullptr);
  return value;
}
inline const ::dydxprotocol::clob::EquityTierLimitConfiguration& QueryEquityTierLimitConfigurationResponse::_internal_equity_tier_limit_config() const {
  const ::dydxprotocol::clob::EquityTierLimitConfiguration* p = _impl_.equity_tier_limit_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::clob::EquityTierLimitConfiguration&>(
      ::dydxprotocol::clob::_EquityTierLimitConfiguration_default_instance_);
}
inline const ::dydxprotocol::clob::EquityTierLimitConfiguration& QueryEquityTierLimitConfigurationResponse::equity_tier_limit_config() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse.equity_tier_limit_config)
  return _internal_equity_tier_limit_config();
}
inline void QueryEquityTierLimitConfigurationResponse::unsafe_arena_set_allocated_equity_tier_limit_config(
    ::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equity_tier_limit_config_);
  }
  _impl_.equity_tier_limit_config_ = equity_tier_limit_config;
  if (equity_tier_limit_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse.equity_tier_limit_config)
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* QueryEquityTierLimitConfigurationResponse::release_equity_tier_limit_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::EquityTierLimitConfiguration* temp = _impl_.equity_tier_limit_config_;
  _impl_.equity_tier_limit_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* QueryEquityTierLimitConfigurationResponse::unsafe_arena_release_equity_tier_limit_config() {
  // @@protoc_insertion_point(field_release:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse.equity_tier_limit_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::clob::EquityTierLimitConfiguration* temp = _impl_.equity_tier_limit_config_;
  _impl_.equity_tier_limit_config_ = nullptr;
  return temp;
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* QueryEquityTierLimitConfigurationResponse::_internal_mutable_equity_tier_limit_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.equity_tier_limit_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::clob::EquityTierLimitConfiguration>(GetArenaForAllocation());
    _impl_.equity_tier_limit_config_ = p;
  }
  return _impl_.equity_tier_limit_config_;
}
inline ::dydxprotocol::clob::EquityTierLimitConfiguration* QueryEquityTierLimitConfigurationResponse::mutable_equity_tier_limit_config() {
  ::dydxprotocol::clob::EquityTierLimitConfiguration* _msg = _internal_mutable_equity_tier_limit_config();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse.equity_tier_limit_config)
  return _msg;
}
inline void QueryEquityTierLimitConfigurationResponse::set_allocated_equity_tier_limit_config(::dydxprotocol::clob::EquityTierLimitConfiguration* equity_tier_limit_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equity_tier_limit_config_);
  }
  if (equity_tier_limit_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(equity_tier_limit_config));
    if (message_arena != submessage_arena) {
      equity_tier_limit_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equity_tier_limit_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.equity_tier_limit_config_ = equity_tier_limit_config;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.clob.QueryEquityTierLimitConfigurationResponse.equity_tier_limit_config)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fquery_2eproto_2epb_2eh
