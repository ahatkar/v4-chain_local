// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/block_rate_limit_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto;
namespace dydxprotocol {
namespace clob {
class BlockRateLimitConfiguration;
struct BlockRateLimitConfigurationDefaultTypeInternal;
extern BlockRateLimitConfigurationDefaultTypeInternal _BlockRateLimitConfiguration_default_instance_;
class MaxPerNBlocksRateLimit;
struct MaxPerNBlocksRateLimitDefaultTypeInternal;
extern MaxPerNBlocksRateLimitDefaultTypeInternal _MaxPerNBlocksRateLimit_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::clob::BlockRateLimitConfiguration* Arena::CreateMaybeMessage<::dydxprotocol::clob::BlockRateLimitConfiguration>(Arena*);
template <>
::dydxprotocol::clob::MaxPerNBlocksRateLimit* Arena::CreateMaybeMessage<::dydxprotocol::clob::MaxPerNBlocksRateLimit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace clob {

// ===================================================================


// -------------------------------------------------------------------

class BlockRateLimitConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.BlockRateLimitConfiguration) */ {
 public:
  inline BlockRateLimitConfiguration() : BlockRateLimitConfiguration(nullptr) {}
  ~BlockRateLimitConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockRateLimitConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockRateLimitConfiguration(const BlockRateLimitConfiguration& from);
  BlockRateLimitConfiguration(BlockRateLimitConfiguration&& from) noexcept
    : BlockRateLimitConfiguration() {
    *this = ::std::move(from);
  }

  inline BlockRateLimitConfiguration& operator=(const BlockRateLimitConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRateLimitConfiguration& operator=(BlockRateLimitConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockRateLimitConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockRateLimitConfiguration* internal_default_instance() {
    return reinterpret_cast<const BlockRateLimitConfiguration*>(
               &_BlockRateLimitConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockRateLimitConfiguration& a, BlockRateLimitConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRateLimitConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRateLimitConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockRateLimitConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockRateLimitConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockRateLimitConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockRateLimitConfiguration& from) {
    BlockRateLimitConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRateLimitConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.BlockRateLimitConfiguration";
  }
  protected:
  explicit BlockRateLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxShortTermOrdersPerNBlocksFieldNumber = 1,
    kMaxStatefulOrdersPerNBlocksFieldNumber = 2,
    kMaxShortTermOrderCancellationsPerNBlocksFieldNumber = 3,
  };
  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_orders_per_n_blocks = 1 [(.gogoproto.nullable) = false];
  int max_short_term_orders_per_n_blocks_size() const;
  private:
  int _internal_max_short_term_orders_per_n_blocks_size() const;

  public:
  void clear_max_short_term_orders_per_n_blocks() ;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* mutable_max_short_term_orders_per_n_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >*
      mutable_max_short_term_orders_per_n_blocks();
  private:
  const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& _internal_max_short_term_orders_per_n_blocks(int index) const;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* _internal_add_max_short_term_orders_per_n_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>& _internal_max_short_term_orders_per_n_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>* _internal_mutable_max_short_term_orders_per_n_blocks();
  public:
  const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& max_short_term_orders_per_n_blocks(int index) const;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* add_max_short_term_orders_per_n_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >&
      max_short_term_orders_per_n_blocks() const;
  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_stateful_orders_per_n_blocks = 2 [(.gogoproto.nullable) = false];
  int max_stateful_orders_per_n_blocks_size() const;
  private:
  int _internal_max_stateful_orders_per_n_blocks_size() const;

  public:
  void clear_max_stateful_orders_per_n_blocks() ;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* mutable_max_stateful_orders_per_n_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >*
      mutable_max_stateful_orders_per_n_blocks();
  private:
  const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& _internal_max_stateful_orders_per_n_blocks(int index) const;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* _internal_add_max_stateful_orders_per_n_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>& _internal_max_stateful_orders_per_n_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>* _internal_mutable_max_stateful_orders_per_n_blocks();
  public:
  const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& max_stateful_orders_per_n_blocks(int index) const;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* add_max_stateful_orders_per_n_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >&
      max_stateful_orders_per_n_blocks() const;
  // repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_order_cancellations_per_n_blocks = 3 [(.gogoproto.nullable) = false];
  int max_short_term_order_cancellations_per_n_blocks_size() const;
  private:
  int _internal_max_short_term_order_cancellations_per_n_blocks_size() const;

  public:
  void clear_max_short_term_order_cancellations_per_n_blocks() ;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* mutable_max_short_term_order_cancellations_per_n_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >*
      mutable_max_short_term_order_cancellations_per_n_blocks();
  private:
  const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& _internal_max_short_term_order_cancellations_per_n_blocks(int index) const;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* _internal_add_max_short_term_order_cancellations_per_n_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>& _internal_max_short_term_order_cancellations_per_n_blocks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>* _internal_mutable_max_short_term_order_cancellations_per_n_blocks();
  public:
  const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& max_short_term_order_cancellations_per_n_blocks(int index) const;
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* add_max_short_term_order_cancellations_per_n_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >&
      max_short_term_order_cancellations_per_n_blocks() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.BlockRateLimitConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit > max_short_term_orders_per_n_blocks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit > max_stateful_orders_per_n_blocks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit > max_short_term_order_cancellations_per_n_blocks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto;
};// -------------------------------------------------------------------

class MaxPerNBlocksRateLimit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.clob.MaxPerNBlocksRateLimit) */ {
 public:
  inline MaxPerNBlocksRateLimit() : MaxPerNBlocksRateLimit(nullptr) {}
  ~MaxPerNBlocksRateLimit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MaxPerNBlocksRateLimit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MaxPerNBlocksRateLimit(const MaxPerNBlocksRateLimit& from);
  MaxPerNBlocksRateLimit(MaxPerNBlocksRateLimit&& from) noexcept
    : MaxPerNBlocksRateLimit() {
    *this = ::std::move(from);
  }

  inline MaxPerNBlocksRateLimit& operator=(const MaxPerNBlocksRateLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline MaxPerNBlocksRateLimit& operator=(MaxPerNBlocksRateLimit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MaxPerNBlocksRateLimit& default_instance() {
    return *internal_default_instance();
  }
  static inline const MaxPerNBlocksRateLimit* internal_default_instance() {
    return reinterpret_cast<const MaxPerNBlocksRateLimit*>(
               &_MaxPerNBlocksRateLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MaxPerNBlocksRateLimit& a, MaxPerNBlocksRateLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(MaxPerNBlocksRateLimit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MaxPerNBlocksRateLimit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MaxPerNBlocksRateLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MaxPerNBlocksRateLimit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MaxPerNBlocksRateLimit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MaxPerNBlocksRateLimit& from) {
    MaxPerNBlocksRateLimit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxPerNBlocksRateLimit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.clob.MaxPerNBlocksRateLimit";
  }
  protected:
  explicit MaxPerNBlocksRateLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBlocksFieldNumber = 1,
    kLimitFieldNumber = 2,
  };
  // uint32 num_blocks = 1;
  void clear_num_blocks() ;
  ::uint32_t num_blocks() const;
  void set_num_blocks(::uint32_t value);

  private:
  ::uint32_t _internal_num_blocks() const;
  void _internal_set_num_blocks(::uint32_t value);

  public:
  // uint32 limit = 2;
  void clear_limit() ;
  ::uint32_t limit() const;
  void set_limit(::uint32_t value);

  private:
  ::uint32_t _internal_limit() const;
  void _internal_set_limit(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.clob.MaxPerNBlocksRateLimit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t num_blocks_;
    ::uint32_t limit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BlockRateLimitConfiguration

// repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_orders_per_n_blocks = 1 [(.gogoproto.nullable) = false];
inline int BlockRateLimitConfiguration::_internal_max_short_term_orders_per_n_blocks_size() const {
  return _impl_.max_short_term_orders_per_n_blocks_.size();
}
inline int BlockRateLimitConfiguration::max_short_term_orders_per_n_blocks_size() const {
  return _internal_max_short_term_orders_per_n_blocks_size();
}
inline void BlockRateLimitConfiguration::clear_max_short_term_orders_per_n_blocks() {
  _internal_mutable_max_short_term_orders_per_n_blocks()->Clear();
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::mutable_max_short_term_orders_per_n_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_orders_per_n_blocks)
  return _internal_mutable_max_short_term_orders_per_n_blocks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >*
BlockRateLimitConfiguration::mutable_max_short_term_orders_per_n_blocks() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_orders_per_n_blocks)
  return _internal_mutable_max_short_term_orders_per_n_blocks();
}
inline const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& BlockRateLimitConfiguration::_internal_max_short_term_orders_per_n_blocks(int index) const {
  return _internal_max_short_term_orders_per_n_blocks().Get(index);
}
inline const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& BlockRateLimitConfiguration::max_short_term_orders_per_n_blocks(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_orders_per_n_blocks)
  return _internal_max_short_term_orders_per_n_blocks(index);
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::_internal_add_max_short_term_orders_per_n_blocks() {
  return _internal_mutable_max_short_term_orders_per_n_blocks()->Add();
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::add_max_short_term_orders_per_n_blocks() {
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* _add = _internal_add_max_short_term_orders_per_n_blocks();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_orders_per_n_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >&
BlockRateLimitConfiguration::max_short_term_orders_per_n_blocks() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_orders_per_n_blocks)
  return _internal_max_short_term_orders_per_n_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>&
BlockRateLimitConfiguration::_internal_max_short_term_orders_per_n_blocks() const {
  return _impl_.max_short_term_orders_per_n_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>*
BlockRateLimitConfiguration::_internal_mutable_max_short_term_orders_per_n_blocks() {
  return &_impl_.max_short_term_orders_per_n_blocks_;
}

// repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_stateful_orders_per_n_blocks = 2 [(.gogoproto.nullable) = false];
inline int BlockRateLimitConfiguration::_internal_max_stateful_orders_per_n_blocks_size() const {
  return _impl_.max_stateful_orders_per_n_blocks_.size();
}
inline int BlockRateLimitConfiguration::max_stateful_orders_per_n_blocks_size() const {
  return _internal_max_stateful_orders_per_n_blocks_size();
}
inline void BlockRateLimitConfiguration::clear_max_stateful_orders_per_n_blocks() {
  _internal_mutable_max_stateful_orders_per_n_blocks()->Clear();
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::mutable_max_stateful_orders_per_n_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.BlockRateLimitConfiguration.max_stateful_orders_per_n_blocks)
  return _internal_mutable_max_stateful_orders_per_n_blocks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >*
BlockRateLimitConfiguration::mutable_max_stateful_orders_per_n_blocks() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.BlockRateLimitConfiguration.max_stateful_orders_per_n_blocks)
  return _internal_mutable_max_stateful_orders_per_n_blocks();
}
inline const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& BlockRateLimitConfiguration::_internal_max_stateful_orders_per_n_blocks(int index) const {
  return _internal_max_stateful_orders_per_n_blocks().Get(index);
}
inline const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& BlockRateLimitConfiguration::max_stateful_orders_per_n_blocks(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.BlockRateLimitConfiguration.max_stateful_orders_per_n_blocks)
  return _internal_max_stateful_orders_per_n_blocks(index);
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::_internal_add_max_stateful_orders_per_n_blocks() {
  return _internal_mutable_max_stateful_orders_per_n_blocks()->Add();
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::add_max_stateful_orders_per_n_blocks() {
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* _add = _internal_add_max_stateful_orders_per_n_blocks();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.BlockRateLimitConfiguration.max_stateful_orders_per_n_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >&
BlockRateLimitConfiguration::max_stateful_orders_per_n_blocks() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.BlockRateLimitConfiguration.max_stateful_orders_per_n_blocks)
  return _internal_max_stateful_orders_per_n_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>&
BlockRateLimitConfiguration::_internal_max_stateful_orders_per_n_blocks() const {
  return _impl_.max_stateful_orders_per_n_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>*
BlockRateLimitConfiguration::_internal_mutable_max_stateful_orders_per_n_blocks() {
  return &_impl_.max_stateful_orders_per_n_blocks_;
}

// repeated .dydxprotocol.clob.MaxPerNBlocksRateLimit max_short_term_order_cancellations_per_n_blocks = 3 [(.gogoproto.nullable) = false];
inline int BlockRateLimitConfiguration::_internal_max_short_term_order_cancellations_per_n_blocks_size() const {
  return _impl_.max_short_term_order_cancellations_per_n_blocks_.size();
}
inline int BlockRateLimitConfiguration::max_short_term_order_cancellations_per_n_blocks_size() const {
  return _internal_max_short_term_order_cancellations_per_n_blocks_size();
}
inline void BlockRateLimitConfiguration::clear_max_short_term_order_cancellations_per_n_blocks() {
  _internal_mutable_max_short_term_order_cancellations_per_n_blocks()->Clear();
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::mutable_max_short_term_order_cancellations_per_n_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_order_cancellations_per_n_blocks)
  return _internal_mutable_max_short_term_order_cancellations_per_n_blocks()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >*
BlockRateLimitConfiguration::mutable_max_short_term_order_cancellations_per_n_blocks() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_order_cancellations_per_n_blocks)
  return _internal_mutable_max_short_term_order_cancellations_per_n_blocks();
}
inline const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& BlockRateLimitConfiguration::_internal_max_short_term_order_cancellations_per_n_blocks(int index) const {
  return _internal_max_short_term_order_cancellations_per_n_blocks().Get(index);
}
inline const ::dydxprotocol::clob::MaxPerNBlocksRateLimit& BlockRateLimitConfiguration::max_short_term_order_cancellations_per_n_blocks(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_order_cancellations_per_n_blocks)
  return _internal_max_short_term_order_cancellations_per_n_blocks(index);
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::_internal_add_max_short_term_order_cancellations_per_n_blocks() {
  return _internal_mutable_max_short_term_order_cancellations_per_n_blocks()->Add();
}
inline ::dydxprotocol::clob::MaxPerNBlocksRateLimit* BlockRateLimitConfiguration::add_max_short_term_order_cancellations_per_n_blocks() {
  ::dydxprotocol::clob::MaxPerNBlocksRateLimit* _add = _internal_add_max_short_term_order_cancellations_per_n_blocks();
  // @@protoc_insertion_point(field_add:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_order_cancellations_per_n_blocks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::clob::MaxPerNBlocksRateLimit >&
BlockRateLimitConfiguration::max_short_term_order_cancellations_per_n_blocks() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.clob.BlockRateLimitConfiguration.max_short_term_order_cancellations_per_n_blocks)
  return _internal_max_short_term_order_cancellations_per_n_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>&
BlockRateLimitConfiguration::_internal_max_short_term_order_cancellations_per_n_blocks() const {
  return _impl_.max_short_term_order_cancellations_per_n_blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::clob::MaxPerNBlocksRateLimit>*
BlockRateLimitConfiguration::_internal_mutable_max_short_term_order_cancellations_per_n_blocks() {
  return &_impl_.max_short_term_order_cancellations_per_n_blocks_;
}

// -------------------------------------------------------------------

// MaxPerNBlocksRateLimit

// uint32 num_blocks = 1;
inline void MaxPerNBlocksRateLimit::clear_num_blocks() {
  _impl_.num_blocks_ = 0u;
}
inline ::uint32_t MaxPerNBlocksRateLimit::num_blocks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MaxPerNBlocksRateLimit.num_blocks)
  return _internal_num_blocks();
}
inline void MaxPerNBlocksRateLimit::set_num_blocks(::uint32_t value) {
  _internal_set_num_blocks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MaxPerNBlocksRateLimit.num_blocks)
}
inline ::uint32_t MaxPerNBlocksRateLimit::_internal_num_blocks() const {
  return _impl_.num_blocks_;
}
inline void MaxPerNBlocksRateLimit::_internal_set_num_blocks(::uint32_t value) {
  ;
  _impl_.num_blocks_ = value;
}

// uint32 limit = 2;
inline void MaxPerNBlocksRateLimit::clear_limit() {
  _impl_.limit_ = 0u;
}
inline ::uint32_t MaxPerNBlocksRateLimit::limit() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.clob.MaxPerNBlocksRateLimit.limit)
  return _internal_limit();
}
inline void MaxPerNBlocksRateLimit::set_limit(::uint32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.clob.MaxPerNBlocksRateLimit.limit)
}
inline ::uint32_t MaxPerNBlocksRateLimit::_internal_limit() const {
  return _impl_.limit_;
}
inline void MaxPerNBlocksRateLimit::_internal_set_limit(::uint32_t value) {
  ;
  _impl_.limit_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fclob_2fblock_5frate_5flimit_5fconfig_2eproto_2epb_2eh
