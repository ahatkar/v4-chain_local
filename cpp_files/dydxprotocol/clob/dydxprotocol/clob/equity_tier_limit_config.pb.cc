// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/clob/equity_tier_limit_config.proto

#include "dydxprotocol/clob/equity_tier_limit_config.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace clob {
template <typename>
PROTOBUF_CONSTEXPR EquityTierLimitConfiguration::EquityTierLimitConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.short_term_order_equity_tiers_)*/{}
  , /*decltype(_impl_.stateful_order_equity_tiers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquityTierLimitConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquityTierLimitConfigurationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquityTierLimitConfigurationDefaultTypeInternal() {}
  union {
    EquityTierLimitConfiguration _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquityTierLimitConfigurationDefaultTypeInternal _EquityTierLimitConfiguration_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EquityTierLimit::EquityTierLimit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.usd_tnc_required_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EquityTierLimitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquityTierLimitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquityTierLimitDefaultTypeInternal() {}
  union {
    EquityTierLimit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquityTierLimitDefaultTypeInternal _EquityTierLimit_default_instance_;
}  // namespace clob
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::EquityTierLimitConfiguration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::EquityTierLimitConfiguration, _impl_.short_term_order_equity_tiers_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::EquityTierLimitConfiguration, _impl_.stateful_order_equity_tiers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::EquityTierLimit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::EquityTierLimit, _impl_.usd_tnc_required_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::clob::EquityTierLimit, _impl_.limit_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::clob::EquityTierLimitConfiguration)},
        { 10, -1, -1, sizeof(::dydxprotocol::clob::EquityTierLimit)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::clob::_EquityTierLimitConfiguration_default_instance_._instance,
    &::dydxprotocol::clob::_EquityTierLimit_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n0dydxprotocol/clob/equity_tier_limit_co"
    "nfig.proto\022\021dydxprotocol.clob\032\024gogoproto"
    "/gogo.proto\"\276\001\n\034EquityTierLimitConfigura"
    "tion\022O\n\035short_term_order_equity_tiers\030\001 "
    "\003(\0132\".dydxprotocol.clob.EquityTierLimitB"
    "\004\310\336\037\000\022M\n\033stateful_order_equity_tiers\030\002 \003"
    "(\0132\".dydxprotocol.clob.EquityTierLimitB\004"
    "\310\336\037\000\"\204\001\n\017EquityTierLimit\022b\n\020usd_tnc_requ"
    "ired\030\001 \001(\014BH\310\336\037\000\332\336\037@github.com/dydxproto"
    "col/v4-chain/protocol/dtypes.Serializabl"
    "eInt\022\r\n\005limit\030\002 \001(\rB8Z6github.com/dydxpr"
    "otocol/v4-chain/protocol/x/clob/typesb\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto = {
    false,
    false,
    485,
    descriptor_table_protodef_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto,
    "dydxprotocol/clob/equity_tier_limit_config.proto",
    &descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_once,
    descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto,
    file_level_service_descriptors_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto(&descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto);
namespace dydxprotocol {
namespace clob {
// ===================================================================

class EquityTierLimitConfiguration::_Internal {
 public:
};

EquityTierLimitConfiguration::EquityTierLimitConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.EquityTierLimitConfiguration)
}
EquityTierLimitConfiguration::EquityTierLimitConfiguration(const EquityTierLimitConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquityTierLimitConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.short_term_order_equity_tiers_){from._impl_.short_term_order_equity_tiers_}
    , decltype(_impl_.stateful_order_equity_tiers_){from._impl_.stateful_order_equity_tiers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.EquityTierLimitConfiguration)
}

inline void EquityTierLimitConfiguration::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.short_term_order_equity_tiers_){arena}
    , decltype(_impl_.stateful_order_equity_tiers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EquityTierLimitConfiguration::~EquityTierLimitConfiguration() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.EquityTierLimitConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquityTierLimitConfiguration::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_short_term_order_equity_tiers()->~RepeatedPtrField();
  _internal_mutable_stateful_order_equity_tiers()->~RepeatedPtrField();
}

void EquityTierLimitConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquityTierLimitConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.EquityTierLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_short_term_order_equity_tiers()->Clear();
  _internal_mutable_stateful_order_equity_tiers()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquityTierLimitConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.clob.EquityTierLimit short_term_order_equity_tiers = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_short_term_order_equity_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.clob.EquityTierLimit stateful_order_equity_tiers = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stateful_order_equity_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EquityTierLimitConfiguration::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.EquityTierLimitConfiguration)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.EquityTierLimit short_term_order_equity_tiers = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_short_term_order_equity_tiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_short_term_order_equity_tiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.clob.EquityTierLimit stateful_order_equity_tiers = 2 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stateful_order_equity_tiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_stateful_order_equity_tiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.EquityTierLimitConfiguration)
  return target;
}

::size_t EquityTierLimitConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.EquityTierLimitConfiguration)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.clob.EquityTierLimit short_term_order_equity_tiers = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_short_term_order_equity_tiers_size();
  for (const auto& msg : this->_internal_short_term_order_equity_tiers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .dydxprotocol.clob.EquityTierLimit stateful_order_equity_tiers = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_stateful_order_equity_tiers_size();
  for (const auto& msg : this->_internal_stateful_order_equity_tiers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquityTierLimitConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquityTierLimitConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquityTierLimitConfiguration::GetClassData() const { return &_class_data_; }


void EquityTierLimitConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquityTierLimitConfiguration*>(&to_msg);
  auto& from = static_cast<const EquityTierLimitConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.EquityTierLimitConfiguration)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_short_term_order_equity_tiers()->MergeFrom(from._internal_short_term_order_equity_tiers());
  _this->_internal_mutable_stateful_order_equity_tiers()->MergeFrom(from._internal_stateful_order_equity_tiers());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquityTierLimitConfiguration::CopyFrom(const EquityTierLimitConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.EquityTierLimitConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquityTierLimitConfiguration::IsInitialized() const {
  return true;
}

void EquityTierLimitConfiguration::InternalSwap(EquityTierLimitConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_short_term_order_equity_tiers()->InternalSwap(other->_internal_mutable_short_term_order_equity_tiers());
  _internal_mutable_stateful_order_equity_tiers()->InternalSwap(other->_internal_mutable_stateful_order_equity_tiers());
}

::PROTOBUF_NAMESPACE_ID::Metadata EquityTierLimitConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto[0]);
}
// ===================================================================

class EquityTierLimit::_Internal {
 public:
};

EquityTierLimit::EquityTierLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.clob.EquityTierLimit)
}
EquityTierLimit::EquityTierLimit(const EquityTierLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EquityTierLimit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.usd_tnc_required_) {}

    , decltype(_impl_.limit_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.usd_tnc_required_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.usd_tnc_required_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usd_tnc_required().empty()) {
    _this->_impl_.usd_tnc_required_.Set(from._internal_usd_tnc_required(), _this->GetArenaForAllocation());
  }
  _this->_impl_.limit_ = from._impl_.limit_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.clob.EquityTierLimit)
}

inline void EquityTierLimit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.usd_tnc_required_) {}

    , decltype(_impl_.limit_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.usd_tnc_required_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.usd_tnc_required_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EquityTierLimit::~EquityTierLimit() {
  // @@protoc_insertion_point(destructor:dydxprotocol.clob.EquityTierLimit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EquityTierLimit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.usd_tnc_required_.Destroy();
}

void EquityTierLimit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EquityTierLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.clob.EquityTierLimit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.usd_tnc_required_.ClearToEmpty();
  _impl_.limit_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EquityTierLimit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes usd_tnc_required = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_usd_tnc_required();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EquityTierLimit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.clob.EquityTierLimit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes usd_tnc_required = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_usd_tnc_required().empty()) {
    const std::string& _s = this->_internal_usd_tnc_required();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.clob.EquityTierLimit)
  return target;
}

::size_t EquityTierLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.clob.EquityTierLimit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes usd_tnc_required = 1 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_usd_tnc_required().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_usd_tnc_required());
  }

  // uint32 limit = 2;
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EquityTierLimit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EquityTierLimit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EquityTierLimit::GetClassData() const { return &_class_data_; }


void EquityTierLimit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EquityTierLimit*>(&to_msg);
  auto& from = static_cast<const EquityTierLimit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.clob.EquityTierLimit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_usd_tnc_required().empty()) {
    _this->_internal_set_usd_tnc_required(from._internal_usd_tnc_required());
  }
  if (from._internal_limit() != 0) {
    _this->_internal_set_limit(from._internal_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EquityTierLimit::CopyFrom(const EquityTierLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.clob.EquityTierLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquityTierLimit::IsInitialized() const {
  return true;
}

void EquityTierLimit::InternalSwap(EquityTierLimit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.usd_tnc_required_, lhs_arena,
                                       &other->_impl_.usd_tnc_required_, rhs_arena);

  swap(_impl_.limit_, other->_impl_.limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EquityTierLimit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_getter, &descriptor_table_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto_once,
      file_level_metadata_dydxprotocol_2fclob_2fequity_5ftier_5flimit_5fconfig_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace clob
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::EquityTierLimitConfiguration*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::EquityTierLimitConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::EquityTierLimitConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::clob::EquityTierLimit*
Arena::CreateMaybeMessage< ::dydxprotocol::clob::EquityTierLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::clob::EquityTierLimit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
