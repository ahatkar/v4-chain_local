// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/sending/transfer.proto

#include "dydxprotocol/sending/transfer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace sending {
template <typename>
PROTOBUF_CONSTEXPR Transfer::Transfer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/nullptr
  , /*decltype(_impl_.recipient_)*/nullptr
  , /*decltype(_impl_.amount_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.asset_id_)*/ 0u
} {}
struct TransferDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferDefaultTypeInternal() {}
  union {
    Transfer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferDefaultTypeInternal _Transfer_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgDepositToSubaccount::MsgDepositToSubaccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recipient_)*/nullptr
  , /*decltype(_impl_.quantums_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.asset_id_)*/ 0u
} {}
struct MsgDepositToSubaccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDepositToSubaccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDepositToSubaccountDefaultTypeInternal() {}
  union {
    MsgDepositToSubaccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDepositToSubaccountDefaultTypeInternal _MsgDepositToSubaccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgWithdrawFromSubaccount::MsgWithdrawFromSubaccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sender_)*/nullptr
  , /*decltype(_impl_.quantums_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.asset_id_)*/ 0u
} {}
struct MsgWithdrawFromSubaccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgWithdrawFromSubaccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgWithdrawFromSubaccountDefaultTypeInternal() {}
  union {
    MsgWithdrawFromSubaccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgWithdrawFromSubaccountDefaultTypeInternal _MsgWithdrawFromSubaccount_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgSendFromModuleToAccount::MsgSendFromModuleToAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sender_module_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.coin_)*/nullptr} {}
struct MsgSendFromModuleToAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSendFromModuleToAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSendFromModuleToAccountDefaultTypeInternal() {}
  union {
    MsgSendFromModuleToAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSendFromModuleToAccountDefaultTypeInternal _MsgSendFromModuleToAccount_default_instance_;
}  // namespace sending
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fsending_2ftransfer_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fsending_2ftransfer_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fsending_2ftransfer_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::Transfer, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::Transfer, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::Transfer, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::Transfer, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::Transfer, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::Transfer, _impl_.amount_),
    0,
    1,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgDepositToSubaccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgDepositToSubaccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgDepositToSubaccount, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgDepositToSubaccount, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgDepositToSubaccount, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgDepositToSubaccount, _impl_.quantums_),
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgWithdrawFromSubaccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgWithdrawFromSubaccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgWithdrawFromSubaccount, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgWithdrawFromSubaccount, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgWithdrawFromSubaccount, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgWithdrawFromSubaccount, _impl_.quantums_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgSendFromModuleToAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgSendFromModuleToAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgSendFromModuleToAccount, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgSendFromModuleToAccount, _impl_.sender_module_name_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgSendFromModuleToAccount, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::sending::MsgSendFromModuleToAccount, _impl_.coin_),
    ~0u,
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::dydxprotocol::sending::Transfer)},
        { 16, 28, -1, sizeof(::dydxprotocol::sending::MsgDepositToSubaccount)},
        { 32, 44, -1, sizeof(::dydxprotocol::sending::MsgWithdrawFromSubaccount)},
        { 48, 60, -1, sizeof(::dydxprotocol::sending::MsgSendFromModuleToAccount)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::sending::_Transfer_default_instance_._instance,
    &::dydxprotocol::sending::_MsgDepositToSubaccount_default_instance_._instance,
    &::dydxprotocol::sending::_MsgWithdrawFromSubaccount_default_instance_._instance,
    &::dydxprotocol::sending::_MsgSendFromModuleToAccount_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fsending_2ftransfer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#dydxprotocol/sending/transfer.proto\022\024d"
    "ydxprotocol.sending\032\031cosmos_proto/cosmos"
    ".proto\032\036cosmos/base/v1beta1/coin.proto\032\027"
    "cosmos/msg/v1/msg.proto\032\024gogoproto/gogo."
    "proto\032)dydxprotocol/subaccounts/subaccou"
    "nt.proto\"\253\001\n\010Transfer\022<\n\006sender\030\001 \001(\0132&."
    "dydxprotocol.subaccounts.SubaccountIdB\004\310"
    "\336\037\000\022\?\n\trecipient\030\002 \001(\0132&.dydxprotocol.su"
    "baccounts.SubaccountIdB\004\310\336\037\000\022\020\n\010asset_id"
    "\030\003 \001(\r\022\016\n\006amount\030\004 \001(\004\"\264\001\n\026MsgDepositToS"
    "ubaccount\022(\n\006sender\030\001 \001(\tB\030\322\264-\024cosmos.Ad"
    "dressString\022\?\n\trecipient\030\002 \001(\0132&.dydxpro"
    "tocol.subaccounts.SubaccountIdB\004\310\336\037\000\022\020\n\010"
    "asset_id\030\003 \001(\r\022\020\n\010quantums\030\004 \001(\004:\013\202\347\260*\006s"
    "ender\"\252\001\n\031MsgWithdrawFromSubaccount\022<\n\006s"
    "ender\030\002 \001(\0132&.dydxprotocol.subaccounts.S"
    "ubaccountIdB\004\310\336\037\000\022+\n\trecipient\030\001 \001(\tB\030\322\264"
    "-\024cosmos.AddressString\022\020\n\010asset_id\030\003 \001(\r"
    "\022\020\n\010quantums\030\004 \001(\004\"\321\001\n\032MsgSendFromModule"
    "ToAccount\022+\n\tauthority\030\001 \001(\tB\030\322\264-\024cosmos"
    ".AddressString\022\032\n\022sender_module_name\030\002 \001"
    "(\t\022+\n\trecipient\030\003 \001(\tB\030\322\264-\024cosmos.Addres"
    "sString\022-\n\004coin\030\004 \001(\0132\031.cosmos.base.v1be"
    "ta1.CoinB\004\310\336\037\000:\016\202\347\260*\tauthorityB;Z9github"
    ".com/dydxprotocol/v4-chain/protocol/x/se"
    "nding/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_deps[5] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_dydxprotocol_2fsubaccounts_2fsubaccount_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto = {
    false,
    false,
    1019,
    descriptor_table_protodef_dydxprotocol_2fsending_2ftransfer_2eproto,
    "dydxprotocol/sending/transfer.proto",
    &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_once,
    descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_deps,
    5,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fsending_2ftransfer_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fsending_2ftransfer_2eproto,
    file_level_service_descriptors_dydxprotocol_2fsending_2ftransfer_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fsending_2ftransfer_2eproto(&descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto);
namespace dydxprotocol {
namespace sending {
// ===================================================================

class Transfer::_Internal {
 public:
  using HasBits = decltype(std::declval<Transfer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transfer, _impl_._has_bits_);
  static const ::dydxprotocol::subaccounts::SubaccountId& sender(const Transfer* msg);
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dydxprotocol::subaccounts::SubaccountId& recipient(const Transfer* msg);
  static void set_has_recipient(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dydxprotocol::subaccounts::SubaccountId&
Transfer::_Internal::sender(const Transfer* msg) {
  return *msg->_impl_.sender_;
}
const ::dydxprotocol::subaccounts::SubaccountId&
Transfer::_Internal::recipient(const Transfer* msg) {
  return *msg->_impl_.recipient_;
}
void Transfer::clear_sender() {
  if (_impl_.sender_ != nullptr) _impl_.sender_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Transfer::clear_recipient() {
  if (_impl_.recipient_ != nullptr) _impl_.recipient_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Transfer::Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.sending.Transfer)
}
Transfer::Transfer(const Transfer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transfer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.recipient_){nullptr}
    , decltype(_impl_.amount_) {}

    , decltype(_impl_.asset_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.sender_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.sender_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.recipient_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.recipient_);
  }
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.asset_id_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.asset_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.sending.Transfer)
}

inline void Transfer::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.recipient_){nullptr}
    , decltype(_impl_.amount_) { ::uint64_t{0u} }

    , decltype(_impl_.asset_id_) { 0u }

  };
}

Transfer::~Transfer() {
  // @@protoc_insertion_point(destructor:dydxprotocol.sending.Transfer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transfer::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sender_;
  if (this != internal_default_instance()) delete _impl_.recipient_;
}

void Transfer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transfer::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.sending.Transfer)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.sender_ != nullptr);
      _impl_.sender_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.recipient_ != nullptr);
      _impl_.recipient_->Clear();
    }
  }
  ::memset(&_impl_.amount_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.asset_id_) -
      reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.asset_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transfer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.subaccounts.SubaccountId sender = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipient(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 asset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Transfer::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.sending.Transfer)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.subaccounts.SubaccountId sender = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::recipient(this),
        _Internal::recipient(this).GetCachedSize(), target, stream);
  }

  // uint32 asset_id = 3;
  if (this->_internal_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_asset_id(), target);
  }

  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.sending.Transfer)
  return target;
}

::size_t Transfer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.sending.Transfer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .dydxprotocol.subaccounts.SubaccountId sender = 1 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sender_);
    }

    // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.recipient_);
    }

  }
  // uint64 amount = 4;
  if (this->_internal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_amount());
  }

  // uint32 asset_id = 3;
  if (this->_internal_asset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transfer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transfer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transfer::GetClassData() const { return &_class_data_; }


void Transfer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transfer*>(&to_msg);
  auto& from = static_cast<const Transfer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.sending.Transfer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_sender()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
          from._internal_sender());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_recipient()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
          from._internal_recipient());
    }
  }
  if (from._internal_amount() != 0) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (from._internal_asset_id() != 0) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transfer::CopyFrom(const Transfer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.sending.Transfer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transfer::IsInitialized() const {
  return true;
}

void Transfer::InternalSwap(Transfer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transfer, _impl_.asset_id_)
      + sizeof(Transfer::_impl_.asset_id_)
      - PROTOBUF_FIELD_OFFSET(Transfer, _impl_.sender_)>(
          reinterpret_cast<char*>(&_impl_.sender_),
          reinterpret_cast<char*>(&other->_impl_.sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transfer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_getter, &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_once,
      file_level_metadata_dydxprotocol_2fsending_2ftransfer_2eproto[0]);
}
// ===================================================================

class MsgDepositToSubaccount::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgDepositToSubaccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgDepositToSubaccount, _impl_._has_bits_);
  static const ::dydxprotocol::subaccounts::SubaccountId& recipient(const MsgDepositToSubaccount* msg);
  static void set_has_recipient(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::subaccounts::SubaccountId&
MsgDepositToSubaccount::_Internal::recipient(const MsgDepositToSubaccount* msg) {
  return *msg->_impl_.recipient_;
}
void MsgDepositToSubaccount::clear_recipient() {
  if (_impl_.recipient_ != nullptr) _impl_.recipient_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgDepositToSubaccount::MsgDepositToSubaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.sending.MsgDepositToSubaccount)
}
MsgDepositToSubaccount::MsgDepositToSubaccount(const MsgDepositToSubaccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgDepositToSubaccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.recipient_){nullptr}
    , decltype(_impl_.quantums_) {}

    , decltype(_impl_.asset_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.recipient_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.recipient_);
  }
  ::memcpy(&_impl_.quantums_, &from._impl_.quantums_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.asset_id_) -
    reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.asset_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.sending.MsgDepositToSubaccount)
}

inline void MsgDepositToSubaccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_) {}

    , decltype(_impl_.recipient_){nullptr}
    , decltype(_impl_.quantums_) { ::uint64_t{0u} }

    , decltype(_impl_.asset_id_) { 0u }

  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgDepositToSubaccount::~MsgDepositToSubaccount() {
  // @@protoc_insertion_point(destructor:dydxprotocol.sending.MsgDepositToSubaccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgDepositToSubaccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  if (this != internal_default_instance()) delete _impl_.recipient_;
}

void MsgDepositToSubaccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgDepositToSubaccount::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.sending.MsgDepositToSubaccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.recipient_ != nullptr);
    _impl_.recipient_->Clear();
  }
  ::memset(&_impl_.quantums_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.asset_id_) -
      reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.asset_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgDepositToSubaccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.sending.MsgDepositToSubaccount.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_recipient(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 asset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 quantums = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgDepositToSubaccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.sending.MsgDepositToSubaccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.sending.MsgDepositToSubaccount.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::recipient(this),
        _Internal::recipient(this).GetCachedSize(), target, stream);
  }

  // uint32 asset_id = 3;
  if (this->_internal_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_asset_id(), target);
  }

  // uint64 quantums = 4;
  if (this->_internal_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_quantums(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.sending.MsgDepositToSubaccount)
  return target;
}

::size_t MsgDepositToSubaccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.sending.MsgDepositToSubaccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recipient_);
  }

  // uint64 quantums = 4;
  if (this->_internal_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_quantums());
  }

  // uint32 asset_id = 3;
  if (this->_internal_asset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgDepositToSubaccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgDepositToSubaccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgDepositToSubaccount::GetClassData() const { return &_class_data_; }


void MsgDepositToSubaccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgDepositToSubaccount*>(&to_msg);
  auto& from = static_cast<const MsgDepositToSubaccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.sending.MsgDepositToSubaccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_recipient()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_recipient());
  }
  if (from._internal_quantums() != 0) {
    _this->_internal_set_quantums(from._internal_quantums());
  }
  if (from._internal_asset_id() != 0) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgDepositToSubaccount::CopyFrom(const MsgDepositToSubaccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.sending.MsgDepositToSubaccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDepositToSubaccount::IsInitialized() const {
  return true;
}

void MsgDepositToSubaccount::InternalSwap(MsgDepositToSubaccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgDepositToSubaccount, _impl_.asset_id_)
      + sizeof(MsgDepositToSubaccount::_impl_.asset_id_)
      - PROTOBUF_FIELD_OFFSET(MsgDepositToSubaccount, _impl_.recipient_)>(
          reinterpret_cast<char*>(&_impl_.recipient_),
          reinterpret_cast<char*>(&other->_impl_.recipient_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgDepositToSubaccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_getter, &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_once,
      file_level_metadata_dydxprotocol_2fsending_2ftransfer_2eproto[1]);
}
// ===================================================================

class MsgWithdrawFromSubaccount::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgWithdrawFromSubaccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgWithdrawFromSubaccount, _impl_._has_bits_);
  static const ::dydxprotocol::subaccounts::SubaccountId& sender(const MsgWithdrawFromSubaccount* msg);
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::subaccounts::SubaccountId&
MsgWithdrawFromSubaccount::_Internal::sender(const MsgWithdrawFromSubaccount* msg) {
  return *msg->_impl_.sender_;
}
void MsgWithdrawFromSubaccount::clear_sender() {
  if (_impl_.sender_ != nullptr) _impl_.sender_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgWithdrawFromSubaccount::MsgWithdrawFromSubaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.sending.MsgWithdrawFromSubaccount)
}
MsgWithdrawFromSubaccount::MsgWithdrawFromSubaccount(const MsgWithdrawFromSubaccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgWithdrawFromSubaccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.quantums_) {}

    , decltype(_impl_.asset_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.sender_ = new ::dydxprotocol::subaccounts::SubaccountId(*from._impl_.sender_);
  }
  ::memcpy(&_impl_.quantums_, &from._impl_.quantums_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.asset_id_) -
    reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.asset_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.sending.MsgWithdrawFromSubaccount)
}

inline void MsgWithdrawFromSubaccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.sender_){nullptr}
    , decltype(_impl_.quantums_) { ::uint64_t{0u} }

    , decltype(_impl_.asset_id_) { 0u }

  };
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgWithdrawFromSubaccount::~MsgWithdrawFromSubaccount() {
  // @@protoc_insertion_point(destructor:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgWithdrawFromSubaccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recipient_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sender_;
}

void MsgWithdrawFromSubaccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgWithdrawFromSubaccount::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recipient_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.sender_ != nullptr);
    _impl_.sender_->Clear();
  }
  ::memset(&_impl_.quantums_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.asset_id_) -
      reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.asset_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgWithdrawFromSubaccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string recipient = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.subaccounts.SubaccountId sender = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 asset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 quantums = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgWithdrawFromSubaccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string recipient = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_recipient().empty()) {
    const std::string& _s = this->_internal_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.subaccounts.SubaccountId sender = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sender(this),
        _Internal::sender(this).GetCachedSize(), target, stream);
  }

  // uint32 asset_id = 3;
  if (this->_internal_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_asset_id(), target);
  }

  // uint64 quantums = 4;
  if (this->_internal_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_quantums(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  return target;
}

::size_t MsgWithdrawFromSubaccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string recipient = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient());
  }

  // .dydxprotocol.subaccounts.SubaccountId sender = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sender_);
  }

  // uint64 quantums = 4;
  if (this->_internal_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_quantums());
  }

  // uint32 asset_id = 3;
  if (this->_internal_asset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgWithdrawFromSubaccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgWithdrawFromSubaccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgWithdrawFromSubaccount::GetClassData() const { return &_class_data_; }


void MsgWithdrawFromSubaccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgWithdrawFromSubaccount*>(&to_msg);
  auto& from = static_cast<const MsgWithdrawFromSubaccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_sender()->::dydxprotocol::subaccounts::SubaccountId::MergeFrom(
        from._internal_sender());
  }
  if (from._internal_quantums() != 0) {
    _this->_internal_set_quantums(from._internal_quantums());
  }
  if (from._internal_asset_id() != 0) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgWithdrawFromSubaccount::CopyFrom(const MsgWithdrawFromSubaccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.sending.MsgWithdrawFromSubaccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWithdrawFromSubaccount::IsInitialized() const {
  return true;
}

void MsgWithdrawFromSubaccount::InternalSwap(MsgWithdrawFromSubaccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_, lhs_arena,
                                       &other->_impl_.recipient_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgWithdrawFromSubaccount, _impl_.asset_id_)
      + sizeof(MsgWithdrawFromSubaccount::_impl_.asset_id_)
      - PROTOBUF_FIELD_OFFSET(MsgWithdrawFromSubaccount, _impl_.sender_)>(
          reinterpret_cast<char*>(&_impl_.sender_),
          reinterpret_cast<char*>(&other->_impl_.sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgWithdrawFromSubaccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_getter, &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_once,
      file_level_metadata_dydxprotocol_2fsending_2ftransfer_2eproto[2]);
}
// ===================================================================

class MsgSendFromModuleToAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgSendFromModuleToAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgSendFromModuleToAccount, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& coin(const MsgSendFromModuleToAccount* msg);
  static void set_has_coin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
MsgSendFromModuleToAccount::_Internal::coin(const MsgSendFromModuleToAccount* msg) {
  return *msg->_impl_.coin_;
}
void MsgSendFromModuleToAccount::clear_coin() {
  if (_impl_.coin_ != nullptr) _impl_.coin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgSendFromModuleToAccount::MsgSendFromModuleToAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.sending.MsgSendFromModuleToAccount)
}
MsgSendFromModuleToAccount::MsgSendFromModuleToAccount(const MsgSendFromModuleToAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgSendFromModuleToAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.sender_module_name_) {}

    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.coin_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  _impl_.sender_module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_module_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_module_name().empty()) {
    _this->_impl_.sender_module_name_.Set(from._internal_sender_module_name(), _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.coin_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.coin_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.sending.MsgSendFromModuleToAccount)
}

inline void MsgSendFromModuleToAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.sender_module_name_) {}

    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.coin_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_module_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_module_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgSendFromModuleToAccount::~MsgSendFromModuleToAccount() {
  // @@protoc_insertion_point(destructor:dydxprotocol.sending.MsgSendFromModuleToAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSendFromModuleToAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  _impl_.sender_module_name_.Destroy();
  _impl_.recipient_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coin_;
}

void MsgSendFromModuleToAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgSendFromModuleToAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.sending.MsgSendFromModuleToAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  _impl_.sender_module_name_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.coin_ != nullptr);
    _impl_.coin_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSendFromModuleToAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.sending.MsgSendFromModuleToAccount.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender_module_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sender_module_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string recipient = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.sending.MsgSendFromModuleToAccount.recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin coin = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgSendFromModuleToAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.sending.MsgSendFromModuleToAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.sending.MsgSendFromModuleToAccount.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sender_module_name = 2;
  if (!this->_internal_sender_module_name().empty()) {
    const std::string& _s = this->_internal_sender_module_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string recipient = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_recipient().empty()) {
    const std::string& _s = this->_internal_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.sending.MsgSendFromModuleToAccount.recipient");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin coin = 4 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::coin(this),
        _Internal::coin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.sending.MsgSendFromModuleToAccount)
  return target;
}

::size_t MsgSendFromModuleToAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.sending.MsgSendFromModuleToAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // string sender_module_name = 2;
  if (!this->_internal_sender_module_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_module_name());
  }

  // string recipient = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient());
  }

  // .cosmos.base.v1beta1.Coin coin = 4 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSendFromModuleToAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgSendFromModuleToAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSendFromModuleToAccount::GetClassData() const { return &_class_data_; }


void MsgSendFromModuleToAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgSendFromModuleToAccount*>(&to_msg);
  auto& from = static_cast<const MsgSendFromModuleToAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.sending.MsgSendFromModuleToAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if (!from._internal_sender_module_name().empty()) {
    _this->_internal_set_sender_module_name(from._internal_sender_module_name());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_coin()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_coin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSendFromModuleToAccount::CopyFrom(const MsgSendFromModuleToAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.sending.MsgSendFromModuleToAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSendFromModuleToAccount::IsInitialized() const {
  return true;
}

void MsgSendFromModuleToAccount::InternalSwap(MsgSendFromModuleToAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_module_name_, lhs_arena,
                                       &other->_impl_.sender_module_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_, lhs_arena,
                                       &other->_impl_.recipient_, rhs_arena);
  swap(_impl_.coin_, other->_impl_.coin_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSendFromModuleToAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_getter, &descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto_once,
      file_level_metadata_dydxprotocol_2fsending_2ftransfer_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace sending
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::sending::Transfer*
Arena::CreateMaybeMessage< ::dydxprotocol::sending::Transfer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::sending::Transfer >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::sending::MsgDepositToSubaccount*
Arena::CreateMaybeMessage< ::dydxprotocol::sending::MsgDepositToSubaccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::sending::MsgDepositToSubaccount >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::sending::MsgWithdrawFromSubaccount*
Arena::CreateMaybeMessage< ::dydxprotocol::sending::MsgWithdrawFromSubaccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::sending::MsgWithdrawFromSubaccount >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::sending::MsgSendFromModuleToAccount*
Arena::CreateMaybeMessage< ::dydxprotocol::sending::MsgSendFromModuleToAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::sending::MsgSendFromModuleToAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
