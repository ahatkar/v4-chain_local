// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/sending/transfer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsending_2ftransfer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsending_2ftransfer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fsending_2ftransfer_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fsending_2ftransfer_2eproto;
namespace dydxprotocol {
namespace sending {
class MsgDepositToSubaccount;
struct MsgDepositToSubaccountDefaultTypeInternal;
extern MsgDepositToSubaccountDefaultTypeInternal _MsgDepositToSubaccount_default_instance_;
class MsgSendFromModuleToAccount;
struct MsgSendFromModuleToAccountDefaultTypeInternal;
extern MsgSendFromModuleToAccountDefaultTypeInternal _MsgSendFromModuleToAccount_default_instance_;
class MsgWithdrawFromSubaccount;
struct MsgWithdrawFromSubaccountDefaultTypeInternal;
extern MsgWithdrawFromSubaccountDefaultTypeInternal _MsgWithdrawFromSubaccount_default_instance_;
class Transfer;
struct TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace sending
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::sending::MsgDepositToSubaccount* Arena::CreateMaybeMessage<::dydxprotocol::sending::MsgDepositToSubaccount>(Arena*);
template <>
::dydxprotocol::sending::MsgSendFromModuleToAccount* Arena::CreateMaybeMessage<::dydxprotocol::sending::MsgSendFromModuleToAccount>(Arena*);
template <>
::dydxprotocol::sending::MsgWithdrawFromSubaccount* Arena::CreateMaybeMessage<::dydxprotocol::sending::MsgWithdrawFromSubaccount>(Arena*);
template <>
::dydxprotocol::sending::Transfer* Arena::CreateMaybeMessage<::dydxprotocol::sending::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace sending {

// ===================================================================


// -------------------------------------------------------------------

class Transfer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.sending.Transfer) */ {
 public:
  inline Transfer() : Transfer(nullptr) {}
  ~Transfer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Transfer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transfer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transfer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transfer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transfer& from) {
    Transfer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.sending.Transfer";
  }
  protected:
  explicit Transfer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kAmountFieldNumber = 4,
    kAssetIdFieldNumber = 3,
  };
  // .dydxprotocol.subaccounts.SubaccountId sender = 1 [(.gogoproto.nullable) = false];
  bool has_sender() const;
  void clear_sender() ;
  const ::dydxprotocol::subaccounts::SubaccountId& sender() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_sender();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_sender();
  void set_allocated_sender(::dydxprotocol::subaccounts::SubaccountId* sender);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_sender() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dydxprotocol::subaccounts::SubaccountId* sender);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_sender();
  // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
  bool has_recipient() const;
  void clear_recipient() ;
  const ::dydxprotocol::subaccounts::SubaccountId& recipient() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_recipient();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_recipient();
  void set_allocated_recipient(::dydxprotocol::subaccounts::SubaccountId* recipient);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_recipient() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_recipient();
  public:
  void unsafe_arena_set_allocated_recipient(
      ::dydxprotocol::subaccounts::SubaccountId* recipient);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_recipient();
  // uint64 amount = 4;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // uint32 asset_id = 3;
  void clear_asset_id() ;
  ::uint32_t asset_id() const;
  void set_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.sending.Transfer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::subaccounts::SubaccountId* sender_;
    ::dydxprotocol::subaccounts::SubaccountId* recipient_;
    ::uint64_t amount_;
    ::uint32_t asset_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto;
};// -------------------------------------------------------------------

class MsgDepositToSubaccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.sending.MsgDepositToSubaccount) */ {
 public:
  inline MsgDepositToSubaccount() : MsgDepositToSubaccount(nullptr) {}
  ~MsgDepositToSubaccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDepositToSubaccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDepositToSubaccount(const MsgDepositToSubaccount& from);
  MsgDepositToSubaccount(MsgDepositToSubaccount&& from) noexcept
    : MsgDepositToSubaccount() {
    *this = ::std::move(from);
  }

  inline MsgDepositToSubaccount& operator=(const MsgDepositToSubaccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDepositToSubaccount& operator=(MsgDepositToSubaccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDepositToSubaccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDepositToSubaccount* internal_default_instance() {
    return reinterpret_cast<const MsgDepositToSubaccount*>(
               &_MsgDepositToSubaccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgDepositToSubaccount& a, MsgDepositToSubaccount& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDepositToSubaccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDepositToSubaccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDepositToSubaccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDepositToSubaccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDepositToSubaccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgDepositToSubaccount& from) {
    MsgDepositToSubaccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDepositToSubaccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.sending.MsgDepositToSubaccount";
  }
  protected:
  explicit MsgDepositToSubaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kQuantumsFieldNumber = 4,
    kAssetIdFieldNumber = 3,
  };
  // string sender = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
  bool has_recipient() const;
  void clear_recipient() ;
  const ::dydxprotocol::subaccounts::SubaccountId& recipient() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_recipient();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_recipient();
  void set_allocated_recipient(::dydxprotocol::subaccounts::SubaccountId* recipient);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_recipient() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_recipient();
  public:
  void unsafe_arena_set_allocated_recipient(
      ::dydxprotocol::subaccounts::SubaccountId* recipient);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_recipient();
  // uint64 quantums = 4;
  void clear_quantums() ;
  ::uint64_t quantums() const;
  void set_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_quantums() const;
  void _internal_set_quantums(::uint64_t value);

  public:
  // uint32 asset_id = 3;
  void clear_asset_id() ;
  ::uint32_t asset_id() const;
  void set_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.sending.MsgDepositToSubaccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::dydxprotocol::subaccounts::SubaccountId* recipient_;
    ::uint64_t quantums_;
    ::uint32_t asset_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto;
};// -------------------------------------------------------------------

class MsgWithdrawFromSubaccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.sending.MsgWithdrawFromSubaccount) */ {
 public:
  inline MsgWithdrawFromSubaccount() : MsgWithdrawFromSubaccount(nullptr) {}
  ~MsgWithdrawFromSubaccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgWithdrawFromSubaccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgWithdrawFromSubaccount(const MsgWithdrawFromSubaccount& from);
  MsgWithdrawFromSubaccount(MsgWithdrawFromSubaccount&& from) noexcept
    : MsgWithdrawFromSubaccount() {
    *this = ::std::move(from);
  }

  inline MsgWithdrawFromSubaccount& operator=(const MsgWithdrawFromSubaccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgWithdrawFromSubaccount& operator=(MsgWithdrawFromSubaccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgWithdrawFromSubaccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgWithdrawFromSubaccount* internal_default_instance() {
    return reinterpret_cast<const MsgWithdrawFromSubaccount*>(
               &_MsgWithdrawFromSubaccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgWithdrawFromSubaccount& a, MsgWithdrawFromSubaccount& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgWithdrawFromSubaccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgWithdrawFromSubaccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgWithdrawFromSubaccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgWithdrawFromSubaccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgWithdrawFromSubaccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgWithdrawFromSubaccount& from) {
    MsgWithdrawFromSubaccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgWithdrawFromSubaccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.sending.MsgWithdrawFromSubaccount";
  }
  protected:
  explicit MsgWithdrawFromSubaccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientFieldNumber = 1,
    kSenderFieldNumber = 2,
    kQuantumsFieldNumber = 4,
    kAssetIdFieldNumber = 3,
  };
  // string recipient = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_recipient() ;
  const std::string& recipient() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* ptr);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // .dydxprotocol.subaccounts.SubaccountId sender = 2 [(.gogoproto.nullable) = false];
  bool has_sender() const;
  void clear_sender() ;
  const ::dydxprotocol::subaccounts::SubaccountId& sender() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::SubaccountId* release_sender();
  ::dydxprotocol::subaccounts::SubaccountId* mutable_sender();
  void set_allocated_sender(::dydxprotocol::subaccounts::SubaccountId* sender);
  private:
  const ::dydxprotocol::subaccounts::SubaccountId& _internal_sender() const;
  ::dydxprotocol::subaccounts::SubaccountId* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dydxprotocol::subaccounts::SubaccountId* sender);
  ::dydxprotocol::subaccounts::SubaccountId* unsafe_arena_release_sender();
  // uint64 quantums = 4;
  void clear_quantums() ;
  ::uint64_t quantums() const;
  void set_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_quantums() const;
  void _internal_set_quantums(::uint64_t value);

  public:
  // uint32 asset_id = 3;
  void clear_asset_id() ;
  ::uint32_t asset_id() const;
  void set_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.sending.MsgWithdrawFromSubaccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
    ::dydxprotocol::subaccounts::SubaccountId* sender_;
    ::uint64_t quantums_;
    ::uint32_t asset_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto;
};// -------------------------------------------------------------------

class MsgSendFromModuleToAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.sending.MsgSendFromModuleToAccount) */ {
 public:
  inline MsgSendFromModuleToAccount() : MsgSendFromModuleToAccount(nullptr) {}
  ~MsgSendFromModuleToAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSendFromModuleToAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSendFromModuleToAccount(const MsgSendFromModuleToAccount& from);
  MsgSendFromModuleToAccount(MsgSendFromModuleToAccount&& from) noexcept
    : MsgSendFromModuleToAccount() {
    *this = ::std::move(from);
  }

  inline MsgSendFromModuleToAccount& operator=(const MsgSendFromModuleToAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendFromModuleToAccount& operator=(MsgSendFromModuleToAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSendFromModuleToAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSendFromModuleToAccount* internal_default_instance() {
    return reinterpret_cast<const MsgSendFromModuleToAccount*>(
               &_MsgSendFromModuleToAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgSendFromModuleToAccount& a, MsgSendFromModuleToAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendFromModuleToAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendFromModuleToAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSendFromModuleToAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSendFromModuleToAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSendFromModuleToAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSendFromModuleToAccount& from) {
    MsgSendFromModuleToAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSendFromModuleToAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.sending.MsgSendFromModuleToAccount";
  }
  protected:
  explicit MsgSendFromModuleToAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kSenderModuleNameFieldNumber = 2,
    kRecipientFieldNumber = 3,
    kCoinFieldNumber = 4,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // string sender_module_name = 2;
  void clear_sender_module_name() ;
  const std::string& sender_module_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender_module_name(Arg_&& arg, Args_... args);
  std::string* mutable_sender_module_name();
  PROTOBUF_NODISCARD std::string* release_sender_module_name();
  void set_allocated_sender_module_name(std::string* ptr);

  private:
  const std::string& _internal_sender_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_module_name(
      const std::string& value);
  std::string* _internal_mutable_sender_module_name();

  public:
  // string recipient = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_recipient() ;
  const std::string& recipient() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_recipient(Arg_&& arg, Args_... args);
  std::string* mutable_recipient();
  PROTOBUF_NODISCARD std::string* release_recipient();
  void set_allocated_recipient(std::string* ptr);

  private:
  const std::string& _internal_recipient() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_recipient(
      const std::string& value);
  std::string* _internal_mutable_recipient();

  public:
  // .cosmos.base.v1beta1.Coin coin = 4 [(.gogoproto.nullable) = false];
  bool has_coin() const;
  void clear_coin() ;
  const ::cosmos::base::v1beta1::Coin& coin() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_coin();
  ::cosmos::base::v1beta1::Coin* mutable_coin();
  void set_allocated_coin(::cosmos::base::v1beta1::Coin* coin);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_coin() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_coin();
  public:
  void unsafe_arena_set_allocated_coin(
      ::cosmos::base::v1beta1::Coin* coin);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_coin();
  // @@protoc_insertion_point(class_scope:dydxprotocol.sending.MsgSendFromModuleToAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_module_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
    ::cosmos::base::v1beta1::Coin* coin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsending_2ftransfer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Transfer

// .dydxprotocol.subaccounts.SubaccountId sender = 1 [(.gogoproto.nullable) = false];
inline bool Transfer::has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& Transfer::_internal_sender() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& Transfer::sender() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.Transfer.sender)
  return _internal_sender();
}
inline void Transfer::unsafe_arena_set_allocated_sender(
    ::dydxprotocol::subaccounts::SubaccountId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.sending.Transfer.sender)
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::release_sender() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.Transfer.sender)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::_internal_mutable_sender() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::mutable_sender() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.Transfer.sender)
  return _msg;
}
inline void Transfer::set_allocated_sender(::dydxprotocol::subaccounts::SubaccountId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.Transfer.sender)
}

// .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
inline bool Transfer::has_recipient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recipient_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& Transfer::_internal_recipient() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.recipient_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& Transfer::recipient() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.Transfer.recipient)
  return _internal_recipient();
}
inline void Transfer::unsafe_arena_set_allocated_recipient(
    ::dydxprotocol::subaccounts::SubaccountId* recipient) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_);
  }
  _impl_.recipient_ = recipient;
  if (recipient) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.sending.Transfer.recipient)
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::release_recipient() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.recipient_;
  _impl_.recipient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::unsafe_arena_release_recipient() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.Transfer.recipient)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.recipient_;
  _impl_.recipient_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::_internal_mutable_recipient() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.recipient_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.recipient_ = p;
  }
  return _impl_.recipient_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* Transfer::mutable_recipient() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.Transfer.recipient)
  return _msg;
}
inline void Transfer::set_allocated_recipient(::dydxprotocol::subaccounts::SubaccountId* recipient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_);
  }
  if (recipient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recipient));
    if (message_arena != submessage_arena) {
      recipient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipient, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.recipient_ = recipient;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.Transfer.recipient)
}

// uint32 asset_id = 3;
inline void Transfer::clear_asset_id() {
  _impl_.asset_id_ = 0u;
}
inline ::uint32_t Transfer::asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.Transfer.asset_id)
  return _internal_asset_id();
}
inline void Transfer::set_asset_id(::uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.Transfer.asset_id)
}
inline ::uint32_t Transfer::_internal_asset_id() const {
  return _impl_.asset_id_;
}
inline void Transfer::_internal_set_asset_id(::uint32_t value) {
  ;
  _impl_.asset_id_ = value;
}

// uint64 amount = 4;
inline void Transfer::clear_amount() {
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t Transfer::amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.Transfer.amount)
  return _internal_amount();
}
inline void Transfer::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.Transfer.amount)
}
inline ::uint64_t Transfer::_internal_amount() const {
  return _impl_.amount_;
}
inline void Transfer::_internal_set_amount(::uint64_t value) {
  ;
  _impl_.amount_ = value;
}

// -------------------------------------------------------------------

// MsgDepositToSubaccount

// string sender = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgDepositToSubaccount::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& MsgDepositToSubaccount::sender() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgDepositToSubaccount.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDepositToSubaccount::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgDepositToSubaccount.sender)
}
inline std::string* MsgDepositToSubaccount::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgDepositToSubaccount.sender)
  return _s;
}
inline const std::string& MsgDepositToSubaccount::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void MsgDepositToSubaccount::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDepositToSubaccount::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDepositToSubaccount::release_sender() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgDepositToSubaccount.sender)
  return _impl_.sender_.Release();
}
inline void MsgDepositToSubaccount::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgDepositToSubaccount.sender)
}

// .dydxprotocol.subaccounts.SubaccountId recipient = 2 [(.gogoproto.nullable) = false];
inline bool MsgDepositToSubaccount::has_recipient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recipient_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MsgDepositToSubaccount::_internal_recipient() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.recipient_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MsgDepositToSubaccount::recipient() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgDepositToSubaccount.recipient)
  return _internal_recipient();
}
inline void MsgDepositToSubaccount::unsafe_arena_set_allocated_recipient(
    ::dydxprotocol::subaccounts::SubaccountId* recipient) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_);
  }
  _impl_.recipient_ = recipient;
  if (recipient) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.sending.MsgDepositToSubaccount.recipient)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgDepositToSubaccount::release_recipient() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.recipient_;
  _impl_.recipient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgDepositToSubaccount::unsafe_arena_release_recipient() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgDepositToSubaccount.recipient)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.recipient_;
  _impl_.recipient_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgDepositToSubaccount::_internal_mutable_recipient() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.recipient_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.recipient_ = p;
  }
  return _impl_.recipient_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgDepositToSubaccount::mutable_recipient() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgDepositToSubaccount.recipient)
  return _msg;
}
inline void MsgDepositToSubaccount::set_allocated_recipient(::dydxprotocol::subaccounts::SubaccountId* recipient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_);
  }
  if (recipient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recipient));
    if (message_arena != submessage_arena) {
      recipient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipient, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.recipient_ = recipient;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgDepositToSubaccount.recipient)
}

// uint32 asset_id = 3;
inline void MsgDepositToSubaccount::clear_asset_id() {
  _impl_.asset_id_ = 0u;
}
inline ::uint32_t MsgDepositToSubaccount::asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgDepositToSubaccount.asset_id)
  return _internal_asset_id();
}
inline void MsgDepositToSubaccount::set_asset_id(::uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgDepositToSubaccount.asset_id)
}
inline ::uint32_t MsgDepositToSubaccount::_internal_asset_id() const {
  return _impl_.asset_id_;
}
inline void MsgDepositToSubaccount::_internal_set_asset_id(::uint32_t value) {
  ;
  _impl_.asset_id_ = value;
}

// uint64 quantums = 4;
inline void MsgDepositToSubaccount::clear_quantums() {
  _impl_.quantums_ = ::uint64_t{0u};
}
inline ::uint64_t MsgDepositToSubaccount::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgDepositToSubaccount.quantums)
  return _internal_quantums();
}
inline void MsgDepositToSubaccount::set_quantums(::uint64_t value) {
  _internal_set_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgDepositToSubaccount.quantums)
}
inline ::uint64_t MsgDepositToSubaccount::_internal_quantums() const {
  return _impl_.quantums_;
}
inline void MsgDepositToSubaccount::_internal_set_quantums(::uint64_t value) {
  ;
  _impl_.quantums_ = value;
}

// -------------------------------------------------------------------

// MsgWithdrawFromSubaccount

// .dydxprotocol.subaccounts.SubaccountId sender = 2 [(.gogoproto.nullable) = false];
inline bool MsgWithdrawFromSubaccount::has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MsgWithdrawFromSubaccount::_internal_sender() const {
  const ::dydxprotocol::subaccounts::SubaccountId* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::SubaccountId&>(
      ::dydxprotocol::subaccounts::_SubaccountId_default_instance_);
}
inline const ::dydxprotocol::subaccounts::SubaccountId& MsgWithdrawFromSubaccount::sender() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgWithdrawFromSubaccount.sender)
  return _internal_sender();
}
inline void MsgWithdrawFromSubaccount::unsafe_arena_set_allocated_sender(
    ::dydxprotocol::subaccounts::SubaccountId* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.sending.MsgWithdrawFromSubaccount.sender)
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgWithdrawFromSubaccount::release_sender() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgWithdrawFromSubaccount::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgWithdrawFromSubaccount.sender)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::SubaccountId* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgWithdrawFromSubaccount::_internal_mutable_sender() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::SubaccountId>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dydxprotocol::subaccounts::SubaccountId* MsgWithdrawFromSubaccount::mutable_sender() {
  ::dydxprotocol::subaccounts::SubaccountId* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgWithdrawFromSubaccount.sender)
  return _msg;
}
inline void MsgWithdrawFromSubaccount::set_allocated_sender(::dydxprotocol::subaccounts::SubaccountId* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgWithdrawFromSubaccount.sender)
}

// string recipient = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgWithdrawFromSubaccount::clear_recipient() {
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& MsgWithdrawFromSubaccount::recipient() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgWithdrawFromSubaccount::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient)
}
inline std::string* MsgWithdrawFromSubaccount::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient)
  return _s;
}
inline const std::string& MsgWithdrawFromSubaccount::_internal_recipient() const {
  return _impl_.recipient_.Get();
}
inline void MsgWithdrawFromSubaccount::_internal_set_recipient(const std::string& value) {
  ;


  _impl_.recipient_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgWithdrawFromSubaccount::_internal_mutable_recipient() {
  ;
  return _impl_.recipient_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgWithdrawFromSubaccount::release_recipient() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient)
  return _impl_.recipient_.Release();
}
inline void MsgWithdrawFromSubaccount::set_allocated_recipient(std::string* value) {
  _impl_.recipient_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recipient_.IsDefault()) {
          _impl_.recipient_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgWithdrawFromSubaccount.recipient)
}

// uint32 asset_id = 3;
inline void MsgWithdrawFromSubaccount::clear_asset_id() {
  _impl_.asset_id_ = 0u;
}
inline ::uint32_t MsgWithdrawFromSubaccount::asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgWithdrawFromSubaccount.asset_id)
  return _internal_asset_id();
}
inline void MsgWithdrawFromSubaccount::set_asset_id(::uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgWithdrawFromSubaccount.asset_id)
}
inline ::uint32_t MsgWithdrawFromSubaccount::_internal_asset_id() const {
  return _impl_.asset_id_;
}
inline void MsgWithdrawFromSubaccount::_internal_set_asset_id(::uint32_t value) {
  ;
  _impl_.asset_id_ = value;
}

// uint64 quantums = 4;
inline void MsgWithdrawFromSubaccount::clear_quantums() {
  _impl_.quantums_ = ::uint64_t{0u};
}
inline ::uint64_t MsgWithdrawFromSubaccount::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgWithdrawFromSubaccount.quantums)
  return _internal_quantums();
}
inline void MsgWithdrawFromSubaccount::set_quantums(::uint64_t value) {
  _internal_set_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgWithdrawFromSubaccount.quantums)
}
inline ::uint64_t MsgWithdrawFromSubaccount::_internal_quantums() const {
  return _impl_.quantums_;
}
inline void MsgWithdrawFromSubaccount::_internal_set_quantums(::uint64_t value) {
  ;
  _impl_.quantums_ = value;
}

// -------------------------------------------------------------------

// MsgSendFromModuleToAccount

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSendFromModuleToAccount::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgSendFromModuleToAccount::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgSendFromModuleToAccount.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendFromModuleToAccount::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgSendFromModuleToAccount.authority)
}
inline std::string* MsgSendFromModuleToAccount::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgSendFromModuleToAccount.authority)
  return _s;
}
inline const std::string& MsgSendFromModuleToAccount::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgSendFromModuleToAccount::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendFromModuleToAccount::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendFromModuleToAccount::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgSendFromModuleToAccount.authority)
  return _impl_.authority_.Release();
}
inline void MsgSendFromModuleToAccount::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgSendFromModuleToAccount.authority)
}

// string sender_module_name = 2;
inline void MsgSendFromModuleToAccount::clear_sender_module_name() {
  _impl_.sender_module_name_.ClearToEmpty();
}
inline const std::string& MsgSendFromModuleToAccount::sender_module_name() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name)
  return _internal_sender_module_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendFromModuleToAccount::set_sender_module_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_module_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name)
}
inline std::string* MsgSendFromModuleToAccount::mutable_sender_module_name() {
  std::string* _s = _internal_mutable_sender_module_name();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name)
  return _s;
}
inline const std::string& MsgSendFromModuleToAccount::_internal_sender_module_name() const {
  return _impl_.sender_module_name_.Get();
}
inline void MsgSendFromModuleToAccount::_internal_set_sender_module_name(const std::string& value) {
  ;


  _impl_.sender_module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendFromModuleToAccount::_internal_mutable_sender_module_name() {
  ;
  return _impl_.sender_module_name_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendFromModuleToAccount::release_sender_module_name() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name)
  return _impl_.sender_module_name_.Release();
}
inline void MsgSendFromModuleToAccount::set_allocated_sender_module_name(std::string* value) {
  _impl_.sender_module_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_module_name_.IsDefault()) {
          _impl_.sender_module_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgSendFromModuleToAccount.sender_module_name)
}

// string recipient = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgSendFromModuleToAccount::clear_recipient() {
  _impl_.recipient_.ClearToEmpty();
}
inline const std::string& MsgSendFromModuleToAccount::recipient() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgSendFromModuleToAccount.recipient)
  return _internal_recipient();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendFromModuleToAccount::set_recipient(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.recipient_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.sending.MsgSendFromModuleToAccount.recipient)
}
inline std::string* MsgSendFromModuleToAccount::mutable_recipient() {
  std::string* _s = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgSendFromModuleToAccount.recipient)
  return _s;
}
inline const std::string& MsgSendFromModuleToAccount::_internal_recipient() const {
  return _impl_.recipient_.Get();
}
inline void MsgSendFromModuleToAccount::_internal_set_recipient(const std::string& value) {
  ;


  _impl_.recipient_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendFromModuleToAccount::_internal_mutable_recipient() {
  ;
  return _impl_.recipient_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendFromModuleToAccount::release_recipient() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgSendFromModuleToAccount.recipient)
  return _impl_.recipient_.Release();
}
inline void MsgSendFromModuleToAccount::set_allocated_recipient(std::string* value) {
  _impl_.recipient_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.recipient_.IsDefault()) {
          _impl_.recipient_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgSendFromModuleToAccount.recipient)
}

// .cosmos.base.v1beta1.Coin coin = 4 [(.gogoproto.nullable) = false];
inline bool MsgSendFromModuleToAccount::has_coin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.coin_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& MsgSendFromModuleToAccount::_internal_coin() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.coin_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& MsgSendFromModuleToAccount::coin() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.sending.MsgSendFromModuleToAccount.coin)
  return _internal_coin();
}
inline void MsgSendFromModuleToAccount::unsafe_arena_set_allocated_coin(
    ::cosmos::base::v1beta1::Coin* coin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coin_);
  }
  _impl_.coin_ = coin;
  if (coin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.sending.MsgSendFromModuleToAccount.coin)
}
inline ::cosmos::base::v1beta1::Coin* MsgSendFromModuleToAccount::release_coin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.coin_;
  _impl_.coin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendFromModuleToAccount::unsafe_arena_release_coin() {
  // @@protoc_insertion_point(field_release:dydxprotocol.sending.MsgSendFromModuleToAccount.coin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.coin_;
  _impl_.coin_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendFromModuleToAccount::_internal_mutable_coin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.coin_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.coin_ = p;
  }
  return _impl_.coin_;
}
inline ::cosmos::base::v1beta1::Coin* MsgSendFromModuleToAccount::mutable_coin() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.sending.MsgSendFromModuleToAccount.coin)
  return _msg;
}
inline void MsgSendFromModuleToAccount::set_allocated_coin(::cosmos::base::v1beta1::Coin* coin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coin_);
  }
  if (coin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coin));
    if (message_arena != submessage_arena) {
      coin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coin_ = coin;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.sending.MsgSendFromModuleToAccount.coin)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sending
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsending_2ftransfer_2eproto_2epb_2eh
