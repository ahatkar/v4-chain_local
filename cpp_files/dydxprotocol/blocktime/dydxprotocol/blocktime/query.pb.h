// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/blocktime/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fblocktime_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fblocktime_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "dydxprotocol/blocktime/blocktime.pb.h"
#include "dydxprotocol/blocktime/params.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fblocktime_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fblocktime_2fquery_2eproto;
namespace dydxprotocol {
namespace blocktime {
class QueryAllDowntimeInfoRequest;
struct QueryAllDowntimeInfoRequestDefaultTypeInternal;
extern QueryAllDowntimeInfoRequestDefaultTypeInternal _QueryAllDowntimeInfoRequest_default_instance_;
class QueryAllDowntimeInfoResponse;
struct QueryAllDowntimeInfoResponseDefaultTypeInternal;
extern QueryAllDowntimeInfoResponseDefaultTypeInternal _QueryAllDowntimeInfoResponse_default_instance_;
class QueryDowntimeParamsRequest;
struct QueryDowntimeParamsRequestDefaultTypeInternal;
extern QueryDowntimeParamsRequestDefaultTypeInternal _QueryDowntimeParamsRequest_default_instance_;
class QueryDowntimeParamsResponse;
struct QueryDowntimeParamsResponseDefaultTypeInternal;
extern QueryDowntimeParamsResponseDefaultTypeInternal _QueryDowntimeParamsResponse_default_instance_;
class QueryPreviousBlockInfoRequest;
struct QueryPreviousBlockInfoRequestDefaultTypeInternal;
extern QueryPreviousBlockInfoRequestDefaultTypeInternal _QueryPreviousBlockInfoRequest_default_instance_;
class QueryPreviousBlockInfoResponse;
struct QueryPreviousBlockInfoResponseDefaultTypeInternal;
extern QueryPreviousBlockInfoResponseDefaultTypeInternal _QueryPreviousBlockInfoResponse_default_instance_;
}  // namespace blocktime
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::blocktime::QueryAllDowntimeInfoRequest* Arena::CreateMaybeMessage<::dydxprotocol::blocktime::QueryAllDowntimeInfoRequest>(Arena*);
template <>
::dydxprotocol::blocktime::QueryAllDowntimeInfoResponse* Arena::CreateMaybeMessage<::dydxprotocol::blocktime::QueryAllDowntimeInfoResponse>(Arena*);
template <>
::dydxprotocol::blocktime::QueryDowntimeParamsRequest* Arena::CreateMaybeMessage<::dydxprotocol::blocktime::QueryDowntimeParamsRequest>(Arena*);
template <>
::dydxprotocol::blocktime::QueryDowntimeParamsResponse* Arena::CreateMaybeMessage<::dydxprotocol::blocktime::QueryDowntimeParamsResponse>(Arena*);
template <>
::dydxprotocol::blocktime::QueryPreviousBlockInfoRequest* Arena::CreateMaybeMessage<::dydxprotocol::blocktime::QueryPreviousBlockInfoRequest>(Arena*);
template <>
::dydxprotocol::blocktime::QueryPreviousBlockInfoResponse* Arena::CreateMaybeMessage<::dydxprotocol::blocktime::QueryPreviousBlockInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace blocktime {

// ===================================================================


// -------------------------------------------------------------------

class QueryDowntimeParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.blocktime.QueryDowntimeParamsRequest) */ {
 public:
  inline QueryDowntimeParamsRequest() : QueryDowntimeParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDowntimeParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDowntimeParamsRequest(const QueryDowntimeParamsRequest& from);
  QueryDowntimeParamsRequest(QueryDowntimeParamsRequest&& from) noexcept
    : QueryDowntimeParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryDowntimeParamsRequest& operator=(const QueryDowntimeParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDowntimeParamsRequest& operator=(QueryDowntimeParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDowntimeParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDowntimeParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDowntimeParamsRequest*>(
               &_QueryDowntimeParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryDowntimeParamsRequest& a, QueryDowntimeParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDowntimeParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDowntimeParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDowntimeParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDowntimeParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryDowntimeParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryDowntimeParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.blocktime.QueryDowntimeParamsRequest";
  }
  protected:
  explicit QueryDowntimeParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.blocktime.QueryDowntimeParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDowntimeParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.blocktime.QueryDowntimeParamsResponse) */ {
 public:
  inline QueryDowntimeParamsResponse() : QueryDowntimeParamsResponse(nullptr) {}
  ~QueryDowntimeParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDowntimeParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDowntimeParamsResponse(const QueryDowntimeParamsResponse& from);
  QueryDowntimeParamsResponse(QueryDowntimeParamsResponse&& from) noexcept
    : QueryDowntimeParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryDowntimeParamsResponse& operator=(const QueryDowntimeParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDowntimeParamsResponse& operator=(QueryDowntimeParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDowntimeParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDowntimeParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDowntimeParamsResponse*>(
               &_QueryDowntimeParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryDowntimeParamsResponse& a, QueryDowntimeParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDowntimeParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDowntimeParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDowntimeParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDowntimeParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDowntimeParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDowntimeParamsResponse& from) {
    QueryDowntimeParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDowntimeParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.blocktime.QueryDowntimeParamsResponse";
  }
  protected:
  explicit QueryDowntimeParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .dydxprotocol.blocktime.DowntimeParams params = 1 [(.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::dydxprotocol::blocktime::DowntimeParams& params() const;
  PROTOBUF_NODISCARD ::dydxprotocol::blocktime::DowntimeParams* release_params();
  ::dydxprotocol::blocktime::DowntimeParams* mutable_params();
  void set_allocated_params(::dydxprotocol::blocktime::DowntimeParams* params);
  private:
  const ::dydxprotocol::blocktime::DowntimeParams& _internal_params() const;
  ::dydxprotocol::blocktime::DowntimeParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::dydxprotocol::blocktime::DowntimeParams* params);
  ::dydxprotocol::blocktime::DowntimeParams* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:dydxprotocol.blocktime.QueryDowntimeParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::blocktime::DowntimeParams* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPreviousBlockInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.blocktime.QueryPreviousBlockInfoRequest) */ {
 public:
  inline QueryPreviousBlockInfoRequest() : QueryPreviousBlockInfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPreviousBlockInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPreviousBlockInfoRequest(const QueryPreviousBlockInfoRequest& from);
  QueryPreviousBlockInfoRequest(QueryPreviousBlockInfoRequest&& from) noexcept
    : QueryPreviousBlockInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryPreviousBlockInfoRequest& operator=(const QueryPreviousBlockInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPreviousBlockInfoRequest& operator=(QueryPreviousBlockInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPreviousBlockInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPreviousBlockInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPreviousBlockInfoRequest*>(
               &_QueryPreviousBlockInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryPreviousBlockInfoRequest& a, QueryPreviousBlockInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPreviousBlockInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPreviousBlockInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPreviousBlockInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPreviousBlockInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryPreviousBlockInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryPreviousBlockInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.blocktime.QueryPreviousBlockInfoRequest";
  }
  protected:
  explicit QueryPreviousBlockInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.blocktime.QueryPreviousBlockInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPreviousBlockInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse) */ {
 public:
  inline QueryPreviousBlockInfoResponse() : QueryPreviousBlockInfoResponse(nullptr) {}
  ~QueryPreviousBlockInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPreviousBlockInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPreviousBlockInfoResponse(const QueryPreviousBlockInfoResponse& from);
  QueryPreviousBlockInfoResponse(QueryPreviousBlockInfoResponse&& from) noexcept
    : QueryPreviousBlockInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryPreviousBlockInfoResponse& operator=(const QueryPreviousBlockInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPreviousBlockInfoResponse& operator=(QueryPreviousBlockInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPreviousBlockInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPreviousBlockInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPreviousBlockInfoResponse*>(
               &_QueryPreviousBlockInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryPreviousBlockInfoResponse& a, QueryPreviousBlockInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPreviousBlockInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPreviousBlockInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPreviousBlockInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPreviousBlockInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPreviousBlockInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPreviousBlockInfoResponse& from) {
    QueryPreviousBlockInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPreviousBlockInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.blocktime.QueryPreviousBlockInfoResponse";
  }
  protected:
  explicit QueryPreviousBlockInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .dydxprotocol.blocktime.BlockInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::dydxprotocol::blocktime::BlockInfo& info() const;
  PROTOBUF_NODISCARD ::dydxprotocol::blocktime::BlockInfo* release_info();
  ::dydxprotocol::blocktime::BlockInfo* mutable_info();
  void set_allocated_info(::dydxprotocol::blocktime::BlockInfo* info);
  private:
  const ::dydxprotocol::blocktime::BlockInfo& _internal_info() const;
  ::dydxprotocol::blocktime::BlockInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::dydxprotocol::blocktime::BlockInfo* info);
  ::dydxprotocol::blocktime::BlockInfo* unsafe_arena_release_info();
  // @@protoc_insertion_point(class_scope:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::blocktime::BlockInfo* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllDowntimeInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.blocktime.QueryAllDowntimeInfoRequest) */ {
 public:
  inline QueryAllDowntimeInfoRequest() : QueryAllDowntimeInfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllDowntimeInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllDowntimeInfoRequest(const QueryAllDowntimeInfoRequest& from);
  QueryAllDowntimeInfoRequest(QueryAllDowntimeInfoRequest&& from) noexcept
    : QueryAllDowntimeInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllDowntimeInfoRequest& operator=(const QueryAllDowntimeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllDowntimeInfoRequest& operator=(QueryAllDowntimeInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllDowntimeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllDowntimeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllDowntimeInfoRequest*>(
               &_QueryAllDowntimeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryAllDowntimeInfoRequest& a, QueryAllDowntimeInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllDowntimeInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllDowntimeInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllDowntimeInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllDowntimeInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryAllDowntimeInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryAllDowntimeInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.blocktime.QueryAllDowntimeInfoRequest";
  }
  protected:
  explicit QueryAllDowntimeInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.blocktime.QueryAllDowntimeInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllDowntimeInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse) */ {
 public:
  inline QueryAllDowntimeInfoResponse() : QueryAllDowntimeInfoResponse(nullptr) {}
  ~QueryAllDowntimeInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllDowntimeInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllDowntimeInfoResponse(const QueryAllDowntimeInfoResponse& from);
  QueryAllDowntimeInfoResponse(QueryAllDowntimeInfoResponse&& from) noexcept
    : QueryAllDowntimeInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllDowntimeInfoResponse& operator=(const QueryAllDowntimeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllDowntimeInfoResponse& operator=(QueryAllDowntimeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllDowntimeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllDowntimeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllDowntimeInfoResponse*>(
               &_QueryAllDowntimeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryAllDowntimeInfoResponse& a, QueryAllDowntimeInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllDowntimeInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllDowntimeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllDowntimeInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllDowntimeInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllDowntimeInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllDowntimeInfoResponse& from) {
    QueryAllDowntimeInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllDowntimeInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.blocktime.QueryAllDowntimeInfoResponse";
  }
  protected:
  explicit QueryAllDowntimeInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .dydxprotocol.blocktime.AllDowntimeInfo info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::dydxprotocol::blocktime::AllDowntimeInfo& info() const;
  PROTOBUF_NODISCARD ::dydxprotocol::blocktime::AllDowntimeInfo* release_info();
  ::dydxprotocol::blocktime::AllDowntimeInfo* mutable_info();
  void set_allocated_info(::dydxprotocol::blocktime::AllDowntimeInfo* info);
  private:
  const ::dydxprotocol::blocktime::AllDowntimeInfo& _internal_info() const;
  ::dydxprotocol::blocktime::AllDowntimeInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::dydxprotocol::blocktime::AllDowntimeInfo* info);
  ::dydxprotocol::blocktime::AllDowntimeInfo* unsafe_arena_release_info();
  // @@protoc_insertion_point(class_scope:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::blocktime::AllDowntimeInfo* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fblocktime_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryDowntimeParamsRequest

// -------------------------------------------------------------------

// QueryDowntimeParamsResponse

// .dydxprotocol.blocktime.DowntimeParams params = 1 [(.gogoproto.nullable) = false];
inline bool QueryDowntimeParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::dydxprotocol::blocktime::DowntimeParams& QueryDowntimeParamsResponse::_internal_params() const {
  const ::dydxprotocol::blocktime::DowntimeParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::blocktime::DowntimeParams&>(
      ::dydxprotocol::blocktime::_DowntimeParams_default_instance_);
}
inline const ::dydxprotocol::blocktime::DowntimeParams& QueryDowntimeParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.blocktime.QueryDowntimeParamsResponse.params)
  return _internal_params();
}
inline void QueryDowntimeParamsResponse::unsafe_arena_set_allocated_params(
    ::dydxprotocol::blocktime::DowntimeParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.blocktime.QueryDowntimeParamsResponse.params)
}
inline ::dydxprotocol::blocktime::DowntimeParams* QueryDowntimeParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::blocktime::DowntimeParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::blocktime::DowntimeParams* QueryDowntimeParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:dydxprotocol.blocktime.QueryDowntimeParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::blocktime::DowntimeParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::dydxprotocol::blocktime::DowntimeParams* QueryDowntimeParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::blocktime::DowntimeParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::dydxprotocol::blocktime::DowntimeParams* QueryDowntimeParamsResponse::mutable_params() {
  ::dydxprotocol::blocktime::DowntimeParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.blocktime.QueryDowntimeParamsResponse.params)
  return _msg;
}
inline void QueryDowntimeParamsResponse::set_allocated_params(::dydxprotocol::blocktime::DowntimeParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.blocktime.QueryDowntimeParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryPreviousBlockInfoRequest

// -------------------------------------------------------------------

// QueryPreviousBlockInfoResponse

// .dydxprotocol.blocktime.BlockInfo info = 1;
inline bool QueryPreviousBlockInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::dydxprotocol::blocktime::BlockInfo& QueryPreviousBlockInfoResponse::_internal_info() const {
  const ::dydxprotocol::blocktime::BlockInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::blocktime::BlockInfo&>(
      ::dydxprotocol::blocktime::_BlockInfo_default_instance_);
}
inline const ::dydxprotocol::blocktime::BlockInfo& QueryPreviousBlockInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse.info)
  return _internal_info();
}
inline void QueryPreviousBlockInfoResponse::unsafe_arena_set_allocated_info(
    ::dydxprotocol::blocktime::BlockInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse.info)
}
inline ::dydxprotocol::blocktime::BlockInfo* QueryPreviousBlockInfoResponse::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::blocktime::BlockInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::blocktime::BlockInfo* QueryPreviousBlockInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::blocktime::BlockInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::dydxprotocol::blocktime::BlockInfo* QueryPreviousBlockInfoResponse::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::blocktime::BlockInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::dydxprotocol::blocktime::BlockInfo* QueryPreviousBlockInfoResponse::mutable_info() {
  ::dydxprotocol::blocktime::BlockInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse.info)
  return _msg;
}
inline void QueryPreviousBlockInfoResponse::set_allocated_info(::dydxprotocol::blocktime::BlockInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.blocktime.QueryPreviousBlockInfoResponse.info)
}

// -------------------------------------------------------------------

// QueryAllDowntimeInfoRequest

// -------------------------------------------------------------------

// QueryAllDowntimeInfoResponse

// .dydxprotocol.blocktime.AllDowntimeInfo info = 1;
inline bool QueryAllDowntimeInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline const ::dydxprotocol::blocktime::AllDowntimeInfo& QueryAllDowntimeInfoResponse::_internal_info() const {
  const ::dydxprotocol::blocktime::AllDowntimeInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::blocktime::AllDowntimeInfo&>(
      ::dydxprotocol::blocktime::_AllDowntimeInfo_default_instance_);
}
inline const ::dydxprotocol::blocktime::AllDowntimeInfo& QueryAllDowntimeInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse.info)
  return _internal_info();
}
inline void QueryAllDowntimeInfoResponse::unsafe_arena_set_allocated_info(
    ::dydxprotocol::blocktime::AllDowntimeInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse.info)
}
inline ::dydxprotocol::blocktime::AllDowntimeInfo* QueryAllDowntimeInfoResponse::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::blocktime::AllDowntimeInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::blocktime::AllDowntimeInfo* QueryAllDowntimeInfoResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::blocktime::AllDowntimeInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::dydxprotocol::blocktime::AllDowntimeInfo* QueryAllDowntimeInfoResponse::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::blocktime::AllDowntimeInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::dydxprotocol::blocktime::AllDowntimeInfo* QueryAllDowntimeInfoResponse::mutable_info() {
  ::dydxprotocol::blocktime::AllDowntimeInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse.info)
  return _msg;
}
inline void QueryAllDowntimeInfoResponse::set_allocated_info(::dydxprotocol::blocktime::AllDowntimeInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.blocktime.QueryAllDowntimeInfoResponse.info)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blocktime
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fblocktime_2fquery_2eproto_2epb_2eh
