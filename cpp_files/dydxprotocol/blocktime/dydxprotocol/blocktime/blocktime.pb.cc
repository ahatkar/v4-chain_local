// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/blocktime/blocktime.proto

#include "dydxprotocol/blocktime/blocktime.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace blocktime {
template <typename>
PROTOBUF_CONSTEXPR BlockInfo::BlockInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.height_)*/ 0u
} {}
struct BlockInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockInfoDefaultTypeInternal() {}
  union {
    BlockInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AllDowntimeInfo_DowntimeInfo::AllDowntimeInfo_DowntimeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.block_info_)*/nullptr} {}
struct AllDowntimeInfo_DowntimeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllDowntimeInfo_DowntimeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllDowntimeInfo_DowntimeInfoDefaultTypeInternal() {}
  union {
    AllDowntimeInfo_DowntimeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllDowntimeInfo_DowntimeInfoDefaultTypeInternal _AllDowntimeInfo_DowntimeInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AllDowntimeInfo::AllDowntimeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.infos_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllDowntimeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllDowntimeInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllDowntimeInfoDefaultTypeInternal() {}
  union {
    AllDowntimeInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllDowntimeInfoDefaultTypeInternal _AllDowntimeInfo_default_instance_;
}  // namespace blocktime
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fblocktime_2fblocktime_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fblocktime_2fblocktime_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fblocktime_2fblocktime_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fblocktime_2fblocktime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::BlockInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::BlockInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::BlockInfo, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::BlockInfo, _impl_.timestamp_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo, _impl_.block_info_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::AllDowntimeInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::blocktime::AllDowntimeInfo, _impl_.infos_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::dydxprotocol::blocktime::BlockInfo)},
        { 12, 22, -1, sizeof(::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo)},
        { 24, -1, -1, sizeof(::dydxprotocol::blocktime::AllDowntimeInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::blocktime::_BlockInfo_default_instance_._instance,
    &::dydxprotocol::blocktime::_AllDowntimeInfo_DowntimeInfo_default_instance_._instance,
    &::dydxprotocol::blocktime::_AllDowntimeInfo_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fblocktime_2fblocktime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&dydxprotocol/blocktime/blocktime.proto"
    "\022\026dydxprotocol.blocktime\032\024gogoproto/gogo"
    ".proto\032\036google/protobuf/duration.proto\032\037"
    "google/protobuf/timestamp.proto\"T\n\tBlock"
    "Info\022\016\n\006height\030\001 \001(\r\0227\n\ttimestamp\030\002 \001(\0132"
    "\032.google.protobuf.TimestampB\010\310\336\037\000\220\337\037\001\"\333\001"
    "\n\017AllDowntimeInfo\022C\n\005infos\030\001 \003(\01324.dydxp"
    "rotocol.blocktime.AllDowntimeInfo.Downti"
    "meInfo\032\202\001\n\014DowntimeInfo\0225\n\010duration\030\001 \001("
    "\0132\031.google.protobuf.DurationB\010\310\336\037\000\230\337\037\001\022;"
    "\n\nblock_info\030\002 \001(\0132!.dydxprotocol.blockt"
    "ime.BlockInfoB\004\310\336\037\000B=Z;github.com/dydxpr"
    "otocol/v4-chain/protocol/x/blocktime/typ"
    "esb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto = {
    false,
    false,
    530,
    descriptor_table_protodef_dydxprotocol_2fblocktime_2fblocktime_2eproto,
    "dydxprotocol/blocktime/blocktime.proto",
    &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_once,
    descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_deps,
    3,
    3,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fblocktime_2fblocktime_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fblocktime_2fblocktime_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fblocktime_2fblocktime_2eproto,
    file_level_service_descriptors_dydxprotocol_2fblocktime_2fblocktime_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fblocktime_2fblocktime_2eproto(&descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto);
namespace dydxprotocol {
namespace blocktime {
// ===================================================================

class BlockInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const BlockInfo* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BlockInfo::_Internal::timestamp(const BlockInfo* msg) {
  return *msg->_impl_.timestamp_;
}
void BlockInfo::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BlockInfo::BlockInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.blocktime.BlockInfo)
}
BlockInfo::BlockInfo(const BlockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.blocktime.BlockInfo)
}

inline void BlockInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) { 0u }

  };
}

BlockInfo::~BlockInfo() {
  // @@protoc_insertion_point(destructor:dydxprotocol.blocktime.BlockInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void BlockInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.blocktime.BlockInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_.height_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.blocktime.BlockInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.blocktime.BlockInfo)
  return target;
}

::size_t BlockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.blocktime.BlockInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockInfo::GetClassData() const { return &_class_data_; }


void BlockInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockInfo*>(&to_msg);
  auto& from = static_cast<const BlockInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.blocktime.BlockInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.blocktime.BlockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  return true;
}

void BlockInfo::InternalSwap(BlockInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockInfo, _impl_.height_)
      + sizeof(BlockInfo::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(BlockInfo, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_getter, &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_once,
      file_level_metadata_dydxprotocol_2fblocktime_2fblocktime_2eproto[0]);
}
// ===================================================================

class AllDowntimeInfo_DowntimeInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AllDowntimeInfo_DowntimeInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AllDowntimeInfo_DowntimeInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const AllDowntimeInfo_DowntimeInfo* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dydxprotocol::blocktime::BlockInfo& block_info(const AllDowntimeInfo_DowntimeInfo* msg);
  static void set_has_block_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
AllDowntimeInfo_DowntimeInfo::_Internal::duration(const AllDowntimeInfo_DowntimeInfo* msg) {
  return *msg->_impl_.duration_;
}
const ::dydxprotocol::blocktime::BlockInfo&
AllDowntimeInfo_DowntimeInfo::_Internal::block_info(const AllDowntimeInfo_DowntimeInfo* msg) {
  return *msg->_impl_.block_info_;
}
void AllDowntimeInfo_DowntimeInfo::clear_duration() {
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AllDowntimeInfo_DowntimeInfo::AllDowntimeInfo_DowntimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
}
AllDowntimeInfo_DowntimeInfo::AllDowntimeInfo_DowntimeInfo(const AllDowntimeInfo_DowntimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllDowntimeInfo_DowntimeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.block_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.block_info_ = new ::dydxprotocol::blocktime::BlockInfo(*from._impl_.block_info_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
}

inline void AllDowntimeInfo_DowntimeInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.block_info_){nullptr}
  };
}

AllDowntimeInfo_DowntimeInfo::~AllDowntimeInfo_DowntimeInfo() {
  // @@protoc_insertion_point(destructor:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllDowntimeInfo_DowntimeInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duration_;
  if (this != internal_default_instance()) delete _impl_.block_info_;
}

void AllDowntimeInfo_DowntimeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllDowntimeInfo_DowntimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.duration_ != nullptr);
      _impl_.duration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.block_info_ != nullptr);
      _impl_.block_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllDowntimeInfo_DowntimeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.blocktime.BlockInfo block_info = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllDowntimeInfo_DowntimeInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.blocktime.BlockInfo block_info = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::block_info(this),
        _Internal::block_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  return target;
}

::size_t AllDowntimeInfo_DowntimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Duration duration = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.duration_);
    }

    // .dydxprotocol.blocktime.BlockInfo block_info = 2 [(.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_info_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllDowntimeInfo_DowntimeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllDowntimeInfo_DowntimeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllDowntimeInfo_DowntimeInfo::GetClassData() const { return &_class_data_; }


void AllDowntimeInfo_DowntimeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllDowntimeInfo_DowntimeInfo*>(&to_msg);
  auto& from = static_cast<const AllDowntimeInfo_DowntimeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_block_info()->::dydxprotocol::blocktime::BlockInfo::MergeFrom(
          from._internal_block_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllDowntimeInfo_DowntimeInfo::CopyFrom(const AllDowntimeInfo_DowntimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDowntimeInfo_DowntimeInfo::IsInitialized() const {
  return true;
}

void AllDowntimeInfo_DowntimeInfo::InternalSwap(AllDowntimeInfo_DowntimeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllDowntimeInfo_DowntimeInfo, _impl_.block_info_)
      + sizeof(AllDowntimeInfo_DowntimeInfo::_impl_.block_info_)
      - PROTOBUF_FIELD_OFFSET(AllDowntimeInfo_DowntimeInfo, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllDowntimeInfo_DowntimeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_getter, &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_once,
      file_level_metadata_dydxprotocol_2fblocktime_2fblocktime_2eproto[1]);
}
// ===================================================================

class AllDowntimeInfo::_Internal {
 public:
};

AllDowntimeInfo::AllDowntimeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.blocktime.AllDowntimeInfo)
}
AllDowntimeInfo::AllDowntimeInfo(const AllDowntimeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllDowntimeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){from._impl_.infos_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.blocktime.AllDowntimeInfo)
}

inline void AllDowntimeInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.infos_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AllDowntimeInfo::~AllDowntimeInfo() {
  // @@protoc_insertion_point(destructor:dydxprotocol.blocktime.AllDowntimeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllDowntimeInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_infos()->~RepeatedPtrField();
}

void AllDowntimeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllDowntimeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.blocktime.AllDowntimeInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_infos()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllDowntimeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AllDowntimeInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.blocktime.AllDowntimeInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo infos = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.blocktime.AllDowntimeInfo)
  return target;
}

::size_t AllDowntimeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.blocktime.AllDowntimeInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.blocktime.AllDowntimeInfo.DowntimeInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->_internal_infos()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllDowntimeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllDowntimeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllDowntimeInfo::GetClassData() const { return &_class_data_; }


void AllDowntimeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllDowntimeInfo*>(&to_msg);
  auto& from = static_cast<const AllDowntimeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.blocktime.AllDowntimeInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_infos()->MergeFrom(from._internal_infos());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllDowntimeInfo::CopyFrom(const AllDowntimeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.blocktime.AllDowntimeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllDowntimeInfo::IsInitialized() const {
  return true;
}

void AllDowntimeInfo::InternalSwap(AllDowntimeInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_infos()->InternalSwap(other->_internal_mutable_infos());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllDowntimeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_getter, &descriptor_table_dydxprotocol_2fblocktime_2fblocktime_2eproto_once,
      file_level_metadata_dydxprotocol_2fblocktime_2fblocktime_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace blocktime
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::blocktime::BlockInfo*
Arena::CreateMaybeMessage< ::dydxprotocol::blocktime::BlockInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::blocktime::BlockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo*
Arena::CreateMaybeMessage< ::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::blocktime::AllDowntimeInfo_DowntimeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::blocktime::AllDowntimeInfo*
Arena::CreateMaybeMessage< ::dydxprotocol::blocktime::AllDowntimeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::blocktime::AllDowntimeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
