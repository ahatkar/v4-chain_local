// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/bridge/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fbridge_2fparams_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fbridge_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fbridge_2fparams_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fbridge_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto;
namespace dydxprotocol {
namespace bridge {
class EventParams;
struct EventParamsDefaultTypeInternal;
extern EventParamsDefaultTypeInternal _EventParams_default_instance_;
class ProposeParams;
struct ProposeParamsDefaultTypeInternal;
extern ProposeParamsDefaultTypeInternal _ProposeParams_default_instance_;
class SafetyParams;
struct SafetyParamsDefaultTypeInternal;
extern SafetyParamsDefaultTypeInternal _SafetyParams_default_instance_;
}  // namespace bridge
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::bridge::EventParams* Arena::CreateMaybeMessage<::dydxprotocol::bridge::EventParams>(Arena*);
template <>
::dydxprotocol::bridge::ProposeParams* Arena::CreateMaybeMessage<::dydxprotocol::bridge::ProposeParams>(Arena*);
template <>
::dydxprotocol::bridge::SafetyParams* Arena::CreateMaybeMessage<::dydxprotocol::bridge::SafetyParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace bridge {

// ===================================================================


// -------------------------------------------------------------------

class EventParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.bridge.EventParams) */ {
 public:
  inline EventParams() : EventParams(nullptr) {}
  ~EventParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EventParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventParams(const EventParams& from);
  EventParams(EventParams&& from) noexcept
    : EventParams() {
    *this = ::std::move(from);
  }

  inline EventParams& operator=(const EventParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventParams& operator=(EventParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventParams* internal_default_instance() {
    return reinterpret_cast<const EventParams*>(
               &_EventParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventParams& a, EventParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EventParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EventParams& from) {
    EventParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.bridge.EventParams";
  }
  protected:
  explicit EventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kEthAddressFieldNumber = 3,
    kEthChainIdFieldNumber = 2,
  };
  // string denom = 1;
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // string eth_address = 3;
  void clear_eth_address() ;
  const std::string& eth_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_eth_address(Arg_&& arg, Args_... args);
  std::string* mutable_eth_address();
  PROTOBUF_NODISCARD std::string* release_eth_address();
  void set_allocated_eth_address(std::string* ptr);

  private:
  const std::string& _internal_eth_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eth_address(
      const std::string& value);
  std::string* _internal_mutable_eth_address();

  public:
  // uint64 eth_chain_id = 2;
  void clear_eth_chain_id() ;
  ::uint64_t eth_chain_id() const;
  void set_eth_chain_id(::uint64_t value);

  private:
  ::uint64_t _internal_eth_chain_id() const;
  void _internal_set_eth_chain_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.bridge.EventParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eth_address_;
    ::uint64_t eth_chain_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fbridge_2fparams_2eproto;
};// -------------------------------------------------------------------

class ProposeParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.bridge.ProposeParams) */ {
 public:
  inline ProposeParams() : ProposeParams(nullptr) {}
  ~ProposeParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProposeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposeParams(const ProposeParams& from);
  ProposeParams(ProposeParams&& from) noexcept
    : ProposeParams() {
    *this = ::std::move(from);
  }

  inline ProposeParams& operator=(const ProposeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposeParams& operator=(ProposeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposeParams* internal_default_instance() {
    return reinterpret_cast<const ProposeParams*>(
               &_ProposeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProposeParams& a, ProposeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposeParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposeParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProposeParams& from) {
    ProposeParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.bridge.ProposeParams";
  }
  protected:
  explicit ProposeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposeDelayDurationFieldNumber = 2,
    kSkipIfBlockDelayedByDurationFieldNumber = 4,
    kMaxBridgesPerBlockFieldNumber = 1,
    kSkipRatePpmFieldNumber = 3,
  };
  // .google.protobuf.Duration propose_delay_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_propose_delay_duration() const;
  void clear_propose_delay_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& propose_delay_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_propose_delay_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_propose_delay_duration();
  void set_allocated_propose_delay_duration(::PROTOBUF_NAMESPACE_ID::Duration* propose_delay_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_propose_delay_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_propose_delay_duration();
  public:
  void unsafe_arena_set_allocated_propose_delay_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* propose_delay_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_propose_delay_duration();
  // .google.protobuf.Duration skip_if_block_delayed_by_duration = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_skip_if_block_delayed_by_duration() const;
  void clear_skip_if_block_delayed_by_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& skip_if_block_delayed_by_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_skip_if_block_delayed_by_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_skip_if_block_delayed_by_duration();
  void set_allocated_skip_if_block_delayed_by_duration(::PROTOBUF_NAMESPACE_ID::Duration* skip_if_block_delayed_by_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_skip_if_block_delayed_by_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_skip_if_block_delayed_by_duration();
  public:
  void unsafe_arena_set_allocated_skip_if_block_delayed_by_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* skip_if_block_delayed_by_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_skip_if_block_delayed_by_duration();
  // uint32 max_bridges_per_block = 1;
  void clear_max_bridges_per_block() ;
  ::uint32_t max_bridges_per_block() const;
  void set_max_bridges_per_block(::uint32_t value);

  private:
  ::uint32_t _internal_max_bridges_per_block() const;
  void _internal_set_max_bridges_per_block(::uint32_t value);

  public:
  // uint32 skip_rate_ppm = 3;
  void clear_skip_rate_ppm() ;
  ::uint32_t skip_rate_ppm() const;
  void set_skip_rate_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_skip_rate_ppm() const;
  void _internal_set_skip_rate_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.bridge.ProposeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* propose_delay_duration_;
    ::PROTOBUF_NAMESPACE_ID::Duration* skip_if_block_delayed_by_duration_;
    ::uint32_t max_bridges_per_block_;
    ::uint32_t skip_rate_ppm_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fbridge_2fparams_2eproto;
};// -------------------------------------------------------------------

class SafetyParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.bridge.SafetyParams) */ {
 public:
  inline SafetyParams() : SafetyParams(nullptr) {}
  ~SafetyParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SafetyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SafetyParams(const SafetyParams& from);
  SafetyParams(SafetyParams&& from) noexcept
    : SafetyParams() {
    *this = ::std::move(from);
  }

  inline SafetyParams& operator=(const SafetyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyParams& operator=(SafetyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SafetyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SafetyParams* internal_default_instance() {
    return reinterpret_cast<const SafetyParams*>(
               &_SafetyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SafetyParams& a, SafetyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SafetyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafetyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SafetyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SafetyParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SafetyParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SafetyParams& from) {
    SafetyParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.bridge.SafetyParams";
  }
  protected:
  explicit SafetyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsDisabledFieldNumber = 1,
    kDelayBlocksFieldNumber = 2,
  };
  // bool is_disabled = 1;
  void clear_is_disabled() ;
  bool is_disabled() const;
  void set_is_disabled(bool value);

  private:
  bool _internal_is_disabled() const;
  void _internal_set_is_disabled(bool value);

  public:
  // uint32 delay_blocks = 2;
  void clear_delay_blocks() ;
  ::uint32_t delay_blocks() const;
  void set_delay_blocks(::uint32_t value);

  private:
  ::uint32_t _internal_delay_blocks() const;
  void _internal_set_delay_blocks(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.bridge.SafetyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_disabled_;
    ::uint32_t delay_blocks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fbridge_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EventParams

// string denom = 1;
inline void EventParams::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& EventParams::denom() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.EventParams.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventParams::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.EventParams.denom)
}
inline std::string* EventParams::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.bridge.EventParams.denom)
  return _s;
}
inline const std::string& EventParams::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void EventParams::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* EventParams::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* EventParams::release_denom() {
  // @@protoc_insertion_point(field_release:dydxprotocol.bridge.EventParams.denom)
  return _impl_.denom_.Release();
}
inline void EventParams::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.bridge.EventParams.denom)
}

// uint64 eth_chain_id = 2;
inline void EventParams::clear_eth_chain_id() {
  _impl_.eth_chain_id_ = ::uint64_t{0u};
}
inline ::uint64_t EventParams::eth_chain_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.EventParams.eth_chain_id)
  return _internal_eth_chain_id();
}
inline void EventParams::set_eth_chain_id(::uint64_t value) {
  _internal_set_eth_chain_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.EventParams.eth_chain_id)
}
inline ::uint64_t EventParams::_internal_eth_chain_id() const {
  return _impl_.eth_chain_id_;
}
inline void EventParams::_internal_set_eth_chain_id(::uint64_t value) {
  ;
  _impl_.eth_chain_id_ = value;
}

// string eth_address = 3;
inline void EventParams::clear_eth_address() {
  _impl_.eth_address_.ClearToEmpty();
}
inline const std::string& EventParams::eth_address() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.EventParams.eth_address)
  return _internal_eth_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EventParams::set_eth_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.eth_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.EventParams.eth_address)
}
inline std::string* EventParams::mutable_eth_address() {
  std::string* _s = _internal_mutable_eth_address();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.bridge.EventParams.eth_address)
  return _s;
}
inline const std::string& EventParams::_internal_eth_address() const {
  return _impl_.eth_address_.Get();
}
inline void EventParams::_internal_set_eth_address(const std::string& value) {
  ;


  _impl_.eth_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EventParams::_internal_mutable_eth_address() {
  ;
  return _impl_.eth_address_.Mutable( GetArenaForAllocation());
}
inline std::string* EventParams::release_eth_address() {
  // @@protoc_insertion_point(field_release:dydxprotocol.bridge.EventParams.eth_address)
  return _impl_.eth_address_.Release();
}
inline void EventParams::set_allocated_eth_address(std::string* value) {
  _impl_.eth_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.eth_address_.IsDefault()) {
          _impl_.eth_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.bridge.EventParams.eth_address)
}

// -------------------------------------------------------------------

// ProposeParams

// uint32 max_bridges_per_block = 1;
inline void ProposeParams::clear_max_bridges_per_block() {
  _impl_.max_bridges_per_block_ = 0u;
}
inline ::uint32_t ProposeParams::max_bridges_per_block() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.ProposeParams.max_bridges_per_block)
  return _internal_max_bridges_per_block();
}
inline void ProposeParams::set_max_bridges_per_block(::uint32_t value) {
  _internal_set_max_bridges_per_block(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.ProposeParams.max_bridges_per_block)
}
inline ::uint32_t ProposeParams::_internal_max_bridges_per_block() const {
  return _impl_.max_bridges_per_block_;
}
inline void ProposeParams::_internal_set_max_bridges_per_block(::uint32_t value) {
  ;
  _impl_.max_bridges_per_block_ = value;
}

// .google.protobuf.Duration propose_delay_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool ProposeParams::has_propose_delay_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.propose_delay_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProposeParams::_internal_propose_delay_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.propose_delay_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProposeParams::propose_delay_duration() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.ProposeParams.propose_delay_duration)
  return _internal_propose_delay_duration();
}
inline void ProposeParams::unsafe_arena_set_allocated_propose_delay_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* propose_delay_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.propose_delay_duration_);
  }
  _impl_.propose_delay_duration_ = propose_delay_duration;
  if (propose_delay_duration) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.bridge.ProposeParams.propose_delay_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::release_propose_delay_duration() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.propose_delay_duration_;
  _impl_.propose_delay_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::unsafe_arena_release_propose_delay_duration() {
  // @@protoc_insertion_point(field_release:dydxprotocol.bridge.ProposeParams.propose_delay_duration)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.propose_delay_duration_;
  _impl_.propose_delay_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::_internal_mutable_propose_delay_duration() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.propose_delay_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.propose_delay_duration_ = p;
  }
  return _impl_.propose_delay_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::mutable_propose_delay_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_propose_delay_duration();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.bridge.ProposeParams.propose_delay_duration)
  return _msg;
}
inline void ProposeParams::set_allocated_propose_delay_duration(::PROTOBUF_NAMESPACE_ID::Duration* propose_delay_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.propose_delay_duration_);
  }
  if (propose_delay_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(propose_delay_duration));
    if (message_arena != submessage_arena) {
      propose_delay_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, propose_delay_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.propose_delay_duration_ = propose_delay_duration;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.bridge.ProposeParams.propose_delay_duration)
}

// uint32 skip_rate_ppm = 3;
inline void ProposeParams::clear_skip_rate_ppm() {
  _impl_.skip_rate_ppm_ = 0u;
}
inline ::uint32_t ProposeParams::skip_rate_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.ProposeParams.skip_rate_ppm)
  return _internal_skip_rate_ppm();
}
inline void ProposeParams::set_skip_rate_ppm(::uint32_t value) {
  _internal_set_skip_rate_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.ProposeParams.skip_rate_ppm)
}
inline ::uint32_t ProposeParams::_internal_skip_rate_ppm() const {
  return _impl_.skip_rate_ppm_;
}
inline void ProposeParams::_internal_set_skip_rate_ppm(::uint32_t value) {
  ;
  _impl_.skip_rate_ppm_ = value;
}

// .google.protobuf.Duration skip_if_block_delayed_by_duration = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool ProposeParams::has_skip_if_block_delayed_by_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skip_if_block_delayed_by_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProposeParams::_internal_skip_if_block_delayed_by_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.skip_if_block_delayed_by_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ProposeParams::skip_if_block_delayed_by_duration() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.ProposeParams.skip_if_block_delayed_by_duration)
  return _internal_skip_if_block_delayed_by_duration();
}
inline void ProposeParams::unsafe_arena_set_allocated_skip_if_block_delayed_by_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* skip_if_block_delayed_by_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skip_if_block_delayed_by_duration_);
  }
  _impl_.skip_if_block_delayed_by_duration_ = skip_if_block_delayed_by_duration;
  if (skip_if_block_delayed_by_duration) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.bridge.ProposeParams.skip_if_block_delayed_by_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::release_skip_if_block_delayed_by_duration() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.skip_if_block_delayed_by_duration_;
  _impl_.skip_if_block_delayed_by_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::unsafe_arena_release_skip_if_block_delayed_by_duration() {
  // @@protoc_insertion_point(field_release:dydxprotocol.bridge.ProposeParams.skip_if_block_delayed_by_duration)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.skip_if_block_delayed_by_duration_;
  _impl_.skip_if_block_delayed_by_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::_internal_mutable_skip_if_block_delayed_by_duration() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.skip_if_block_delayed_by_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.skip_if_block_delayed_by_duration_ = p;
  }
  return _impl_.skip_if_block_delayed_by_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ProposeParams::mutable_skip_if_block_delayed_by_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_skip_if_block_delayed_by_duration();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.bridge.ProposeParams.skip_if_block_delayed_by_duration)
  return _msg;
}
inline void ProposeParams::set_allocated_skip_if_block_delayed_by_duration(::PROTOBUF_NAMESPACE_ID::Duration* skip_if_block_delayed_by_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skip_if_block_delayed_by_duration_);
  }
  if (skip_if_block_delayed_by_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_if_block_delayed_by_duration));
    if (message_arena != submessage_arena) {
      skip_if_block_delayed_by_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip_if_block_delayed_by_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.skip_if_block_delayed_by_duration_ = skip_if_block_delayed_by_duration;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.bridge.ProposeParams.skip_if_block_delayed_by_duration)
}

// -------------------------------------------------------------------

// SafetyParams

// bool is_disabled = 1;
inline void SafetyParams::clear_is_disabled() {
  _impl_.is_disabled_ = false;
}
inline bool SafetyParams::is_disabled() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.SafetyParams.is_disabled)
  return _internal_is_disabled();
}
inline void SafetyParams::set_is_disabled(bool value) {
  _internal_set_is_disabled(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.SafetyParams.is_disabled)
}
inline bool SafetyParams::_internal_is_disabled() const {
  return _impl_.is_disabled_;
}
inline void SafetyParams::_internal_set_is_disabled(bool value) {
  ;
  _impl_.is_disabled_ = value;
}

// uint32 delay_blocks = 2;
inline void SafetyParams::clear_delay_blocks() {
  _impl_.delay_blocks_ = 0u;
}
inline ::uint32_t SafetyParams::delay_blocks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.bridge.SafetyParams.delay_blocks)
  return _internal_delay_blocks();
}
inline void SafetyParams::set_delay_blocks(::uint32_t value) {
  _internal_set_delay_blocks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.bridge.SafetyParams.delay_blocks)
}
inline ::uint32_t SafetyParams::_internal_delay_blocks() const {
  return _impl_.delay_blocks_;
}
inline void SafetyParams::_internal_set_delay_blocks(::uint32_t value) {
  ;
  _impl_.delay_blocks_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fbridge_2fparams_2eproto_2epb_2eh
