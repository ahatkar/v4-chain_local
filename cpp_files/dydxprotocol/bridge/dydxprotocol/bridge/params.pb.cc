// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/bridge/params.proto

#include "dydxprotocol/bridge/params.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace bridge {
template <typename>
PROTOBUF_CONSTEXPR EventParams::EventParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.eth_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.eth_chain_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventParamsDefaultTypeInternal() {}
  union {
    EventParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventParamsDefaultTypeInternal _EventParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProposeParams::ProposeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.propose_delay_duration_)*/nullptr
  , /*decltype(_impl_.skip_if_block_delayed_by_duration_)*/nullptr
  , /*decltype(_impl_.max_bridges_per_block_)*/ 0u

  , /*decltype(_impl_.skip_rate_ppm_)*/ 0u
} {}
struct ProposeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposeParamsDefaultTypeInternal() {}
  union {
    ProposeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposeParamsDefaultTypeInternal _ProposeParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SafetyParams::SafetyParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_disabled_)*/ false

  , /*decltype(_impl_.delay_blocks_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SafetyParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyParamsDefaultTypeInternal() {}
  union {
    SafetyParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyParamsDefaultTypeInternal _SafetyParams_default_instance_;
}  // namespace bridge
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fbridge_2fparams_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fbridge_2fparams_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fbridge_2fparams_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fbridge_2fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::EventParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::EventParams, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::EventParams, _impl_.eth_chain_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::EventParams, _impl_.eth_address_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::ProposeParams, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::ProposeParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::ProposeParams, _impl_.max_bridges_per_block_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::ProposeParams, _impl_.propose_delay_duration_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::ProposeParams, _impl_.skip_rate_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::ProposeParams, _impl_.skip_if_block_delayed_by_duration_),
    ~0u,
    0,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::SafetyParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::SafetyParams, _impl_.is_disabled_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::SafetyParams, _impl_.delay_blocks_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::bridge::EventParams)},
        { 11, 23, -1, sizeof(::dydxprotocol::bridge::ProposeParams)},
        { 27, -1, -1, sizeof(::dydxprotocol::bridge::SafetyParams)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::bridge::_EventParams_default_instance_._instance,
    &::dydxprotocol::bridge::_ProposeParams_default_instance_._instance,
    &::dydxprotocol::bridge::_SafetyParams_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fbridge_2fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n dydxprotocol/bridge/params.proto\022\023dydx"
    "protocol.bridge\032\024gogoproto/gogo.proto\032\036g"
    "oogle/protobuf/duration.proto\"G\n\013EventPa"
    "rams\022\r\n\005denom\030\001 \001(\t\022\024\n\014eth_chain_id\030\002 \001("
    "\004\022\023\n\013eth_address\030\003 \001(\t\"\332\001\n\rProposeParams"
    "\022\035\n\025max_bridges_per_block\030\001 \001(\r\022C\n\026propo"
    "se_delay_duration\030\002 \001(\0132\031.google.protobu"
    "f.DurationB\010\310\336\037\000\230\337\037\001\022\025\n\rskip_rate_ppm\030\003 "
    "\001(\r\022N\n!skip_if_block_delayed_by_duration"
    "\030\004 \001(\0132\031.google.protobuf.DurationB\010\310\336\037\000\230"
    "\337\037\001\"9\n\014SafetyParams\022\023\n\013is_disabled\030\001 \001(\010"
    "\022\024\n\014delay_blocks\030\002 \001(\rB:Z8github.com/dyd"
    "xprotocol/v4-chain/protocol/x/bridge/typ"
    "esb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto = {
    false,
    false,
    530,
    descriptor_table_protodef_dydxprotocol_2fbridge_2fparams_2eproto,
    "dydxprotocol/bridge/params.proto",
    &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_once,
    descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fbridge_2fparams_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fbridge_2fparams_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fbridge_2fparams_2eproto,
    file_level_service_descriptors_dydxprotocol_2fbridge_2fparams_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fbridge_2fparams_2eproto(&descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto);
namespace dydxprotocol {
namespace bridge {
// ===================================================================

class EventParams::_Internal {
 public:
};

EventParams::EventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.bridge.EventParams)
}
EventParams::EventParams(const EventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.eth_address_) {}

    , decltype(_impl_.eth_chain_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.eth_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.eth_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eth_address().empty()) {
    _this->_impl_.eth_address_.Set(from._internal_eth_address(), _this->GetArenaForAllocation());
  }
  _this->_impl_.eth_chain_id_ = from._impl_.eth_chain_id_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.bridge.EventParams)
}

inline void EventParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.eth_address_) {}

    , decltype(_impl_.eth_chain_id_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eth_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.eth_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventParams::~EventParams() {
  // @@protoc_insertion_point(destructor:dydxprotocol.bridge.EventParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.eth_address_.Destroy();
}

void EventParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.bridge.EventParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.eth_address_.ClearToEmpty();
  _impl_.eth_chain_id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.bridge.EventParams.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 eth_chain_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.eth_chain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string eth_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_eth_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.bridge.EventParams.eth_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EventParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.bridge.EventParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1;
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.bridge.EventParams.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 eth_chain_id = 2;
  if (this->_internal_eth_chain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_eth_chain_id(), target);
  }

  // string eth_address = 3;
  if (!this->_internal_eth_address().empty()) {
    const std::string& _s = this->_internal_eth_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.bridge.EventParams.eth_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.bridge.EventParams)
  return target;
}

::size_t EventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.bridge.EventParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1;
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string eth_address = 3;
  if (!this->_internal_eth_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_eth_address());
  }

  // uint64 eth_chain_id = 2;
  if (this->_internal_eth_chain_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_eth_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventParams::GetClassData() const { return &_class_data_; }


void EventParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventParams*>(&to_msg);
  auto& from = static_cast<const EventParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.bridge.EventParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_eth_address().empty()) {
    _this->_internal_set_eth_address(from._internal_eth_address());
  }
  if (from._internal_eth_chain_id() != 0) {
    _this->_internal_set_eth_chain_id(from._internal_eth_chain_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventParams::CopyFrom(const EventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.bridge.EventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventParams::IsInitialized() const {
  return true;
}

void EventParams::InternalSwap(EventParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.eth_address_, lhs_arena,
                                       &other->_impl_.eth_address_, rhs_arena);

  swap(_impl_.eth_chain_id_, other->_impl_.eth_chain_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_getter, &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_once,
      file_level_metadata_dydxprotocol_2fbridge_2fparams_2eproto[0]);
}
// ===================================================================

class ProposeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ProposeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProposeParams, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& propose_delay_duration(const ProposeParams* msg);
  static void set_has_propose_delay_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& skip_if_block_delayed_by_duration(const ProposeParams* msg);
  static void set_has_skip_if_block_delayed_by_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
ProposeParams::_Internal::propose_delay_duration(const ProposeParams* msg) {
  return *msg->_impl_.propose_delay_duration_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ProposeParams::_Internal::skip_if_block_delayed_by_duration(const ProposeParams* msg) {
  return *msg->_impl_.skip_if_block_delayed_by_duration_;
}
void ProposeParams::clear_propose_delay_duration() {
  if (_impl_.propose_delay_duration_ != nullptr) _impl_.propose_delay_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ProposeParams::clear_skip_if_block_delayed_by_duration() {
  if (_impl_.skip_if_block_delayed_by_duration_ != nullptr) _impl_.skip_if_block_delayed_by_duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ProposeParams::ProposeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.bridge.ProposeParams)
}
ProposeParams::ProposeParams(const ProposeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProposeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.propose_delay_duration_){nullptr}
    , decltype(_impl_.skip_if_block_delayed_by_duration_){nullptr}
    , decltype(_impl_.max_bridges_per_block_) {}

    , decltype(_impl_.skip_rate_ppm_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.propose_delay_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.propose_delay_duration_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.skip_if_block_delayed_by_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.skip_if_block_delayed_by_duration_);
  }
  ::memcpy(&_impl_.max_bridges_per_block_, &from._impl_.max_bridges_per_block_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.skip_rate_ppm_) -
    reinterpret_cast<char*>(&_impl_.max_bridges_per_block_)) + sizeof(_impl_.skip_rate_ppm_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.bridge.ProposeParams)
}

inline void ProposeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.propose_delay_duration_){nullptr}
    , decltype(_impl_.skip_if_block_delayed_by_duration_){nullptr}
    , decltype(_impl_.max_bridges_per_block_) { 0u }

    , decltype(_impl_.skip_rate_ppm_) { 0u }

  };
}

ProposeParams::~ProposeParams() {
  // @@protoc_insertion_point(destructor:dydxprotocol.bridge.ProposeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProposeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.propose_delay_duration_;
  if (this != internal_default_instance()) delete _impl_.skip_if_block_delayed_by_duration_;
}

void ProposeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProposeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.bridge.ProposeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.propose_delay_duration_ != nullptr);
      _impl_.propose_delay_duration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.skip_if_block_delayed_by_duration_ != nullptr);
      _impl_.skip_if_block_delayed_by_duration_->Clear();
    }
  }
  ::memset(&_impl_.max_bridges_per_block_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.skip_rate_ppm_) -
      reinterpret_cast<char*>(&_impl_.max_bridges_per_block_)) + sizeof(_impl_.skip_rate_ppm_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 max_bridges_per_block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.max_bridges_per_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration propose_delay_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_propose_delay_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 skip_rate_ppm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.skip_rate_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration skip_if_block_delayed_by_duration = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_skip_if_block_delayed_by_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProposeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.bridge.ProposeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_bridges_per_block = 1;
  if (this->_internal_max_bridges_per_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_max_bridges_per_block(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration propose_delay_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::propose_delay_duration(this),
        _Internal::propose_delay_duration(this).GetCachedSize(), target, stream);
  }

  // uint32 skip_rate_ppm = 3;
  if (this->_internal_skip_rate_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_skip_rate_ppm(), target);
  }

  // .google.protobuf.Duration skip_if_block_delayed_by_duration = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::skip_if_block_delayed_by_duration(this),
        _Internal::skip_if_block_delayed_by_duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.bridge.ProposeParams)
  return target;
}

::size_t ProposeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.bridge.ProposeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Duration propose_delay_duration = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.propose_delay_duration_);
    }

    // .google.protobuf.Duration skip_if_block_delayed_by_duration = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.skip_if_block_delayed_by_duration_);
    }

  }
  // uint32 max_bridges_per_block = 1;
  if (this->_internal_max_bridges_per_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_max_bridges_per_block());
  }

  // uint32 skip_rate_ppm = 3;
  if (this->_internal_skip_rate_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_skip_rate_ppm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposeParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProposeParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposeParams::GetClassData() const { return &_class_data_; }


void ProposeParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProposeParams*>(&to_msg);
  auto& from = static_cast<const ProposeParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.bridge.ProposeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_propose_delay_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_propose_delay_duration());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_skip_if_block_delayed_by_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_skip_if_block_delayed_by_duration());
    }
  }
  if (from._internal_max_bridges_per_block() != 0) {
    _this->_internal_set_max_bridges_per_block(from._internal_max_bridges_per_block());
  }
  if (from._internal_skip_rate_ppm() != 0) {
    _this->_internal_set_skip_rate_ppm(from._internal_skip_rate_ppm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposeParams::CopyFrom(const ProposeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.bridge.ProposeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeParams::IsInitialized() const {
  return true;
}

void ProposeParams::InternalSwap(ProposeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposeParams, _impl_.skip_rate_ppm_)
      + sizeof(ProposeParams::_impl_.skip_rate_ppm_)
      - PROTOBUF_FIELD_OFFSET(ProposeParams, _impl_.propose_delay_duration_)>(
          reinterpret_cast<char*>(&_impl_.propose_delay_duration_),
          reinterpret_cast<char*>(&other->_impl_.propose_delay_duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposeParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_getter, &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_once,
      file_level_metadata_dydxprotocol_2fbridge_2fparams_2eproto[1]);
}
// ===================================================================

class SafetyParams::_Internal {
 public:
};

SafetyParams::SafetyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.bridge.SafetyParams)
}
SafetyParams::SafetyParams(const SafetyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.bridge.SafetyParams)
}

inline void SafetyParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.is_disabled_) { false }

    , decltype(_impl_.delay_blocks_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SafetyParams::~SafetyParams() {
  // @@protoc_insertion_point(destructor:dydxprotocol.bridge.SafetyParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SafetyParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SafetyParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SafetyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.bridge.SafetyParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_disabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delay_blocks_) -
      reinterpret_cast<char*>(&_impl_.is_disabled_)) + sizeof(_impl_.delay_blocks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SafetyParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_disabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 delay_blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.delay_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SafetyParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.bridge.SafetyParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_disabled = 1;
  if (this->_internal_is_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_disabled(), target);
  }

  // uint32 delay_blocks = 2;
  if (this->_internal_delay_blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_delay_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.bridge.SafetyParams)
  return target;
}

::size_t SafetyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.bridge.SafetyParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_disabled = 1;
  if (this->_internal_is_disabled() != 0) {
    total_size += 2;
  }

  // uint32 delay_blocks = 2;
  if (this->_internal_delay_blocks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_delay_blocks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SafetyParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SafetyParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SafetyParams::GetClassData() const { return &_class_data_; }


void SafetyParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SafetyParams*>(&to_msg);
  auto& from = static_cast<const SafetyParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.bridge.SafetyParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_disabled() != 0) {
    _this->_internal_set_is_disabled(from._internal_is_disabled());
  }
  if (from._internal_delay_blocks() != 0) {
    _this->_internal_set_delay_blocks(from._internal_delay_blocks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SafetyParams::CopyFrom(const SafetyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.bridge.SafetyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyParams::IsInitialized() const {
  return true;
}

void SafetyParams::InternalSwap(SafetyParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyParams, _impl_.delay_blocks_)
      + sizeof(SafetyParams::_impl_.delay_blocks_)
      - PROTOBUF_FIELD_OFFSET(SafetyParams, _impl_.is_disabled_)>(
          reinterpret_cast<char*>(&_impl_.is_disabled_),
          reinterpret_cast<char*>(&other->_impl_.is_disabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SafetyParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_getter, &descriptor_table_dydxprotocol_2fbridge_2fparams_2eproto_once,
      file_level_metadata_dydxprotocol_2fbridge_2fparams_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::bridge::EventParams*
Arena::CreateMaybeMessage< ::dydxprotocol::bridge::EventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::bridge::EventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::bridge::ProposeParams*
Arena::CreateMaybeMessage< ::dydxprotocol::bridge::ProposeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::bridge::ProposeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::bridge::SafetyParams*
Arena::CreateMaybeMessage< ::dydxprotocol::bridge::SafetyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::bridge::SafetyParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
