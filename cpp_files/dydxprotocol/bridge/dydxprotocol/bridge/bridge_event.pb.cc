// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/bridge/bridge_event.proto

#include "dydxprotocol/bridge/bridge_event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace bridge {
template <typename>
PROTOBUF_CONSTEXPR BridgeEvent::BridgeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.coin_)*/nullptr
  , /*decltype(_impl_.eth_block_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.id_)*/ 0u
} {}
struct BridgeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BridgeEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BridgeEventDefaultTypeInternal() {}
  union {
    BridgeEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BridgeEventDefaultTypeInternal _BridgeEvent_default_instance_;
}  // namespace bridge
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::BridgeEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::BridgeEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::BridgeEvent, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::BridgeEvent, _impl_.coin_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::BridgeEvent, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::bridge::BridgeEvent, _impl_.eth_block_height_),
    ~0u,
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::dydxprotocol::bridge::BridgeEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::bridge::_BridgeEvent_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&dydxprotocol/bridge/bridge_event.proto"
    "\022\023dydxprotocol.bridge\032\024gogoproto/gogo.pr"
    "oto\032\031cosmos_proto/cosmos.proto\032\036cosmos/b"
    "ase/v1beta1/coin.proto\"\215\001\n\013BridgeEvent\022\n"
    "\n\002id\030\001 \001(\r\022-\n\004coin\030\002 \001(\0132\031.cosmos.base.v"
    "1beta1.CoinB\004\310\336\037\000\022)\n\007address\030\003 \001(\tB\030\322\264-\024"
    "cosmos.AddressString\022\030\n\020eth_block_height"
    "\030\004 \001(\004B:Z8github.com/dydxprotocol/v4-cha"
    "in/protocol/x/bridge/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto = {
    false,
    false,
    354,
    descriptor_table_protodef_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto,
    "dydxprotocol/bridge/bridge_event.proto",
    &descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_once,
    descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto,
    file_level_service_descriptors_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto(&descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto);
namespace dydxprotocol {
namespace bridge {
// ===================================================================

class BridgeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BridgeEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BridgeEvent, _impl_._has_bits_);
  static const ::cosmos::base::v1beta1::Coin& coin(const BridgeEvent* msg);
  static void set_has_coin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::v1beta1::Coin&
BridgeEvent::_Internal::coin(const BridgeEvent* msg) {
  return *msg->_impl_.coin_;
}
void BridgeEvent::clear_coin() {
  if (_impl_.coin_ != nullptr) _impl_.coin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BridgeEvent::BridgeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.bridge.BridgeEvent)
}
BridgeEvent::BridgeEvent(const BridgeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BridgeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.coin_){nullptr}
    , decltype(_impl_.eth_block_height_) {}

    , decltype(_impl_.id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.coin_ = new ::cosmos::base::v1beta1::Coin(*from._impl_.coin_);
  }
  ::memcpy(&_impl_.eth_block_height_, &from._impl_.eth_block_height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.eth_block_height_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.bridge.BridgeEvent)
}

inline void BridgeEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.coin_){nullptr}
    , decltype(_impl_.eth_block_height_) { ::uint64_t{0u} }

    , decltype(_impl_.id_) { 0u }

  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BridgeEvent::~BridgeEvent() {
  // @@protoc_insertion_point(destructor:dydxprotocol.bridge.BridgeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BridgeEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.coin_;
}

void BridgeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BridgeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.bridge.BridgeEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.coin_ != nullptr);
    _impl_.coin_->Clear();
  }
  ::memset(&_impl_.eth_block_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.eth_block_height_)) + sizeof(_impl_.id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BridgeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.v1beta1.Coin coin = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coin(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.bridge.BridgeEvent.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 eth_block_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.eth_block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BridgeEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.bridge.BridgeEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.v1beta1.Coin coin = 2 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coin(this),
        _Internal::coin(this).GetCachedSize(), target, stream);
  }

  // string address = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.bridge.BridgeEvent.address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 eth_block_height = 4;
  if (this->_internal_eth_block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_eth_block_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.bridge.BridgeEvent)
  return target;
}

::size_t BridgeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.bridge.BridgeEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 3 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .cosmos.base.v1beta1.Coin coin = 2 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coin_);
  }

  // uint64 eth_block_height = 4;
  if (this->_internal_eth_block_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_eth_block_height());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BridgeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BridgeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BridgeEvent::GetClassData() const { return &_class_data_; }


void BridgeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BridgeEvent*>(&to_msg);
  auto& from = static_cast<const BridgeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.bridge.BridgeEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_coin()->::cosmos::base::v1beta1::Coin::MergeFrom(
        from._internal_coin());
  }
  if (from._internal_eth_block_height() != 0) {
    _this->_internal_set_eth_block_height(from._internal_eth_block_height());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BridgeEvent::CopyFrom(const BridgeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.bridge.BridgeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BridgeEvent::IsInitialized() const {
  return true;
}

void BridgeEvent::InternalSwap(BridgeEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BridgeEvent, _impl_.id_)
      + sizeof(BridgeEvent::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(BridgeEvent, _impl_.coin_)>(
          reinterpret_cast<char*>(&_impl_.coin_),
          reinterpret_cast<char*>(&other->_impl_.coin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BridgeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_getter, &descriptor_table_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto_once,
      file_level_metadata_dydxprotocol_2fbridge_2fbridge_5fevent_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::bridge::BridgeEvent*
Arena::CreateMaybeMessage< ::dydxprotocol::bridge::BridgeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::bridge::BridgeEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
