// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/assets/asset.proto

#include "dydxprotocol/assets/asset.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace assets {
template <typename>
PROTOBUF_CONSTEXPR Asset::Asset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.symbol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.denom_exponent_)*/ 0

  , /*decltype(_impl_.has_market_)*/ false

  , /*decltype(_impl_.market_id_)*/ 0u

  , /*decltype(_impl_.long_interest_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.atomic_resolution_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetDefaultTypeInternal _Asset_default_instance_;
}  // namespace assets
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fassets_2fasset_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fassets_2fasset_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fassets_2fasset_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fassets_2fasset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.symbol_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.denom_exponent_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.has_market_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.atomic_resolution_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::Asset, _impl_.long_interest_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::assets::Asset)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::assets::_Asset_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fassets_2fasset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037dydxprotocol/assets/asset.proto\022\023dydxp"
    "rotocol.assets\"\243\001\n\005Asset\022\n\n\002id\030\001 \001(\r\022\016\n\006"
    "symbol\030\002 \001(\t\022\r\n\005denom\030\003 \001(\t\022\026\n\016denom_exp"
    "onent\030\004 \001(\021\022\022\n\nhas_market\030\005 \001(\010\022\021\n\tmarke"
    "t_id\030\006 \001(\r\022\031\n\021atomic_resolution\030\007 \001(\021\022\025\n"
    "\rlong_interest\030\010 \001(\004B:Z8github.com/dydxp"
    "rotocol/v4-chain/protocol/x/assets/types"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fassets_2fasset_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fassets_2fasset_2eproto = {
    false,
    false,
    288,
    descriptor_table_protodef_dydxprotocol_2fassets_2fasset_2eproto,
    "dydxprotocol/assets/asset.proto",
    &descriptor_table_dydxprotocol_2fassets_2fasset_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fassets_2fasset_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fassets_2fasset_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fassets_2fasset_2eproto,
    file_level_service_descriptors_dydxprotocol_2fassets_2fasset_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fassets_2fasset_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fassets_2fasset_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fassets_2fasset_2eproto(&descriptor_table_dydxprotocol_2fassets_2fasset_2eproto);
namespace dydxprotocol {
namespace assets {
// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.assets.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Asset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.denom_exponent_) {}

    , decltype(_impl_.has_market_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.long_interest_) {}

    , decltype(_impl_.atomic_resolution_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_symbol().empty()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), _this->GetArenaForAllocation());
  }
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.atomic_resolution_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.atomic_resolution_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.assets.Asset)
}

inline void Asset::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.symbol_) {}

    , decltype(_impl_.denom_) {}

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.denom_exponent_) { 0 }

    , decltype(_impl_.has_market_) { false }

    , decltype(_impl_.market_id_) { 0u }

    , decltype(_impl_.long_interest_) { ::uint64_t{0u} }

    , decltype(_impl_.atomic_resolution_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:dydxprotocol.assets.Asset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Asset::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
  _impl_.denom_.Destroy();
}

void Asset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.assets.Asset)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.denom_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.atomic_resolution_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.atomic_resolution_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.assets.Asset.symbol"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string denom = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.assets.Asset.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 denom_exponent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.denom_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool has_market = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.has_market_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 market_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.market_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 atomic_resolution = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.atomic_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 long_interest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.long_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Asset::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.assets.Asset)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    const std::string& _s = this->_internal_symbol();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.assets.Asset.symbol");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string denom = 3;
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.assets.Asset.denom");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // sint32 denom_exponent = 4;
  if (this->_internal_denom_exponent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_denom_exponent(), target);
  }

  // bool has_market = 5;
  if (this->_internal_has_market() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_has_market(), target);
  }

  // uint32 market_id = 6;
  if (this->_internal_market_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_market_id(), target);
  }

  // sint32 atomic_resolution = 7;
  if (this->_internal_atomic_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        7, this->_internal_atomic_resolution(), target);
  }

  // uint64 long_interest = 8;
  if (this->_internal_long_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_long_interest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.assets.Asset)
  return target;
}

::size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.assets.Asset)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string symbol = 2;
  if (!this->_internal_symbol().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_symbol());
  }

  // string denom = 3;
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // sint32 denom_exponent = 4;
  if (this->_internal_denom_exponent() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_denom_exponent());
  }

  // bool has_market = 5;
  if (this->_internal_has_market() != 0) {
    total_size += 2;
  }

  // uint32 market_id = 6;
  if (this->_internal_market_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_market_id());
  }

  // uint64 long_interest = 8;
  if (this->_internal_long_interest() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_long_interest());
  }

  // sint32 atomic_resolution = 7;
  if (this->_internal_atomic_resolution() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_atomic_resolution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }


void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Asset*>(&to_msg);
  auto& from = static_cast<const Asset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.assets.Asset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_denom_exponent() != 0) {
    _this->_internal_set_denom_exponent(from._internal_denom_exponent());
  }
  if (from._internal_has_market() != 0) {
    _this->_internal_set_has_market(from._internal_has_market());
  }
  if (from._internal_market_id() != 0) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_long_interest() != 0) {
    _this->_internal_set_long_interest(from._internal_long_interest());
  }
  if (from._internal_atomic_resolution() != 0) {
    _this->_internal_set_atomic_resolution(from._internal_atomic_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.assets.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, lhs_arena,
                                       &other->_impl_.symbol_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Asset, _impl_.atomic_resolution_)
      + sizeof(Asset::_impl_.atomic_resolution_)
      - PROTOBUF_FIELD_OFFSET(Asset, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fassets_2fasset_2eproto_getter, &descriptor_table_dydxprotocol_2fassets_2fasset_2eproto_once,
      file_level_metadata_dydxprotocol_2fassets_2fasset_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace assets
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::assets::Asset*
Arena::CreateMaybeMessage< ::dydxprotocol::assets::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::assets::Asset >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
