// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/assets/query.proto

#include "dydxprotocol/assets/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace assets {
template <typename>
PROTOBUF_CONSTEXPR QueryAssetRequest::QueryAssetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryAssetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAssetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAssetRequestDefaultTypeInternal() {}
  union {
    QueryAssetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAssetRequestDefaultTypeInternal _QueryAssetRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAssetResponse::QueryAssetResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.asset_)*/nullptr} {}
struct QueryAssetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAssetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAssetResponseDefaultTypeInternal() {}
  union {
    QueryAssetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAssetResponseDefaultTypeInternal _QueryAssetResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllAssetsRequest::QueryAllAssetsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllAssetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllAssetsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllAssetsRequestDefaultTypeInternal() {}
  union {
    QueryAllAssetsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllAssetsRequestDefaultTypeInternal _QueryAllAssetsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllAssetsResponse::QueryAllAssetsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.asset_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllAssetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllAssetsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllAssetsResponseDefaultTypeInternal() {}
  union {
    QueryAllAssetsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllAssetsResponseDefaultTypeInternal _QueryAllAssetsResponse_default_instance_;
}  // namespace assets
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fassets_2fquery_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fassets_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fassets_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fassets_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAssetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAssetRequest, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAssetResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAssetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAssetResponse, _impl_.asset_),
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsResponse, _impl_.asset_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::assets::QueryAllAssetsResponse, _impl_.pagination_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::assets::QueryAssetRequest)},
        { 9, 18, -1, sizeof(::dydxprotocol::assets::QueryAssetResponse)},
        { 19, 28, -1, sizeof(::dydxprotocol::assets::QueryAllAssetsRequest)},
        { 29, 39, -1, sizeof(::dydxprotocol::assets::QueryAllAssetsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::assets::_QueryAssetRequest_default_instance_._instance,
    &::dydxprotocol::assets::_QueryAssetResponse_default_instance_._instance,
    &::dydxprotocol::assets::_QueryAllAssetsRequest_default_instance_._instance,
    &::dydxprotocol::assets::_QueryAllAssetsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fassets_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037dydxprotocol/assets/query.proto\022\023dydxp"
    "rotocol.assets\032\024gogoproto/gogo.proto\032\034go"
    "ogle/api/annotations.proto\032*cosmos/base/"
    "query/v1beta1/pagination.proto\032\037dydxprot"
    "ocol/assets/asset.proto\"\037\n\021QueryAssetReq"
    "uest\022\n\n\002id\030\001 \001(\r\"E\n\022QueryAssetResponse\022/"
    "\n\005asset\030\001 \001(\0132\032.dydxprotocol.assets.Asse"
    "tB\004\310\336\037\000\"S\n\025QueryAllAssetsRequest\022:\n\npagi"
    "nation\030\001 \001(\0132&.cosmos.base.query.v1beta1"
    ".PageRequest\"\206\001\n\026QueryAllAssetsResponse\022"
    "/\n\005asset\030\001 \003(\0132\032.dydxprotocol.assets.Ass"
    "etB\004\310\336\037\000\022;\n\npagination\030\002 \001(\0132\'.cosmos.ba"
    "se.query.v1beta1.PageResponse2\226\002\n\005Query\022"
    "\201\001\n\005Asset\022&.dydxprotocol.assets.QueryAss"
    "etRequest\032\'.dydxprotocol.assets.QueryAss"
    "etResponse\"\'\202\323\344\223\002!\022\037/dydxprotocol/assets"
    "/asset/{id}\022\210\001\n\tAllAssets\022*.dydxprotocol"
    ".assets.QueryAllAssetsRequest\032+.dydxprot"
    "ocol.assets.QueryAllAssetsResponse\"\"\202\323\344\223"
    "\002\034\022\032/dydxprotocol/assets/assetB:Z8github"
    ".com/dydxprotocol/v4-chain/protocol/x/as"
    "sets/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_dydxprotocol_2fassets_2fasset_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fassets_2fquery_2eproto = {
    false,
    false,
    858,
    descriptor_table_protodef_dydxprotocol_2fassets_2fquery_2eproto,
    "dydxprotocol/assets/query.proto",
    &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_once,
    descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fassets_2fquery_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fassets_2fquery_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fassets_2fquery_2eproto,
    file_level_service_descriptors_dydxprotocol_2fassets_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fassets_2fquery_2eproto(&descriptor_table_dydxprotocol_2fassets_2fquery_2eproto);
namespace dydxprotocol {
namespace assets {
// ===================================================================

class QueryAssetRequest::_Internal {
 public:
};

QueryAssetRequest::QueryAssetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.assets.QueryAssetRequest)
}
QueryAssetRequest::QueryAssetRequest(const QueryAssetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.assets.QueryAssetRequest)
}

inline void QueryAssetRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryAssetRequest::~QueryAssetRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.assets.QueryAssetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAssetRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryAssetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAssetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.assets.QueryAssetRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAssetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAssetRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.assets.QueryAssetRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.assets.QueryAssetRequest)
  return target;
}

::size_t QueryAssetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.assets.QueryAssetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAssetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAssetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAssetRequest::GetClassData() const { return &_class_data_; }


void QueryAssetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAssetRequest*>(&to_msg);
  auto& from = static_cast<const QueryAssetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.assets.QueryAssetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAssetRequest::CopyFrom(const QueryAssetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.assets.QueryAssetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAssetRequest::IsInitialized() const {
  return true;
}

void QueryAssetRequest::InternalSwap(QueryAssetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAssetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fassets_2fquery_2eproto[0]);
}
// ===================================================================

class QueryAssetResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAssetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAssetResponse, _impl_._has_bits_);
  static const ::dydxprotocol::assets::Asset& asset(const QueryAssetResponse* msg);
  static void set_has_asset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::assets::Asset&
QueryAssetResponse::_Internal::asset(const QueryAssetResponse* msg) {
  return *msg->_impl_.asset_;
}
void QueryAssetResponse::clear_asset() {
  if (_impl_.asset_ != nullptr) _impl_.asset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAssetResponse::QueryAssetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.assets.QueryAssetResponse)
}
QueryAssetResponse::QueryAssetResponse(const QueryAssetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAssetResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.asset_ = new ::dydxprotocol::assets::Asset(*from._impl_.asset_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.assets.QueryAssetResponse)
}

inline void QueryAssetResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asset_){nullptr}
  };
}

QueryAssetResponse::~QueryAssetResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.assets.QueryAssetResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAssetResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.asset_;
}

void QueryAssetResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.assets.QueryAssetResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.asset_ != nullptr);
    _impl_.asset_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAssetResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.assets.Asset asset = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_asset(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAssetResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.assets.QueryAssetResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.assets.Asset asset = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::asset(this),
        _Internal::asset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.assets.QueryAssetResponse)
  return target;
}

::size_t QueryAssetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.assets.QueryAssetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.assets.Asset asset = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.asset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAssetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAssetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAssetResponse::GetClassData() const { return &_class_data_; }


void QueryAssetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAssetResponse*>(&to_msg);
  auto& from = static_cast<const QueryAssetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.assets.QueryAssetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_asset()->::dydxprotocol::assets::Asset::MergeFrom(
        from._internal_asset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAssetResponse::CopyFrom(const QueryAssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.assets.QueryAssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAssetResponse::IsInitialized() const {
  return true;
}

void QueryAssetResponse::InternalSwap(QueryAssetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.asset_, other->_impl_.asset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAssetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fassets_2fquery_2eproto[1]);
}
// ===================================================================

class QueryAllAssetsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllAssetsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllAssetsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryAllAssetsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryAllAssetsRequest::_Internal::pagination(const QueryAllAssetsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllAssetsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllAssetsRequest::QueryAllAssetsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.assets.QueryAllAssetsRequest)
}
QueryAllAssetsRequest::QueryAllAssetsRequest(const QueryAllAssetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllAssetsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.assets.QueryAllAssetsRequest)
}

inline void QueryAllAssetsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllAssetsRequest::~QueryAllAssetsRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.assets.QueryAllAssetsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllAssetsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllAssetsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllAssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.assets.QueryAllAssetsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllAssetsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllAssetsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.assets.QueryAllAssetsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.assets.QueryAllAssetsRequest)
  return target;
}

::size_t QueryAllAssetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.assets.QueryAllAssetsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllAssetsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllAssetsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllAssetsRequest::GetClassData() const { return &_class_data_; }


void QueryAllAssetsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllAssetsRequest*>(&to_msg);
  auto& from = static_cast<const QueryAllAssetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.assets.QueryAllAssetsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllAssetsRequest::CopyFrom(const QueryAllAssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.assets.QueryAllAssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllAssetsRequest::IsInitialized() const {
  return true;
}

void QueryAllAssetsRequest::InternalSwap(QueryAllAssetsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllAssetsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fassets_2fquery_2eproto[2]);
}
// ===================================================================

class QueryAllAssetsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllAssetsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllAssetsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryAllAssetsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryAllAssetsResponse::_Internal::pagination(const QueryAllAssetsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllAssetsResponse::clear_asset() {
  _internal_mutable_asset()->Clear();
}
void QueryAllAssetsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllAssetsResponse::QueryAllAssetsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.assets.QueryAllAssetsResponse)
}
QueryAllAssetsResponse::QueryAllAssetsResponse(const QueryAllAssetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllAssetsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asset_){from._impl_.asset_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.assets.QueryAllAssetsResponse)
}

inline void QueryAllAssetsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asset_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllAssetsResponse::~QueryAllAssetsResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.assets.QueryAllAssetsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllAssetsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_asset()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllAssetsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllAssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.assets.QueryAllAssetsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_asset()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllAssetsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.assets.Asset asset = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllAssetsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.assets.QueryAllAssetsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.assets.Asset asset = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asset_size()); i < n; i++) {
    const auto& repfield = this->_internal_asset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.assets.QueryAllAssetsResponse)
  return target;
}

::size_t QueryAllAssetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.assets.QueryAllAssetsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.assets.Asset asset = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_asset_size();
  for (const auto& msg : this->_internal_asset()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllAssetsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllAssetsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllAssetsResponse::GetClassData() const { return &_class_data_; }


void QueryAllAssetsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllAssetsResponse*>(&to_msg);
  auto& from = static_cast<const QueryAllAssetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.assets.QueryAllAssetsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_asset()->MergeFrom(from._internal_asset());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllAssetsResponse::CopyFrom(const QueryAllAssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.assets.QueryAllAssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllAssetsResponse::IsInitialized() const {
  return true;
}

void QueryAllAssetsResponse::InternalSwap(QueryAllAssetsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_asset()->InternalSwap(other->_internal_mutable_asset());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllAssetsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fassets_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fassets_2fquery_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace assets
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::assets::QueryAssetRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::assets::QueryAssetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::assets::QueryAssetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::assets::QueryAssetResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::assets::QueryAssetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::assets::QueryAssetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::assets::QueryAllAssetsRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::assets::QueryAllAssetsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::assets::QueryAllAssetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::assets::QueryAllAssetsResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::assets::QueryAllAssetsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::assets::QueryAllAssetsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
