// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/assets/asset.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fassets_2fasset_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fassets_2fasset_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fassets_2fasset_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fassets_2fasset_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fassets_2fasset_2eproto;
namespace dydxprotocol {
namespace assets {
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
}  // namespace assets
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::assets::Asset* Arena::CreateMaybeMessage<::dydxprotocol::assets::Asset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace assets {

// ===================================================================


// -------------------------------------------------------------------

class Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.assets.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Asset& from) {
    Asset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.assets.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kDenomFieldNumber = 3,
    kIdFieldNumber = 1,
    kDenomExponentFieldNumber = 4,
    kHasMarketFieldNumber = 5,
    kMarketIdFieldNumber = 6,
    kLongInterestFieldNumber = 8,
    kAtomicResolutionFieldNumber = 7,
  };
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string denom = 3;
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // sint32 denom_exponent = 4;
  void clear_denom_exponent() ;
  ::int32_t denom_exponent() const;
  void set_denom_exponent(::int32_t value);

  private:
  ::int32_t _internal_denom_exponent() const;
  void _internal_set_denom_exponent(::int32_t value);

  public:
  // bool has_market = 5;
  void clear_has_market() ;
  bool has_market() const;
  void set_has_market(bool value);

  private:
  bool _internal_has_market() const;
  void _internal_set_has_market(bool value);

  public:
  // uint32 market_id = 6;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // uint64 long_interest = 8;
  void clear_long_interest() ;
  ::uint64_t long_interest() const;
  void set_long_interest(::uint64_t value);

  private:
  ::uint64_t _internal_long_interest() const;
  void _internal_set_long_interest(::uint64_t value);

  public:
  // sint32 atomic_resolution = 7;
  void clear_atomic_resolution() ;
  ::int32_t atomic_resolution() const;
  void set_atomic_resolution(::int32_t value);

  private:
  ::int32_t _internal_atomic_resolution() const;
  void _internal_set_atomic_resolution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.assets.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::uint32_t id_;
    ::int32_t denom_exponent_;
    bool has_market_;
    ::uint32_t market_id_;
    ::uint64_t long_interest_;
    ::int32_t atomic_resolution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fassets_2fasset_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Asset

// uint32 id = 1;
inline void Asset::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t Asset::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.id)
  return _internal_id();
}
inline void Asset::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.id)
}
inline ::uint32_t Asset::_internal_id() const {
  return _impl_.id_;
}
inline void Asset::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string symbol = 2;
inline void Asset::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Asset::symbol() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Asset::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.symbol)
}
inline std::string* Asset::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.assets.Asset.symbol)
  return _s;
}
inline const std::string& Asset::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void Asset::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* Asset::release_symbol() {
  // @@protoc_insertion_point(field_release:dydxprotocol.assets.Asset.symbol)
  return _impl_.symbol_.Release();
}
inline void Asset::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.assets.Asset.symbol)
}

// string denom = 3;
inline void Asset::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& Asset::denom() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Asset::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.denom)
}
inline std::string* Asset::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.assets.Asset.denom)
  return _s;
}
inline const std::string& Asset::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void Asset::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Asset::release_denom() {
  // @@protoc_insertion_point(field_release:dydxprotocol.assets.Asset.denom)
  return _impl_.denom_.Release();
}
inline void Asset::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.assets.Asset.denom)
}

// sint32 denom_exponent = 4;
inline void Asset::clear_denom_exponent() {
  _impl_.denom_exponent_ = 0;
}
inline ::int32_t Asset::denom_exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.denom_exponent)
  return _internal_denom_exponent();
}
inline void Asset::set_denom_exponent(::int32_t value) {
  _internal_set_denom_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.denom_exponent)
}
inline ::int32_t Asset::_internal_denom_exponent() const {
  return _impl_.denom_exponent_;
}
inline void Asset::_internal_set_denom_exponent(::int32_t value) {
  ;
  _impl_.denom_exponent_ = value;
}

// bool has_market = 5;
inline void Asset::clear_has_market() {
  _impl_.has_market_ = false;
}
inline bool Asset::has_market() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.has_market)
  return _internal_has_market();
}
inline void Asset::set_has_market(bool value) {
  _internal_set_has_market(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.has_market)
}
inline bool Asset::_internal_has_market() const {
  return _impl_.has_market_;
}
inline void Asset::_internal_set_has_market(bool value) {
  ;
  _impl_.has_market_ = value;
}

// uint32 market_id = 6;
inline void Asset::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t Asset::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.market_id)
  return _internal_market_id();
}
inline void Asset::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.market_id)
}
inline ::uint32_t Asset::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void Asset::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// sint32 atomic_resolution = 7;
inline void Asset::clear_atomic_resolution() {
  _impl_.atomic_resolution_ = 0;
}
inline ::int32_t Asset::atomic_resolution() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.atomic_resolution)
  return _internal_atomic_resolution();
}
inline void Asset::set_atomic_resolution(::int32_t value) {
  _internal_set_atomic_resolution(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.atomic_resolution)
}
inline ::int32_t Asset::_internal_atomic_resolution() const {
  return _impl_.atomic_resolution_;
}
inline void Asset::_internal_set_atomic_resolution(::int32_t value) {
  ;
  _impl_.atomic_resolution_ = value;
}

// uint64 long_interest = 8;
inline void Asset::clear_long_interest() {
  _impl_.long_interest_ = ::uint64_t{0u};
}
inline ::uint64_t Asset::long_interest() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.assets.Asset.long_interest)
  return _internal_long_interest();
}
inline void Asset::set_long_interest(::uint64_t value) {
  _internal_set_long_interest(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.assets.Asset.long_interest)
}
inline ::uint64_t Asset::_internal_long_interest() const {
  return _impl_.long_interest_;
}
inline void Asset::_internal_set_long_interest(::uint64_t value) {
  ;
  _impl_.long_interest_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace assets
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fassets_2fasset_2eproto_2epb_2eh
