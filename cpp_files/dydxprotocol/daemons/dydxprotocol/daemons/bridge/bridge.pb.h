// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/daemons/bridge/bridge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/bridge/bridge_event.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto;
namespace dydxprotocol {
namespace daemons {
namespace bridge {
class AddBridgeEventsRequest;
struct AddBridgeEventsRequestDefaultTypeInternal;
extern AddBridgeEventsRequestDefaultTypeInternal _AddBridgeEventsRequest_default_instance_;
class AddBridgeEventsResponse;
struct AddBridgeEventsResponseDefaultTypeInternal;
extern AddBridgeEventsResponseDefaultTypeInternal _AddBridgeEventsResponse_default_instance_;
}  // namespace bridge
}  // namespace daemons
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::daemons::bridge::AddBridgeEventsRequest* Arena::CreateMaybeMessage<::dydxprotocol::daemons::bridge::AddBridgeEventsRequest>(Arena*);
template <>
::dydxprotocol::daemons::bridge::AddBridgeEventsResponse* Arena::CreateMaybeMessage<::dydxprotocol::daemons::bridge::AddBridgeEventsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace daemons {
namespace bridge {

// ===================================================================


// -------------------------------------------------------------------

class AddBridgeEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.daemons.bridge.AddBridgeEventsRequest) */ {
 public:
  inline AddBridgeEventsRequest() : AddBridgeEventsRequest(nullptr) {}
  ~AddBridgeEventsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddBridgeEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddBridgeEventsRequest(const AddBridgeEventsRequest& from);
  AddBridgeEventsRequest(AddBridgeEventsRequest&& from) noexcept
    : AddBridgeEventsRequest() {
    *this = ::std::move(from);
  }

  inline AddBridgeEventsRequest& operator=(const AddBridgeEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBridgeEventsRequest& operator=(AddBridgeEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddBridgeEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddBridgeEventsRequest* internal_default_instance() {
    return reinterpret_cast<const AddBridgeEventsRequest*>(
               &_AddBridgeEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddBridgeEventsRequest& a, AddBridgeEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBridgeEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddBridgeEventsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddBridgeEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddBridgeEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddBridgeEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddBridgeEventsRequest& from) {
    AddBridgeEventsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBridgeEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.daemons.bridge.AddBridgeEventsRequest";
  }
  protected:
  explicit AddBridgeEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBridgeEventsFieldNumber = 1,
  };
  // repeated .dydxprotocol.bridge.BridgeEvent bridge_events = 1 [(.gogoproto.nullable) = false];
  int bridge_events_size() const;
  private:
  int _internal_bridge_events_size() const;

  public:
  void clear_bridge_events() ;
  ::dydxprotocol::bridge::BridgeEvent* mutable_bridge_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::bridge::BridgeEvent >*
      mutable_bridge_events();
  private:
  const ::dydxprotocol::bridge::BridgeEvent& _internal_bridge_events(int index) const;
  ::dydxprotocol::bridge::BridgeEvent* _internal_add_bridge_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::bridge::BridgeEvent>& _internal_bridge_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::bridge::BridgeEvent>* _internal_mutable_bridge_events();
  public:
  const ::dydxprotocol::bridge::BridgeEvent& bridge_events(int index) const;
  ::dydxprotocol::bridge::BridgeEvent* add_bridge_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::bridge::BridgeEvent >&
      bridge_events() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.daemons.bridge.AddBridgeEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::bridge::BridgeEvent > bridge_events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto;
};// -------------------------------------------------------------------

class AddBridgeEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.daemons.bridge.AddBridgeEventsResponse) */ {
 public:
  inline AddBridgeEventsResponse() : AddBridgeEventsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AddBridgeEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddBridgeEventsResponse(const AddBridgeEventsResponse& from);
  AddBridgeEventsResponse(AddBridgeEventsResponse&& from) noexcept
    : AddBridgeEventsResponse() {
    *this = ::std::move(from);
  }

  inline AddBridgeEventsResponse& operator=(const AddBridgeEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBridgeEventsResponse& operator=(AddBridgeEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddBridgeEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddBridgeEventsResponse* internal_default_instance() {
    return reinterpret_cast<const AddBridgeEventsResponse*>(
               &_AddBridgeEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddBridgeEventsResponse& a, AddBridgeEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBridgeEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddBridgeEventsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddBridgeEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddBridgeEventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddBridgeEventsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddBridgeEventsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.daemons.bridge.AddBridgeEventsResponse";
  }
  protected:
  explicit AddBridgeEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.daemons.bridge.AddBridgeEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AddBridgeEventsRequest

// repeated .dydxprotocol.bridge.BridgeEvent bridge_events = 1 [(.gogoproto.nullable) = false];
inline int AddBridgeEventsRequest::_internal_bridge_events_size() const {
  return _impl_.bridge_events_.size();
}
inline int AddBridgeEventsRequest::bridge_events_size() const {
  return _internal_bridge_events_size();
}
inline ::dydxprotocol::bridge::BridgeEvent* AddBridgeEventsRequest::mutable_bridge_events(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.daemons.bridge.AddBridgeEventsRequest.bridge_events)
  return _internal_mutable_bridge_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::bridge::BridgeEvent >*
AddBridgeEventsRequest::mutable_bridge_events() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.daemons.bridge.AddBridgeEventsRequest.bridge_events)
  return _internal_mutable_bridge_events();
}
inline const ::dydxprotocol::bridge::BridgeEvent& AddBridgeEventsRequest::_internal_bridge_events(int index) const {
  return _internal_bridge_events().Get(index);
}
inline const ::dydxprotocol::bridge::BridgeEvent& AddBridgeEventsRequest::bridge_events(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.bridge.AddBridgeEventsRequest.bridge_events)
  return _internal_bridge_events(index);
}
inline ::dydxprotocol::bridge::BridgeEvent* AddBridgeEventsRequest::_internal_add_bridge_events() {
  return _internal_mutable_bridge_events()->Add();
}
inline ::dydxprotocol::bridge::BridgeEvent* AddBridgeEventsRequest::add_bridge_events() {
  ::dydxprotocol::bridge::BridgeEvent* _add = _internal_add_bridge_events();
  // @@protoc_insertion_point(field_add:dydxprotocol.daemons.bridge.AddBridgeEventsRequest.bridge_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::bridge::BridgeEvent >&
AddBridgeEventsRequest::bridge_events() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.daemons.bridge.AddBridgeEventsRequest.bridge_events)
  return _internal_bridge_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::bridge::BridgeEvent>&
AddBridgeEventsRequest::_internal_bridge_events() const {
  return _impl_.bridge_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::bridge::BridgeEvent>*
AddBridgeEventsRequest::_internal_mutable_bridge_events() {
  return &_impl_.bridge_events_;
}

// -------------------------------------------------------------------

// AddBridgeEventsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace bridge
}  // namespace daemons
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdaemons_2fbridge_2fbridge_2eproto_2epb_2eh
