// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/daemons/pricefeed/price_feed.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto;
namespace dydxprotocol {
namespace daemons {
namespace pricefeed {
class ExchangePrice;
struct ExchangePriceDefaultTypeInternal;
extern ExchangePriceDefaultTypeInternal _ExchangePrice_default_instance_;
class MarketPriceUpdate;
struct MarketPriceUpdateDefaultTypeInternal;
extern MarketPriceUpdateDefaultTypeInternal _MarketPriceUpdate_default_instance_;
class UpdateMarketPricesRequest;
struct UpdateMarketPricesRequestDefaultTypeInternal;
extern UpdateMarketPricesRequestDefaultTypeInternal _UpdateMarketPricesRequest_default_instance_;
class UpdateMarketPricesResponse;
struct UpdateMarketPricesResponseDefaultTypeInternal;
extern UpdateMarketPricesResponseDefaultTypeInternal _UpdateMarketPricesResponse_default_instance_;
}  // namespace pricefeed
}  // namespace daemons
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::daemons::pricefeed::ExchangePrice* Arena::CreateMaybeMessage<::dydxprotocol::daemons::pricefeed::ExchangePrice>(Arena*);
template <>
::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* Arena::CreateMaybeMessage<::dydxprotocol::daemons::pricefeed::MarketPriceUpdate>(Arena*);
template <>
::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest* Arena::CreateMaybeMessage<::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest>(Arena*);
template <>
::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse* Arena::CreateMaybeMessage<::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace daemons {
namespace pricefeed {

// ===================================================================


// -------------------------------------------------------------------

class UpdateMarketPricesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest) */ {
 public:
  inline UpdateMarketPricesRequest() : UpdateMarketPricesRequest(nullptr) {}
  ~UpdateMarketPricesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateMarketPricesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateMarketPricesRequest(const UpdateMarketPricesRequest& from);
  UpdateMarketPricesRequest(UpdateMarketPricesRequest&& from) noexcept
    : UpdateMarketPricesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMarketPricesRequest& operator=(const UpdateMarketPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMarketPricesRequest& operator=(UpdateMarketPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMarketPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMarketPricesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMarketPricesRequest*>(
               &_UpdateMarketPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateMarketPricesRequest& a, UpdateMarketPricesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMarketPricesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMarketPricesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMarketPricesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMarketPricesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateMarketPricesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateMarketPricesRequest& from) {
    UpdateMarketPricesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMarketPricesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest";
  }
  protected:
  explicit UpdateMarketPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketPriceUpdatesFieldNumber = 1,
  };
  // repeated .dydxprotocol.daemons.pricefeed.MarketPriceUpdate market_price_updates = 1;
  int market_price_updates_size() const;
  private:
  int _internal_market_price_updates_size() const;

  public:
  void clear_market_price_updates() ;
  ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* mutable_market_price_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate >*
      mutable_market_price_updates();
  private:
  const ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate& _internal_market_price_updates(int index) const;
  ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* _internal_add_market_price_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::MarketPriceUpdate>& _internal_market_price_updates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::MarketPriceUpdate>* _internal_mutable_market_price_updates();
  public:
  const ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate& market_price_updates(int index) const;
  ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* add_market_price_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate >&
      market_price_updates() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate > market_price_updates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto;
};// -------------------------------------------------------------------

class UpdateMarketPricesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.daemons.pricefeed.UpdateMarketPricesResponse) */ {
 public:
  inline UpdateMarketPricesResponse() : UpdateMarketPricesResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateMarketPricesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateMarketPricesResponse(const UpdateMarketPricesResponse& from);
  UpdateMarketPricesResponse(UpdateMarketPricesResponse&& from) noexcept
    : UpdateMarketPricesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateMarketPricesResponse& operator=(const UpdateMarketPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMarketPricesResponse& operator=(UpdateMarketPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMarketPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMarketPricesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateMarketPricesResponse*>(
               &_UpdateMarketPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateMarketPricesResponse& a, UpdateMarketPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMarketPricesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMarketPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMarketPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMarketPricesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateMarketPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateMarketPricesResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.daemons.pricefeed.UpdateMarketPricesResponse";
  }
  protected:
  explicit UpdateMarketPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.daemons.pricefeed.UpdateMarketPricesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto;
};// -------------------------------------------------------------------

class ExchangePrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.daemons.pricefeed.ExchangePrice) */ {
 public:
  inline ExchangePrice() : ExchangePrice(nullptr) {}
  ~ExchangePrice() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExchangePrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangePrice(const ExchangePrice& from);
  ExchangePrice(ExchangePrice&& from) noexcept
    : ExchangePrice() {
    *this = ::std::move(from);
  }

  inline ExchangePrice& operator=(const ExchangePrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangePrice& operator=(ExchangePrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangePrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangePrice* internal_default_instance() {
    return reinterpret_cast<const ExchangePrice*>(
               &_ExchangePrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExchangePrice& a, ExchangePrice& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangePrice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangePrice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangePrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangePrice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangePrice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangePrice& from) {
    ExchangePrice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangePrice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.daemons.pricefeed.ExchangePrice";
  }
  protected:
  explicit ExchangePrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kLastUpdateTimeFieldNumber = 3,
    kPriceFieldNumber = 2,
  };
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // .google.protobuf.Timestamp last_update_time = 3 [(.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
  bool has_last_update_time() const;
  void clear_last_update_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_update_time();
  void set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_update_time();
  public:
  void unsafe_arena_set_allocated_last_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_update_time();
  // uint64 price = 2;
  void clear_price() ;
  ::uint64_t price() const;
  void set_price(::uint64_t value);

  private:
  ::uint64_t _internal_price() const;
  void _internal_set_price(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.daemons.pricefeed.ExchangePrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time_;
    ::uint64_t price_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto;
};// -------------------------------------------------------------------

class MarketPriceUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.daemons.pricefeed.MarketPriceUpdate) */ {
 public:
  inline MarketPriceUpdate() : MarketPriceUpdate(nullptr) {}
  ~MarketPriceUpdate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketPriceUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketPriceUpdate(const MarketPriceUpdate& from);
  MarketPriceUpdate(MarketPriceUpdate&& from) noexcept
    : MarketPriceUpdate() {
    *this = ::std::move(from);
  }

  inline MarketPriceUpdate& operator=(const MarketPriceUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketPriceUpdate& operator=(MarketPriceUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketPriceUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketPriceUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketPriceUpdate*>(
               &_MarketPriceUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MarketPriceUpdate& a, MarketPriceUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketPriceUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketPriceUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketPriceUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketPriceUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketPriceUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketPriceUpdate& from) {
    MarketPriceUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketPriceUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.daemons.pricefeed.MarketPriceUpdate";
  }
  protected:
  explicit MarketPriceUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangePricesFieldNumber = 2,
    kMarketIdFieldNumber = 1,
  };
  // repeated .dydxprotocol.daemons.pricefeed.ExchangePrice exchange_prices = 2;
  int exchange_prices_size() const;
  private:
  int _internal_exchange_prices_size() const;

  public:
  void clear_exchange_prices() ;
  ::dydxprotocol::daemons::pricefeed::ExchangePrice* mutable_exchange_prices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::ExchangePrice >*
      mutable_exchange_prices();
  private:
  const ::dydxprotocol::daemons::pricefeed::ExchangePrice& _internal_exchange_prices(int index) const;
  ::dydxprotocol::daemons::pricefeed::ExchangePrice* _internal_add_exchange_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::ExchangePrice>& _internal_exchange_prices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::ExchangePrice>* _internal_mutable_exchange_prices();
  public:
  const ::dydxprotocol::daemons::pricefeed::ExchangePrice& exchange_prices(int index) const;
  ::dydxprotocol::daemons::pricefeed::ExchangePrice* add_exchange_prices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::ExchangePrice >&
      exchange_prices() const;
  // uint32 market_id = 1;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::ExchangePrice > exchange_prices_;
    ::uint32_t market_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UpdateMarketPricesRequest

// repeated .dydxprotocol.daemons.pricefeed.MarketPriceUpdate market_price_updates = 1;
inline int UpdateMarketPricesRequest::_internal_market_price_updates_size() const {
  return _impl_.market_price_updates_.size();
}
inline int UpdateMarketPricesRequest::market_price_updates_size() const {
  return _internal_market_price_updates_size();
}
inline void UpdateMarketPricesRequest::clear_market_price_updates() {
  _internal_mutable_market_price_updates()->Clear();
}
inline ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* UpdateMarketPricesRequest::mutable_market_price_updates(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest.market_price_updates)
  return _internal_mutable_market_price_updates()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate >*
UpdateMarketPricesRequest::mutable_market_price_updates() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest.market_price_updates)
  return _internal_mutable_market_price_updates();
}
inline const ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate& UpdateMarketPricesRequest::_internal_market_price_updates(int index) const {
  return _internal_market_price_updates().Get(index);
}
inline const ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate& UpdateMarketPricesRequest::market_price_updates(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest.market_price_updates)
  return _internal_market_price_updates(index);
}
inline ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* UpdateMarketPricesRequest::_internal_add_market_price_updates() {
  return _internal_mutable_market_price_updates()->Add();
}
inline ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* UpdateMarketPricesRequest::add_market_price_updates() {
  ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate* _add = _internal_add_market_price_updates();
  // @@protoc_insertion_point(field_add:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest.market_price_updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate >&
UpdateMarketPricesRequest::market_price_updates() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest.market_price_updates)
  return _internal_market_price_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::MarketPriceUpdate>&
UpdateMarketPricesRequest::_internal_market_price_updates() const {
  return _impl_.market_price_updates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::MarketPriceUpdate>*
UpdateMarketPricesRequest::_internal_mutable_market_price_updates() {
  return &_impl_.market_price_updates_;
}

// -------------------------------------------------------------------

// UpdateMarketPricesResponse

// -------------------------------------------------------------------

// ExchangePrice

// string exchange_id = 1;
inline void ExchangePrice::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& ExchangePrice::exchange_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExchangePrice::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id)
}
inline std::string* ExchangePrice::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id)
  return _s;
}
inline const std::string& ExchangePrice::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void ExchangePrice::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ExchangePrice::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ExchangePrice::release_exchange_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void ExchangePrice::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id)
}

// uint64 price = 2;
inline void ExchangePrice::clear_price() {
  _impl_.price_ = ::uint64_t{0u};
}
inline ::uint64_t ExchangePrice::price() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.pricefeed.ExchangePrice.price)
  return _internal_price();
}
inline void ExchangePrice::set_price(::uint64_t value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.daemons.pricefeed.ExchangePrice.price)
}
inline ::uint64_t ExchangePrice::_internal_price() const {
  return _impl_.price_;
}
inline void ExchangePrice::_internal_set_price(::uint64_t value) {
  ;
  _impl_.price_ = value;
}

// .google.protobuf.Timestamp last_update_time = 3 [(.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
inline bool ExchangePrice::has_last_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_update_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ExchangePrice::_internal_last_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ExchangePrice::last_update_time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.pricefeed.ExchangePrice.last_update_time)
  return _internal_last_update_time();
}
inline void ExchangePrice::unsafe_arena_set_allocated_last_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  _impl_.last_update_time_ = last_update_time;
  if (last_update_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.daemons.pricefeed.ExchangePrice.last_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ExchangePrice::release_last_update_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ExchangePrice::unsafe_arena_release_last_update_time() {
  // @@protoc_insertion_point(field_release:dydxprotocol.daemons.pricefeed.ExchangePrice.last_update_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_update_time_;
  _impl_.last_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ExchangePrice::_internal_mutable_last_update_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.last_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_update_time_ = p;
  }
  return _impl_.last_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ExchangePrice::mutable_last_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_update_time();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.daemons.pricefeed.ExchangePrice.last_update_time)
  return _msg;
}
inline void ExchangePrice::set_allocated_last_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_update_time_);
  }
  if (last_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_time));
    if (message_arena != submessage_arena) {
      last_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.last_update_time_ = last_update_time;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.daemons.pricefeed.ExchangePrice.last_update_time)
}

// -------------------------------------------------------------------

// MarketPriceUpdate

// uint32 market_id = 1;
inline void MarketPriceUpdate::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t MarketPriceUpdate::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.market_id)
  return _internal_market_id();
}
inline void MarketPriceUpdate::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.market_id)
}
inline ::uint32_t MarketPriceUpdate::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void MarketPriceUpdate::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// repeated .dydxprotocol.daemons.pricefeed.ExchangePrice exchange_prices = 2;
inline int MarketPriceUpdate::_internal_exchange_prices_size() const {
  return _impl_.exchange_prices_.size();
}
inline int MarketPriceUpdate::exchange_prices_size() const {
  return _internal_exchange_prices_size();
}
inline void MarketPriceUpdate::clear_exchange_prices() {
  _internal_mutable_exchange_prices()->Clear();
}
inline ::dydxprotocol::daemons::pricefeed::ExchangePrice* MarketPriceUpdate::mutable_exchange_prices(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.exchange_prices)
  return _internal_mutable_exchange_prices()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::ExchangePrice >*
MarketPriceUpdate::mutable_exchange_prices() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.exchange_prices)
  return _internal_mutable_exchange_prices();
}
inline const ::dydxprotocol::daemons::pricefeed::ExchangePrice& MarketPriceUpdate::_internal_exchange_prices(int index) const {
  return _internal_exchange_prices().Get(index);
}
inline const ::dydxprotocol::daemons::pricefeed::ExchangePrice& MarketPriceUpdate::exchange_prices(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.exchange_prices)
  return _internal_exchange_prices(index);
}
inline ::dydxprotocol::daemons::pricefeed::ExchangePrice* MarketPriceUpdate::_internal_add_exchange_prices() {
  return _internal_mutable_exchange_prices()->Add();
}
inline ::dydxprotocol::daemons::pricefeed::ExchangePrice* MarketPriceUpdate::add_exchange_prices() {
  ::dydxprotocol::daemons::pricefeed::ExchangePrice* _add = _internal_add_exchange_prices();
  // @@protoc_insertion_point(field_add:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.exchange_prices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::daemons::pricefeed::ExchangePrice >&
MarketPriceUpdate::exchange_prices() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.daemons.pricefeed.MarketPriceUpdate.exchange_prices)
  return _internal_exchange_prices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::ExchangePrice>&
MarketPriceUpdate::_internal_exchange_prices() const {
  return _impl_.exchange_prices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::daemons::pricefeed::ExchangePrice>*
MarketPriceUpdate::_internal_mutable_exchange_prices() {
  return &_impl_.exchange_prices_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pricefeed
}  // namespace daemons
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_2epb_2eh
