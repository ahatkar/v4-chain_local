// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/daemons/pricefeed/price_feed.proto

#include "dydxprotocol/daemons/pricefeed/price_feed.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace daemons {
namespace pricefeed {
template <typename>
PROTOBUF_CONSTEXPR UpdateMarketPricesRequest::UpdateMarketPricesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_price_updates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateMarketPricesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMarketPricesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMarketPricesRequestDefaultTypeInternal() {}
  union {
    UpdateMarketPricesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMarketPricesRequestDefaultTypeInternal _UpdateMarketPricesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpdateMarketPricesResponse::UpdateMarketPricesResponse(
    ::_pbi::ConstantInitialized) {}
struct UpdateMarketPricesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMarketPricesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMarketPricesResponseDefaultTypeInternal() {}
  union {
    UpdateMarketPricesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMarketPricesResponseDefaultTypeInternal _UpdateMarketPricesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ExchangePrice::ExchangePrice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_update_time_)*/nullptr
  , /*decltype(_impl_.price_)*/ ::uint64_t{0u}
} {}
struct ExchangePriceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExchangePriceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExchangePriceDefaultTypeInternal() {}
  union {
    ExchangePrice _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExchangePriceDefaultTypeInternal _ExchangePrice_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketPriceUpdate::MarketPriceUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_prices_)*/{}
  , /*decltype(_impl_.market_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketPriceUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketPriceUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketPriceUpdateDefaultTypeInternal() {}
  union {
    MarketPriceUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketPriceUpdateDefaultTypeInternal _MarketPriceUpdate_default_instance_;
}  // namespace pricefeed
}  // namespace daemons
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest, _impl_.market_price_updates_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::ExchangePrice, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::ExchangePrice, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::ExchangePrice, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::ExchangePrice, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::ExchangePrice, _impl_.last_update_time_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::MarketPriceUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::MarketPriceUpdate, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::daemons::pricefeed::MarketPriceUpdate, _impl_.exchange_prices_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest)},
        { 9, -1, -1, sizeof(::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse)},
        { 17, 28, -1, sizeof(::dydxprotocol::daemons::pricefeed::ExchangePrice)},
        { 31, -1, -1, sizeof(::dydxprotocol::daemons::pricefeed::MarketPriceUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::daemons::pricefeed::_UpdateMarketPricesRequest_default_instance_._instance,
    &::dydxprotocol::daemons::pricefeed::_UpdateMarketPricesResponse_default_instance_._instance,
    &::dydxprotocol::daemons::pricefeed::_ExchangePrice_default_instance_._instance,
    &::dydxprotocol::daemons::pricefeed::_MarketPriceUpdate_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/dydxprotocol/daemons/pricefeed/price_f"
    "eed.proto\022\036dydxprotocol.daemons.pricefee"
    "d\032\024gogoproto/gogo.proto\032\037google/protobuf"
    "/timestamp.proto\"l\n\031UpdateMarketPricesRe"
    "quest\022O\n\024market_price_updates\030\001 \003(\01321.dy"
    "dxprotocol.daemons.pricefeed.MarketPrice"
    "Update\"\034\n\032UpdateMarketPricesResponse\"s\n\r"
    "ExchangePrice\022\023\n\013exchange_id\030\001 \001(\t\022\r\n\005pr"
    "ice\030\002 \001(\004\022>\n\020last_update_time\030\003 \001(\0132\032.go"
    "ogle.protobuf.TimestampB\010\310\336\037\001\220\337\037\001\"n\n\021Mar"
    "ketPriceUpdate\022\021\n\tmarket_id\030\001 \001(\r\022F\n\017exc"
    "hange_prices\030\002 \003(\0132-.dydxprotocol.daemon"
    "s.pricefeed.ExchangePrice2\242\001\n\020PriceFeedS"
    "ervice\022\215\001\n\022UpdateMarketPrices\0229.dydxprot"
    "ocol.daemons.pricefeed.UpdateMarketPrice"
    "sRequest\032:.dydxprotocol.daemons.pricefee"
    "d.UpdateMarketPricesResponse\"\000BAZ\?github"
    ".com/dydxprotocol/v4-chain/protocol/daem"
    "ons/pricefeed/apib\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto = {
    false,
    false,
    745,
    descriptor_table_protodef_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto,
    "dydxprotocol/daemons/pricefeed/price_feed.proto",
    &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_once,
    descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto,
    file_level_service_descriptors_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto(&descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto);
namespace dydxprotocol {
namespace daemons {
namespace pricefeed {
// ===================================================================

class UpdateMarketPricesRequest::_Internal {
 public:
};

UpdateMarketPricesRequest::UpdateMarketPricesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
}
UpdateMarketPricesRequest::UpdateMarketPricesRequest(const UpdateMarketPricesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateMarketPricesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_price_updates_){from._impl_.market_price_updates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
}

inline void UpdateMarketPricesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_price_updates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateMarketPricesRequest::~UpdateMarketPricesRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateMarketPricesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_market_price_updates()->~RepeatedPtrField();
}

void UpdateMarketPricesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateMarketPricesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_market_price_updates()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMarketPricesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.daemons.pricefeed.MarketPriceUpdate market_price_updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_market_price_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateMarketPricesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.daemons.pricefeed.MarketPriceUpdate market_price_updates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_market_price_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_market_price_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  return target;
}

::size_t UpdateMarketPricesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.daemons.pricefeed.MarketPriceUpdate market_price_updates = 1;
  total_size += 1UL * this->_internal_market_price_updates_size();
  for (const auto& msg : this->_internal_market_price_updates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMarketPricesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateMarketPricesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMarketPricesRequest::GetClassData() const { return &_class_data_; }


void UpdateMarketPricesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateMarketPricesRequest*>(&to_msg);
  auto& from = static_cast<const UpdateMarketPricesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_market_price_updates()->MergeFrom(from._internal_market_price_updates());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMarketPricesRequest::CopyFrom(const UpdateMarketPricesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.daemons.pricefeed.UpdateMarketPricesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMarketPricesRequest::IsInitialized() const {
  return true;
}

void UpdateMarketPricesRequest::InternalSwap(UpdateMarketPricesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_market_price_updates()->InternalSwap(other->_internal_mutable_market_price_updates());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMarketPricesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_getter, &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_once,
      file_level_metadata_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto[0]);
}
// ===================================================================

class UpdateMarketPricesResponse::_Internal {
 public:
};

UpdateMarketPricesResponse::UpdateMarketPricesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.daemons.pricefeed.UpdateMarketPricesResponse)
}
UpdateMarketPricesResponse::UpdateMarketPricesResponse(const UpdateMarketPricesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UpdateMarketPricesResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.daemons.pricefeed.UpdateMarketPricesResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMarketPricesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMarketPricesResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UpdateMarketPricesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_getter, &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_once,
      file_level_metadata_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto[1]);
}
// ===================================================================

class ExchangePrice::_Internal {
 public:
  using HasBits = decltype(std::declval<ExchangePrice>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ExchangePrice, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_update_time(const ExchangePrice* msg);
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ExchangePrice::_Internal::last_update_time(const ExchangePrice* msg) {
  return *msg->_impl_.last_update_time_;
}
void ExchangePrice::clear_last_update_time() {
  if (_impl_.last_update_time_ != nullptr) _impl_.last_update_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ExchangePrice::ExchangePrice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.daemons.pricefeed.ExchangePrice)
}
ExchangePrice::ExchangePrice(const ExchangePrice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExchangePrice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.last_update_time_){nullptr}
    , decltype(_impl_.price_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.last_update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_update_time_);
  }
  _this->_impl_.price_ = from._impl_.price_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.daemons.pricefeed.ExchangePrice)
}

inline void ExchangePrice::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.last_update_time_){nullptr}
    , decltype(_impl_.price_) { ::uint64_t{0u} }

  };
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExchangePrice::~ExchangePrice() {
  // @@protoc_insertion_point(destructor:dydxprotocol.daemons.pricefeed.ExchangePrice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExchangePrice::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.last_update_time_;
}

void ExchangePrice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExchangePrice::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.daemons.pricefeed.ExchangePrice)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_update_time_ != nullptr);
    _impl_.last_update_time_->Clear();
  }
  _impl_.price_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExchangePrice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp last_update_time = 3 [(.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_update_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExchangePrice::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.daemons.pricefeed.ExchangePrice)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.daemons.pricefeed.ExchangePrice.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_price(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp last_update_time = 3 [(.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_update_time(this),
        _Internal::last_update_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.daemons.pricefeed.ExchangePrice)
  return target;
}

::size_t ExchangePrice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.daemons.pricefeed.ExchangePrice)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // .google.protobuf.Timestamp last_update_time = 3 [(.gogoproto.nullable) = true, (.gogoproto.stdtime) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_update_time_);
  }

  // uint64 price = 2;
  if (this->_internal_price() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_price());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExchangePrice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExchangePrice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExchangePrice::GetClassData() const { return &_class_data_; }


void ExchangePrice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExchangePrice*>(&to_msg);
  auto& from = static_cast<const ExchangePrice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.daemons.pricefeed.ExchangePrice)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_last_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_update_time());
  }
  if (from._internal_price() != 0) {
    _this->_internal_set_price(from._internal_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExchangePrice::CopyFrom(const ExchangePrice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.daemons.pricefeed.ExchangePrice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangePrice::IsInitialized() const {
  return true;
}

void ExchangePrice::InternalSwap(ExchangePrice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExchangePrice, _impl_.price_)
      + sizeof(ExchangePrice::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(ExchangePrice, _impl_.last_update_time_)>(
          reinterpret_cast<char*>(&_impl_.last_update_time_),
          reinterpret_cast<char*>(&other->_impl_.last_update_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExchangePrice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_getter, &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_once,
      file_level_metadata_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto[2]);
}
// ===================================================================

class MarketPriceUpdate::_Internal {
 public:
};

MarketPriceUpdate::MarketPriceUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
}
MarketPriceUpdate::MarketPriceUpdate(const MarketPriceUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketPriceUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_prices_){from._impl_.exchange_prices_}
    , decltype(_impl_.market_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.market_id_ = from._impl_.market_id_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
}

inline void MarketPriceUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_prices_){arena}
    , decltype(_impl_.market_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketPriceUpdate::~MarketPriceUpdate() {
  // @@protoc_insertion_point(destructor:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketPriceUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_exchange_prices()->~RepeatedPtrField();
}

void MarketPriceUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketPriceUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_exchange_prices()->Clear();
  _impl_.market_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketPriceUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.market_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.daemons.pricefeed.ExchangePrice exchange_prices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exchange_prices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketPriceUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 market_id = 1;
  if (this->_internal_market_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_market_id(), target);
  }

  // repeated .dydxprotocol.daemons.pricefeed.ExchangePrice exchange_prices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exchange_prices_size()); i < n; i++) {
    const auto& repfield = this->_internal_exchange_prices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  return target;
}

::size_t MarketPriceUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.daemons.pricefeed.ExchangePrice exchange_prices = 2;
  total_size += 1UL * this->_internal_exchange_prices_size();
  for (const auto& msg : this->_internal_exchange_prices()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 market_id = 1;
  if (this->_internal_market_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_market_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketPriceUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketPriceUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketPriceUpdate::GetClassData() const { return &_class_data_; }


void MarketPriceUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketPriceUpdate*>(&to_msg);
  auto& from = static_cast<const MarketPriceUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exchange_prices()->MergeFrom(from._internal_exchange_prices());
  if (from._internal_market_id() != 0) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPriceUpdate::CopyFrom(const MarketPriceUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.daemons.pricefeed.MarketPriceUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPriceUpdate::IsInitialized() const {
  return true;
}

void MarketPriceUpdate::InternalSwap(MarketPriceUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_exchange_prices()->InternalSwap(other->_internal_mutable_exchange_prices());

  swap(_impl_.market_id_, other->_impl_.market_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketPriceUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_getter, &descriptor_table_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto_once,
      file_level_metadata_dydxprotocol_2fdaemons_2fpricefeed_2fprice_5ffeed_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace pricefeed
}  // namespace daemons
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::daemons::pricefeed::UpdateMarketPricesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::daemons::pricefeed::UpdateMarketPricesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::daemons::pricefeed::ExchangePrice*
Arena::CreateMaybeMessage< ::dydxprotocol::daemons::pricefeed::ExchangePrice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::daemons::pricefeed::ExchangePrice >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate*
Arena::CreateMaybeMessage< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::daemons::pricefeed::MarketPriceUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
