// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/delaymsg/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdelaymsg_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdelaymsg_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fdelaymsg_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fdelaymsg_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fdelaymsg_2ftx_2eproto;
namespace dydxprotocol {
namespace delaymsg {
class MsgDelayMessage;
struct MsgDelayMessageDefaultTypeInternal;
extern MsgDelayMessageDefaultTypeInternal _MsgDelayMessage_default_instance_;
class MsgDelayMessageResponse;
struct MsgDelayMessageResponseDefaultTypeInternal;
extern MsgDelayMessageResponseDefaultTypeInternal _MsgDelayMessageResponse_default_instance_;
}  // namespace delaymsg
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::delaymsg::MsgDelayMessage* Arena::CreateMaybeMessage<::dydxprotocol::delaymsg::MsgDelayMessage>(Arena*);
template <>
::dydxprotocol::delaymsg::MsgDelayMessageResponse* Arena::CreateMaybeMessage<::dydxprotocol::delaymsg::MsgDelayMessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace delaymsg {

// ===================================================================


// -------------------------------------------------------------------

class MsgDelayMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.delaymsg.MsgDelayMessage) */ {
 public:
  inline MsgDelayMessage() : MsgDelayMessage(nullptr) {}
  ~MsgDelayMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDelayMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDelayMessage(const MsgDelayMessage& from);
  MsgDelayMessage(MsgDelayMessage&& from) noexcept
    : MsgDelayMessage() {
    *this = ::std::move(from);
  }

  inline MsgDelayMessage& operator=(const MsgDelayMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDelayMessage& operator=(MsgDelayMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDelayMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDelayMessage* internal_default_instance() {
    return reinterpret_cast<const MsgDelayMessage*>(
               &_MsgDelayMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgDelayMessage& a, MsgDelayMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDelayMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDelayMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDelayMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDelayMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDelayMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgDelayMessage& from) {
    MsgDelayMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDelayMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.delaymsg.MsgDelayMessage";
  }
  protected:
  explicit MsgDelayMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kMsgFieldNumber = 2,
    kDelayBlocksFieldNumber = 3,
  };
  // string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .google.protobuf.Any msg = 2;
  bool has_msg() const;
  void clear_msg() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& msg() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_msg();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_msg();
  void set_allocated_msg(::PROTOBUF_NAMESPACE_ID::Any* msg);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_msg() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::PROTOBUF_NAMESPACE_ID::Any* msg);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_msg();
  // uint32 delay_blocks = 3;
  void clear_delay_blocks() ;
  ::uint32_t delay_blocks() const;
  void set_delay_blocks(::uint32_t value);

  private:
  ::uint32_t _internal_delay_blocks() const;
  void _internal_set_delay_blocks(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.delaymsg.MsgDelayMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::PROTOBUF_NAMESPACE_ID::Any* msg_;
    ::uint32_t delay_blocks_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fdelaymsg_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgDelayMessageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.delaymsg.MsgDelayMessageResponse) */ {
 public:
  inline MsgDelayMessageResponse() : MsgDelayMessageResponse(nullptr) {}
  ~MsgDelayMessageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgDelayMessageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgDelayMessageResponse(const MsgDelayMessageResponse& from);
  MsgDelayMessageResponse(MsgDelayMessageResponse&& from) noexcept
    : MsgDelayMessageResponse() {
    *this = ::std::move(from);
  }

  inline MsgDelayMessageResponse& operator=(const MsgDelayMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgDelayMessageResponse& operator=(MsgDelayMessageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgDelayMessageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgDelayMessageResponse* internal_default_instance() {
    return reinterpret_cast<const MsgDelayMessageResponse*>(
               &_MsgDelayMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgDelayMessageResponse& a, MsgDelayMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgDelayMessageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgDelayMessageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgDelayMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgDelayMessageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgDelayMessageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgDelayMessageResponse& from) {
    MsgDelayMessageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgDelayMessageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.delaymsg.MsgDelayMessageResponse";
  }
  protected:
  explicit MsgDelayMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id() ;
  ::uint64_t id() const;
  void set_id(::uint64_t value);

  private:
  ::uint64_t _internal_id() const;
  void _internal_set_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.delaymsg.MsgDelayMessageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fdelaymsg_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgDelayMessage

// string authority = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void MsgDelayMessage::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgDelayMessage::authority() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.delaymsg.MsgDelayMessage.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgDelayMessage::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.delaymsg.MsgDelayMessage.authority)
}
inline std::string* MsgDelayMessage::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.delaymsg.MsgDelayMessage.authority)
  return _s;
}
inline const std::string& MsgDelayMessage::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgDelayMessage::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgDelayMessage::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgDelayMessage::release_authority() {
  // @@protoc_insertion_point(field_release:dydxprotocol.delaymsg.MsgDelayMessage.authority)
  return _impl_.authority_.Release();
}
inline void MsgDelayMessage::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.delaymsg.MsgDelayMessage.authority)
}

// .google.protobuf.Any msg = 2;
inline bool MsgDelayMessage::has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgDelayMessage::_internal_msg() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgDelayMessage::msg() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.delaymsg.MsgDelayMessage.msg)
  return _internal_msg();
}
inline void MsgDelayMessage::unsafe_arena_set_allocated_msg(
    ::PROTOBUF_NAMESPACE_ID::Any* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.delaymsg.MsgDelayMessage.msg)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgDelayMessage::release_msg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgDelayMessage::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:dydxprotocol.delaymsg.MsgDelayMessage.msg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgDelayMessage::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgDelayMessage::mutable_msg() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.delaymsg.MsgDelayMessage.msg)
  return _msg;
}
inline void MsgDelayMessage::set_allocated_msg(::PROTOBUF_NAMESPACE_ID::Any* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg));
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.delaymsg.MsgDelayMessage.msg)
}

// uint32 delay_blocks = 3;
inline void MsgDelayMessage::clear_delay_blocks() {
  _impl_.delay_blocks_ = 0u;
}
inline ::uint32_t MsgDelayMessage::delay_blocks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.delaymsg.MsgDelayMessage.delay_blocks)
  return _internal_delay_blocks();
}
inline void MsgDelayMessage::set_delay_blocks(::uint32_t value) {
  _internal_set_delay_blocks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.delaymsg.MsgDelayMessage.delay_blocks)
}
inline ::uint32_t MsgDelayMessage::_internal_delay_blocks() const {
  return _impl_.delay_blocks_;
}
inline void MsgDelayMessage::_internal_set_delay_blocks(::uint32_t value) {
  ;
  _impl_.delay_blocks_ = value;
}

// -------------------------------------------------------------------

// MsgDelayMessageResponse

// uint64 id = 1;
inline void MsgDelayMessageResponse::clear_id() {
  _impl_.id_ = ::uint64_t{0u};
}
inline ::uint64_t MsgDelayMessageResponse::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.delaymsg.MsgDelayMessageResponse.id)
  return _internal_id();
}
inline void MsgDelayMessageResponse::set_id(::uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.delaymsg.MsgDelayMessageResponse.id)
}
inline ::uint64_t MsgDelayMessageResponse::_internal_id() const {
  return _impl_.id_;
}
inline void MsgDelayMessageResponse::_internal_set_id(::uint64_t value) {
  ;
  _impl_.id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace delaymsg
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fdelaymsg_2ftx_2eproto_2epb_2eh
