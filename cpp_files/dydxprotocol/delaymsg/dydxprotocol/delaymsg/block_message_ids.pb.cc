// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/delaymsg/block_message_ids.proto

#include "dydxprotocol/delaymsg/block_message_ids.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace delaymsg {
template <typename>
PROTOBUF_CONSTEXPR BlockMessageIds::BlockMessageIds(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ids_)*/ {}
  ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockMessageIdsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMessageIdsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMessageIdsDefaultTypeInternal() {}
  union {
    BlockMessageIds _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMessageIdsDefaultTypeInternal _BlockMessageIds_default_instance_;
}  // namespace delaymsg
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::delaymsg::BlockMessageIds, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::delaymsg::BlockMessageIds, _impl_.ids_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::delaymsg::BlockMessageIds)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::delaymsg::_BlockMessageIds_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n-dydxprotocol/delaymsg/block_message_id"
    "s.proto\022\025dydxprotocol.delaymsg\"\036\n\017BlockM"
    "essageIds\022\013\n\003ids\030\001 \003(\rB<Z:github.com/dyd"
    "xprotocol/v4-chain/protocol/x/delaymsg/t"
    "ypesb\006proto3"
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto = {
    false,
    false,
    172,
    descriptor_table_protodef_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto,
    "dydxprotocol/delaymsg/block_message_ids.proto",
    &descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto,
    file_level_service_descriptors_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto(&descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto);
namespace dydxprotocol {
namespace delaymsg {
// ===================================================================

class BlockMessageIds::_Internal {
 public:
};

BlockMessageIds::BlockMessageIds(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.delaymsg.BlockMessageIds)
}
BlockMessageIds::BlockMessageIds(const BlockMessageIds& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockMessageIds* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_) { from._impl_.ids_ }
    ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.delaymsg.BlockMessageIds)
}

inline void BlockMessageIds::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ids_) { arena }
    ,/* _impl_._ids_cached_byte_size_ = */ { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockMessageIds::~BlockMessageIds() {
  // @@protoc_insertion_point(destructor:dydxprotocol.delaymsg.BlockMessageIds)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockMessageIds::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ids_.~RepeatedField();
}

void BlockMessageIds::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockMessageIds::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.delaymsg.BlockMessageIds)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ids()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMessageIds::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockMessageIds::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.delaymsg.BlockMessageIds)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  {
    int byte_size = _impl_._ids_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(1, _internal_ids(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.delaymsg.BlockMessageIds)
  return target;
}

::size_t BlockMessageIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.delaymsg.BlockMessageIds)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ids = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ids())
    ;
    _impl_._ids_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMessageIds::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockMessageIds::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMessageIds::GetClassData() const { return &_class_data_; }


void BlockMessageIds::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockMessageIds*>(&to_msg);
  auto& from = static_cast<const BlockMessageIds&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.delaymsg.BlockMessageIds)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ids_.MergeFrom(from._impl_.ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMessageIds::CopyFrom(const BlockMessageIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.delaymsg.BlockMessageIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMessageIds::IsInitialized() const {
  return true;
}

void BlockMessageIds::InternalSwap(BlockMessageIds* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMessageIds::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto_getter, &descriptor_table_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto_once,
      file_level_metadata_dydxprotocol_2fdelaymsg_2fblock_5fmessage_5fids_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace delaymsg
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::delaymsg::BlockMessageIds*
Arena::CreateMaybeMessage< ::dydxprotocol::delaymsg::BlockMessageIds >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::delaymsg::BlockMessageIds >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
