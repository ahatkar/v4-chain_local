// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/rewards/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2frewards_2fparams_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2frewards_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2frewards_2fparams_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2frewards_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2frewards_2fparams_2eproto;
namespace dydxprotocol {
namespace rewards {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace rewards
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::rewards::Params* Arena::CreateMaybeMessage<::dydxprotocol::rewards::Params>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace rewards {

// ===================================================================


// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.rewards.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.rewards.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTreasuryAccountFieldNumber = 1,
    kDenomFieldNumber = 2,
    kDenomExponentFieldNumber = 3,
    kMarketIdFieldNumber = 4,
    kFeeMultiplierPpmFieldNumber = 5,
  };
  // string treasury_account = 1;
  void clear_treasury_account() ;
  const std::string& treasury_account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_treasury_account(Arg_&& arg, Args_... args);
  std::string* mutable_treasury_account();
  PROTOBUF_NODISCARD std::string* release_treasury_account();
  void set_allocated_treasury_account(std::string* ptr);

  private:
  const std::string& _internal_treasury_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_treasury_account(
      const std::string& value);
  std::string* _internal_mutable_treasury_account();

  public:
  // string denom = 2;
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // sint32 denom_exponent = 3;
  void clear_denom_exponent() ;
  ::int32_t denom_exponent() const;
  void set_denom_exponent(::int32_t value);

  private:
  ::int32_t _internal_denom_exponent() const;
  void _internal_set_denom_exponent(::int32_t value);

  public:
  // uint32 market_id = 4;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // uint32 fee_multiplier_ppm = 5;
  void clear_fee_multiplier_ppm() ;
  ::uint32_t fee_multiplier_ppm() const;
  void set_fee_multiplier_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_fee_multiplier_ppm() const;
  void _internal_set_fee_multiplier_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.rewards.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr treasury_account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::int32_t denom_exponent_;
    ::uint32_t market_id_;
    ::uint32_t fee_multiplier_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2frewards_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Params

// string treasury_account = 1;
inline void Params::clear_treasury_account() {
  _impl_.treasury_account_.ClearToEmpty();
}
inline const std::string& Params::treasury_account() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.rewards.Params.treasury_account)
  return _internal_treasury_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_treasury_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.treasury_account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.rewards.Params.treasury_account)
}
inline std::string* Params::mutable_treasury_account() {
  std::string* _s = _internal_mutable_treasury_account();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.rewards.Params.treasury_account)
  return _s;
}
inline const std::string& Params::_internal_treasury_account() const {
  return _impl_.treasury_account_.Get();
}
inline void Params::_internal_set_treasury_account(const std::string& value) {
  ;


  _impl_.treasury_account_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_treasury_account() {
  ;
  return _impl_.treasury_account_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_treasury_account() {
  // @@protoc_insertion_point(field_release:dydxprotocol.rewards.Params.treasury_account)
  return _impl_.treasury_account_.Release();
}
inline void Params::set_allocated_treasury_account(std::string* value) {
  _impl_.treasury_account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.treasury_account_.IsDefault()) {
          _impl_.treasury_account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.rewards.Params.treasury_account)
}

// string denom = 2;
inline void Params::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& Params::denom() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.rewards.Params.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Params::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.rewards.Params.denom)
}
inline std::string* Params::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.rewards.Params.denom)
  return _s;
}
inline const std::string& Params::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void Params::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* Params::release_denom() {
  // @@protoc_insertion_point(field_release:dydxprotocol.rewards.Params.denom)
  return _impl_.denom_.Release();
}
inline void Params::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.rewards.Params.denom)
}

// sint32 denom_exponent = 3;
inline void Params::clear_denom_exponent() {
  _impl_.denom_exponent_ = 0;
}
inline ::int32_t Params::denom_exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.rewards.Params.denom_exponent)
  return _internal_denom_exponent();
}
inline void Params::set_denom_exponent(::int32_t value) {
  _internal_set_denom_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.rewards.Params.denom_exponent)
}
inline ::int32_t Params::_internal_denom_exponent() const {
  return _impl_.denom_exponent_;
}
inline void Params::_internal_set_denom_exponent(::int32_t value) {
  ;
  _impl_.denom_exponent_ = value;
}

// uint32 market_id = 4;
inline void Params::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t Params::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.rewards.Params.market_id)
  return _internal_market_id();
}
inline void Params::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.rewards.Params.market_id)
}
inline ::uint32_t Params::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void Params::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// uint32 fee_multiplier_ppm = 5;
inline void Params::clear_fee_multiplier_ppm() {
  _impl_.fee_multiplier_ppm_ = 0u;
}
inline ::uint32_t Params::fee_multiplier_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.rewards.Params.fee_multiplier_ppm)
  return _internal_fee_multiplier_ppm();
}
inline void Params::set_fee_multiplier_ppm(::uint32_t value) {
  _internal_set_fee_multiplier_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.rewards.Params.fee_multiplier_ppm)
}
inline ::uint32_t Params::_internal_fee_multiplier_ppm() const {
  return _impl_.fee_multiplier_ppm_;
}
inline void Params::_internal_set_fee_multiplier_ppm(::uint32_t value) {
  ;
  _impl_.fee_multiplier_ppm_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rewards
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2frewards_2fparams_2eproto_2epb_2eh
