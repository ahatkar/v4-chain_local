// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/stats/stats.proto

#include "dydxprotocol/stats/stats.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace stats {
template <typename>
PROTOBUF_CONSTEXPR BlockStats_Fill::BlockStats_Fill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.maker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.notional_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockStats_FillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockStats_FillDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockStats_FillDefaultTypeInternal() {}
  union {
    BlockStats_Fill _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockStats_FillDefaultTypeInternal _BlockStats_Fill_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockStats::BlockStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fills_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BlockStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockStatsDefaultTypeInternal() {}
  union {
    BlockStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockStatsDefaultTypeInternal _BlockStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StatsMetadata::StatsMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trailing_epoch_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatsMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsMetadataDefaultTypeInternal() {}
  union {
    StatsMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsMetadataDefaultTypeInternal _StatsMetadata_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EpochStats_UserWithStats::EpochStats_UserWithStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.stats_)*/nullptr} {}
struct EpochStats_UserWithStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpochStats_UserWithStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpochStats_UserWithStatsDefaultTypeInternal() {}
  union {
    EpochStats_UserWithStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpochStats_UserWithStatsDefaultTypeInternal _EpochStats_UserWithStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EpochStats::EpochStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.epoch_end_time_)*/nullptr} {}
struct EpochStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpochStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpochStatsDefaultTypeInternal() {}
  union {
    EpochStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpochStatsDefaultTypeInternal _EpochStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GlobalStats::GlobalStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.notional_traded_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GlobalStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GlobalStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GlobalStatsDefaultTypeInternal() {}
  union {
    GlobalStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GlobalStatsDefaultTypeInternal _GlobalStats_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UserStats::UserStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.taker_notional_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.maker_notional_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserStatsDefaultTypeInternal() {}
  union {
    UserStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserStatsDefaultTypeInternal _UserStats_default_instance_;
}  // namespace stats
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fstats_2fstats_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fstats_2fstats_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fstats_2fstats_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::BlockStats_Fill, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::BlockStats_Fill, _impl_.taker_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::BlockStats_Fill, _impl_.maker_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::BlockStats_Fill, _impl_.notional_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::BlockStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::BlockStats, _impl_.fills_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::StatsMetadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::StatsMetadata, _impl_.trailing_epoch_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats_UserWithStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats_UserWithStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats_UserWithStats, _impl_.user_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats_UserWithStats, _impl_.stats_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats, _impl_.epoch_end_time_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::EpochStats, _impl_.stats_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::GlobalStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::GlobalStats, _impl_.notional_traded_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::UserStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::UserStats, _impl_.taker_notional_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::stats::UserStats, _impl_.maker_notional_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::stats::BlockStats_Fill)},
        { 11, -1, -1, sizeof(::dydxprotocol::stats::BlockStats)},
        { 20, -1, -1, sizeof(::dydxprotocol::stats::StatsMetadata)},
        { 29, 39, -1, sizeof(::dydxprotocol::stats::EpochStats_UserWithStats)},
        { 41, 51, -1, sizeof(::dydxprotocol::stats::EpochStats)},
        { 53, -1, -1, sizeof(::dydxprotocol::stats::GlobalStats)},
        { 62, -1, -1, sizeof(::dydxprotocol::stats::UserStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::stats::_BlockStats_Fill_default_instance_._instance,
    &::dydxprotocol::stats::_BlockStats_default_instance_._instance,
    &::dydxprotocol::stats::_StatsMetadata_default_instance_._instance,
    &::dydxprotocol::stats::_EpochStats_UserWithStats_default_instance_._instance,
    &::dydxprotocol::stats::_EpochStats_default_instance_._instance,
    &::dydxprotocol::stats::_GlobalStats_default_instance_._instance,
    &::dydxprotocol::stats::_UserStats_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fstats_2fstats_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036dydxprotocol/stats/stats.proto\022\022dydxpr"
    "otocol.stats\032\024gogoproto/gogo.proto\032\037goog"
    "le/protobuf/timestamp.proto\"x\n\nBlockStat"
    "s\0222\n\005fills\030\001 \003(\0132#.dydxprotocol.stats.Bl"
    "ockStats.Fill\0326\n\004Fill\022\r\n\005taker\030\001 \001(\t\022\r\n\005"
    "maker\030\002 \001(\t\022\020\n\010notional\030\003 \001(\004\"\'\n\rStatsMe"
    "tadata\022\026\n\016trailing_epoch\030\001 \001(\r\"\324\001\n\nEpoch"
    "Stats\022<\n\016epoch_end_time\030\001 \001(\0132\032.google.p"
    "rotobuf.TimestampB\010\310\336\037\000\220\337\037\001\022;\n\005stats\030\002 \003"
    "(\0132,.dydxprotocol.stats.EpochStats.UserW"
    "ithStats\032K\n\rUserWithStats\022\014\n\004user\030\001 \001(\t\022"
    ",\n\005stats\030\002 \001(\0132\035.dydxprotocol.stats.User"
    "Stats\"&\n\013GlobalStats\022\027\n\017notional_traded\030"
    "\001 \001(\004\";\n\tUserStats\022\026\n\016taker_notional\030\001 \001"
    "(\004\022\026\n\016maker_notional\030\002 \001(\004B9Z7github.com"
    "/dydxprotocol/v4-chain/protocol/x/stats/"
    "typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fstats_2fstats_2eproto = {
    false,
    false,
    653,
    descriptor_table_protodef_dydxprotocol_2fstats_2fstats_2eproto,
    "dydxprotocol/stats/stats.proto",
    &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
    descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fstats_2fstats_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fstats_2fstats_2eproto,
    file_level_service_descriptors_dydxprotocol_2fstats_2fstats_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fstats_2fstats_2eproto(&descriptor_table_dydxprotocol_2fstats_2fstats_2eproto);
namespace dydxprotocol {
namespace stats {
// ===================================================================

class BlockStats_Fill::_Internal {
 public:
};

BlockStats_Fill::BlockStats_Fill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.BlockStats.Fill)
}
BlockStats_Fill::BlockStats_Fill(const BlockStats_Fill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockStats_Fill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.taker_) {}

    , decltype(_impl_.maker_) {}

    , decltype(_impl_.notional_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.taker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_taker().empty()) {
    _this->_impl_.taker_.Set(from._internal_taker(), _this->GetArenaForAllocation());
  }
  _impl_.maker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maker().empty()) {
    _this->_impl_.maker_.Set(from._internal_maker(), _this->GetArenaForAllocation());
  }
  _this->_impl_.notional_ = from._impl_.notional_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.BlockStats.Fill)
}

inline void BlockStats_Fill::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.taker_) {}

    , decltype(_impl_.maker_) {}

    , decltype(_impl_.notional_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.taker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.taker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.maker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockStats_Fill::~BlockStats_Fill() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.BlockStats.Fill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockStats_Fill::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.taker_.Destroy();
  _impl_.maker_.Destroy();
}

void BlockStats_Fill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockStats_Fill::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.BlockStats.Fill)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.taker_.ClearToEmpty();
  _impl_.maker_.ClearToEmpty();
  _impl_.notional_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockStats_Fill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string taker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_taker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.stats.BlockStats.Fill.taker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string maker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_maker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.stats.BlockStats.Fill.maker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 notional = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.notional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockStats_Fill::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.BlockStats.Fill)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string taker = 1;
  if (!this->_internal_taker().empty()) {
    const std::string& _s = this->_internal_taker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.stats.BlockStats.Fill.taker");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string maker = 2;
  if (!this->_internal_maker().empty()) {
    const std::string& _s = this->_internal_maker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.stats.BlockStats.Fill.maker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 notional = 3;
  if (this->_internal_notional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_notional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.BlockStats.Fill)
  return target;
}

::size_t BlockStats_Fill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.BlockStats.Fill)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string taker = 1;
  if (!this->_internal_taker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_taker());
  }

  // string maker = 2;
  if (!this->_internal_maker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_maker());
  }

  // uint64 notional = 3;
  if (this->_internal_notional() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_notional());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockStats_Fill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockStats_Fill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockStats_Fill::GetClassData() const { return &_class_data_; }


void BlockStats_Fill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockStats_Fill*>(&to_msg);
  auto& from = static_cast<const BlockStats_Fill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.BlockStats.Fill)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_taker().empty()) {
    _this->_internal_set_taker(from._internal_taker());
  }
  if (!from._internal_maker().empty()) {
    _this->_internal_set_maker(from._internal_maker());
  }
  if (from._internal_notional() != 0) {
    _this->_internal_set_notional(from._internal_notional());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockStats_Fill::CopyFrom(const BlockStats_Fill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.BlockStats.Fill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStats_Fill::IsInitialized() const {
  return true;
}

void BlockStats_Fill::InternalSwap(BlockStats_Fill* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.taker_, lhs_arena,
                                       &other->_impl_.taker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.maker_, lhs_arena,
                                       &other->_impl_.maker_, rhs_arena);

  swap(_impl_.notional_, other->_impl_.notional_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockStats_Fill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[0]);
}
// ===================================================================

class BlockStats::_Internal {
 public:
};

BlockStats::BlockStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.BlockStats)
}
BlockStats::BlockStats(const BlockStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){from._impl_.fills_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.BlockStats)
}

inline void BlockStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fills_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BlockStats::~BlockStats() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.BlockStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_fills()->~RepeatedPtrField();
}

void BlockStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.BlockStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fills()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.stats.BlockStats.Fill fills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.BlockStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.stats.BlockStats.Fill fills = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fills_size()); i < n; i++) {
    const auto& repfield = this->_internal_fills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.BlockStats)
  return target;
}

::size_t BlockStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.BlockStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.stats.BlockStats.Fill fills = 1;
  total_size += 1UL * this->_internal_fills_size();
  for (const auto& msg : this->_internal_fills()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockStats::GetClassData() const { return &_class_data_; }


void BlockStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockStats*>(&to_msg);
  auto& from = static_cast<const BlockStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.BlockStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fills()->MergeFrom(from._internal_fills());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockStats::CopyFrom(const BlockStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.BlockStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStats::IsInitialized() const {
  return true;
}

void BlockStats::InternalSwap(BlockStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_fills()->InternalSwap(other->_internal_mutable_fills());
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[1]);
}
// ===================================================================

class StatsMetadata::_Internal {
 public:
};

StatsMetadata::StatsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.StatsMetadata)
}
StatsMetadata::StatsMetadata(const StatsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.StatsMetadata)
}

inline void StatsMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.trailing_epoch_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatsMetadata::~StatsMetadata() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.StatsMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatsMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatsMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.StatsMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trailing_epoch_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatsMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 trailing_epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.trailing_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StatsMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.StatsMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 trailing_epoch = 1;
  if (this->_internal_trailing_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_trailing_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.StatsMetadata)
  return target;
}

::size_t StatsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.StatsMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 trailing_epoch = 1;
  if (this->_internal_trailing_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_trailing_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatsMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatsMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatsMetadata::GetClassData() const { return &_class_data_; }


void StatsMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatsMetadata*>(&to_msg);
  auto& from = static_cast<const StatsMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.StatsMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trailing_epoch() != 0) {
    _this->_internal_set_trailing_epoch(from._internal_trailing_epoch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatsMetadata::CopyFrom(const StatsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.StatsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsMetadata::IsInitialized() const {
  return true;
}

void StatsMetadata::InternalSwap(StatsMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.trailing_epoch_, other->_impl_.trailing_epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[2]);
}
// ===================================================================

class EpochStats_UserWithStats::_Internal {
 public:
  using HasBits = decltype(std::declval<EpochStats_UserWithStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EpochStats_UserWithStats, _impl_._has_bits_);
  static const ::dydxprotocol::stats::UserStats& stats(const EpochStats_UserWithStats* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::stats::UserStats&
EpochStats_UserWithStats::_Internal::stats(const EpochStats_UserWithStats* msg) {
  return *msg->_impl_.stats_;
}
EpochStats_UserWithStats::EpochStats_UserWithStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.EpochStats.UserWithStats)
}
EpochStats_UserWithStats::EpochStats_UserWithStats(const EpochStats_UserWithStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EpochStats_UserWithStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_) {}

    , decltype(_impl_.stats_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.stats_ = new ::dydxprotocol::stats::UserStats(*from._impl_.stats_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.EpochStats.UserWithStats)
}

inline void EpochStats_UserWithStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_) {}

    , decltype(_impl_.stats_){nullptr}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EpochStats_UserWithStats::~EpochStats_UserWithStats() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.EpochStats.UserWithStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EpochStats_UserWithStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void EpochStats_UserWithStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EpochStats_UserWithStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.EpochStats.UserWithStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.stats_ != nullptr);
    _impl_.stats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochStats_UserWithStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.stats.EpochStats.UserWithStats.user"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.stats.UserStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EpochStats_UserWithStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.EpochStats.UserWithStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    const std::string& _s = this->_internal_user();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.stats.EpochStats.UserWithStats.user");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.stats.UserStats stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.EpochStats.UserWithStats)
  return target;
}

::size_t EpochStats_UserWithStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.EpochStats.UserWithStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user());
  }

  // .dydxprotocol.stats.UserStats stats = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpochStats_UserWithStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EpochStats_UserWithStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpochStats_UserWithStats::GetClassData() const { return &_class_data_; }


void EpochStats_UserWithStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EpochStats_UserWithStats*>(&to_msg);
  auto& from = static_cast<const EpochStats_UserWithStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.EpochStats.UserWithStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_stats()->::dydxprotocol::stats::UserStats::MergeFrom(
        from._internal_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EpochStats_UserWithStats::CopyFrom(const EpochStats_UserWithStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.EpochStats.UserWithStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochStats_UserWithStats::IsInitialized() const {
  return true;
}

void EpochStats_UserWithStats::InternalSwap(EpochStats_UserWithStats* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, lhs_arena,
                                       &other->_impl_.user_, rhs_arena);
  swap(_impl_.stats_, other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochStats_UserWithStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[3]);
}
// ===================================================================

class EpochStats::_Internal {
 public:
  using HasBits = decltype(std::declval<EpochStats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EpochStats, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& epoch_end_time(const EpochStats* msg);
  static void set_has_epoch_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EpochStats::_Internal::epoch_end_time(const EpochStats* msg) {
  return *msg->_impl_.epoch_end_time_;
}
void EpochStats::clear_epoch_end_time() {
  if (_impl_.epoch_end_time_ != nullptr) _impl_.epoch_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EpochStats::EpochStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.EpochStats)
}
EpochStats::EpochStats(const EpochStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EpochStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.epoch_end_time_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.epoch_end_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.epoch_end_time_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.EpochStats)
}

inline void EpochStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.epoch_end_time_){nullptr}
  };
}

EpochStats::~EpochStats() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.EpochStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EpochStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_stats()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.epoch_end_time_;
}

void EpochStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EpochStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.EpochStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_stats()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.epoch_end_time_ != nullptr);
    _impl_.epoch_end_time_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp epoch_end_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.stats.EpochStats.UserWithStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EpochStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.EpochStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp epoch_end_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::epoch_end_time(this),
        _Internal::epoch_end_time(this).GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.stats.EpochStats.UserWithStats stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.EpochStats)
  return target;
}

::size_t EpochStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.EpochStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.stats.EpochStats.UserWithStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_internal_stats()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp epoch_end_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.epoch_end_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpochStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EpochStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpochStats::GetClassData() const { return &_class_data_; }


void EpochStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EpochStats*>(&to_msg);
  auto& from = static_cast<const EpochStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.EpochStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_stats()->MergeFrom(from._internal_stats());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_epoch_end_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_epoch_end_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EpochStats::CopyFrom(const EpochStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.EpochStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochStats::IsInitialized() const {
  return true;
}

void EpochStats::InternalSwap(EpochStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_stats()->InternalSwap(other->_internal_mutable_stats());
  swap(_impl_.epoch_end_time_, other->_impl_.epoch_end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[4]);
}
// ===================================================================

class GlobalStats::_Internal {
 public:
};

GlobalStats::GlobalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.GlobalStats)
}
GlobalStats::GlobalStats(const GlobalStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.GlobalStats)
}

inline void GlobalStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.notional_traded_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GlobalStats::~GlobalStats() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.GlobalStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GlobalStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GlobalStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GlobalStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.GlobalStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notional_traded_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobalStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 notional_traded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.notional_traded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GlobalStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.GlobalStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 notional_traded = 1;
  if (this->_internal_notional_traded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_notional_traded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.GlobalStats)
  return target;
}

::size_t GlobalStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.GlobalStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 notional_traded = 1;
  if (this->_internal_notional_traded() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_notional_traded());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GlobalStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GlobalStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GlobalStats::GetClassData() const { return &_class_data_; }


void GlobalStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GlobalStats*>(&to_msg);
  auto& from = static_cast<const GlobalStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.GlobalStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_notional_traded() != 0) {
    _this->_internal_set_notional_traded(from._internal_notional_traded());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GlobalStats::CopyFrom(const GlobalStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.GlobalStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalStats::IsInitialized() const {
  return true;
}

void GlobalStats::InternalSwap(GlobalStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.notional_traded_, other->_impl_.notional_traded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobalStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[5]);
}
// ===================================================================

class UserStats::_Internal {
 public:
};

UserStats::UserStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.stats.UserStats)
}
UserStats::UserStats(const UserStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.stats.UserStats)
}

inline void UserStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.taker_notional_) { ::uint64_t{0u} }

    , decltype(_impl_.maker_notional_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserStats::~UserStats() {
  // @@protoc_insertion_point(destructor:dydxprotocol.stats.UserStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.stats.UserStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.taker_notional_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.maker_notional_) -
      reinterpret_cast<char*>(&_impl_.taker_notional_)) + sizeof(_impl_.maker_notional_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 taker_notional = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.taker_notional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 maker_notional = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.maker_notional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.stats.UserStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 taker_notional = 1;
  if (this->_internal_taker_notional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_taker_notional(), target);
  }

  // uint64 maker_notional = 2;
  if (this->_internal_maker_notional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_maker_notional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.stats.UserStats)
  return target;
}

::size_t UserStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.stats.UserStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 taker_notional = 1;
  if (this->_internal_taker_notional() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_taker_notional());
  }

  // uint64 maker_notional = 2;
  if (this->_internal_maker_notional() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_maker_notional());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserStats::GetClassData() const { return &_class_data_; }


void UserStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserStats*>(&to_msg);
  auto& from = static_cast<const UserStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.stats.UserStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_taker_notional() != 0) {
    _this->_internal_set_taker_notional(from._internal_taker_notional());
  }
  if (from._internal_maker_notional() != 0) {
    _this->_internal_set_maker_notional(from._internal_maker_notional());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserStats::CopyFrom(const UserStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.stats.UserStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStats::IsInitialized() const {
  return true;
}

void UserStats::InternalSwap(UserStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserStats, _impl_.maker_notional_)
      + sizeof(UserStats::_impl_.maker_notional_)
      - PROTOBUF_FIELD_OFFSET(UserStats, _impl_.taker_notional_)>(
          reinterpret_cast<char*>(&_impl_.taker_notional_),
          reinterpret_cast<char*>(&other->_impl_.taker_notional_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UserStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_getter, &descriptor_table_dydxprotocol_2fstats_2fstats_2eproto_once,
      file_level_metadata_dydxprotocol_2fstats_2fstats_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace stats
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::BlockStats_Fill*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::BlockStats_Fill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::BlockStats_Fill >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::BlockStats*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::BlockStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::BlockStats >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::StatsMetadata*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::StatsMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::StatsMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::EpochStats_UserWithStats*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::EpochStats_UserWithStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::EpochStats_UserWithStats >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::EpochStats*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::EpochStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::EpochStats >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::GlobalStats*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::GlobalStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::GlobalStats >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::stats::UserStats*
Arena::CreateMaybeMessage< ::dydxprotocol::stats::UserStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::stats::UserStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
