// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/stats/stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fstats_2fstats_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fstats_2fstats_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fstats_2fstats_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fstats_2fstats_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fstats_2fstats_2eproto;
namespace dydxprotocol {
namespace stats {
class BlockStats;
struct BlockStatsDefaultTypeInternal;
extern BlockStatsDefaultTypeInternal _BlockStats_default_instance_;
class BlockStats_Fill;
struct BlockStats_FillDefaultTypeInternal;
extern BlockStats_FillDefaultTypeInternal _BlockStats_Fill_default_instance_;
class EpochStats;
struct EpochStatsDefaultTypeInternal;
extern EpochStatsDefaultTypeInternal _EpochStats_default_instance_;
class EpochStats_UserWithStats;
struct EpochStats_UserWithStatsDefaultTypeInternal;
extern EpochStats_UserWithStatsDefaultTypeInternal _EpochStats_UserWithStats_default_instance_;
class GlobalStats;
struct GlobalStatsDefaultTypeInternal;
extern GlobalStatsDefaultTypeInternal _GlobalStats_default_instance_;
class StatsMetadata;
struct StatsMetadataDefaultTypeInternal;
extern StatsMetadataDefaultTypeInternal _StatsMetadata_default_instance_;
class UserStats;
struct UserStatsDefaultTypeInternal;
extern UserStatsDefaultTypeInternal _UserStats_default_instance_;
}  // namespace stats
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::stats::BlockStats* Arena::CreateMaybeMessage<::dydxprotocol::stats::BlockStats>(Arena*);
template <>
::dydxprotocol::stats::BlockStats_Fill* Arena::CreateMaybeMessage<::dydxprotocol::stats::BlockStats_Fill>(Arena*);
template <>
::dydxprotocol::stats::EpochStats* Arena::CreateMaybeMessage<::dydxprotocol::stats::EpochStats>(Arena*);
template <>
::dydxprotocol::stats::EpochStats_UserWithStats* Arena::CreateMaybeMessage<::dydxprotocol::stats::EpochStats_UserWithStats>(Arena*);
template <>
::dydxprotocol::stats::GlobalStats* Arena::CreateMaybeMessage<::dydxprotocol::stats::GlobalStats>(Arena*);
template <>
::dydxprotocol::stats::StatsMetadata* Arena::CreateMaybeMessage<::dydxprotocol::stats::StatsMetadata>(Arena*);
template <>
::dydxprotocol::stats::UserStats* Arena::CreateMaybeMessage<::dydxprotocol::stats::UserStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace stats {

// ===================================================================


// -------------------------------------------------------------------

class BlockStats_Fill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.BlockStats.Fill) */ {
 public:
  inline BlockStats_Fill() : BlockStats_Fill(nullptr) {}
  ~BlockStats_Fill() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockStats_Fill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockStats_Fill(const BlockStats_Fill& from);
  BlockStats_Fill(BlockStats_Fill&& from) noexcept
    : BlockStats_Fill() {
    *this = ::std::move(from);
  }

  inline BlockStats_Fill& operator=(const BlockStats_Fill& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockStats_Fill& operator=(BlockStats_Fill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockStats_Fill& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockStats_Fill* internal_default_instance() {
    return reinterpret_cast<const BlockStats_Fill*>(
               &_BlockStats_Fill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockStats_Fill& a, BlockStats_Fill& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockStats_Fill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockStats_Fill* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockStats_Fill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockStats_Fill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockStats_Fill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockStats_Fill& from) {
    BlockStats_Fill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockStats_Fill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.BlockStats.Fill";
  }
  protected:
  explicit BlockStats_Fill(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTakerFieldNumber = 1,
    kMakerFieldNumber = 2,
    kNotionalFieldNumber = 3,
  };
  // string taker = 1;
  void clear_taker() ;
  const std::string& taker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_taker(Arg_&& arg, Args_... args);
  std::string* mutable_taker();
  PROTOBUF_NODISCARD std::string* release_taker();
  void set_allocated_taker(std::string* ptr);

  private:
  const std::string& _internal_taker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_taker(
      const std::string& value);
  std::string* _internal_mutable_taker();

  public:
  // string maker = 2;
  void clear_maker() ;
  const std::string& maker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_maker(Arg_&& arg, Args_... args);
  std::string* mutable_maker();
  PROTOBUF_NODISCARD std::string* release_maker();
  void set_allocated_maker(std::string* ptr);

  private:
  const std::string& _internal_maker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maker(
      const std::string& value);
  std::string* _internal_mutable_maker();

  public:
  // uint64 notional = 3;
  void clear_notional() ;
  ::uint64_t notional() const;
  void set_notional(::uint64_t value);

  private:
  ::uint64_t _internal_notional() const;
  void _internal_set_notional(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.BlockStats.Fill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taker_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maker_;
    ::uint64_t notional_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};// -------------------------------------------------------------------

class BlockStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.BlockStats) */ {
 public:
  inline BlockStats() : BlockStats(nullptr) {}
  ~BlockStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockStats(const BlockStats& from);
  BlockStats(BlockStats&& from) noexcept
    : BlockStats() {
    *this = ::std::move(from);
  }

  inline BlockStats& operator=(const BlockStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockStats& operator=(BlockStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockStats* internal_default_instance() {
    return reinterpret_cast<const BlockStats*>(
               &_BlockStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockStats& a, BlockStats& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockStats& from) {
    BlockStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.BlockStats";
  }
  protected:
  explicit BlockStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BlockStats_Fill Fill;

  // accessors -------------------------------------------------------

  enum : int {
    kFillsFieldNumber = 1,
  };
  // repeated .dydxprotocol.stats.BlockStats.Fill fills = 1;
  int fills_size() const;
  private:
  int _internal_fills_size() const;

  public:
  void clear_fills() ;
  ::dydxprotocol::stats::BlockStats_Fill* mutable_fills(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::BlockStats_Fill >*
      mutable_fills();
  private:
  const ::dydxprotocol::stats::BlockStats_Fill& _internal_fills(int index) const;
  ::dydxprotocol::stats::BlockStats_Fill* _internal_add_fills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::BlockStats_Fill>& _internal_fills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::BlockStats_Fill>* _internal_mutable_fills();
  public:
  const ::dydxprotocol::stats::BlockStats_Fill& fills(int index) const;
  ::dydxprotocol::stats::BlockStats_Fill* add_fills();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::BlockStats_Fill >&
      fills() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.BlockStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::BlockStats_Fill > fills_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};// -------------------------------------------------------------------

class StatsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.StatsMetadata) */ {
 public:
  inline StatsMetadata() : StatsMetadata(nullptr) {}
  ~StatsMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatsMetadata(const StatsMetadata& from);
  StatsMetadata(StatsMetadata&& from) noexcept
    : StatsMetadata() {
    *this = ::std::move(from);
  }

  inline StatsMetadata& operator=(const StatsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsMetadata& operator=(StatsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatsMetadata* internal_default_instance() {
    return reinterpret_cast<const StatsMetadata*>(
               &_StatsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatsMetadata& a, StatsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatsMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatsMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatsMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatsMetadata& from) {
    StatsMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.StatsMetadata";
  }
  protected:
  explicit StatsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrailingEpochFieldNumber = 1,
  };
  // uint32 trailing_epoch = 1;
  void clear_trailing_epoch() ;
  ::uint32_t trailing_epoch() const;
  void set_trailing_epoch(::uint32_t value);

  private:
  ::uint32_t _internal_trailing_epoch() const;
  void _internal_set_trailing_epoch(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.StatsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t trailing_epoch_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};// -------------------------------------------------------------------

class EpochStats_UserWithStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.EpochStats.UserWithStats) */ {
 public:
  inline EpochStats_UserWithStats() : EpochStats_UserWithStats(nullptr) {}
  ~EpochStats_UserWithStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EpochStats_UserWithStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpochStats_UserWithStats(const EpochStats_UserWithStats& from);
  EpochStats_UserWithStats(EpochStats_UserWithStats&& from) noexcept
    : EpochStats_UserWithStats() {
    *this = ::std::move(from);
  }

  inline EpochStats_UserWithStats& operator=(const EpochStats_UserWithStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochStats_UserWithStats& operator=(EpochStats_UserWithStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpochStats_UserWithStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpochStats_UserWithStats* internal_default_instance() {
    return reinterpret_cast<const EpochStats_UserWithStats*>(
               &_EpochStats_UserWithStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EpochStats_UserWithStats& a, EpochStats_UserWithStats& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochStats_UserWithStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochStats_UserWithStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpochStats_UserWithStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpochStats_UserWithStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EpochStats_UserWithStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EpochStats_UserWithStats& from) {
    EpochStats_UserWithStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochStats_UserWithStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.EpochStats.UserWithStats";
  }
  protected:
  explicit EpochStats_UserWithStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kStatsFieldNumber = 2,
  };
  // string user = 1;
  void clear_user() ;
  const std::string& user() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* ptr);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // .dydxprotocol.stats.UserStats stats = 2;
  bool has_stats() const;
  void clear_stats() ;
  const ::dydxprotocol::stats::UserStats& stats() const;
  PROTOBUF_NODISCARD ::dydxprotocol::stats::UserStats* release_stats();
  ::dydxprotocol::stats::UserStats* mutable_stats();
  void set_allocated_stats(::dydxprotocol::stats::UserStats* stats);
  private:
  const ::dydxprotocol::stats::UserStats& _internal_stats() const;
  ::dydxprotocol::stats::UserStats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::dydxprotocol::stats::UserStats* stats);
  ::dydxprotocol::stats::UserStats* unsafe_arena_release_stats();
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.EpochStats.UserWithStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    ::dydxprotocol::stats::UserStats* stats_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};// -------------------------------------------------------------------

class EpochStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.EpochStats) */ {
 public:
  inline EpochStats() : EpochStats(nullptr) {}
  ~EpochStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EpochStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpochStats(const EpochStats& from);
  EpochStats(EpochStats&& from) noexcept
    : EpochStats() {
    *this = ::std::move(from);
  }

  inline EpochStats& operator=(const EpochStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpochStats& operator=(EpochStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpochStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpochStats* internal_default_instance() {
    return reinterpret_cast<const EpochStats*>(
               &_EpochStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EpochStats& a, EpochStats& b) {
    a.Swap(&b);
  }
  inline void Swap(EpochStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpochStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpochStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpochStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EpochStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EpochStats& from) {
    EpochStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpochStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.EpochStats";
  }
  protected:
  explicit EpochStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EpochStats_UserWithStats UserWithStats;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kEpochEndTimeFieldNumber = 1,
  };
  // repeated .dydxprotocol.stats.EpochStats.UserWithStats stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;

  public:
  void clear_stats() ;
  ::dydxprotocol::stats::EpochStats_UserWithStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::EpochStats_UserWithStats >*
      mutable_stats();
  private:
  const ::dydxprotocol::stats::EpochStats_UserWithStats& _internal_stats(int index) const;
  ::dydxprotocol::stats::EpochStats_UserWithStats* _internal_add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::EpochStats_UserWithStats>& _internal_stats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::EpochStats_UserWithStats>* _internal_mutable_stats();
  public:
  const ::dydxprotocol::stats::EpochStats_UserWithStats& stats(int index) const;
  ::dydxprotocol::stats::EpochStats_UserWithStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::EpochStats_UserWithStats >&
      stats() const;
  // .google.protobuf.Timestamp epoch_end_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_epoch_end_time() const;
  void clear_epoch_end_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& epoch_end_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_epoch_end_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_epoch_end_time();
  void set_allocated_epoch_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* epoch_end_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_epoch_end_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_epoch_end_time();
  public:
  void unsafe_arena_set_allocated_epoch_end_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* epoch_end_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_epoch_end_time();
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.EpochStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::EpochStats_UserWithStats > stats_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* epoch_end_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};// -------------------------------------------------------------------

class GlobalStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.GlobalStats) */ {
 public:
  inline GlobalStats() : GlobalStats(nullptr) {}
  ~GlobalStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GlobalStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobalStats(const GlobalStats& from);
  GlobalStats(GlobalStats&& from) noexcept
    : GlobalStats() {
    *this = ::std::move(from);
  }

  inline GlobalStats& operator=(const GlobalStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobalStats& operator=(GlobalStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GlobalStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobalStats* internal_default_instance() {
    return reinterpret_cast<const GlobalStats*>(
               &_GlobalStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GlobalStats& a, GlobalStats& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobalStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobalStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GlobalStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GlobalStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GlobalStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GlobalStats& from) {
    GlobalStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobalStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.GlobalStats";
  }
  protected:
  explicit GlobalStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotionalTradedFieldNumber = 1,
  };
  // uint64 notional_traded = 1;
  void clear_notional_traded() ;
  ::uint64_t notional_traded() const;
  void set_notional_traded(::uint64_t value);

  private:
  ::uint64_t _internal_notional_traded() const;
  void _internal_set_notional_traded(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.GlobalStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t notional_traded_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};// -------------------------------------------------------------------

class UserStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.stats.UserStats) */ {
 public:
  inline UserStats() : UserStats(nullptr) {}
  ~UserStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UserStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserStats(const UserStats& from);
  UserStats(UserStats&& from) noexcept
    : UserStats() {
    *this = ::std::move(from);
  }

  inline UserStats& operator=(const UserStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserStats& operator=(UserStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserStats* internal_default_instance() {
    return reinterpret_cast<const UserStats*>(
               &_UserStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserStats& a, UserStats& b) {
    a.Swap(&b);
  }
  inline void Swap(UserStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserStats& from) {
    UserStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.stats.UserStats";
  }
  protected:
  explicit UserStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTakerNotionalFieldNumber = 1,
    kMakerNotionalFieldNumber = 2,
  };
  // uint64 taker_notional = 1;
  void clear_taker_notional() ;
  ::uint64_t taker_notional() const;
  void set_taker_notional(::uint64_t value);

  private:
  ::uint64_t _internal_taker_notional() const;
  void _internal_set_taker_notional(::uint64_t value);

  public:
  // uint64 maker_notional = 2;
  void clear_maker_notional() ;
  ::uint64_t maker_notional() const;
  void set_maker_notional(::uint64_t value);

  private:
  ::uint64_t _internal_maker_notional() const;
  void _internal_set_maker_notional(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.stats.UserStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t taker_notional_;
    ::uint64_t maker_notional_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fstats_2fstats_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BlockStats_Fill

// string taker = 1;
inline void BlockStats_Fill::clear_taker() {
  _impl_.taker_.ClearToEmpty();
}
inline const std::string& BlockStats_Fill::taker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.BlockStats.Fill.taker)
  return _internal_taker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockStats_Fill::set_taker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.taker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.BlockStats.Fill.taker)
}
inline std::string* BlockStats_Fill::mutable_taker() {
  std::string* _s = _internal_mutable_taker();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.BlockStats.Fill.taker)
  return _s;
}
inline const std::string& BlockStats_Fill::_internal_taker() const {
  return _impl_.taker_.Get();
}
inline void BlockStats_Fill::_internal_set_taker(const std::string& value) {
  ;


  _impl_.taker_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockStats_Fill::_internal_mutable_taker() {
  ;
  return _impl_.taker_.Mutable( GetArenaForAllocation());
}
inline std::string* BlockStats_Fill::release_taker() {
  // @@protoc_insertion_point(field_release:dydxprotocol.stats.BlockStats.Fill.taker)
  return _impl_.taker_.Release();
}
inline void BlockStats_Fill::set_allocated_taker(std::string* value) {
  _impl_.taker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.taker_.IsDefault()) {
          _impl_.taker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.stats.BlockStats.Fill.taker)
}

// string maker = 2;
inline void BlockStats_Fill::clear_maker() {
  _impl_.maker_.ClearToEmpty();
}
inline const std::string& BlockStats_Fill::maker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.BlockStats.Fill.maker)
  return _internal_maker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockStats_Fill::set_maker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.maker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.BlockStats.Fill.maker)
}
inline std::string* BlockStats_Fill::mutable_maker() {
  std::string* _s = _internal_mutable_maker();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.BlockStats.Fill.maker)
  return _s;
}
inline const std::string& BlockStats_Fill::_internal_maker() const {
  return _impl_.maker_.Get();
}
inline void BlockStats_Fill::_internal_set_maker(const std::string& value) {
  ;


  _impl_.maker_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockStats_Fill::_internal_mutable_maker() {
  ;
  return _impl_.maker_.Mutable( GetArenaForAllocation());
}
inline std::string* BlockStats_Fill::release_maker() {
  // @@protoc_insertion_point(field_release:dydxprotocol.stats.BlockStats.Fill.maker)
  return _impl_.maker_.Release();
}
inline void BlockStats_Fill::set_allocated_maker(std::string* value) {
  _impl_.maker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.maker_.IsDefault()) {
          _impl_.maker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.stats.BlockStats.Fill.maker)
}

// uint64 notional = 3;
inline void BlockStats_Fill::clear_notional() {
  _impl_.notional_ = ::uint64_t{0u};
}
inline ::uint64_t BlockStats_Fill::notional() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.BlockStats.Fill.notional)
  return _internal_notional();
}
inline void BlockStats_Fill::set_notional(::uint64_t value) {
  _internal_set_notional(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.BlockStats.Fill.notional)
}
inline ::uint64_t BlockStats_Fill::_internal_notional() const {
  return _impl_.notional_;
}
inline void BlockStats_Fill::_internal_set_notional(::uint64_t value) {
  ;
  _impl_.notional_ = value;
}

// -------------------------------------------------------------------

// BlockStats

// repeated .dydxprotocol.stats.BlockStats.Fill fills = 1;
inline int BlockStats::_internal_fills_size() const {
  return _impl_.fills_.size();
}
inline int BlockStats::fills_size() const {
  return _internal_fills_size();
}
inline void BlockStats::clear_fills() {
  _internal_mutable_fills()->Clear();
}
inline ::dydxprotocol::stats::BlockStats_Fill* BlockStats::mutable_fills(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.BlockStats.fills)
  return _internal_mutable_fills()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::BlockStats_Fill >*
BlockStats::mutable_fills() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.stats.BlockStats.fills)
  return _internal_mutable_fills();
}
inline const ::dydxprotocol::stats::BlockStats_Fill& BlockStats::_internal_fills(int index) const {
  return _internal_fills().Get(index);
}
inline const ::dydxprotocol::stats::BlockStats_Fill& BlockStats::fills(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.BlockStats.fills)
  return _internal_fills(index);
}
inline ::dydxprotocol::stats::BlockStats_Fill* BlockStats::_internal_add_fills() {
  return _internal_mutable_fills()->Add();
}
inline ::dydxprotocol::stats::BlockStats_Fill* BlockStats::add_fills() {
  ::dydxprotocol::stats::BlockStats_Fill* _add = _internal_add_fills();
  // @@protoc_insertion_point(field_add:dydxprotocol.stats.BlockStats.fills)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::BlockStats_Fill >&
BlockStats::fills() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.stats.BlockStats.fills)
  return _internal_fills();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::BlockStats_Fill>&
BlockStats::_internal_fills() const {
  return _impl_.fills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::BlockStats_Fill>*
BlockStats::_internal_mutable_fills() {
  return &_impl_.fills_;
}

// -------------------------------------------------------------------

// StatsMetadata

// uint32 trailing_epoch = 1;
inline void StatsMetadata::clear_trailing_epoch() {
  _impl_.trailing_epoch_ = 0u;
}
inline ::uint32_t StatsMetadata::trailing_epoch() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.StatsMetadata.trailing_epoch)
  return _internal_trailing_epoch();
}
inline void StatsMetadata::set_trailing_epoch(::uint32_t value) {
  _internal_set_trailing_epoch(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.StatsMetadata.trailing_epoch)
}
inline ::uint32_t StatsMetadata::_internal_trailing_epoch() const {
  return _impl_.trailing_epoch_;
}
inline void StatsMetadata::_internal_set_trailing_epoch(::uint32_t value) {
  ;
  _impl_.trailing_epoch_ = value;
}

// -------------------------------------------------------------------

// EpochStats_UserWithStats

// string user = 1;
inline void EpochStats_UserWithStats::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& EpochStats_UserWithStats::user() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.EpochStats.UserWithStats.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EpochStats_UserWithStats::set_user(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.EpochStats.UserWithStats.user)
}
inline std::string* EpochStats_UserWithStats::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.EpochStats.UserWithStats.user)
  return _s;
}
inline const std::string& EpochStats_UserWithStats::_internal_user() const {
  return _impl_.user_.Get();
}
inline void EpochStats_UserWithStats::_internal_set_user(const std::string& value) {
  ;


  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* EpochStats_UserWithStats::_internal_mutable_user() {
  ;
  return _impl_.user_.Mutable( GetArenaForAllocation());
}
inline std::string* EpochStats_UserWithStats::release_user() {
  // @@protoc_insertion_point(field_release:dydxprotocol.stats.EpochStats.UserWithStats.user)
  return _impl_.user_.Release();
}
inline void EpochStats_UserWithStats::set_allocated_user(std::string* value) {
  _impl_.user_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.stats.EpochStats.UserWithStats.user)
}

// .dydxprotocol.stats.UserStats stats = 2;
inline bool EpochStats_UserWithStats::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void EpochStats_UserWithStats::clear_stats() {
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::stats::UserStats& EpochStats_UserWithStats::_internal_stats() const {
  const ::dydxprotocol::stats::UserStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::stats::UserStats&>(
      ::dydxprotocol::stats::_UserStats_default_instance_);
}
inline const ::dydxprotocol::stats::UserStats& EpochStats_UserWithStats::stats() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.EpochStats.UserWithStats.stats)
  return _internal_stats();
}
inline void EpochStats_UserWithStats::unsafe_arena_set_allocated_stats(
    ::dydxprotocol::stats::UserStats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.stats.EpochStats.UserWithStats.stats)
}
inline ::dydxprotocol::stats::UserStats* EpochStats_UserWithStats::release_stats() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::stats::UserStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::stats::UserStats* EpochStats_UserWithStats::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:dydxprotocol.stats.EpochStats.UserWithStats.stats)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::stats::UserStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::dydxprotocol::stats::UserStats* EpochStats_UserWithStats::_internal_mutable_stats() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::stats::UserStats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::dydxprotocol::stats::UserStats* EpochStats_UserWithStats::mutable_stats() {
  ::dydxprotocol::stats::UserStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.EpochStats.UserWithStats.stats)
  return _msg;
}
inline void EpochStats_UserWithStats::set_allocated_stats(::dydxprotocol::stats::UserStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.stats.EpochStats.UserWithStats.stats)
}

// -------------------------------------------------------------------

// EpochStats

// .google.protobuf.Timestamp epoch_end_time = 1 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool EpochStats::has_epoch_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.epoch_end_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EpochStats::_internal_epoch_end_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.epoch_end_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& EpochStats::epoch_end_time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.EpochStats.epoch_end_time)
  return _internal_epoch_end_time();
}
inline void EpochStats::unsafe_arena_set_allocated_epoch_end_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* epoch_end_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_end_time_);
  }
  _impl_.epoch_end_time_ = epoch_end_time;
  if (epoch_end_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.stats.EpochStats.epoch_end_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EpochStats::release_epoch_end_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.epoch_end_time_;
  _impl_.epoch_end_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EpochStats::unsafe_arena_release_epoch_end_time() {
  // @@protoc_insertion_point(field_release:dydxprotocol.stats.EpochStats.epoch_end_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.epoch_end_time_;
  _impl_.epoch_end_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EpochStats::_internal_mutable_epoch_end_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.epoch_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.epoch_end_time_ = p;
  }
  return _impl_.epoch_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* EpochStats::mutable_epoch_end_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_epoch_end_time();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.EpochStats.epoch_end_time)
  return _msg;
}
inline void EpochStats::set_allocated_epoch_end_time(::PROTOBUF_NAMESPACE_ID::Timestamp* epoch_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_end_time_);
  }
  if (epoch_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_end_time));
    if (message_arena != submessage_arena) {
      epoch_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_end_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.epoch_end_time_ = epoch_end_time;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.stats.EpochStats.epoch_end_time)
}

// repeated .dydxprotocol.stats.EpochStats.UserWithStats stats = 2;
inline int EpochStats::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int EpochStats::stats_size() const {
  return _internal_stats_size();
}
inline void EpochStats::clear_stats() {
  _internal_mutable_stats()->Clear();
}
inline ::dydxprotocol::stats::EpochStats_UserWithStats* EpochStats::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.stats.EpochStats.stats)
  return _internal_mutable_stats()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::EpochStats_UserWithStats >*
EpochStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.stats.EpochStats.stats)
  return _internal_mutable_stats();
}
inline const ::dydxprotocol::stats::EpochStats_UserWithStats& EpochStats::_internal_stats(int index) const {
  return _internal_stats().Get(index);
}
inline const ::dydxprotocol::stats::EpochStats_UserWithStats& EpochStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.EpochStats.stats)
  return _internal_stats(index);
}
inline ::dydxprotocol::stats::EpochStats_UserWithStats* EpochStats::_internal_add_stats() {
  return _internal_mutable_stats()->Add();
}
inline ::dydxprotocol::stats::EpochStats_UserWithStats* EpochStats::add_stats() {
  ::dydxprotocol::stats::EpochStats_UserWithStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:dydxprotocol.stats.EpochStats.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::stats::EpochStats_UserWithStats >&
EpochStats::stats() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.stats.EpochStats.stats)
  return _internal_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::EpochStats_UserWithStats>&
EpochStats::_internal_stats() const {
  return _impl_.stats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::stats::EpochStats_UserWithStats>*
EpochStats::_internal_mutable_stats() {
  return &_impl_.stats_;
}

// -------------------------------------------------------------------

// GlobalStats

// uint64 notional_traded = 1;
inline void GlobalStats::clear_notional_traded() {
  _impl_.notional_traded_ = ::uint64_t{0u};
}
inline ::uint64_t GlobalStats::notional_traded() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.GlobalStats.notional_traded)
  return _internal_notional_traded();
}
inline void GlobalStats::set_notional_traded(::uint64_t value) {
  _internal_set_notional_traded(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.GlobalStats.notional_traded)
}
inline ::uint64_t GlobalStats::_internal_notional_traded() const {
  return _impl_.notional_traded_;
}
inline void GlobalStats::_internal_set_notional_traded(::uint64_t value) {
  ;
  _impl_.notional_traded_ = value;
}

// -------------------------------------------------------------------

// UserStats

// uint64 taker_notional = 1;
inline void UserStats::clear_taker_notional() {
  _impl_.taker_notional_ = ::uint64_t{0u};
}
inline ::uint64_t UserStats::taker_notional() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.UserStats.taker_notional)
  return _internal_taker_notional();
}
inline void UserStats::set_taker_notional(::uint64_t value) {
  _internal_set_taker_notional(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.UserStats.taker_notional)
}
inline ::uint64_t UserStats::_internal_taker_notional() const {
  return _impl_.taker_notional_;
}
inline void UserStats::_internal_set_taker_notional(::uint64_t value) {
  ;
  _impl_.taker_notional_ = value;
}

// uint64 maker_notional = 2;
inline void UserStats::clear_maker_notional() {
  _impl_.maker_notional_ = ::uint64_t{0u};
}
inline ::uint64_t UserStats::maker_notional() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.stats.UserStats.maker_notional)
  return _internal_maker_notional();
}
inline void UserStats::set_maker_notional(::uint64_t value) {
  _internal_set_maker_notional(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.stats.UserStats.maker_notional)
}
inline ::uint64_t UserStats::_internal_maker_notional() const {
  return _impl_.maker_notional_;
}
inline void UserStats::_internal_set_maker_notional(::uint64_t value) {
  ;
  _impl_.maker_notional_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace stats
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fstats_2fstats_2eproto_2epb_2eh
