// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/epochs/query.proto

#include "dydxprotocol/epochs/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace epochs {
template <typename>
PROTOBUF_CONSTEXPR QueryGetEpochInfoRequest::QueryGetEpochInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryGetEpochInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryGetEpochInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryGetEpochInfoRequestDefaultTypeInternal() {}
  union {
    QueryGetEpochInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryGetEpochInfoRequestDefaultTypeInternal _QueryGetEpochInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryEpochInfoResponse::QueryEpochInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.epoch_info_)*/nullptr} {}
struct QueryEpochInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEpochInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEpochInfoResponseDefaultTypeInternal() {}
  union {
    QueryEpochInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEpochInfoResponseDefaultTypeInternal _QueryEpochInfoResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryAllEpochInfoRequest::QueryAllEpochInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryAllEpochInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryAllEpochInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryAllEpochInfoRequestDefaultTypeInternal() {}
  union {
    QueryAllEpochInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryAllEpochInfoRequestDefaultTypeInternal _QueryAllEpochInfoRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryEpochInfoAllResponse::QueryEpochInfoAllResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.epoch_info_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryEpochInfoAllResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryEpochInfoAllResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryEpochInfoAllResponseDefaultTypeInternal() {}
  union {
    QueryEpochInfoAllResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryEpochInfoAllResponseDefaultTypeInternal _QueryEpochInfoAllResponse_default_instance_;
}  // namespace epochs
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fepochs_2fquery_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fepochs_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fepochs_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fepochs_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryGetEpochInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryGetEpochInfoRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoResponse, _impl_.epoch_info_),
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryAllEpochInfoRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryAllEpochInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryAllEpochInfoRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoAllResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoAllResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoAllResponse, _impl_.epoch_info_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::QueryEpochInfoAllResponse, _impl_.pagination_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::epochs::QueryGetEpochInfoRequest)},
        { 9, 18, -1, sizeof(::dydxprotocol::epochs::QueryEpochInfoResponse)},
        { 19, 28, -1, sizeof(::dydxprotocol::epochs::QueryAllEpochInfoRequest)},
        { 29, 39, -1, sizeof(::dydxprotocol::epochs::QueryEpochInfoAllResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::epochs::_QueryGetEpochInfoRequest_default_instance_._instance,
    &::dydxprotocol::epochs::_QueryEpochInfoResponse_default_instance_._instance,
    &::dydxprotocol::epochs::_QueryAllEpochInfoRequest_default_instance_._instance,
    &::dydxprotocol::epochs::_QueryEpochInfoAllResponse_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fepochs_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037dydxprotocol/epochs/query.proto\022\023dydxp"
    "rotocol.epochs\032\024gogoproto/gogo.proto\032\034go"
    "ogle/api/annotations.proto\032*cosmos/base/"
    "query/v1beta1/pagination.proto\032$dydxprot"
    "ocol/epochs/epoch_info.proto\"(\n\030QueryGet"
    "EpochInfoRequest\022\014\n\004name\030\001 \001(\t\"R\n\026QueryE"
    "pochInfoResponse\0228\n\nepoch_info\030\001 \001(\0132\036.d"
    "ydxprotocol.epochs.EpochInfoB\004\310\336\037\000\"V\n\030Qu"
    "eryAllEpochInfoRequest\022:\n\npagination\030\001 \001"
    "(\0132&.cosmos.base.query.v1beta1.PageReque"
    "st\"\222\001\n\031QueryEpochInfoAllResponse\0228\n\nepoc"
    "h_info\030\001 \003(\0132\036.dydxprotocol.epochs.Epoch"
    "InfoB\004\310\336\037\000\022;\n\npagination\030\002 \001(\0132\'.cosmos."
    "base.query.v1beta1.PageResponse2\300\002\n\005Quer"
    "y\022\232\001\n\tEpochInfo\022-.dydxprotocol.epochs.Qu"
    "eryGetEpochInfoRequest\032+.dydxprotocol.ep"
    "ochs.QueryEpochInfoResponse\"1\202\323\344\223\002+\022)/dy"
    "dxprotocol/v4/epochs/epoch_info/{name}\022\231"
    "\001\n\014EpochInfoAll\022-.dydxprotocol.epochs.Qu"
    "eryAllEpochInfoRequest\032..dydxprotocol.ep"
    "ochs.QueryEpochInfoAllResponse\"*\202\323\344\223\002$\022\""
    "/dydxprotocol/v4/epochs/epoch_infoB:Z8gi"
    "thub.com/dydxprotocol/v4-chain/protocol/"
    "x/epochs/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto = {
    false,
    false,
    942,
    descriptor_table_protodef_dydxprotocol_2fepochs_2fquery_2eproto,
    "dydxprotocol/epochs/query.proto",
    &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_once,
    descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fepochs_2fquery_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fepochs_2fquery_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fepochs_2fquery_2eproto,
    file_level_service_descriptors_dydxprotocol_2fepochs_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fepochs_2fquery_2eproto(&descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto);
namespace dydxprotocol {
namespace epochs {
// ===================================================================

class QueryGetEpochInfoRequest::_Internal {
 public:
};

QueryGetEpochInfoRequest::QueryGetEpochInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.epochs.QueryGetEpochInfoRequest)
}
QueryGetEpochInfoRequest::QueryGetEpochInfoRequest(const QueryGetEpochInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryGetEpochInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.epochs.QueryGetEpochInfoRequest)
}

inline void QueryGetEpochInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryGetEpochInfoRequest::~QueryGetEpochInfoRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryGetEpochInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void QueryGetEpochInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryGetEpochInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryGetEpochInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.epochs.QueryGetEpochInfoRequest.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryGetEpochInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.epochs.QueryGetEpochInfoRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  return target;
}

::size_t QueryGetEpochInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryGetEpochInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryGetEpochInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryGetEpochInfoRequest::GetClassData() const { return &_class_data_; }


void QueryGetEpochInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryGetEpochInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryGetEpochInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryGetEpochInfoRequest::CopyFrom(const QueryGetEpochInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.epochs.QueryGetEpochInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGetEpochInfoRequest::IsInitialized() const {
  return true;
}

void QueryGetEpochInfoRequest::InternalSwap(QueryGetEpochInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryGetEpochInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fepochs_2fquery_2eproto[0]);
}
// ===================================================================

class QueryEpochInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryEpochInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryEpochInfoResponse, _impl_._has_bits_);
  static const ::dydxprotocol::epochs::EpochInfo& epoch_info(const QueryEpochInfoResponse* msg);
  static void set_has_epoch_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::epochs::EpochInfo&
QueryEpochInfoResponse::_Internal::epoch_info(const QueryEpochInfoResponse* msg) {
  return *msg->_impl_.epoch_info_;
}
void QueryEpochInfoResponse::clear_epoch_info() {
  if (_impl_.epoch_info_ != nullptr) _impl_.epoch_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryEpochInfoResponse::QueryEpochInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.epochs.QueryEpochInfoResponse)
}
QueryEpochInfoResponse::QueryEpochInfoResponse(const QueryEpochInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryEpochInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epoch_info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.epoch_info_ = new ::dydxprotocol::epochs::EpochInfo(*from._impl_.epoch_info_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.epochs.QueryEpochInfoResponse)
}

inline void QueryEpochInfoResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epoch_info_){nullptr}
  };
}

QueryEpochInfoResponse::~QueryEpochInfoResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.epochs.QueryEpochInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryEpochInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.epoch_info_;
}

void QueryEpochInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryEpochInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.epochs.QueryEpochInfoResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.epoch_info_ != nullptr);
    _impl_.epoch_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryEpochInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryEpochInfoResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.epochs.QueryEpochInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::epoch_info(this),
        _Internal::epoch_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.epochs.QueryEpochInfoResponse)
  return target;
}

::size_t QueryEpochInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.epochs.QueryEpochInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.epoch_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryEpochInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryEpochInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryEpochInfoResponse::GetClassData() const { return &_class_data_; }


void QueryEpochInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryEpochInfoResponse*>(&to_msg);
  auto& from = static_cast<const QueryEpochInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.epochs.QueryEpochInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_epoch_info()->::dydxprotocol::epochs::EpochInfo::MergeFrom(
        from._internal_epoch_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEpochInfoResponse::CopyFrom(const QueryEpochInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.epochs.QueryEpochInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEpochInfoResponse::IsInitialized() const {
  return true;
}

void QueryEpochInfoResponse::InternalSwap(QueryEpochInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.epoch_info_, other->_impl_.epoch_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryEpochInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fepochs_2fquery_2eproto[1]);
}
// ===================================================================

class QueryAllEpochInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryAllEpochInfoRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryAllEpochInfoRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryAllEpochInfoRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryAllEpochInfoRequest::_Internal::pagination(const QueryAllEpochInfoRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryAllEpochInfoRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryAllEpochInfoRequest::QueryAllEpochInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.epochs.QueryAllEpochInfoRequest)
}
QueryAllEpochInfoRequest::QueryAllEpochInfoRequest(const QueryAllEpochInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryAllEpochInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.epochs.QueryAllEpochInfoRequest)
}

inline void QueryAllEpochInfoRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryAllEpochInfoRequest::~QueryAllEpochInfoRequest() {
  // @@protoc_insertion_point(destructor:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryAllEpochInfoRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryAllEpochInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryAllEpochInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryAllEpochInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryAllEpochInfoRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  return target;
}

::size_t QueryAllEpochInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryAllEpochInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryAllEpochInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryAllEpochInfoRequest::GetClassData() const { return &_class_data_; }


void QueryAllEpochInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryAllEpochInfoRequest*>(&to_msg);
  auto& from = static_cast<const QueryAllEpochInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryAllEpochInfoRequest::CopyFrom(const QueryAllEpochInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.epochs.QueryAllEpochInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAllEpochInfoRequest::IsInitialized() const {
  return true;
}

void QueryAllEpochInfoRequest::InternalSwap(QueryAllEpochInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryAllEpochInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fepochs_2fquery_2eproto[2]);
}
// ===================================================================

class QueryEpochInfoAllResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryEpochInfoAllResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryEpochInfoAllResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryEpochInfoAllResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryEpochInfoAllResponse::_Internal::pagination(const QueryEpochInfoAllResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryEpochInfoAllResponse::clear_epoch_info() {
  _internal_mutable_epoch_info()->Clear();
}
void QueryEpochInfoAllResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryEpochInfoAllResponse::QueryEpochInfoAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.epochs.QueryEpochInfoAllResponse)
}
QueryEpochInfoAllResponse::QueryEpochInfoAllResponse(const QueryEpochInfoAllResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryEpochInfoAllResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epoch_info_){from._impl_.epoch_info_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.epochs.QueryEpochInfoAllResponse)
}

inline void QueryEpochInfoAllResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.epoch_info_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryEpochInfoAllResponse::~QueryEpochInfoAllResponse() {
  // @@protoc_insertion_point(destructor:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryEpochInfoAllResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_epoch_info()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryEpochInfoAllResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryEpochInfoAllResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_epoch_info()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryEpochInfoAllResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epoch_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryEpochInfoAllResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_epoch_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_epoch_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  return target;
}

::size_t QueryEpochInfoAllResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_epoch_info_size();
  for (const auto& msg : this->_internal_epoch_info()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryEpochInfoAllResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryEpochInfoAllResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryEpochInfoAllResponse::GetClassData() const { return &_class_data_; }


void QueryEpochInfoAllResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryEpochInfoAllResponse*>(&to_msg);
  auto& from = static_cast<const QueryEpochInfoAllResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_epoch_info()->MergeFrom(from._internal_epoch_info());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryEpochInfoAllResponse::CopyFrom(const QueryEpochInfoAllResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.epochs.QueryEpochInfoAllResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEpochInfoAllResponse::IsInitialized() const {
  return true;
}

void QueryEpochInfoAllResponse::InternalSwap(QueryEpochInfoAllResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_epoch_info()->InternalSwap(other->_internal_mutable_epoch_info());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryEpochInfoAllResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_getter, &descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto_once,
      file_level_metadata_dydxprotocol_2fepochs_2fquery_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace epochs
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::epochs::QueryGetEpochInfoRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::epochs::QueryGetEpochInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::epochs::QueryGetEpochInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::epochs::QueryEpochInfoResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::epochs::QueryEpochInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::epochs::QueryEpochInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::epochs::QueryAllEpochInfoRequest*
Arena::CreateMaybeMessage< ::dydxprotocol::epochs::QueryAllEpochInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::epochs::QueryAllEpochInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::epochs::QueryEpochInfoAllResponse*
Arena::CreateMaybeMessage< ::dydxprotocol::epochs::QueryEpochInfoAllResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::epochs::QueryEpochInfoAllResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
