// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/epochs/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fepochs_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fepochs_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "dydxprotocol/epochs/epoch_info.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fepochs_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fepochs_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fepochs_2fquery_2eproto;
namespace dydxprotocol {
namespace epochs {
class QueryAllEpochInfoRequest;
struct QueryAllEpochInfoRequestDefaultTypeInternal;
extern QueryAllEpochInfoRequestDefaultTypeInternal _QueryAllEpochInfoRequest_default_instance_;
class QueryEpochInfoAllResponse;
struct QueryEpochInfoAllResponseDefaultTypeInternal;
extern QueryEpochInfoAllResponseDefaultTypeInternal _QueryEpochInfoAllResponse_default_instance_;
class QueryEpochInfoResponse;
struct QueryEpochInfoResponseDefaultTypeInternal;
extern QueryEpochInfoResponseDefaultTypeInternal _QueryEpochInfoResponse_default_instance_;
class QueryGetEpochInfoRequest;
struct QueryGetEpochInfoRequestDefaultTypeInternal;
extern QueryGetEpochInfoRequestDefaultTypeInternal _QueryGetEpochInfoRequest_default_instance_;
}  // namespace epochs
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::epochs::QueryAllEpochInfoRequest* Arena::CreateMaybeMessage<::dydxprotocol::epochs::QueryAllEpochInfoRequest>(Arena*);
template <>
::dydxprotocol::epochs::QueryEpochInfoAllResponse* Arena::CreateMaybeMessage<::dydxprotocol::epochs::QueryEpochInfoAllResponse>(Arena*);
template <>
::dydxprotocol::epochs::QueryEpochInfoResponse* Arena::CreateMaybeMessage<::dydxprotocol::epochs::QueryEpochInfoResponse>(Arena*);
template <>
::dydxprotocol::epochs::QueryGetEpochInfoRequest* Arena::CreateMaybeMessage<::dydxprotocol::epochs::QueryGetEpochInfoRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace epochs {

// ===================================================================


// -------------------------------------------------------------------

class QueryGetEpochInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.epochs.QueryGetEpochInfoRequest) */ {
 public:
  inline QueryGetEpochInfoRequest() : QueryGetEpochInfoRequest(nullptr) {}
  ~QueryGetEpochInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGetEpochInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGetEpochInfoRequest(const QueryGetEpochInfoRequest& from);
  QueryGetEpochInfoRequest(QueryGetEpochInfoRequest&& from) noexcept
    : QueryGetEpochInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryGetEpochInfoRequest& operator=(const QueryGetEpochInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGetEpochInfoRequest& operator=(QueryGetEpochInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGetEpochInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGetEpochInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGetEpochInfoRequest*>(
               &_QueryGetEpochInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryGetEpochInfoRequest& a, QueryGetEpochInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGetEpochInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGetEpochInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGetEpochInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGetEpochInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGetEpochInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGetEpochInfoRequest& from) {
    QueryGetEpochInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGetEpochInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.epochs.QueryGetEpochInfoRequest";
  }
  protected:
  explicit QueryGetEpochInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.epochs.QueryGetEpochInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fepochs_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEpochInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.epochs.QueryEpochInfoResponse) */ {
 public:
  inline QueryEpochInfoResponse() : QueryEpochInfoResponse(nullptr) {}
  ~QueryEpochInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEpochInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEpochInfoResponse(const QueryEpochInfoResponse& from);
  QueryEpochInfoResponse(QueryEpochInfoResponse&& from) noexcept
    : QueryEpochInfoResponse() {
    *this = ::std::move(from);
  }

  inline QueryEpochInfoResponse& operator=(const QueryEpochInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEpochInfoResponse& operator=(QueryEpochInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEpochInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEpochInfoResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEpochInfoResponse*>(
               &_QueryEpochInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryEpochInfoResponse& a, QueryEpochInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEpochInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEpochInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEpochInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEpochInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEpochInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEpochInfoResponse& from) {
    QueryEpochInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEpochInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.epochs.QueryEpochInfoResponse";
  }
  protected:
  explicit QueryEpochInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochInfoFieldNumber = 1,
  };
  // .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
  bool has_epoch_info() const;
  void clear_epoch_info() ;
  const ::dydxprotocol::epochs::EpochInfo& epoch_info() const;
  PROTOBUF_NODISCARD ::dydxprotocol::epochs::EpochInfo* release_epoch_info();
  ::dydxprotocol::epochs::EpochInfo* mutable_epoch_info();
  void set_allocated_epoch_info(::dydxprotocol::epochs::EpochInfo* epoch_info);
  private:
  const ::dydxprotocol::epochs::EpochInfo& _internal_epoch_info() const;
  ::dydxprotocol::epochs::EpochInfo* _internal_mutable_epoch_info();
  public:
  void unsafe_arena_set_allocated_epoch_info(
      ::dydxprotocol::epochs::EpochInfo* epoch_info);
  ::dydxprotocol::epochs::EpochInfo* unsafe_arena_release_epoch_info();
  // @@protoc_insertion_point(class_scope:dydxprotocol.epochs.QueryEpochInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::epochs::EpochInfo* epoch_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fepochs_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllEpochInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.epochs.QueryAllEpochInfoRequest) */ {
 public:
  inline QueryAllEpochInfoRequest() : QueryAllEpochInfoRequest(nullptr) {}
  ~QueryAllEpochInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllEpochInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllEpochInfoRequest(const QueryAllEpochInfoRequest& from);
  QueryAllEpochInfoRequest(QueryAllEpochInfoRequest&& from) noexcept
    : QueryAllEpochInfoRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllEpochInfoRequest& operator=(const QueryAllEpochInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllEpochInfoRequest& operator=(QueryAllEpochInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllEpochInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllEpochInfoRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllEpochInfoRequest*>(
               &_QueryAllEpochInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllEpochInfoRequest& a, QueryAllEpochInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllEpochInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllEpochInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllEpochInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllEpochInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllEpochInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllEpochInfoRequest& from) {
    QueryAllEpochInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllEpochInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.epochs.QueryAllEpochInfoRequest";
  }
  protected:
  explicit QueryAllEpochInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.epochs.QueryAllEpochInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fepochs_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEpochInfoAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.epochs.QueryEpochInfoAllResponse) */ {
 public:
  inline QueryEpochInfoAllResponse() : QueryEpochInfoAllResponse(nullptr) {}
  ~QueryEpochInfoAllResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEpochInfoAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEpochInfoAllResponse(const QueryEpochInfoAllResponse& from);
  QueryEpochInfoAllResponse(QueryEpochInfoAllResponse&& from) noexcept
    : QueryEpochInfoAllResponse() {
    *this = ::std::move(from);
  }

  inline QueryEpochInfoAllResponse& operator=(const QueryEpochInfoAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEpochInfoAllResponse& operator=(QueryEpochInfoAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEpochInfoAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEpochInfoAllResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEpochInfoAllResponse*>(
               &_QueryEpochInfoAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryEpochInfoAllResponse& a, QueryEpochInfoAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEpochInfoAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEpochInfoAllResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEpochInfoAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEpochInfoAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEpochInfoAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEpochInfoAllResponse& from) {
    QueryEpochInfoAllResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEpochInfoAllResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.epochs.QueryEpochInfoAllResponse";
  }
  protected:
  explicit QueryEpochInfoAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochInfoFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
  int epoch_info_size() const;
  private:
  int _internal_epoch_info_size() const;

  public:
  void clear_epoch_info() ;
  ::dydxprotocol::epochs::EpochInfo* mutable_epoch_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::epochs::EpochInfo >*
      mutable_epoch_info();
  private:
  const ::dydxprotocol::epochs::EpochInfo& _internal_epoch_info(int index) const;
  ::dydxprotocol::epochs::EpochInfo* _internal_add_epoch_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::epochs::EpochInfo>& _internal_epoch_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::epochs::EpochInfo>* _internal_mutable_epoch_info();
  public:
  const ::dydxprotocol::epochs::EpochInfo& epoch_info(int index) const;
  ::dydxprotocol::epochs::EpochInfo* add_epoch_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::epochs::EpochInfo >&
      epoch_info() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.epochs.QueryEpochInfoAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::epochs::EpochInfo > epoch_info_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fepochs_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryGetEpochInfoRequest

// string name = 1;
inline void QueryGetEpochInfoRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& QueryGetEpochInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.epochs.QueryGetEpochInfoRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGetEpochInfoRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.epochs.QueryGetEpochInfoRequest.name)
}
inline std::string* QueryGetEpochInfoRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.epochs.QueryGetEpochInfoRequest.name)
  return _s;
}
inline const std::string& QueryGetEpochInfoRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void QueryGetEpochInfoRequest::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGetEpochInfoRequest::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGetEpochInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:dydxprotocol.epochs.QueryGetEpochInfoRequest.name)
  return _impl_.name_.Release();
}
inline void QueryGetEpochInfoRequest::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.epochs.QueryGetEpochInfoRequest.name)
}

// -------------------------------------------------------------------

// QueryEpochInfoResponse

// .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
inline bool QueryEpochInfoResponse::has_epoch_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.epoch_info_ != nullptr);
  return value;
}
inline const ::dydxprotocol::epochs::EpochInfo& QueryEpochInfoResponse::_internal_epoch_info() const {
  const ::dydxprotocol::epochs::EpochInfo* p = _impl_.epoch_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::epochs::EpochInfo&>(
      ::dydxprotocol::epochs::_EpochInfo_default_instance_);
}
inline const ::dydxprotocol::epochs::EpochInfo& QueryEpochInfoResponse::epoch_info() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.epochs.QueryEpochInfoResponse.epoch_info)
  return _internal_epoch_info();
}
inline void QueryEpochInfoResponse::unsafe_arena_set_allocated_epoch_info(
    ::dydxprotocol::epochs::EpochInfo* epoch_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_info_);
  }
  _impl_.epoch_info_ = epoch_info;
  if (epoch_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.epochs.QueryEpochInfoResponse.epoch_info)
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoResponse::release_epoch_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::epochs::EpochInfo* temp = _impl_.epoch_info_;
  _impl_.epoch_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoResponse::unsafe_arena_release_epoch_info() {
  // @@protoc_insertion_point(field_release:dydxprotocol.epochs.QueryEpochInfoResponse.epoch_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::epochs::EpochInfo* temp = _impl_.epoch_info_;
  _impl_.epoch_info_ = nullptr;
  return temp;
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoResponse::_internal_mutable_epoch_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.epoch_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::epochs::EpochInfo>(GetArenaForAllocation());
    _impl_.epoch_info_ = p;
  }
  return _impl_.epoch_info_;
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoResponse::mutable_epoch_info() {
  ::dydxprotocol::epochs::EpochInfo* _msg = _internal_mutable_epoch_info();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.epochs.QueryEpochInfoResponse.epoch_info)
  return _msg;
}
inline void QueryEpochInfoResponse::set_allocated_epoch_info(::dydxprotocol::epochs::EpochInfo* epoch_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.epoch_info_);
  }
  if (epoch_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_info));
    if (message_arena != submessage_arena) {
      epoch_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.epoch_info_ = epoch_info;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.epochs.QueryEpochInfoResponse.epoch_info)
}

// -------------------------------------------------------------------

// QueryAllEpochInfoRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1;
inline bool QueryAllEpochInfoRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllEpochInfoRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllEpochInfoRequest::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.epochs.QueryAllEpochInfoRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllEpochInfoRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.epochs.QueryAllEpochInfoRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEpochInfoRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEpochInfoRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.epochs.QueryAllEpochInfoRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEpochInfoRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllEpochInfoRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.epochs.QueryAllEpochInfoRequest.pagination)
  return _msg;
}
inline void QueryAllEpochInfoRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.epochs.QueryAllEpochInfoRequest.pagination)
}

// -------------------------------------------------------------------

// QueryEpochInfoAllResponse

// repeated .dydxprotocol.epochs.EpochInfo epoch_info = 1 [(.gogoproto.nullable) = false];
inline int QueryEpochInfoAllResponse::_internal_epoch_info_size() const {
  return _impl_.epoch_info_.size();
}
inline int QueryEpochInfoAllResponse::epoch_info_size() const {
  return _internal_epoch_info_size();
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoAllResponse::mutable_epoch_info(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.epochs.QueryEpochInfoAllResponse.epoch_info)
  return _internal_mutable_epoch_info()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::epochs::EpochInfo >*
QueryEpochInfoAllResponse::mutable_epoch_info() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.epochs.QueryEpochInfoAllResponse.epoch_info)
  return _internal_mutable_epoch_info();
}
inline const ::dydxprotocol::epochs::EpochInfo& QueryEpochInfoAllResponse::_internal_epoch_info(int index) const {
  return _internal_epoch_info().Get(index);
}
inline const ::dydxprotocol::epochs::EpochInfo& QueryEpochInfoAllResponse::epoch_info(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.epochs.QueryEpochInfoAllResponse.epoch_info)
  return _internal_epoch_info(index);
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoAllResponse::_internal_add_epoch_info() {
  return _internal_mutable_epoch_info()->Add();
}
inline ::dydxprotocol::epochs::EpochInfo* QueryEpochInfoAllResponse::add_epoch_info() {
  ::dydxprotocol::epochs::EpochInfo* _add = _internal_add_epoch_info();
  // @@protoc_insertion_point(field_add:dydxprotocol.epochs.QueryEpochInfoAllResponse.epoch_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::epochs::EpochInfo >&
QueryEpochInfoAllResponse::epoch_info() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.epochs.QueryEpochInfoAllResponse.epoch_info)
  return _internal_epoch_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::epochs::EpochInfo>&
QueryEpochInfoAllResponse::_internal_epoch_info() const {
  return _impl_.epoch_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::epochs::EpochInfo>*
QueryEpochInfoAllResponse::_internal_mutable_epoch_info() {
  return &_impl_.epoch_info_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2;
inline bool QueryEpochInfoAllResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryEpochInfoAllResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryEpochInfoAllResponse::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.epochs.QueryEpochInfoAllResponse.pagination)
  return _internal_pagination();
}
inline void QueryEpochInfoAllResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.epochs.QueryEpochInfoAllResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryEpochInfoAllResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryEpochInfoAllResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.epochs.QueryEpochInfoAllResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryEpochInfoAllResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryEpochInfoAllResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.epochs.QueryEpochInfoAllResponse.pagination)
  return _msg;
}
inline void QueryEpochInfoAllResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.epochs.QueryEpochInfoAllResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace epochs
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fepochs_2fquery_2eproto_2epb_2eh
