// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/epochs/epoch_info.proto

#include "dydxprotocol/epochs/epoch_info.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace epochs {
template <typename>
PROTOBUF_CONSTEXPR EpochInfo::EpochInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_tick_)*/ 0u

  , /*decltype(_impl_.duration_)*/ 0u

  , /*decltype(_impl_.current_epoch_)*/ 0u

  , /*decltype(_impl_.current_epoch_start_block_)*/ 0u

  , /*decltype(_impl_.is_initialized_)*/ false

  , /*decltype(_impl_.fast_forward_next_tick_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EpochInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EpochInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EpochInfoDefaultTypeInternal() {}
  union {
    EpochInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EpochInfoDefaultTypeInternal _EpochInfo_default_instance_;
}  // namespace epochs
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.next_tick_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.current_epoch_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.current_epoch_start_block_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.is_initialized_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::epochs::EpochInfo, _impl_.fast_forward_next_tick_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::epochs::EpochInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::epochs::_EpochInfo_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n$dydxprotocol/epochs/epoch_info.proto\022\023"
    "dydxprotocol.epochs\"\260\001\n\tEpochInfo\022\014\n\004nam"
    "e\030\001 \001(\t\022\021\n\tnext_tick\030\002 \001(\r\022\020\n\010duration\030\003"
    " \001(\r\022\025\n\rcurrent_epoch\030\004 \001(\r\022!\n\031current_e"
    "poch_start_block\030\005 \001(\r\022\026\n\016is_initialized"
    "\030\006 \001(\010\022\036\n\026fast_forward_next_tick\030\007 \001(\010B:"
    "Z8github.com/dydxprotocol/v4-chain/proto"
    "col/x/epochs/typesb\006proto3"
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto = {
    false,
    false,
    306,
    descriptor_table_protodef_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto,
    "dydxprotocol/epochs/epoch_info.proto",
    &descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto,
    file_level_service_descriptors_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto(&descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto);
namespace dydxprotocol {
namespace epochs {
// ===================================================================

class EpochInfo::_Internal {
 public:
};

EpochInfo::EpochInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.epochs.EpochInfo)
}
EpochInfo::EpochInfo(const EpochInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EpochInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.next_tick_) {}

    , decltype(_impl_.duration_) {}

    , decltype(_impl_.current_epoch_) {}

    , decltype(_impl_.current_epoch_start_block_) {}

    , decltype(_impl_.is_initialized_) {}

    , decltype(_impl_.fast_forward_next_tick_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.next_tick_, &from._impl_.next_tick_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.fast_forward_next_tick_) -
    reinterpret_cast<char*>(&_impl_.next_tick_)) + sizeof(_impl_.fast_forward_next_tick_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.epochs.EpochInfo)
}

inline void EpochInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.next_tick_) { 0u }

    , decltype(_impl_.duration_) { 0u }

    , decltype(_impl_.current_epoch_) { 0u }

    , decltype(_impl_.current_epoch_start_block_) { 0u }

    , decltype(_impl_.is_initialized_) { false }

    , decltype(_impl_.fast_forward_next_tick_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EpochInfo::~EpochInfo() {
  // @@protoc_insertion_point(destructor:dydxprotocol.epochs.EpochInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EpochInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void EpochInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EpochInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.epochs.EpochInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.next_tick_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.fast_forward_next_tick_) -
      reinterpret_cast<char*>(&_impl_.next_tick_)) + sizeof(_impl_.fast_forward_next_tick_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EpochInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.epochs.EpochInfo.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 next_tick = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.next_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 current_epoch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.current_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 current_epoch_start_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.current_epoch_start_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_initialized = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.is_initialized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool fast_forward_next_tick = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.fast_forward_next_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EpochInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.epochs.EpochInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.epochs.EpochInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 next_tick = 2;
  if (this->_internal_next_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_next_tick(), target);
  }

  // uint32 duration = 3;
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_duration(), target);
  }

  // uint32 current_epoch = 4;
  if (this->_internal_current_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_current_epoch(), target);
  }

  // uint32 current_epoch_start_block = 5;
  if (this->_internal_current_epoch_start_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_current_epoch_start_block(), target);
  }

  // bool is_initialized = 6;
  if (this->_internal_is_initialized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_initialized(), target);
  }

  // bool fast_forward_next_tick = 7;
  if (this->_internal_fast_forward_next_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_fast_forward_next_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.epochs.EpochInfo)
  return target;
}

::size_t EpochInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.epochs.EpochInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint32 next_tick = 2;
  if (this->_internal_next_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_next_tick());
  }

  // uint32 duration = 3;
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_duration());
  }

  // uint32 current_epoch = 4;
  if (this->_internal_current_epoch() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_current_epoch());
  }

  // uint32 current_epoch_start_block = 5;
  if (this->_internal_current_epoch_start_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_current_epoch_start_block());
  }

  // bool is_initialized = 6;
  if (this->_internal_is_initialized() != 0) {
    total_size += 2;
  }

  // bool fast_forward_next_tick = 7;
  if (this->_internal_fast_forward_next_tick() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EpochInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EpochInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EpochInfo::GetClassData() const { return &_class_data_; }


void EpochInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EpochInfo*>(&to_msg);
  auto& from = static_cast<const EpochInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.epochs.EpochInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_next_tick() != 0) {
    _this->_internal_set_next_tick(from._internal_next_tick());
  }
  if (from._internal_duration() != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_current_epoch() != 0) {
    _this->_internal_set_current_epoch(from._internal_current_epoch());
  }
  if (from._internal_current_epoch_start_block() != 0) {
    _this->_internal_set_current_epoch_start_block(from._internal_current_epoch_start_block());
  }
  if (from._internal_is_initialized() != 0) {
    _this->_internal_set_is_initialized(from._internal_is_initialized());
  }
  if (from._internal_fast_forward_next_tick() != 0) {
    _this->_internal_set_fast_forward_next_tick(from._internal_fast_forward_next_tick());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EpochInfo::CopyFrom(const EpochInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.epochs.EpochInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochInfo::IsInitialized() const {
  return true;
}

void EpochInfo::InternalSwap(EpochInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.fast_forward_next_tick_)
      + sizeof(EpochInfo::_impl_.fast_forward_next_tick_)
      - PROTOBUF_FIELD_OFFSET(EpochInfo, _impl_.next_tick_)>(
          reinterpret_cast<char*>(&_impl_.next_tick_),
          reinterpret_cast<char*>(&other->_impl_.next_tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EpochInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto_getter, &descriptor_table_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto_once,
      file_level_metadata_dydxprotocol_2fepochs_2fepoch_5finfo_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace epochs
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::epochs::EpochInfo*
Arena::CreateMaybeMessage< ::dydxprotocol::epochs::EpochInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::epochs::EpochInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
