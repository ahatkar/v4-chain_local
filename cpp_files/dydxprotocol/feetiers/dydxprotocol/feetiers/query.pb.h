// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/feetiers/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2ffeetiers_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2ffeetiers_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "dydxprotocol/feetiers/params.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2ffeetiers_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2ffeetiers_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2ffeetiers_2fquery_2eproto;
namespace dydxprotocol {
namespace feetiers {
class QueryPerpetualFeeParamsRequest;
struct QueryPerpetualFeeParamsRequestDefaultTypeInternal;
extern QueryPerpetualFeeParamsRequestDefaultTypeInternal _QueryPerpetualFeeParamsRequest_default_instance_;
class QueryPerpetualFeeParamsResponse;
struct QueryPerpetualFeeParamsResponseDefaultTypeInternal;
extern QueryPerpetualFeeParamsResponseDefaultTypeInternal _QueryPerpetualFeeParamsResponse_default_instance_;
class QueryUserFeeTierRequest;
struct QueryUserFeeTierRequestDefaultTypeInternal;
extern QueryUserFeeTierRequestDefaultTypeInternal _QueryUserFeeTierRequest_default_instance_;
class QueryUserFeeTierResponse;
struct QueryUserFeeTierResponseDefaultTypeInternal;
extern QueryUserFeeTierResponseDefaultTypeInternal _QueryUserFeeTierResponse_default_instance_;
}  // namespace feetiers
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::feetiers::QueryPerpetualFeeParamsRequest* Arena::CreateMaybeMessage<::dydxprotocol::feetiers::QueryPerpetualFeeParamsRequest>(Arena*);
template <>
::dydxprotocol::feetiers::QueryPerpetualFeeParamsResponse* Arena::CreateMaybeMessage<::dydxprotocol::feetiers::QueryPerpetualFeeParamsResponse>(Arena*);
template <>
::dydxprotocol::feetiers::QueryUserFeeTierRequest* Arena::CreateMaybeMessage<::dydxprotocol::feetiers::QueryUserFeeTierRequest>(Arena*);
template <>
::dydxprotocol::feetiers::QueryUserFeeTierResponse* Arena::CreateMaybeMessage<::dydxprotocol::feetiers::QueryUserFeeTierResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace feetiers {

// ===================================================================


// -------------------------------------------------------------------

class QueryPerpetualFeeParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dydxprotocol.feetiers.QueryPerpetualFeeParamsRequest) */ {
 public:
  inline QueryPerpetualFeeParamsRequest() : QueryPerpetualFeeParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPerpetualFeeParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPerpetualFeeParamsRequest(const QueryPerpetualFeeParamsRequest& from);
  QueryPerpetualFeeParamsRequest(QueryPerpetualFeeParamsRequest&& from) noexcept
    : QueryPerpetualFeeParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryPerpetualFeeParamsRequest& operator=(const QueryPerpetualFeeParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPerpetualFeeParamsRequest& operator=(QueryPerpetualFeeParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPerpetualFeeParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPerpetualFeeParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPerpetualFeeParamsRequest*>(
               &_QueryPerpetualFeeParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryPerpetualFeeParamsRequest& a, QueryPerpetualFeeParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPerpetualFeeParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPerpetualFeeParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPerpetualFeeParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPerpetualFeeParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryPerpetualFeeParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryPerpetualFeeParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.feetiers.QueryPerpetualFeeParamsRequest";
  }
  protected:
  explicit QueryPerpetualFeeParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dydxprotocol.feetiers.QueryPerpetualFeeParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dydxprotocol_2ffeetiers_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPerpetualFeeParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse) */ {
 public:
  inline QueryPerpetualFeeParamsResponse() : QueryPerpetualFeeParamsResponse(nullptr) {}
  ~QueryPerpetualFeeParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPerpetualFeeParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPerpetualFeeParamsResponse(const QueryPerpetualFeeParamsResponse& from);
  QueryPerpetualFeeParamsResponse(QueryPerpetualFeeParamsResponse&& from) noexcept
    : QueryPerpetualFeeParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryPerpetualFeeParamsResponse& operator=(const QueryPerpetualFeeParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPerpetualFeeParamsResponse& operator=(QueryPerpetualFeeParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPerpetualFeeParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPerpetualFeeParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPerpetualFeeParamsResponse*>(
               &_QueryPerpetualFeeParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryPerpetualFeeParamsResponse& a, QueryPerpetualFeeParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPerpetualFeeParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPerpetualFeeParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPerpetualFeeParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPerpetualFeeParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPerpetualFeeParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPerpetualFeeParamsResponse& from) {
    QueryPerpetualFeeParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPerpetualFeeParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse";
  }
  protected:
  explicit QueryPerpetualFeeParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .dydxprotocol.feetiers.PerpetualFeeParams params = 1 [(.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::dydxprotocol::feetiers::PerpetualFeeParams& params() const;
  PROTOBUF_NODISCARD ::dydxprotocol::feetiers::PerpetualFeeParams* release_params();
  ::dydxprotocol::feetiers::PerpetualFeeParams* mutable_params();
  void set_allocated_params(::dydxprotocol::feetiers::PerpetualFeeParams* params);
  private:
  const ::dydxprotocol::feetiers::PerpetualFeeParams& _internal_params() const;
  ::dydxprotocol::feetiers::PerpetualFeeParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::dydxprotocol::feetiers::PerpetualFeeParams* params);
  ::dydxprotocol::feetiers::PerpetualFeeParams* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::feetiers::PerpetualFeeParams* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2ffeetiers_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUserFeeTierRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.feetiers.QueryUserFeeTierRequest) */ {
 public:
  inline QueryUserFeeTierRequest() : QueryUserFeeTierRequest(nullptr) {}
  ~QueryUserFeeTierRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUserFeeTierRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserFeeTierRequest(const QueryUserFeeTierRequest& from);
  QueryUserFeeTierRequest(QueryUserFeeTierRequest&& from) noexcept
    : QueryUserFeeTierRequest() {
    *this = ::std::move(from);
  }

  inline QueryUserFeeTierRequest& operator=(const QueryUserFeeTierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserFeeTierRequest& operator=(QueryUserFeeTierRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserFeeTierRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserFeeTierRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUserFeeTierRequest*>(
               &_QueryUserFeeTierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryUserFeeTierRequest& a, QueryUserFeeTierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserFeeTierRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserFeeTierRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUserFeeTierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUserFeeTierRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserFeeTierRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUserFeeTierRequest& from) {
    QueryUserFeeTierRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserFeeTierRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.feetiers.QueryUserFeeTierRequest";
  }
  protected:
  explicit QueryUserFeeTierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // string user = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_user() ;
  const std::string& user() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* ptr);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.feetiers.QueryUserFeeTierRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2ffeetiers_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUserFeeTierResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.feetiers.QueryUserFeeTierResponse) */ {
 public:
  inline QueryUserFeeTierResponse() : QueryUserFeeTierResponse(nullptr) {}
  ~QueryUserFeeTierResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUserFeeTierResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUserFeeTierResponse(const QueryUserFeeTierResponse& from);
  QueryUserFeeTierResponse(QueryUserFeeTierResponse&& from) noexcept
    : QueryUserFeeTierResponse() {
    *this = ::std::move(from);
  }

  inline QueryUserFeeTierResponse& operator=(const QueryUserFeeTierResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUserFeeTierResponse& operator=(QueryUserFeeTierResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUserFeeTierResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUserFeeTierResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUserFeeTierResponse*>(
               &_QueryUserFeeTierResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryUserFeeTierResponse& a, QueryUserFeeTierResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUserFeeTierResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUserFeeTierResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUserFeeTierResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUserFeeTierResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUserFeeTierResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUserFeeTierResponse& from) {
    QueryUserFeeTierResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUserFeeTierResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.feetiers.QueryUserFeeTierResponse";
  }
  protected:
  explicit QueryUserFeeTierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTierFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // .dydxprotocol.feetiers.PerpetualFeeTier tier = 2;
  bool has_tier() const;
  void clear_tier() ;
  const ::dydxprotocol::feetiers::PerpetualFeeTier& tier() const;
  PROTOBUF_NODISCARD ::dydxprotocol::feetiers::PerpetualFeeTier* release_tier();
  ::dydxprotocol::feetiers::PerpetualFeeTier* mutable_tier();
  void set_allocated_tier(::dydxprotocol::feetiers::PerpetualFeeTier* tier);
  private:
  const ::dydxprotocol::feetiers::PerpetualFeeTier& _internal_tier() const;
  ::dydxprotocol::feetiers::PerpetualFeeTier* _internal_mutable_tier();
  public:
  void unsafe_arena_set_allocated_tier(
      ::dydxprotocol::feetiers::PerpetualFeeTier* tier);
  ::dydxprotocol::feetiers::PerpetualFeeTier* unsafe_arena_release_tier();
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.feetiers.QueryUserFeeTierResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::feetiers::PerpetualFeeTier* tier_;
    ::uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2ffeetiers_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryPerpetualFeeParamsRequest

// -------------------------------------------------------------------

// QueryPerpetualFeeParamsResponse

// .dydxprotocol.feetiers.PerpetualFeeParams params = 1 [(.gogoproto.nullable) = false];
inline bool QueryPerpetualFeeParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::dydxprotocol::feetiers::PerpetualFeeParams& QueryPerpetualFeeParamsResponse::_internal_params() const {
  const ::dydxprotocol::feetiers::PerpetualFeeParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::feetiers::PerpetualFeeParams&>(
      ::dydxprotocol::feetiers::_PerpetualFeeParams_default_instance_);
}
inline const ::dydxprotocol::feetiers::PerpetualFeeParams& QueryPerpetualFeeParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse.params)
  return _internal_params();
}
inline void QueryPerpetualFeeParamsResponse::unsafe_arena_set_allocated_params(
    ::dydxprotocol::feetiers::PerpetualFeeParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse.params)
}
inline ::dydxprotocol::feetiers::PerpetualFeeParams* QueryPerpetualFeeParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::feetiers::PerpetualFeeParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::feetiers::PerpetualFeeParams* QueryPerpetualFeeParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::feetiers::PerpetualFeeParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::dydxprotocol::feetiers::PerpetualFeeParams* QueryPerpetualFeeParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::feetiers::PerpetualFeeParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::dydxprotocol::feetiers::PerpetualFeeParams* QueryPerpetualFeeParamsResponse::mutable_params() {
  ::dydxprotocol::feetiers::PerpetualFeeParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse.params)
  return _msg;
}
inline void QueryPerpetualFeeParamsResponse::set_allocated_params(::dydxprotocol::feetiers::PerpetualFeeParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.feetiers.QueryPerpetualFeeParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryUserFeeTierRequest

// string user = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryUserFeeTierRequest::clear_user() {
  _impl_.user_.ClearToEmpty();
}
inline const std::string& QueryUserFeeTierRequest::user() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.QueryUserFeeTierRequest.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryUserFeeTierRequest::set_user(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.QueryUserFeeTierRequest.user)
}
inline std::string* QueryUserFeeTierRequest::mutable_user() {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.feetiers.QueryUserFeeTierRequest.user)
  return _s;
}
inline const std::string& QueryUserFeeTierRequest::_internal_user() const {
  return _impl_.user_.Get();
}
inline void QueryUserFeeTierRequest::_internal_set_user(const std::string& value) {
  ;


  _impl_.user_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUserFeeTierRequest::_internal_mutable_user() {
  ;
  return _impl_.user_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryUserFeeTierRequest::release_user() {
  // @@protoc_insertion_point(field_release:dydxprotocol.feetiers.QueryUserFeeTierRequest.user)
  return _impl_.user_.Release();
}
inline void QueryUserFeeTierRequest::set_allocated_user(std::string* value) {
  _impl_.user_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_.IsDefault()) {
          _impl_.user_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.feetiers.QueryUserFeeTierRequest.user)
}

// -------------------------------------------------------------------

// QueryUserFeeTierResponse

// uint32 index = 1;
inline void QueryUserFeeTierResponse::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t QueryUserFeeTierResponse::index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.QueryUserFeeTierResponse.index)
  return _internal_index();
}
inline void QueryUserFeeTierResponse::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.QueryUserFeeTierResponse.index)
}
inline ::uint32_t QueryUserFeeTierResponse::_internal_index() const {
  return _impl_.index_;
}
inline void QueryUserFeeTierResponse::_internal_set_index(::uint32_t value) {
  ;
  _impl_.index_ = value;
}

// .dydxprotocol.feetiers.PerpetualFeeTier tier = 2;
inline bool QueryUserFeeTierResponse::has_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tier_ != nullptr);
  return value;
}
inline const ::dydxprotocol::feetiers::PerpetualFeeTier& QueryUserFeeTierResponse::_internal_tier() const {
  const ::dydxprotocol::feetiers::PerpetualFeeTier* p = _impl_.tier_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::feetiers::PerpetualFeeTier&>(
      ::dydxprotocol::feetiers::_PerpetualFeeTier_default_instance_);
}
inline const ::dydxprotocol::feetiers::PerpetualFeeTier& QueryUserFeeTierResponse::tier() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.QueryUserFeeTierResponse.tier)
  return _internal_tier();
}
inline void QueryUserFeeTierResponse::unsafe_arena_set_allocated_tier(
    ::dydxprotocol::feetiers::PerpetualFeeTier* tier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tier_);
  }
  _impl_.tier_ = tier;
  if (tier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.feetiers.QueryUserFeeTierResponse.tier)
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* QueryUserFeeTierResponse::release_tier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::feetiers::PerpetualFeeTier* temp = _impl_.tier_;
  _impl_.tier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* QueryUserFeeTierResponse::unsafe_arena_release_tier() {
  // @@protoc_insertion_point(field_release:dydxprotocol.feetiers.QueryUserFeeTierResponse.tier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::feetiers::PerpetualFeeTier* temp = _impl_.tier_;
  _impl_.tier_ = nullptr;
  return temp;
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* QueryUserFeeTierResponse::_internal_mutable_tier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tier_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::feetiers::PerpetualFeeTier>(GetArenaForAllocation());
    _impl_.tier_ = p;
  }
  return _impl_.tier_;
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* QueryUserFeeTierResponse::mutable_tier() {
  ::dydxprotocol::feetiers::PerpetualFeeTier* _msg = _internal_mutable_tier();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.feetiers.QueryUserFeeTierResponse.tier)
  return _msg;
}
inline void QueryUserFeeTierResponse::set_allocated_tier(::dydxprotocol::feetiers::PerpetualFeeTier* tier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tier_);
  }
  if (tier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tier));
    if (message_arena != submessage_arena) {
      tier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tier_ = tier;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.feetiers.QueryUserFeeTierResponse.tier)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace feetiers
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2ffeetiers_2fquery_2eproto_2epb_2eh
