// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/feetiers/params.proto

#include "dydxprotocol/feetiers/params.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace feetiers {
template <typename>
PROTOBUF_CONSTEXPR PerpetualFeeParams::PerpetualFeeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tiers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualFeeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualFeeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualFeeParamsDefaultTypeInternal() {}
  union {
    PerpetualFeeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualFeeParamsDefaultTypeInternal _PerpetualFeeParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerpetualFeeTier::PerpetualFeeTier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.absolute_volume_requirement_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.total_volume_share_requirement_ppm_)*/ 0u

  , /*decltype(_impl_.maker_volume_share_requirement_ppm_)*/ 0u

  , /*decltype(_impl_.maker_fee_ppm_)*/ 0

  , /*decltype(_impl_.taker_fee_ppm_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualFeeTierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualFeeTierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualFeeTierDefaultTypeInternal() {}
  union {
    PerpetualFeeTier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualFeeTierDefaultTypeInternal _PerpetualFeeTier_default_instance_;
}  // namespace feetiers
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2ffeetiers_2fparams_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2ffeetiers_2fparams_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2ffeetiers_2fparams_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2ffeetiers_2fparams_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeParams, _impl_.tiers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _impl_.absolute_volume_requirement_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _impl_.total_volume_share_requirement_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _impl_.maker_volume_share_requirement_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _impl_.maker_fee_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::feetiers::PerpetualFeeTier, _impl_.taker_fee_ppm_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::feetiers::PerpetualFeeParams)},
        { 9, -1, -1, sizeof(::dydxprotocol::feetiers::PerpetualFeeTier)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::feetiers::_PerpetualFeeParams_default_instance_._instance,
    &::dydxprotocol::feetiers::_PerpetualFeeTier_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2ffeetiers_2fparams_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\"dydxprotocol/feetiers/params.proto\022\025dy"
    "dxprotocol.feetiers\"L\n\022PerpetualFeeParam"
    "s\0226\n\005tiers\030\001 \003(\0132\'.dydxprotocol.feetiers"
    ".PerpetualFeeTier\"\313\001\n\020PerpetualFeeTier\022\014"
    "\n\004name\030\001 \001(\t\022#\n\033absolute_volume_requirem"
    "ent\030\002 \001(\004\022*\n\"total_volume_share_requirem"
    "ent_ppm\030\003 \001(\r\022*\n\"maker_volume_share_requ"
    "irement_ppm\030\004 \001(\r\022\025\n\rmaker_fee_ppm\030\005 \001(\021"
    "\022\025\n\rtaker_fee_ppm\030\006 \001(\021B<Z:github.com/dy"
    "dxprotocol/v4-chain/protocol/x/feetiers/"
    "typesb\006proto3"
};
static ::absl::once_flag descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto = {
    false,
    false,
    413,
    descriptor_table_protodef_dydxprotocol_2ffeetiers_2fparams_2eproto,
    "dydxprotocol/feetiers/params.proto",
    &descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2ffeetiers_2fparams_2eproto::offsets,
    file_level_metadata_dydxprotocol_2ffeetiers_2fparams_2eproto,
    file_level_enum_descriptors_dydxprotocol_2ffeetiers_2fparams_2eproto,
    file_level_service_descriptors_dydxprotocol_2ffeetiers_2fparams_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2ffeetiers_2fparams_2eproto(&descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto);
namespace dydxprotocol {
namespace feetiers {
// ===================================================================

class PerpetualFeeParams::_Internal {
 public:
};

PerpetualFeeParams::PerpetualFeeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.feetiers.PerpetualFeeParams)
}
PerpetualFeeParams::PerpetualFeeParams(const PerpetualFeeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualFeeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tiers_){from._impl_.tiers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.feetiers.PerpetualFeeParams)
}

inline void PerpetualFeeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.tiers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PerpetualFeeParams::~PerpetualFeeParams() {
  // @@protoc_insertion_point(destructor:dydxprotocol.feetiers.PerpetualFeeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualFeeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_tiers()->~RepeatedPtrField();
}

void PerpetualFeeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualFeeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.feetiers.PerpetualFeeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_tiers()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualFeeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.feetiers.PerpetualFeeTier tiers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualFeeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.feetiers.PerpetualFeeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.feetiers.PerpetualFeeTier tiers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_tiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.feetiers.PerpetualFeeParams)
  return target;
}

::size_t PerpetualFeeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.feetiers.PerpetualFeeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.feetiers.PerpetualFeeTier tiers = 1;
  total_size += 1UL * this->_internal_tiers_size();
  for (const auto& msg : this->_internal_tiers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualFeeParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualFeeParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualFeeParams::GetClassData() const { return &_class_data_; }


void PerpetualFeeParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualFeeParams*>(&to_msg);
  auto& from = static_cast<const PerpetualFeeParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.feetiers.PerpetualFeeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tiers()->MergeFrom(from._internal_tiers());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualFeeParams::CopyFrom(const PerpetualFeeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.feetiers.PerpetualFeeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualFeeParams::IsInitialized() const {
  return true;
}

void PerpetualFeeParams::InternalSwap(PerpetualFeeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_tiers()->InternalSwap(other->_internal_mutable_tiers());
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualFeeParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_getter, &descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_once,
      file_level_metadata_dydxprotocol_2ffeetiers_2fparams_2eproto[0]);
}
// ===================================================================

class PerpetualFeeTier::_Internal {
 public:
};

PerpetualFeeTier::PerpetualFeeTier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.feetiers.PerpetualFeeTier)
}
PerpetualFeeTier::PerpetualFeeTier(const PerpetualFeeTier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualFeeTier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.absolute_volume_requirement_) {}

    , decltype(_impl_.total_volume_share_requirement_ppm_) {}

    , decltype(_impl_.maker_volume_share_requirement_ppm_) {}

    , decltype(_impl_.maker_fee_ppm_) {}

    , decltype(_impl_.taker_fee_ppm_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.absolute_volume_requirement_, &from._impl_.absolute_volume_requirement_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.taker_fee_ppm_) -
    reinterpret_cast<char*>(&_impl_.absolute_volume_requirement_)) + sizeof(_impl_.taker_fee_ppm_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.feetiers.PerpetualFeeTier)
}

inline void PerpetualFeeTier::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.absolute_volume_requirement_) { ::uint64_t{0u} }

    , decltype(_impl_.total_volume_share_requirement_ppm_) { 0u }

    , decltype(_impl_.maker_volume_share_requirement_ppm_) { 0u }

    , decltype(_impl_.maker_fee_ppm_) { 0 }

    , decltype(_impl_.taker_fee_ppm_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerpetualFeeTier::~PerpetualFeeTier() {
  // @@protoc_insertion_point(destructor:dydxprotocol.feetiers.PerpetualFeeTier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualFeeTier::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PerpetualFeeTier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualFeeTier::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.feetiers.PerpetualFeeTier)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.absolute_volume_requirement_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.taker_fee_ppm_) -
      reinterpret_cast<char*>(&_impl_.absolute_volume_requirement_)) + sizeof(_impl_.taker_fee_ppm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualFeeTier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.feetiers.PerpetualFeeTier.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 absolute_volume_requirement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.absolute_volume_requirement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 total_volume_share_requirement_ppm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.total_volume_share_requirement_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 maker_volume_share_requirement_ppm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.maker_volume_share_requirement_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 maker_fee_ppm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.maker_fee_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 taker_fee_ppm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.taker_fee_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualFeeTier::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.feetiers.PerpetualFeeTier)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.feetiers.PerpetualFeeTier.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 absolute_volume_requirement = 2;
  if (this->_internal_absolute_volume_requirement() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_absolute_volume_requirement(), target);
  }

  // uint32 total_volume_share_requirement_ppm = 3;
  if (this->_internal_total_volume_share_requirement_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_total_volume_share_requirement_ppm(), target);
  }

  // uint32 maker_volume_share_requirement_ppm = 4;
  if (this->_internal_maker_volume_share_requirement_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_maker_volume_share_requirement_ppm(), target);
  }

  // sint32 maker_fee_ppm = 5;
  if (this->_internal_maker_fee_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_maker_fee_ppm(), target);
  }

  // sint32 taker_fee_ppm = 6;
  if (this->_internal_taker_fee_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        6, this->_internal_taker_fee_ppm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.feetiers.PerpetualFeeTier)
  return target;
}

::size_t PerpetualFeeTier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.feetiers.PerpetualFeeTier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint64 absolute_volume_requirement = 2;
  if (this->_internal_absolute_volume_requirement() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_absolute_volume_requirement());
  }

  // uint32 total_volume_share_requirement_ppm = 3;
  if (this->_internal_total_volume_share_requirement_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_total_volume_share_requirement_ppm());
  }

  // uint32 maker_volume_share_requirement_ppm = 4;
  if (this->_internal_maker_volume_share_requirement_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_maker_volume_share_requirement_ppm());
  }

  // sint32 maker_fee_ppm = 5;
  if (this->_internal_maker_fee_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_maker_fee_ppm());
  }

  // sint32 taker_fee_ppm = 6;
  if (this->_internal_taker_fee_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_taker_fee_ppm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualFeeTier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualFeeTier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualFeeTier::GetClassData() const { return &_class_data_; }


void PerpetualFeeTier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualFeeTier*>(&to_msg);
  auto& from = static_cast<const PerpetualFeeTier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.feetiers.PerpetualFeeTier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_absolute_volume_requirement() != 0) {
    _this->_internal_set_absolute_volume_requirement(from._internal_absolute_volume_requirement());
  }
  if (from._internal_total_volume_share_requirement_ppm() != 0) {
    _this->_internal_set_total_volume_share_requirement_ppm(from._internal_total_volume_share_requirement_ppm());
  }
  if (from._internal_maker_volume_share_requirement_ppm() != 0) {
    _this->_internal_set_maker_volume_share_requirement_ppm(from._internal_maker_volume_share_requirement_ppm());
  }
  if (from._internal_maker_fee_ppm() != 0) {
    _this->_internal_set_maker_fee_ppm(from._internal_maker_fee_ppm());
  }
  if (from._internal_taker_fee_ppm() != 0) {
    _this->_internal_set_taker_fee_ppm(from._internal_taker_fee_ppm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualFeeTier::CopyFrom(const PerpetualFeeTier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.feetiers.PerpetualFeeTier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualFeeTier::IsInitialized() const {
  return true;
}

void PerpetualFeeTier::InternalSwap(PerpetualFeeTier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerpetualFeeTier, _impl_.taker_fee_ppm_)
      + sizeof(PerpetualFeeTier::_impl_.taker_fee_ppm_)
      - PROTOBUF_FIELD_OFFSET(PerpetualFeeTier, _impl_.absolute_volume_requirement_)>(
          reinterpret_cast<char*>(&_impl_.absolute_volume_requirement_),
          reinterpret_cast<char*>(&other->_impl_.absolute_volume_requirement_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualFeeTier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_getter, &descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto_once,
      file_level_metadata_dydxprotocol_2ffeetiers_2fparams_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace feetiers
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::feetiers::PerpetualFeeParams*
Arena::CreateMaybeMessage< ::dydxprotocol::feetiers::PerpetualFeeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::feetiers::PerpetualFeeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::feetiers::PerpetualFeeTier*
Arena::CreateMaybeMessage< ::dydxprotocol::feetiers::PerpetualFeeTier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::feetiers::PerpetualFeeTier >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
