// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/feetiers/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2ffeetiers_2fparams_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2ffeetiers_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2ffeetiers_2fparams_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2ffeetiers_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2ffeetiers_2fparams_2eproto;
namespace dydxprotocol {
namespace feetiers {
class PerpetualFeeParams;
struct PerpetualFeeParamsDefaultTypeInternal;
extern PerpetualFeeParamsDefaultTypeInternal _PerpetualFeeParams_default_instance_;
class PerpetualFeeTier;
struct PerpetualFeeTierDefaultTypeInternal;
extern PerpetualFeeTierDefaultTypeInternal _PerpetualFeeTier_default_instance_;
}  // namespace feetiers
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::feetiers::PerpetualFeeParams* Arena::CreateMaybeMessage<::dydxprotocol::feetiers::PerpetualFeeParams>(Arena*);
template <>
::dydxprotocol::feetiers::PerpetualFeeTier* Arena::CreateMaybeMessage<::dydxprotocol::feetiers::PerpetualFeeTier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace feetiers {

// ===================================================================


// -------------------------------------------------------------------

class PerpetualFeeParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.feetiers.PerpetualFeeParams) */ {
 public:
  inline PerpetualFeeParams() : PerpetualFeeParams(nullptr) {}
  ~PerpetualFeeParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualFeeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualFeeParams(const PerpetualFeeParams& from);
  PerpetualFeeParams(PerpetualFeeParams&& from) noexcept
    : PerpetualFeeParams() {
    *this = ::std::move(from);
  }

  inline PerpetualFeeParams& operator=(const PerpetualFeeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualFeeParams& operator=(PerpetualFeeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualFeeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualFeeParams* internal_default_instance() {
    return reinterpret_cast<const PerpetualFeeParams*>(
               &_PerpetualFeeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerpetualFeeParams& a, PerpetualFeeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualFeeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualFeeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualFeeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualFeeParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualFeeParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualFeeParams& from) {
    PerpetualFeeParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualFeeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.feetiers.PerpetualFeeParams";
  }
  protected:
  explicit PerpetualFeeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 1,
  };
  // repeated .dydxprotocol.feetiers.PerpetualFeeTier tiers = 1;
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;

  public:
  void clear_tiers() ;
  ::dydxprotocol::feetiers::PerpetualFeeTier* mutable_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::feetiers::PerpetualFeeTier >*
      mutable_tiers();
  private:
  const ::dydxprotocol::feetiers::PerpetualFeeTier& _internal_tiers(int index) const;
  ::dydxprotocol::feetiers::PerpetualFeeTier* _internal_add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::feetiers::PerpetualFeeTier>& _internal_tiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::feetiers::PerpetualFeeTier>* _internal_mutable_tiers();
  public:
  const ::dydxprotocol::feetiers::PerpetualFeeTier& tiers(int index) const;
  ::dydxprotocol::feetiers::PerpetualFeeTier* add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::feetiers::PerpetualFeeTier >&
      tiers() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.feetiers.PerpetualFeeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::feetiers::PerpetualFeeTier > tiers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2ffeetiers_2fparams_2eproto;
};// -------------------------------------------------------------------

class PerpetualFeeTier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.feetiers.PerpetualFeeTier) */ {
 public:
  inline PerpetualFeeTier() : PerpetualFeeTier(nullptr) {}
  ~PerpetualFeeTier() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualFeeTier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualFeeTier(const PerpetualFeeTier& from);
  PerpetualFeeTier(PerpetualFeeTier&& from) noexcept
    : PerpetualFeeTier() {
    *this = ::std::move(from);
  }

  inline PerpetualFeeTier& operator=(const PerpetualFeeTier& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualFeeTier& operator=(PerpetualFeeTier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualFeeTier& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualFeeTier* internal_default_instance() {
    return reinterpret_cast<const PerpetualFeeTier*>(
               &_PerpetualFeeTier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerpetualFeeTier& a, PerpetualFeeTier& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualFeeTier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualFeeTier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualFeeTier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualFeeTier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualFeeTier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualFeeTier& from) {
    PerpetualFeeTier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualFeeTier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.feetiers.PerpetualFeeTier";
  }
  protected:
  explicit PerpetualFeeTier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAbsoluteVolumeRequirementFieldNumber = 2,
    kTotalVolumeShareRequirementPpmFieldNumber = 3,
    kMakerVolumeShareRequirementPpmFieldNumber = 4,
    kMakerFeePpmFieldNumber = 5,
    kTakerFeePpmFieldNumber = 6,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 absolute_volume_requirement = 2;
  void clear_absolute_volume_requirement() ;
  ::uint64_t absolute_volume_requirement() const;
  void set_absolute_volume_requirement(::uint64_t value);

  private:
  ::uint64_t _internal_absolute_volume_requirement() const;
  void _internal_set_absolute_volume_requirement(::uint64_t value);

  public:
  // uint32 total_volume_share_requirement_ppm = 3;
  void clear_total_volume_share_requirement_ppm() ;
  ::uint32_t total_volume_share_requirement_ppm() const;
  void set_total_volume_share_requirement_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_total_volume_share_requirement_ppm() const;
  void _internal_set_total_volume_share_requirement_ppm(::uint32_t value);

  public:
  // uint32 maker_volume_share_requirement_ppm = 4;
  void clear_maker_volume_share_requirement_ppm() ;
  ::uint32_t maker_volume_share_requirement_ppm() const;
  void set_maker_volume_share_requirement_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_maker_volume_share_requirement_ppm() const;
  void _internal_set_maker_volume_share_requirement_ppm(::uint32_t value);

  public:
  // sint32 maker_fee_ppm = 5;
  void clear_maker_fee_ppm() ;
  ::int32_t maker_fee_ppm() const;
  void set_maker_fee_ppm(::int32_t value);

  private:
  ::int32_t _internal_maker_fee_ppm() const;
  void _internal_set_maker_fee_ppm(::int32_t value);

  public:
  // sint32 taker_fee_ppm = 6;
  void clear_taker_fee_ppm() ;
  ::int32_t taker_fee_ppm() const;
  void set_taker_fee_ppm(::int32_t value);

  private:
  ::int32_t _internal_taker_fee_ppm() const;
  void _internal_set_taker_fee_ppm(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.feetiers.PerpetualFeeTier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint64_t absolute_volume_requirement_;
    ::uint32_t total_volume_share_requirement_ppm_;
    ::uint32_t maker_volume_share_requirement_ppm_;
    ::int32_t maker_fee_ppm_;
    ::int32_t taker_fee_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2ffeetiers_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PerpetualFeeParams

// repeated .dydxprotocol.feetiers.PerpetualFeeTier tiers = 1;
inline int PerpetualFeeParams::_internal_tiers_size() const {
  return _impl_.tiers_.size();
}
inline int PerpetualFeeParams::tiers_size() const {
  return _internal_tiers_size();
}
inline void PerpetualFeeParams::clear_tiers() {
  _internal_mutable_tiers()->Clear();
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* PerpetualFeeParams::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.feetiers.PerpetualFeeParams.tiers)
  return _internal_mutable_tiers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::feetiers::PerpetualFeeTier >*
PerpetualFeeParams::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.feetiers.PerpetualFeeParams.tiers)
  return _internal_mutable_tiers();
}
inline const ::dydxprotocol::feetiers::PerpetualFeeTier& PerpetualFeeParams::_internal_tiers(int index) const {
  return _internal_tiers().Get(index);
}
inline const ::dydxprotocol::feetiers::PerpetualFeeTier& PerpetualFeeParams::tiers(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeParams.tiers)
  return _internal_tiers(index);
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* PerpetualFeeParams::_internal_add_tiers() {
  return _internal_mutable_tiers()->Add();
}
inline ::dydxprotocol::feetiers::PerpetualFeeTier* PerpetualFeeParams::add_tiers() {
  ::dydxprotocol::feetiers::PerpetualFeeTier* _add = _internal_add_tiers();
  // @@protoc_insertion_point(field_add:dydxprotocol.feetiers.PerpetualFeeParams.tiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::feetiers::PerpetualFeeTier >&
PerpetualFeeParams::tiers() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.feetiers.PerpetualFeeParams.tiers)
  return _internal_tiers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::feetiers::PerpetualFeeTier>&
PerpetualFeeParams::_internal_tiers() const {
  return _impl_.tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::feetiers::PerpetualFeeTier>*
PerpetualFeeParams::_internal_mutable_tiers() {
  return &_impl_.tiers_;
}

// -------------------------------------------------------------------

// PerpetualFeeTier

// string name = 1;
inline void PerpetualFeeTier::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PerpetualFeeTier::name() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeTier.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerpetualFeeTier::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.PerpetualFeeTier.name)
}
inline std::string* PerpetualFeeTier::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.feetiers.PerpetualFeeTier.name)
  return _s;
}
inline const std::string& PerpetualFeeTier::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PerpetualFeeTier::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PerpetualFeeTier::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* PerpetualFeeTier::release_name() {
  // @@protoc_insertion_point(field_release:dydxprotocol.feetiers.PerpetualFeeTier.name)
  return _impl_.name_.Release();
}
inline void PerpetualFeeTier::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.feetiers.PerpetualFeeTier.name)
}

// uint64 absolute_volume_requirement = 2;
inline void PerpetualFeeTier::clear_absolute_volume_requirement() {
  _impl_.absolute_volume_requirement_ = ::uint64_t{0u};
}
inline ::uint64_t PerpetualFeeTier::absolute_volume_requirement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeTier.absolute_volume_requirement)
  return _internal_absolute_volume_requirement();
}
inline void PerpetualFeeTier::set_absolute_volume_requirement(::uint64_t value) {
  _internal_set_absolute_volume_requirement(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.PerpetualFeeTier.absolute_volume_requirement)
}
inline ::uint64_t PerpetualFeeTier::_internal_absolute_volume_requirement() const {
  return _impl_.absolute_volume_requirement_;
}
inline void PerpetualFeeTier::_internal_set_absolute_volume_requirement(::uint64_t value) {
  ;
  _impl_.absolute_volume_requirement_ = value;
}

// uint32 total_volume_share_requirement_ppm = 3;
inline void PerpetualFeeTier::clear_total_volume_share_requirement_ppm() {
  _impl_.total_volume_share_requirement_ppm_ = 0u;
}
inline ::uint32_t PerpetualFeeTier::total_volume_share_requirement_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeTier.total_volume_share_requirement_ppm)
  return _internal_total_volume_share_requirement_ppm();
}
inline void PerpetualFeeTier::set_total_volume_share_requirement_ppm(::uint32_t value) {
  _internal_set_total_volume_share_requirement_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.PerpetualFeeTier.total_volume_share_requirement_ppm)
}
inline ::uint32_t PerpetualFeeTier::_internal_total_volume_share_requirement_ppm() const {
  return _impl_.total_volume_share_requirement_ppm_;
}
inline void PerpetualFeeTier::_internal_set_total_volume_share_requirement_ppm(::uint32_t value) {
  ;
  _impl_.total_volume_share_requirement_ppm_ = value;
}

// uint32 maker_volume_share_requirement_ppm = 4;
inline void PerpetualFeeTier::clear_maker_volume_share_requirement_ppm() {
  _impl_.maker_volume_share_requirement_ppm_ = 0u;
}
inline ::uint32_t PerpetualFeeTier::maker_volume_share_requirement_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeTier.maker_volume_share_requirement_ppm)
  return _internal_maker_volume_share_requirement_ppm();
}
inline void PerpetualFeeTier::set_maker_volume_share_requirement_ppm(::uint32_t value) {
  _internal_set_maker_volume_share_requirement_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.PerpetualFeeTier.maker_volume_share_requirement_ppm)
}
inline ::uint32_t PerpetualFeeTier::_internal_maker_volume_share_requirement_ppm() const {
  return _impl_.maker_volume_share_requirement_ppm_;
}
inline void PerpetualFeeTier::_internal_set_maker_volume_share_requirement_ppm(::uint32_t value) {
  ;
  _impl_.maker_volume_share_requirement_ppm_ = value;
}

// sint32 maker_fee_ppm = 5;
inline void PerpetualFeeTier::clear_maker_fee_ppm() {
  _impl_.maker_fee_ppm_ = 0;
}
inline ::int32_t PerpetualFeeTier::maker_fee_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeTier.maker_fee_ppm)
  return _internal_maker_fee_ppm();
}
inline void PerpetualFeeTier::set_maker_fee_ppm(::int32_t value) {
  _internal_set_maker_fee_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.PerpetualFeeTier.maker_fee_ppm)
}
inline ::int32_t PerpetualFeeTier::_internal_maker_fee_ppm() const {
  return _impl_.maker_fee_ppm_;
}
inline void PerpetualFeeTier::_internal_set_maker_fee_ppm(::int32_t value) {
  ;
  _impl_.maker_fee_ppm_ = value;
}

// sint32 taker_fee_ppm = 6;
inline void PerpetualFeeTier::clear_taker_fee_ppm() {
  _impl_.taker_fee_ppm_ = 0;
}
inline ::int32_t PerpetualFeeTier::taker_fee_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.feetiers.PerpetualFeeTier.taker_fee_ppm)
  return _internal_taker_fee_ppm();
}
inline void PerpetualFeeTier::set_taker_fee_ppm(::int32_t value) {
  _internal_set_taker_fee_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.feetiers.PerpetualFeeTier.taker_fee_ppm)
}
inline ::int32_t PerpetualFeeTier::_internal_taker_fee_ppm() const {
  return _impl_.taker_fee_ppm_;
}
inline void PerpetualFeeTier::_internal_set_taker_fee_ppm(::int32_t value) {
  ;
  _impl_.taker_fee_ppm_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace feetiers
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2ffeetiers_2fparams_2eproto_2epb_2eh
