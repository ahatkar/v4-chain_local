// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/socks/messages.proto

#include "dydxprotocol/indexer/socks/messages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace indexer {
namespace socks {
template <typename>
PROTOBUF_CONSTEXPR OrderbookMessage::OrderbookMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clob_pair_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderbookMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderbookMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderbookMessageDefaultTypeInternal() {}
  union {
    OrderbookMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderbookMessageDefaultTypeInternal _OrderbookMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SubaccountMessage::SubaccountMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_height_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contents_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subaccount_id_)*/nullptr
  , /*decltype(_impl_.transaction_index_)*/ 0

  , /*decltype(_impl_.event_index_)*/ 0u
} {}
struct SubaccountMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubaccountMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubaccountMessageDefaultTypeInternal() {}
  union {
    SubaccountMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubaccountMessageDefaultTypeInternal _SubaccountMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TradeMessage::TradeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.block_height_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contents_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clob_pair_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TradeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradeMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradeMessageDefaultTypeInternal() {}
  union {
    TradeMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradeMessageDefaultTypeInternal _TradeMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketMessage::MarketMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketMessageDefaultTypeInternal() {}
  union {
    MarketMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketMessageDefaultTypeInternal _MarketMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CandleMessage::CandleMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contents_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.clob_pair_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.resolution_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CandleMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CandleMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CandleMessageDefaultTypeInternal() {}
  union {
    CandleMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CandleMessageDefaultTypeInternal _CandleMessage_default_instance_;
}  // namespace socks
}  // namespace indexer
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::OrderbookMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::OrderbookMessage, _impl_.contents_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::OrderbookMessage, _impl_.clob_pair_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::OrderbookMessage, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_.block_height_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_.transaction_index_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_.event_index_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_.contents_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::SubaccountMessage, _impl_.version_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::TradeMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::TradeMessage, _impl_.block_height_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::TradeMessage, _impl_.contents_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::TradeMessage, _impl_.clob_pair_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::TradeMessage, _impl_.version_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::MarketMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::MarketMessage, _impl_.contents_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::MarketMessage, _impl_.version_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::CandleMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::CandleMessage, _impl_.contents_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::CandleMessage, _impl_.clob_pair_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::CandleMessage, _impl_.resolution_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::socks::CandleMessage, _impl_.version_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::indexer::socks::OrderbookMessage)},
        { 11, 25, -1, sizeof(::dydxprotocol::indexer::socks::SubaccountMessage)},
        { 31, -1, -1, sizeof(::dydxprotocol::indexer::socks::TradeMessage)},
        { 43, -1, -1, sizeof(::dydxprotocol::indexer::socks::MarketMessage)},
        { 53, -1, -1, sizeof(::dydxprotocol::indexer::socks::CandleMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::indexer::socks::_OrderbookMessage_default_instance_._instance,
    &::dydxprotocol::indexer::socks::_SubaccountMessage_default_instance_._instance,
    &::dydxprotocol::indexer::socks::_TradeMessage_default_instance_._instance,
    &::dydxprotocol::indexer::socks::_MarketMessage_default_instance_._instance,
    &::dydxprotocol::indexer::socks::_CandleMessage_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)dydxprotocol/indexer/socks/messages.pr"
    "oto\022\032dydxprotocol.indexer.socks\0321dydxpro"
    "tocol/indexer/protocol/v1/subaccount.pro"
    "to\"K\n\020OrderbookMessage\022\020\n\010contents\030\001 \001(\t"
    "\022\024\n\014clob_pair_id\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\""
    "\312\001\n\021SubaccountMessage\022\024\n\014block_height\030\001 "
    "\001(\t\022\031\n\021transaction_index\030\002 \001(\005\022\023\n\013event_"
    "index\030\003 \001(\r\022\020\n\010contents\030\004 \001(\t\022L\n\rsubacco"
    "unt_id\030\005 \001(\01325.dydxprotocol.indexer.prot"
    "ocol.v1.IndexerSubaccountId\022\017\n\007version\030\006"
    " \001(\t\"]\n\014TradeMessage\022\024\n\014block_height\030\001 \001"
    "(\t\022\020\n\010contents\030\004 \001(\t\022\024\n\014clob_pair_id\030\005 \001"
    "(\t\022\017\n\007version\030\006 \001(\t\"2\n\rMarketMessage\022\020\n\010"
    "contents\030\001 \001(\t\022\017\n\007version\030\002 \001(\t\"\227\002\n\rCand"
    "leMessage\022\020\n\010contents\030\001 \001(\t\022\024\n\014clob_pair"
    "_id\030\002 \001(\t\022H\n\nresolution\030\003 \001(\01624.dydxprot"
    "ocol.indexer.socks.CandleMessage.Resolut"
    "ion\022\017\n\007version\030\004 \001(\t\"\202\001\n\nResolution\022\016\n\nO"
    "NE_MINUTE\020\000\022\020\n\014FIVE_MINUTES\020\001\022\023\n\017FIFTEEN"
    "_MINUTES\020\002\022\022\n\016THIRTY_MINUTES\020\003\022\014\n\010ONE_HO"
    "UR\020\004\022\016\n\nFOUR_HOURS\020\005\022\013\n\007ONE_DAY\020\006b\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_deps[1] =
    {
        &::descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto = {
    false,
    false,
    841,
    descriptor_table_protodef_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto,
    "dydxprotocol/indexer/socks/messages.proto",
    &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once,
    descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto::offsets,
    file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto,
    file_level_enum_descriptors_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto,
    file_level_service_descriptors_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto(&descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto);
namespace dydxprotocol {
namespace indexer {
namespace socks {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CandleMessage_Resolution_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[0];
}
bool CandleMessage_Resolution_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr CandleMessage_Resolution CandleMessage::ONE_MINUTE;
constexpr CandleMessage_Resolution CandleMessage::FIVE_MINUTES;
constexpr CandleMessage_Resolution CandleMessage::FIFTEEN_MINUTES;
constexpr CandleMessage_Resolution CandleMessage::THIRTY_MINUTES;
constexpr CandleMessage_Resolution CandleMessage::ONE_HOUR;
constexpr CandleMessage_Resolution CandleMessage::FOUR_HOURS;
constexpr CandleMessage_Resolution CandleMessage::ONE_DAY;
constexpr CandleMessage_Resolution CandleMessage::Resolution_MIN;
constexpr CandleMessage_Resolution CandleMessage::Resolution_MAX;
constexpr int CandleMessage::Resolution_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class OrderbookMessage::_Internal {
 public:
};

OrderbookMessage::OrderbookMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.socks.OrderbookMessage)
}
OrderbookMessage::OrderbookMessage(const OrderbookMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderbookMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    _this->_impl_.contents_.Set(from._internal_contents(), _this->GetArenaForAllocation());
  }
  _impl_.clob_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clob_pair_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clob_pair_id().empty()) {
    _this->_impl_.clob_pair_id_.Set(from._internal_clob_pair_id(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.socks.OrderbookMessage)
}

inline void OrderbookMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clob_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clob_pair_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderbookMessage::~OrderbookMessage() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.socks.OrderbookMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderbookMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.Destroy();
  _impl_.clob_pair_id_.Destroy();
  _impl_.version_.Destroy();
}

void OrderbookMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderbookMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.socks.OrderbookMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.ClearToEmpty();
  _impl_.clob_pair_id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderbookMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.OrderbookMessage.contents"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string clob_pair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clob_pair_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.OrderbookMessage.clob_pair_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.OrderbookMessage.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderbookMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.socks.OrderbookMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contents = 1;
  if (!this->_internal_contents().empty()) {
    const std::string& _s = this->_internal_contents();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.OrderbookMessage.contents");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string clob_pair_id = 2;
  if (!this->_internal_clob_pair_id().empty()) {
    const std::string& _s = this->_internal_clob_pair_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.OrderbookMessage.clob_pair_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.OrderbookMessage.version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.socks.OrderbookMessage)
  return target;
}

::size_t OrderbookMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.socks.OrderbookMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contents = 1;
  if (!this->_internal_contents().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contents());
  }

  // string clob_pair_id = 2;
  if (!this->_internal_clob_pair_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_clob_pair_id());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderbookMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderbookMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderbookMessage::GetClassData() const { return &_class_data_; }


void OrderbookMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderbookMessage*>(&to_msg);
  auto& from = static_cast<const OrderbookMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.socks.OrderbookMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contents().empty()) {
    _this->_internal_set_contents(from._internal_contents());
  }
  if (!from._internal_clob_pair_id().empty()) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderbookMessage::CopyFrom(const OrderbookMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.socks.OrderbookMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderbookMessage::IsInitialized() const {
  return true;
}

void OrderbookMessage::InternalSwap(OrderbookMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contents_, lhs_arena,
                                       &other->_impl_.contents_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clob_pair_id_, lhs_arena,
                                       &other->_impl_.clob_pair_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderbookMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[0]);
}
// ===================================================================

class SubaccountMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SubaccountMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubaccountMessage, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& subaccount_id(const SubaccountMessage* msg);
  static void set_has_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&
SubaccountMessage::_Internal::subaccount_id(const SubaccountMessage* msg) {
  return *msg->_impl_.subaccount_id_;
}
void SubaccountMessage::clear_subaccount_id() {
  if (_impl_.subaccount_id_ != nullptr) _impl_.subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SubaccountMessage::SubaccountMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.socks.SubaccountMessage)
}
SubaccountMessage::SubaccountMessage(const SubaccountMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubaccountMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_height_) {}

    , decltype(_impl_.contents_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.transaction_index_) {}

    , decltype(_impl_.event_index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_height_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_height().empty()) {
    _this->_impl_.block_height_.Set(from._internal_block_height(), _this->GetArenaForAllocation());
  }
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    _this->_impl_.contents_.Set(from._internal_contents(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.subaccount_id_ = new ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId(*from._impl_.subaccount_id_);
  }
  ::memcpy(&_impl_.transaction_index_, &from._impl_.transaction_index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.event_index_) -
    reinterpret_cast<char*>(&_impl_.transaction_index_)) + sizeof(_impl_.event_index_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.socks.SubaccountMessage)
}

inline void SubaccountMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_height_) {}

    , decltype(_impl_.contents_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.transaction_index_) { 0 }

    , decltype(_impl_.event_index_) { 0u }

  };
  _impl_.block_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_height_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubaccountMessage::~SubaccountMessage() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.socks.SubaccountMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubaccountMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_height_.Destroy();
  _impl_.contents_.Destroy();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.subaccount_id_;
}

void SubaccountMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubaccountMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.socks.SubaccountMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_height_.ClearToEmpty();
  _impl_.contents_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subaccount_id_ != nullptr);
    _impl_.subaccount_id_->Clear();
  }
  ::memset(&_impl_.transaction_index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.event_index_) -
      reinterpret_cast<char*>(&_impl_.transaction_index_)) + sizeof(_impl_.event_index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubaccountMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string block_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_height();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.SubaccountMessage.block_height"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 transaction_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.transaction_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 event_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.SubaccountMessage.contents"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.SubaccountMessage.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubaccountMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.socks.SubaccountMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string block_height = 1;
  if (!this->_internal_block_height().empty()) {
    const std::string& _s = this->_internal_block_height();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.SubaccountMessage.block_height");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 transaction_index = 2;
  if (this->_internal_transaction_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_transaction_index(), target);
  }

  // uint32 event_index = 3;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_event_index(), target);
  }

  // string contents = 4;
  if (!this->_internal_contents().empty()) {
    const std::string& _s = this->_internal_contents();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.SubaccountMessage.contents");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::subaccount_id(this),
        _Internal::subaccount_id(this).GetCachedSize(), target, stream);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.SubaccountMessage.version");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.socks.SubaccountMessage)
  return target;
}

::size_t SubaccountMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.socks.SubaccountMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_height = 1;
  if (!this->_internal_block_height().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_height());
  }

  // string contents = 4;
  if (!this->_internal_contents().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contents());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subaccount_id_);
  }

  // int32 transaction_index = 2;
  if (this->_internal_transaction_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_transaction_index());
  }

  // uint32 event_index = 3;
  if (this->_internal_event_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_event_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubaccountMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubaccountMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubaccountMessage::GetClassData() const { return &_class_data_; }


void SubaccountMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubaccountMessage*>(&to_msg);
  auto& from = static_cast<const SubaccountMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.socks.SubaccountMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_height().empty()) {
    _this->_internal_set_block_height(from._internal_block_height());
  }
  if (!from._internal_contents().empty()) {
    _this->_internal_set_contents(from._internal_contents());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subaccount_id()->::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId::MergeFrom(
        from._internal_subaccount_id());
  }
  if (from._internal_transaction_index() != 0) {
    _this->_internal_set_transaction_index(from._internal_transaction_index());
  }
  if (from._internal_event_index() != 0) {
    _this->_internal_set_event_index(from._internal_event_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubaccountMessage::CopyFrom(const SubaccountMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.socks.SubaccountMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubaccountMessage::IsInitialized() const {
  return true;
}

void SubaccountMessage::InternalSwap(SubaccountMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_height_, lhs_arena,
                                       &other->_impl_.block_height_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contents_, lhs_arena,
                                       &other->_impl_.contents_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubaccountMessage, _impl_.event_index_)
      + sizeof(SubaccountMessage::_impl_.event_index_)
      - PROTOBUF_FIELD_OFFSET(SubaccountMessage, _impl_.subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubaccountMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[1]);
}
// ===================================================================

class TradeMessage::_Internal {
 public:
};

TradeMessage::TradeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.socks.TradeMessage)
}
TradeMessage::TradeMessage(const TradeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TradeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.block_height_) {}

    , decltype(_impl_.contents_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.block_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_height_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_block_height().empty()) {
    _this->_impl_.block_height_.Set(from._internal_block_height(), _this->GetArenaForAllocation());
  }
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    _this->_impl_.contents_.Set(from._internal_contents(), _this->GetArenaForAllocation());
  }
  _impl_.clob_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clob_pair_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clob_pair_id().empty()) {
    _this->_impl_.clob_pair_id_.Set(from._internal_clob_pair_id(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.socks.TradeMessage)
}

inline void TradeMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.block_height_) {}

    , decltype(_impl_.contents_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.block_height_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.block_height_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clob_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clob_pair_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TradeMessage::~TradeMessage() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.socks.TradeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TradeMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.block_height_.Destroy();
  _impl_.contents_.Destroy();
  _impl_.clob_pair_id_.Destroy();
  _impl_.version_.Destroy();
}

void TradeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TradeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.socks.TradeMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.block_height_.ClearToEmpty();
  _impl_.contents_.ClearToEmpty();
  _impl_.clob_pair_id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TradeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string block_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_block_height();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.TradeMessage.block_height"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.TradeMessage.contents"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string clob_pair_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_clob_pair_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.TradeMessage.clob_pair_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.TradeMessage.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TradeMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.socks.TradeMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string block_height = 1;
  if (!this->_internal_block_height().empty()) {
    const std::string& _s = this->_internal_block_height();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.TradeMessage.block_height");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string contents = 4;
  if (!this->_internal_contents().empty()) {
    const std::string& _s = this->_internal_contents();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.TradeMessage.contents");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string clob_pair_id = 5;
  if (!this->_internal_clob_pair_id().empty()) {
    const std::string& _s = this->_internal_clob_pair_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.TradeMessage.clob_pair_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.TradeMessage.version");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.socks.TradeMessage)
  return target;
}

::size_t TradeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.socks.TradeMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string block_height = 1;
  if (!this->_internal_block_height().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_block_height());
  }

  // string contents = 4;
  if (!this->_internal_contents().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contents());
  }

  // string clob_pair_id = 5;
  if (!this->_internal_clob_pair_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_clob_pair_id());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TradeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TradeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TradeMessage::GetClassData() const { return &_class_data_; }


void TradeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TradeMessage*>(&to_msg);
  auto& from = static_cast<const TradeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.socks.TradeMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_block_height().empty()) {
    _this->_internal_set_block_height(from._internal_block_height());
  }
  if (!from._internal_contents().empty()) {
    _this->_internal_set_contents(from._internal_contents());
  }
  if (!from._internal_clob_pair_id().empty()) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TradeMessage::CopyFrom(const TradeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.socks.TradeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeMessage::IsInitialized() const {
  return true;
}

void TradeMessage::InternalSwap(TradeMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_height_, lhs_arena,
                                       &other->_impl_.block_height_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contents_, lhs_arena,
                                       &other->_impl_.contents_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clob_pair_id_, lhs_arena,
                                       &other->_impl_.clob_pair_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[2]);
}
// ===================================================================

class MarketMessage::_Internal {
 public:
};

MarketMessage::MarketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.socks.MarketMessage)
}
MarketMessage::MarketMessage(const MarketMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    _this->_impl_.contents_.Set(from._internal_contents(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.socks.MarketMessage)
}

inline void MarketMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketMessage::~MarketMessage() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.socks.MarketMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.Destroy();
  _impl_.version_.Destroy();
}

void MarketMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.socks.MarketMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.MarketMessage.contents"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.MarketMessage.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.socks.MarketMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contents = 1;
  if (!this->_internal_contents().empty()) {
    const std::string& _s = this->_internal_contents();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.MarketMessage.contents");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.MarketMessage.version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.socks.MarketMessage)
  return target;
}

::size_t MarketMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.socks.MarketMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contents = 1;
  if (!this->_internal_contents().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contents());
  }

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketMessage::GetClassData() const { return &_class_data_; }


void MarketMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketMessage*>(&to_msg);
  auto& from = static_cast<const MarketMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.socks.MarketMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contents().empty()) {
    _this->_internal_set_contents(from._internal_contents());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketMessage::CopyFrom(const MarketMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.socks.MarketMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketMessage::IsInitialized() const {
  return true;
}

void MarketMessage::InternalSwap(MarketMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contents_, lhs_arena,
                                       &other->_impl_.contents_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[3]);
}
// ===================================================================

class CandleMessage::_Internal {
 public:
};

CandleMessage::CandleMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.socks.CandleMessage)
}
CandleMessage::CandleMessage(const CandleMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CandleMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.resolution_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contents().empty()) {
    _this->_impl_.contents_.Set(from._internal_contents(), _this->GetArenaForAllocation());
  }
  _impl_.clob_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clob_pair_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clob_pair_id().empty()) {
    _this->_impl_.clob_pair_id_.Set(from._internal_clob_pair_id(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _this->_impl_.resolution_ = from._impl_.resolution_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.socks.CandleMessage)
}

inline void CandleMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contents_) {}

    , decltype(_impl_.clob_pair_id_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.resolution_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contents_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clob_pair_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clob_pair_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CandleMessage::~CandleMessage() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.socks.CandleMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CandleMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.Destroy();
  _impl_.clob_pair_id_.Destroy();
  _impl_.version_.Destroy();
}

void CandleMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CandleMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.socks.CandleMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contents_.ClearToEmpty();
  _impl_.clob_pair_id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.resolution_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CandleMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.CandleMessage.contents"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string clob_pair_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clob_pair_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.CandleMessage.clob_pair_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.socks.CandleMessage.Resolution resolution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_resolution(static_cast<::dydxprotocol::indexer::socks::CandleMessage_Resolution>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.socks.CandleMessage.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CandleMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.socks.CandleMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contents = 1;
  if (!this->_internal_contents().empty()) {
    const std::string& _s = this->_internal_contents();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.CandleMessage.contents");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string clob_pair_id = 2;
  if (!this->_internal_clob_pair_id().empty()) {
    const std::string& _s = this->_internal_clob_pair_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.CandleMessage.clob_pair_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .dydxprotocol.indexer.socks.CandleMessage.Resolution resolution = 3;
  if (this->_internal_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_resolution(), target);
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.socks.CandleMessage.version");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.socks.CandleMessage)
  return target;
}

::size_t CandleMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.socks.CandleMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string contents = 1;
  if (!this->_internal_contents().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contents());
  }

  // string clob_pair_id = 2;
  if (!this->_internal_clob_pair_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_clob_pair_id());
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // .dydxprotocol.indexer.socks.CandleMessage.Resolution resolution = 3;
  if (this->_internal_resolution() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_resolution());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CandleMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CandleMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CandleMessage::GetClassData() const { return &_class_data_; }


void CandleMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CandleMessage*>(&to_msg);
  auto& from = static_cast<const CandleMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.socks.CandleMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_contents().empty()) {
    _this->_internal_set_contents(from._internal_contents());
  }
  if (!from._internal_clob_pair_id().empty()) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_resolution() != 0) {
    _this->_internal_set_resolution(from._internal_resolution());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CandleMessage::CopyFrom(const CandleMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.socks.CandleMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleMessage::IsInitialized() const {
  return true;
}

void CandleMessage::InternalSwap(CandleMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contents_, lhs_arena,
                                       &other->_impl_.contents_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clob_pair_id_, lhs_arena,
                                       &other->_impl_.clob_pair_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  swap(_impl_.resolution_, other->_impl_.resolution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandleMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fsocks_2fmessages_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace socks
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::socks::OrderbookMessage*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::socks::OrderbookMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::socks::OrderbookMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::socks::SubaccountMessage*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::socks::SubaccountMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::socks::SubaccountMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::socks::TradeMessage*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::socks::TradeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::socks::TradeMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::socks::MarketMessage*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::socks::MarketMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::socks::MarketMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::socks::CandleMessage*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::socks::CandleMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::socks::CandleMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
