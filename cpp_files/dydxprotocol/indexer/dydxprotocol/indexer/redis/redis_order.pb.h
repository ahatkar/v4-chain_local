// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/redis/redis_order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "dydxprotocol/indexer/protocol/v1/clob.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto;
namespace dydxprotocol {
namespace indexer {
namespace redis {
class RedisOrder;
struct RedisOrderDefaultTypeInternal;
extern RedisOrderDefaultTypeInternal _RedisOrder_default_instance_;
}  // namespace redis
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::indexer::redis::RedisOrder* Arena::CreateMaybeMessage<::dydxprotocol::indexer::redis::RedisOrder>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace indexer {
namespace redis {
enum RedisOrder_TickerType : int {
  RedisOrder_TickerType_TICKER_TYPE_UNSPECIFIED = 0,
  RedisOrder_TickerType_TICKER_TYPE_PERPETUAL = 1,
  RedisOrder_TickerType_TICKER_TYPE_SPOT = 2,
  RedisOrder_TickerType_RedisOrder_TickerType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RedisOrder_TickerType_RedisOrder_TickerType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RedisOrder_TickerType_IsValid(int value);
constexpr RedisOrder_TickerType RedisOrder_TickerType_TickerType_MIN = static_cast<RedisOrder_TickerType>(0);
constexpr RedisOrder_TickerType RedisOrder_TickerType_TickerType_MAX = static_cast<RedisOrder_TickerType>(2);
constexpr int RedisOrder_TickerType_TickerType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RedisOrder_TickerType_descriptor();
template <typename T>
const std::string& RedisOrder_TickerType_Name(T value) {
  static_assert(std::is_same<T, RedisOrder_TickerType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TickerType_Name().");
  return RedisOrder_TickerType_Name(static_cast<RedisOrder_TickerType>(value));
}
template <>
inline const std::string& RedisOrder_TickerType_Name(RedisOrder_TickerType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RedisOrder_TickerType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RedisOrder_TickerType_Parse(absl::string_view name, RedisOrder_TickerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RedisOrder_TickerType>(
      RedisOrder_TickerType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RedisOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.redis.RedisOrder) */ {
 public:
  inline RedisOrder() : RedisOrder(nullptr) {}
  ~RedisOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RedisOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedisOrder(const RedisOrder& from);
  RedisOrder(RedisOrder&& from) noexcept
    : RedisOrder() {
    *this = ::std::move(from);
  }

  inline RedisOrder& operator=(const RedisOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedisOrder& operator=(RedisOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedisOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedisOrder* internal_default_instance() {
    return reinterpret_cast<const RedisOrder*>(
               &_RedisOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RedisOrder& a, RedisOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(RedisOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedisOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedisOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedisOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedisOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RedisOrder& from) {
    RedisOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedisOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.redis.RedisOrder";
  }
  protected:
  explicit RedisOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using TickerType = RedisOrder_TickerType;
  static constexpr TickerType TICKER_TYPE_UNSPECIFIED = RedisOrder_TickerType_TICKER_TYPE_UNSPECIFIED;
  static constexpr TickerType TICKER_TYPE_PERPETUAL = RedisOrder_TickerType_TICKER_TYPE_PERPETUAL;
  static constexpr TickerType TICKER_TYPE_SPOT = RedisOrder_TickerType_TICKER_TYPE_SPOT;
  static inline bool TickerType_IsValid(int value) {
    return RedisOrder_TickerType_IsValid(value);
  }
  static constexpr TickerType TickerType_MIN = RedisOrder_TickerType_TickerType_MIN;
  static constexpr TickerType TickerType_MAX = RedisOrder_TickerType_TickerType_MAX;
  static constexpr int TickerType_ARRAYSIZE = RedisOrder_TickerType_TickerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TickerType_descriptor() {
    return RedisOrder_TickerType_descriptor();
  }
  template <typename T>
  static inline const std::string& TickerType_Name(T value) {
    return RedisOrder_TickerType_Name(value);
  }
  static inline bool TickerType_Parse(absl::string_view name, TickerType* value) {
    return RedisOrder_TickerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTickerFieldNumber = 3,
    kPriceFieldNumber = 5,
    kSizeFieldNumber = 6,
    kOrderFieldNumber = 2,
    kTickerTypeFieldNumber = 4,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string ticker = 3;
  void clear_ticker() ;
  const std::string& ticker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ptr);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // string price = 5;
  void clear_price() ;
  const std::string& price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price(Arg_&& arg, Args_... args);
  std::string* mutable_price();
  PROTOBUF_NODISCARD std::string* release_price();
  void set_allocated_price(std::string* ptr);

  private:
  const std::string& _internal_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price(
      const std::string& value);
  std::string* _internal_mutable_price();

  public:
  // string size = 6;
  void clear_size() ;
  const std::string& size() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_size(Arg_&& arg, Args_... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* ptr);

  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(
      const std::string& value);
  std::string* _internal_mutable_size();

  public:
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
  bool has_order() const;
  void clear_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_order();
  void set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_order();
  // .dydxprotocol.indexer.redis.RedisOrder.TickerType ticker_type = 4;
  void clear_ticker_type() ;
  ::dydxprotocol::indexer::redis::RedisOrder_TickerType ticker_type() const;
  void set_ticker_type(::dydxprotocol::indexer::redis::RedisOrder_TickerType value);

  private:
  ::dydxprotocol::indexer::redis::RedisOrder_TickerType _internal_ticker_type() const;
  void _internal_set_ticker_type(::dydxprotocol::indexer::redis::RedisOrder_TickerType value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.redis.RedisOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order_;
    int ticker_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RedisOrder

// string id = 1;
inline void RedisOrder::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& RedisOrder::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.redis.RedisOrder.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RedisOrder::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.redis.RedisOrder.id)
}
inline std::string* RedisOrder::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.redis.RedisOrder.id)
  return _s;
}
inline const std::string& RedisOrder::_internal_id() const {
  return _impl_.id_.Get();
}
inline void RedisOrder::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* RedisOrder::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* RedisOrder::release_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.redis.RedisOrder.id)
  return _impl_.id_.Release();
}
inline void RedisOrder::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.redis.RedisOrder.id)
}

// .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
inline bool RedisOrder::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& RedisOrder::_internal_order() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& RedisOrder::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.redis.RedisOrder.order)
  return _internal_order();
}
inline void RedisOrder::unsafe_arena_set_allocated_order(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.redis.RedisOrder.order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* RedisOrder::release_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* RedisOrder::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.redis.RedisOrder.order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* RedisOrder::_internal_mutable_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* RedisOrder::mutable_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.redis.RedisOrder.order)
  return _msg;
}
inline void RedisOrder::set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.redis.RedisOrder.order)
}

// string ticker = 3;
inline void RedisOrder::clear_ticker() {
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& RedisOrder::ticker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.redis.RedisOrder.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RedisOrder::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.redis.RedisOrder.ticker)
}
inline std::string* RedisOrder::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.redis.RedisOrder.ticker)
  return _s;
}
inline const std::string& RedisOrder::_internal_ticker() const {
  return _impl_.ticker_.Get();
}
inline void RedisOrder::_internal_set_ticker(const std::string& value) {
  ;


  _impl_.ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* RedisOrder::_internal_mutable_ticker() {
  ;
  return _impl_.ticker_.Mutable( GetArenaForAllocation());
}
inline std::string* RedisOrder::release_ticker() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.redis.RedisOrder.ticker)
  return _impl_.ticker_.Release();
}
inline void RedisOrder::set_allocated_ticker(std::string* value) {
  _impl_.ticker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.redis.RedisOrder.ticker)
}

// .dydxprotocol.indexer.redis.RedisOrder.TickerType ticker_type = 4;
inline void RedisOrder::clear_ticker_type() {
  _impl_.ticker_type_ = 0;
}
inline ::dydxprotocol::indexer::redis::RedisOrder_TickerType RedisOrder::ticker_type() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.redis.RedisOrder.ticker_type)
  return _internal_ticker_type();
}
inline void RedisOrder::set_ticker_type(::dydxprotocol::indexer::redis::RedisOrder_TickerType value) {
   _internal_set_ticker_type(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.redis.RedisOrder.ticker_type)
}
inline ::dydxprotocol::indexer::redis::RedisOrder_TickerType RedisOrder::_internal_ticker_type() const {
  return static_cast<::dydxprotocol::indexer::redis::RedisOrder_TickerType>(_impl_.ticker_type_);
}
inline void RedisOrder::_internal_set_ticker_type(::dydxprotocol::indexer::redis::RedisOrder_TickerType value) {
  ;
  _impl_.ticker_type_ = value;
}

// string price = 5;
inline void RedisOrder::clear_price() {
  _impl_.price_.ClearToEmpty();
}
inline const std::string& RedisOrder::price() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.redis.RedisOrder.price)
  return _internal_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RedisOrder::set_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.redis.RedisOrder.price)
}
inline std::string* RedisOrder::mutable_price() {
  std::string* _s = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.redis.RedisOrder.price)
  return _s;
}
inline const std::string& RedisOrder::_internal_price() const {
  return _impl_.price_.Get();
}
inline void RedisOrder::_internal_set_price(const std::string& value) {
  ;


  _impl_.price_.Set(value, GetArenaForAllocation());
}
inline std::string* RedisOrder::_internal_mutable_price() {
  ;
  return _impl_.price_.Mutable( GetArenaForAllocation());
}
inline std::string* RedisOrder::release_price() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.redis.RedisOrder.price)
  return _impl_.price_.Release();
}
inline void RedisOrder::set_allocated_price(std::string* value) {
  _impl_.price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_.IsDefault()) {
          _impl_.price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.redis.RedisOrder.price)
}

// string size = 6;
inline void RedisOrder::clear_size() {
  _impl_.size_.ClearToEmpty();
}
inline const std::string& RedisOrder::size() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.redis.RedisOrder.size)
  return _internal_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RedisOrder::set_size(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.size_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.redis.RedisOrder.size)
}
inline std::string* RedisOrder::mutable_size() {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.redis.RedisOrder.size)
  return _s;
}
inline const std::string& RedisOrder::_internal_size() const {
  return _impl_.size_.Get();
}
inline void RedisOrder::_internal_set_size(const std::string& value) {
  ;


  _impl_.size_.Set(value, GetArenaForAllocation());
}
inline std::string* RedisOrder::_internal_mutable_size() {
  ;
  return _impl_.size_.Mutable( GetArenaForAllocation());
}
inline std::string* RedisOrder::release_size() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.redis.RedisOrder.size)
  return _impl_.size_.Release();
}
inline void RedisOrder::set_allocated_size(std::string* value) {
  _impl_.size_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.size_.IsDefault()) {
          _impl_.size_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.redis.RedisOrder.size)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace redis
}  // namespace indexer
}  // namespace dydxprotocol


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::dydxprotocol::indexer::redis::RedisOrder_TickerType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::redis::RedisOrder_TickerType>() {
  return ::dydxprotocol::indexer::redis::RedisOrder_TickerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_2epb_2eh
