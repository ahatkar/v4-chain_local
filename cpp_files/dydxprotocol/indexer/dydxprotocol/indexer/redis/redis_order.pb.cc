// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/redis/redis_order.proto

#include "dydxprotocol/indexer/redis/redis_order.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace indexer {
namespace redis {
template <typename>
PROTOBUF_CONSTEXPR RedisOrder::RedisOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.size_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.ticker_type_)*/ 0
} {}
struct RedisOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedisOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedisOrderDefaultTypeInternal() {}
  union {
    RedisOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedisOrderDefaultTypeInternal _RedisOrder_default_instance_;
}  // namespace redis
}  // namespace indexer
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_.ticker_type_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::redis::RedisOrder, _impl_.size_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 14, -1, sizeof(::dydxprotocol::indexer::redis::RedisOrder)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::indexer::redis::_RedisOrder_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n,dydxprotocol/indexer/redis/redis_order"
    ".proto\022\032dydxprotocol.indexer.redis\032+dydx"
    "protocol/indexer/protocol/v1/clob.proto\""
    "\250\002\n\nRedisOrder\022\n\n\002id\030\001 \001(\t\022=\n\005order\030\002 \001("
    "\0132..dydxprotocol.indexer.protocol.v1.Ind"
    "exerOrder\022\016\n\006ticker\030\003 \001(\t\022F\n\013ticker_type"
    "\030\004 \001(\01621.dydxprotocol.indexer.redis.Redi"
    "sOrder.TickerType\022\r\n\005price\030\005 \001(\t\022\014\n\004size"
    "\030\006 \001(\t\"Z\n\nTickerType\022\033\n\027TICKER_TYPE_UNSP"
    "ECIFIED\020\000\022\031\n\025TICKER_TYPE_PERPETUAL\020\001\022\024\n\020"
    "TICKER_TYPE_SPOT\020\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_deps[1] =
    {
        &::descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto = {
    false,
    false,
    426,
    descriptor_table_protodef_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto,
    "dydxprotocol/indexer/redis/redis_order.proto",
    &descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_once,
    descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto::offsets,
    file_level_metadata_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto,
    file_level_enum_descriptors_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto,
    file_level_service_descriptors_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto(&descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto);
namespace dydxprotocol {
namespace indexer {
namespace redis {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RedisOrder_TickerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto[0];
}
bool RedisOrder_TickerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr RedisOrder_TickerType RedisOrder::TICKER_TYPE_UNSPECIFIED;
constexpr RedisOrder_TickerType RedisOrder::TICKER_TYPE_PERPETUAL;
constexpr RedisOrder_TickerType RedisOrder::TICKER_TYPE_SPOT;
constexpr RedisOrder_TickerType RedisOrder::TickerType_MIN;
constexpr RedisOrder_TickerType RedisOrder::TickerType_MAX;
constexpr int RedisOrder::TickerType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class RedisOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<RedisOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RedisOrder, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order(const RedisOrder* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&
RedisOrder::_Internal::order(const RedisOrder* msg) {
  return *msg->_impl_.order_;
}
void RedisOrder::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RedisOrder::RedisOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.redis.RedisOrder)
}
RedisOrder::RedisOrder(const RedisOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RedisOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.size_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.ticker_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price().empty()) {
    _this->_impl_.price_.Set(from._internal_price(), _this->GetArenaForAllocation());
  }
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_size().empty()) {
    _this->_impl_.size_.Set(from._internal_size(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::dydxprotocol::indexer::protocol::v1::IndexerOrder(*from._impl_.order_);
  }
  _this->_impl_.ticker_type_ = from._impl_.ticker_type_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.redis.RedisOrder)
}

inline void RedisOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.ticker_) {}

    , decltype(_impl_.price_) {}

    , decltype(_impl_.size_) {}

    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.ticker_type_) { 0 }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.size_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RedisOrder::~RedisOrder() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.redis.RedisOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedisOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.ticker_.Destroy();
  _impl_.price_.Destroy();
  _impl_.size_.Destroy();
  if (this != internal_default_instance()) delete _impl_.order_;
}

void RedisOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RedisOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.redis.RedisOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.price_.ClearToEmpty();
  _impl_.size_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_.ticker_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RedisOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.redis.RedisOrder.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.redis.RedisOrder.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.redis.RedisOrder.TickerType ticker_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_ticker_type(static_cast<::dydxprotocol::indexer::redis::RedisOrder_TickerType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.redis.RedisOrder.price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.redis.RedisOrder.size"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RedisOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.redis.RedisOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.redis.RedisOrder.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.redis.RedisOrder.ticker");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .dydxprotocol.indexer.redis.RedisOrder.TickerType ticker_type = 4;
  if (this->_internal_ticker_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_ticker_type(), target);
  }

  // string price = 5;
  if (!this->_internal_price().empty()) {
    const std::string& _s = this->_internal_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.redis.RedisOrder.price");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string size = 6;
  if (!this->_internal_size().empty()) {
    const std::string& _s = this->_internal_size();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.redis.RedisOrder.size");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.redis.RedisOrder)
  return target;
}

::size_t RedisOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.redis.RedisOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string ticker = 3;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // string price = 5;
  if (!this->_internal_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price());
  }

  // string size = 6;
  if (!this->_internal_size().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_size());
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // .dydxprotocol.indexer.redis.RedisOrder.TickerType ticker_type = 4;
  if (this->_internal_ticker_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_ticker_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RedisOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RedisOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RedisOrder::GetClassData() const { return &_class_data_; }


void RedisOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RedisOrder*>(&to_msg);
  auto& from = static_cast<const RedisOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.redis.RedisOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_price().empty()) {
    _this->_internal_set_price(from._internal_price());
  }
  if (!from._internal_size().empty()) {
    _this->_internal_set_size(from._internal_size());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::dydxprotocol::indexer::protocol::v1::IndexerOrder::MergeFrom(
        from._internal_order());
  }
  if (from._internal_ticker_type() != 0) {
    _this->_internal_set_ticker_type(from._internal_ticker_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RedisOrder::CopyFrom(const RedisOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.redis.RedisOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisOrder::IsInitialized() const {
  return true;
}

void RedisOrder::InternalSwap(RedisOrder* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_, lhs_arena,
                                       &other->_impl_.price_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.size_, lhs_arena,
                                       &other->_impl_.size_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedisOrder, _impl_.ticker_type_)
      + sizeof(RedisOrder::_impl_.ticker_type_)
      - PROTOBUF_FIELD_OFFSET(RedisOrder, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RedisOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fredis_2fredis_5forder_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace redis
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::redis::RedisOrder*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::redis::RedisOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::redis::RedisOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
