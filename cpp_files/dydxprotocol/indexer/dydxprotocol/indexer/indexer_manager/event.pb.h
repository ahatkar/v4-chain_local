// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/indexer_manager/event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto;
namespace dydxprotocol {
namespace indexer {
namespace indexer_manager {
class IndexerEventsStoreValue;
struct IndexerEventsStoreValueDefaultTypeInternal;
extern IndexerEventsStoreValueDefaultTypeInternal _IndexerEventsStoreValue_default_instance_;
class IndexerTendermintBlock;
struct IndexerTendermintBlockDefaultTypeInternal;
extern IndexerTendermintBlockDefaultTypeInternal _IndexerTendermintBlock_default_instance_;
class IndexerTendermintEvent;
struct IndexerTendermintEventDefaultTypeInternal;
extern IndexerTendermintEventDefaultTypeInternal _IndexerTendermintEvent_default_instance_;
class IndexerTendermintEventWrapper;
struct IndexerTendermintEventWrapperDefaultTypeInternal;
extern IndexerTendermintEventWrapperDefaultTypeInternal _IndexerTendermintEventWrapper_default_instance_;
}  // namespace indexer_manager
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue* Arena::CreateMaybeMessage<::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue>(Arena*);
template <>
::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock* Arena::CreateMaybeMessage<::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock>(Arena*);
template <>
::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* Arena::CreateMaybeMessage<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent>(Arena*);
template <>
::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* Arena::CreateMaybeMessage<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace indexer {
namespace indexer_manager {
enum IndexerTendermintEvent_BlockEvent : int {
  IndexerTendermintEvent_BlockEvent_BLOCK_EVENT_UNSPECIFIED = 0,
  IndexerTendermintEvent_BlockEvent_BLOCK_EVENT_BEGIN_BLOCK = 1,
  IndexerTendermintEvent_BlockEvent_BLOCK_EVENT_END_BLOCK = 2,
  IndexerTendermintEvent_BlockEvent_IndexerTendermintEvent_BlockEvent_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IndexerTendermintEvent_BlockEvent_IndexerTendermintEvent_BlockEvent_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IndexerTendermintEvent_BlockEvent_IsValid(int value);
constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent_BlockEvent_BlockEvent_MIN = static_cast<IndexerTendermintEvent_BlockEvent>(0);
constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent_BlockEvent_BlockEvent_MAX = static_cast<IndexerTendermintEvent_BlockEvent>(2);
constexpr int IndexerTendermintEvent_BlockEvent_BlockEvent_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
IndexerTendermintEvent_BlockEvent_descriptor();
template <typename T>
const std::string& IndexerTendermintEvent_BlockEvent_Name(T value) {
  static_assert(std::is_same<T, IndexerTendermintEvent_BlockEvent>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BlockEvent_Name().");
  return IndexerTendermintEvent_BlockEvent_Name(static_cast<IndexerTendermintEvent_BlockEvent>(value));
}
template <>
inline const std::string& IndexerTendermintEvent_BlockEvent_Name(IndexerTendermintEvent_BlockEvent value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<IndexerTendermintEvent_BlockEvent_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool IndexerTendermintEvent_BlockEvent_Parse(absl::string_view name, IndexerTendermintEvent_BlockEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexerTendermintEvent_BlockEvent>(
      IndexerTendermintEvent_BlockEvent_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IndexerTendermintEventWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper) */ {
 public:
  inline IndexerTendermintEventWrapper() : IndexerTendermintEventWrapper(nullptr) {}
  ~IndexerTendermintEventWrapper() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerTendermintEventWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerTendermintEventWrapper(const IndexerTendermintEventWrapper& from);
  IndexerTendermintEventWrapper(IndexerTendermintEventWrapper&& from) noexcept
    : IndexerTendermintEventWrapper() {
    *this = ::std::move(from);
  }

  inline IndexerTendermintEventWrapper& operator=(const IndexerTendermintEventWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerTendermintEventWrapper& operator=(IndexerTendermintEventWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerTendermintEventWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerTendermintEventWrapper* internal_default_instance() {
    return reinterpret_cast<const IndexerTendermintEventWrapper*>(
               &_IndexerTendermintEventWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexerTendermintEventWrapper& a, IndexerTendermintEventWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerTendermintEventWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerTendermintEventWrapper* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerTendermintEventWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerTendermintEventWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerTendermintEventWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerTendermintEventWrapper& from) {
    IndexerTendermintEventWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerTendermintEventWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper";
  }
  protected:
  explicit IndexerTendermintEventWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxnHashFieldNumber = 2,
    kEventFieldNumber = 1,
  };
  // string txn_hash = 2;
  void clear_txn_hash() ;
  const std::string& txn_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_txn_hash(Arg_&& arg, Args_... args);
  std::string* mutable_txn_hash();
  PROTOBUF_NODISCARD std::string* release_txn_hash();
  void set_allocated_txn_hash(std::string* ptr);

  private:
  const std::string& _internal_txn_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txn_hash(
      const std::string& value);
  std::string* _internal_mutable_txn_hash();

  public:
  // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent event = 1;
  bool has_event() const;
  void clear_event() ;
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& event() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* release_event();
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* mutable_event();
  void set_allocated_event(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* event);
  private:
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& _internal_event() const;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* event);
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* unsafe_arena_release_event();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txn_hash_;
    ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto;
};// -------------------------------------------------------------------

class IndexerEventsStoreValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue) */ {
 public:
  inline IndexerEventsStoreValue() : IndexerEventsStoreValue(nullptr) {}
  ~IndexerEventsStoreValue() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerEventsStoreValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerEventsStoreValue(const IndexerEventsStoreValue& from);
  IndexerEventsStoreValue(IndexerEventsStoreValue&& from) noexcept
    : IndexerEventsStoreValue() {
    *this = ::std::move(from);
  }

  inline IndexerEventsStoreValue& operator=(const IndexerEventsStoreValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerEventsStoreValue& operator=(IndexerEventsStoreValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerEventsStoreValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerEventsStoreValue* internal_default_instance() {
    return reinterpret_cast<const IndexerEventsStoreValue*>(
               &_IndexerEventsStoreValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexerEventsStoreValue& a, IndexerEventsStoreValue& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerEventsStoreValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerEventsStoreValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerEventsStoreValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerEventsStoreValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerEventsStoreValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerEventsStoreValue& from) {
    IndexerEventsStoreValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerEventsStoreValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue";
  }
  protected:
  explicit IndexerEventsStoreValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper >*
      mutable_events();
  private:
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper& _internal_events(int index) const;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper>* _internal_mutable_events();
  public:
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper& events(int index) const;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper >&
      events() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper > events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto;
};// -------------------------------------------------------------------

class IndexerTendermintEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent) */ {
 public:
  inline IndexerTendermintEvent() : IndexerTendermintEvent(nullptr) {}
  ~IndexerTendermintEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerTendermintEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerTendermintEvent(const IndexerTendermintEvent& from);
  IndexerTendermintEvent(IndexerTendermintEvent&& from) noexcept
    : IndexerTendermintEvent() {
    *this = ::std::move(from);
  }

  inline IndexerTendermintEvent& operator=(const IndexerTendermintEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerTendermintEvent& operator=(IndexerTendermintEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerTendermintEvent& default_instance() {
    return *internal_default_instance();
  }
  enum OrderingWithinBlockCase {
    kTransactionIndex = 3,
    kBlockEvent = 4,
    ORDERING_WITHIN_BLOCK_NOT_SET = 0,
  };

  static inline const IndexerTendermintEvent* internal_default_instance() {
    return reinterpret_cast<const IndexerTendermintEvent*>(
               &_IndexerTendermintEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IndexerTendermintEvent& a, IndexerTendermintEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerTendermintEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerTendermintEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerTendermintEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerTendermintEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerTendermintEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerTendermintEvent& from) {
    IndexerTendermintEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerTendermintEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent";
  }
  protected:
  explicit IndexerTendermintEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using BlockEvent = IndexerTendermintEvent_BlockEvent;
  static constexpr BlockEvent BLOCK_EVENT_UNSPECIFIED = IndexerTendermintEvent_BlockEvent_BLOCK_EVENT_UNSPECIFIED;
  static constexpr BlockEvent BLOCK_EVENT_BEGIN_BLOCK = IndexerTendermintEvent_BlockEvent_BLOCK_EVENT_BEGIN_BLOCK;
  static constexpr BlockEvent BLOCK_EVENT_END_BLOCK = IndexerTendermintEvent_BlockEvent_BLOCK_EVENT_END_BLOCK;
  static inline bool BlockEvent_IsValid(int value) {
    return IndexerTendermintEvent_BlockEvent_IsValid(value);
  }
  static constexpr BlockEvent BlockEvent_MIN = IndexerTendermintEvent_BlockEvent_BlockEvent_MIN;
  static constexpr BlockEvent BlockEvent_MAX = IndexerTendermintEvent_BlockEvent_BlockEvent_MAX;
  static constexpr int BlockEvent_ARRAYSIZE = IndexerTendermintEvent_BlockEvent_BlockEvent_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockEvent_descriptor() {
    return IndexerTendermintEvent_BlockEvent_descriptor();
  }
  template <typename T>
  static inline const std::string& BlockEvent_Name(T value) {
    return IndexerTendermintEvent_BlockEvent_Name(value);
  }
  static inline bool BlockEvent_Parse(absl::string_view name, BlockEvent* value) {
    return IndexerTendermintEvent_BlockEvent_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSubtypeFieldNumber = 1,
    kDataFieldNumber = 2,
    kEventIndexFieldNumber = 5,
    kTransactionIndexFieldNumber = 3,
    kBlockEventFieldNumber = 4,
  };
  // string subtype = 1;
  void clear_subtype() ;
  const std::string& subtype() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subtype(Arg_&& arg, Args_... args);
  std::string* mutable_subtype();
  PROTOBUF_NODISCARD std::string* release_subtype();
  void set_allocated_subtype(std::string* ptr);

  private:
  const std::string& _internal_subtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtype(
      const std::string& value);
  std::string* _internal_mutable_subtype();

  public:
  // string data = 2;
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint32 event_index = 5;
  void clear_event_index() ;
  ::uint32_t event_index() const;
  void set_event_index(::uint32_t value);

  private:
  ::uint32_t _internal_event_index() const;
  void _internal_set_event_index(::uint32_t value);

  public:
  // uint32 transaction_index = 3;
  bool has_transaction_index() const;
  void clear_transaction_index() ;
  ::uint32_t transaction_index() const;
  void set_transaction_index(::uint32_t value);

  private:
  ::uint32_t _internal_transaction_index() const;
  void _internal_set_transaction_index(::uint32_t value);

  public:
  // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.BlockEvent block_event = 4;
  bool has_block_event() const;
  void clear_block_event() ;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent block_event() const;
  void set_block_event(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent value);

  private:
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent _internal_block_event() const;
  void _internal_set_block_event(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent value);

  public:
  void clear_ordering_within_block();
  OrderingWithinBlockCase ordering_within_block_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
 private:
  class _Internal;
  void set_has_transaction_index();
  void set_has_block_event();

  inline bool has_ordering_within_block() const;
  inline void clear_has_ordering_within_block();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint32_t event_index_;
    union OrderingWithinBlockUnion {
      constexpr OrderingWithinBlockUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint32_t transaction_index_;
      int block_event_;
    } ordering_within_block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto;
};// -------------------------------------------------------------------

class IndexerTendermintBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock) */ {
 public:
  inline IndexerTendermintBlock() : IndexerTendermintBlock(nullptr) {}
  ~IndexerTendermintBlock() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerTendermintBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerTendermintBlock(const IndexerTendermintBlock& from);
  IndexerTendermintBlock(IndexerTendermintBlock&& from) noexcept
    : IndexerTendermintBlock() {
    *this = ::std::move(from);
  }

  inline IndexerTendermintBlock& operator=(const IndexerTendermintBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerTendermintBlock& operator=(IndexerTendermintBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerTendermintBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerTendermintBlock* internal_default_instance() {
    return reinterpret_cast<const IndexerTendermintBlock*>(
               &_IndexerTendermintBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IndexerTendermintBlock& a, IndexerTendermintBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerTendermintBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerTendermintBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerTendermintBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerTendermintBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerTendermintBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerTendermintBlock& from) {
    IndexerTendermintBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerTendermintBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock";
  }
  protected:
  explicit IndexerTendermintBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 3,
    kTxHashesFieldNumber = 4,
    kTimeFieldNumber = 2,
    kHeightFieldNumber = 1,
  };
  // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent events = 3;
  int events_size() const;
  private:
  int _internal_events_size() const;

  public:
  void clear_events() ;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent >*
      mutable_events();
  private:
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& _internal_events(int index) const;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* _internal_add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent>& _internal_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent>* _internal_mutable_events();
  public:
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& events(int index) const;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent >&
      events() const;
  // repeated string tx_hashes = 4;
  int tx_hashes_size() const;
  private:
  int _internal_tx_hashes_size() const;

  public:
  void clear_tx_hashes() ;
  const std::string& tx_hashes(int index) const;
  std::string* mutable_tx_hashes(int index);
  void set_tx_hashes(int index, const std::string& value);
  void set_tx_hashes(int index, std::string&& value);
  void set_tx_hashes(int index, const char* value);
  void set_tx_hashes(int index, const char* value, std::size_t size);
  void set_tx_hashes(int index, absl::string_view value);
  std::string* add_tx_hashes();
  void add_tx_hashes(const std::string& value);
  void add_tx_hashes(std::string&& value);
  void add_tx_hashes(const char* value);
  void add_tx_hashes(const char* value, std::size_t size);
  void add_tx_hashes(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tx_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tx_hashes();

  private:
  const std::string& _internal_tx_hashes(int index) const;
  std::string* _internal_add_tx_hashes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_tx_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_tx_hashes();

  public:
  // .google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // uint32 height = 1;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent > events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tx_hashes_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::uint32_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexerTendermintEventWrapper

// .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent event = 1;
inline bool IndexerTendermintEventWrapper::has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.event_ != nullptr);
  return value;
}
inline void IndexerTendermintEventWrapper::clear_event() {
  if (_impl_.event_ != nullptr) _impl_.event_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& IndexerTendermintEventWrapper::_internal_event() const {
  const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* p = _impl_.event_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent&>(
      ::dydxprotocol::indexer::indexer_manager::_IndexerTendermintEvent_default_instance_);
}
inline const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& IndexerTendermintEventWrapper::event() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.event)
  return _internal_event();
}
inline void IndexerTendermintEventWrapper::unsafe_arena_set_allocated_event(
    ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.event_);
  }
  _impl_.event_ = event;
  if (event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.event)
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintEventWrapper::release_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* temp = _impl_.event_;
  _impl_.event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintEventWrapper::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* temp = _impl_.event_;
  _impl_.event_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintEventWrapper::_internal_mutable_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.event_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent>(GetArenaForAllocation());
    _impl_.event_ = p;
  }
  return _impl_.event_;
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintEventWrapper::mutable_event() {
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.event)
  return _msg;
}
inline void IndexerTendermintEventWrapper::set_allocated_event(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_ = event;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.event)
}

// string txn_hash = 2;
inline void IndexerTendermintEventWrapper::clear_txn_hash() {
  _impl_.txn_hash_.ClearToEmpty();
}
inline const std::string& IndexerTendermintEventWrapper::txn_hash() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash)
  return _internal_txn_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerTendermintEventWrapper::set_txn_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.txn_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash)
}
inline std::string* IndexerTendermintEventWrapper::mutable_txn_hash() {
  std::string* _s = _internal_mutable_txn_hash();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash)
  return _s;
}
inline const std::string& IndexerTendermintEventWrapper::_internal_txn_hash() const {
  return _impl_.txn_hash_.Get();
}
inline void IndexerTendermintEventWrapper::_internal_set_txn_hash(const std::string& value) {
  ;


  _impl_.txn_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerTendermintEventWrapper::_internal_mutable_txn_hash() {
  ;
  return _impl_.txn_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerTendermintEventWrapper::release_txn_hash() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash)
  return _impl_.txn_hash_.Release();
}
inline void IndexerTendermintEventWrapper::set_allocated_txn_hash(std::string* value) {
  _impl_.txn_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.txn_hash_.IsDefault()) {
          _impl_.txn_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash)
}

// -------------------------------------------------------------------

// IndexerEventsStoreValue

// repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper events = 1;
inline int IndexerEventsStoreValue::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int IndexerEventsStoreValue::events_size() const {
  return _internal_events_size();
}
inline void IndexerEventsStoreValue::clear_events() {
  _internal_mutable_events()->Clear();
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* IndexerEventsStoreValue::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper >*
IndexerEventsStoreValue::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue.events)
  return _internal_mutable_events();
}
inline const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper& IndexerEventsStoreValue::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper& IndexerEventsStoreValue::events(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue.events)
  return _internal_events(index);
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* IndexerEventsStoreValue::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* IndexerEventsStoreValue::add_events() {
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper >&
IndexerEventsStoreValue::events() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper>&
IndexerEventsStoreValue::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper>*
IndexerEventsStoreValue::_internal_mutable_events() {
  return &_impl_.events_;
}

// -------------------------------------------------------------------

// IndexerTendermintEvent

// string subtype = 1;
inline void IndexerTendermintEvent::clear_subtype() {
  _impl_.subtype_.ClearToEmpty();
}
inline const std::string& IndexerTendermintEvent::subtype() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype)
  return _internal_subtype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerTendermintEvent::set_subtype(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subtype_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype)
}
inline std::string* IndexerTendermintEvent::mutable_subtype() {
  std::string* _s = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype)
  return _s;
}
inline const std::string& IndexerTendermintEvent::_internal_subtype() const {
  return _impl_.subtype_.Get();
}
inline void IndexerTendermintEvent::_internal_set_subtype(const std::string& value) {
  ;


  _impl_.subtype_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerTendermintEvent::_internal_mutable_subtype() {
  ;
  return _impl_.subtype_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerTendermintEvent::release_subtype() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype)
  return _impl_.subtype_.Release();
}
inline void IndexerTendermintEvent::set_allocated_subtype(std::string* value) {
  _impl_.subtype_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subtype_.IsDefault()) {
          _impl_.subtype_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype)
}

// string data = 2;
inline void IndexerTendermintEvent::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& IndexerTendermintEvent::data() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerTendermintEvent::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data)
}
inline std::string* IndexerTendermintEvent::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data)
  return _s;
}
inline const std::string& IndexerTendermintEvent::_internal_data() const {
  return _impl_.data_.Get();
}
inline void IndexerTendermintEvent::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerTendermintEvent::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerTendermintEvent::release_data() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data)
  return _impl_.data_.Release();
}
inline void IndexerTendermintEvent::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data)
}

// uint32 transaction_index = 3;
inline bool IndexerTendermintEvent::has_transaction_index() const {
  return ordering_within_block_case() == kTransactionIndex;
}
inline void IndexerTendermintEvent::set_has_transaction_index() {
  _impl_._oneof_case_[0] = kTransactionIndex;
}
inline void IndexerTendermintEvent::clear_transaction_index() {
  if (ordering_within_block_case() == kTransactionIndex) {
    _impl_.ordering_within_block_.transaction_index_ = 0u;
    clear_has_ordering_within_block();
  }
}
inline ::uint32_t IndexerTendermintEvent::transaction_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.transaction_index)
  return _internal_transaction_index();
}
inline void IndexerTendermintEvent::set_transaction_index(::uint32_t value) {
  _internal_set_transaction_index(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.transaction_index)
}
inline ::uint32_t IndexerTendermintEvent::_internal_transaction_index() const {
  if (ordering_within_block_case() == kTransactionIndex) {
    return _impl_.ordering_within_block_.transaction_index_;
  }
  return 0u;
}
inline void IndexerTendermintEvent::_internal_set_transaction_index(::uint32_t value) {
  if (ordering_within_block_case() != kTransactionIndex) {
    clear_ordering_within_block();
    set_has_transaction_index();
  }
  _impl_.ordering_within_block_.transaction_index_ = value;
}

// .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.BlockEvent block_event = 4;
inline bool IndexerTendermintEvent::has_block_event() const {
  return ordering_within_block_case() == kBlockEvent;
}
inline void IndexerTendermintEvent::set_has_block_event() {
  _impl_._oneof_case_[0] = kBlockEvent;
}
inline void IndexerTendermintEvent::clear_block_event() {
  if (ordering_within_block_case() == kBlockEvent) {
    _impl_.ordering_within_block_.block_event_ = 0;
    clear_has_ordering_within_block();
  }
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::block_event() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.block_event)
  return _internal_block_event();
}
inline void IndexerTendermintEvent::set_block_event(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent value) {
   _internal_set_block_event(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.block_event)
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::_internal_block_event() const {
  if (ordering_within_block_case() == kBlockEvent) {
    return static_cast<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent>(_impl_.ordering_within_block_.block_event_);
  }
  return static_cast<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent>(0);
}
inline void IndexerTendermintEvent::_internal_set_block_event(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent value) {
  if (ordering_within_block_case() != kBlockEvent) {
    clear_ordering_within_block();
    set_has_block_event();
  }
  _impl_.ordering_within_block_.block_event_ = value;
}

// uint32 event_index = 5;
inline void IndexerTendermintEvent::clear_event_index() {
  _impl_.event_index_ = 0u;
}
inline ::uint32_t IndexerTendermintEvent::event_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.event_index)
  return _internal_event_index();
}
inline void IndexerTendermintEvent::set_event_index(::uint32_t value) {
  _internal_set_event_index(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.event_index)
}
inline ::uint32_t IndexerTendermintEvent::_internal_event_index() const {
  return _impl_.event_index_;
}
inline void IndexerTendermintEvent::_internal_set_event_index(::uint32_t value) {
  ;
  _impl_.event_index_ = value;
}

inline bool IndexerTendermintEvent::has_ordering_within_block() const {
  return ordering_within_block_case() != ORDERING_WITHIN_BLOCK_NOT_SET;
}
inline void IndexerTendermintEvent::clear_has_ordering_within_block() {
  _impl_._oneof_case_[0] = ORDERING_WITHIN_BLOCK_NOT_SET;
}
inline IndexerTendermintEvent::OrderingWithinBlockCase IndexerTendermintEvent::ordering_within_block_case() const {
  return IndexerTendermintEvent::OrderingWithinBlockCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// IndexerTendermintBlock

// uint32 height = 1;
inline void IndexerTendermintBlock::clear_height() {
  _impl_.height_ = 0u;
}
inline ::uint32_t IndexerTendermintBlock::height() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.height)
  return _internal_height();
}
inline void IndexerTendermintBlock::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.height)
}
inline ::uint32_t IndexerTendermintBlock::_internal_height() const {
  return _impl_.height_;
}
inline void IndexerTendermintBlock::_internal_set_height(::uint32_t value) {
  ;
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool IndexerTendermintBlock::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& IndexerTendermintBlock::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& IndexerTendermintBlock::time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.time)
  return _internal_time();
}
inline void IndexerTendermintBlock::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexerTendermintBlock::release_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexerTendermintBlock::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexerTendermintBlock::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* IndexerTendermintBlock::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.time)
  return _msg;
}
inline void IndexerTendermintBlock::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.time)
}

// repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent events = 3;
inline int IndexerTendermintBlock::_internal_events_size() const {
  return _impl_.events_.size();
}
inline int IndexerTendermintBlock::events_size() const {
  return _internal_events_size();
}
inline void IndexerTendermintBlock::clear_events() {
  _internal_mutable_events()->Clear();
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintBlock::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.events)
  return _internal_mutable_events()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent >*
IndexerTendermintBlock::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.events)
  return _internal_mutable_events();
}
inline const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& IndexerTendermintBlock::_internal_events(int index) const {
  return _internal_events().Get(index);
}
inline const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& IndexerTendermintBlock::events(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.events)
  return _internal_events(index);
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintBlock::_internal_add_events() {
  return _internal_mutable_events()->Add();
}
inline ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* IndexerTendermintBlock::add_events() {
  ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent >&
IndexerTendermintBlock::events() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.events)
  return _internal_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent>&
IndexerTendermintBlock::_internal_events() const {
  return _impl_.events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent>*
IndexerTendermintBlock::_internal_mutable_events() {
  return &_impl_.events_;
}

// repeated string tx_hashes = 4;
inline int IndexerTendermintBlock::_internal_tx_hashes_size() const {
  return _impl_.tx_hashes_.size();
}
inline int IndexerTendermintBlock::tx_hashes_size() const {
  return _internal_tx_hashes_size();
}
inline void IndexerTendermintBlock::clear_tx_hashes() {
  _internal_mutable_tx_hashes()->Clear();
}
inline std::string* IndexerTendermintBlock::add_tx_hashes() {
  std::string* _s = _internal_add_tx_hashes();
  // @@protoc_insertion_point(field_add_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
  return _s;
}
inline const std::string& IndexerTendermintBlock::tx_hashes(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
  return _internal_tx_hashes(index);
}
inline std::string* IndexerTendermintBlock::mutable_tx_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
  return _internal_mutable_tx_hashes()->Mutable(index);
}
inline void IndexerTendermintBlock::set_tx_hashes(int index, const std::string& value) {
  _internal_mutable_tx_hashes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::set_tx_hashes(int index, std::string&& value) {
  _internal_mutable_tx_hashes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::set_tx_hashes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tx_hashes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::set_tx_hashes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_tx_hashes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::set_tx_hashes(int index, absl::string_view value) {
  _internal_mutable_tx_hashes()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::add_tx_hashes(const std::string& value) {
  _internal_mutable_tx_hashes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::add_tx_hashes(std::string&& value) {
  _internal_mutable_tx_hashes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::add_tx_hashes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_tx_hashes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::add_tx_hashes(const char* value, std::size_t size) {
  _internal_mutable_tx_hashes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline void IndexerTendermintBlock::add_tx_hashes(absl::string_view value) {
  _internal_mutable_tx_hashes()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IndexerTendermintBlock::tx_hashes() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
  return _internal_tx_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* IndexerTendermintBlock::mutable_tx_hashes() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes)
  return _internal_mutable_tx_hashes();
}
inline const std::string& IndexerTendermintBlock::_internal_tx_hashes(int index) const {
  return _internal_tx_hashes().Get(index);
}
inline std::string* IndexerTendermintBlock::_internal_add_tx_hashes() {
  return _internal_mutable_tx_hashes()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IndexerTendermintBlock::_internal_tx_hashes() const {
  return _impl_.tx_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IndexerTendermintBlock::_internal_mutable_tx_hashes() {
  return &_impl_.tx_hashes_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace indexer_manager
}  // namespace indexer
}  // namespace dydxprotocol


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent>() {
  return ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_2epb_2eh
