// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/indexer_manager/event.proto

#include "dydxprotocol/indexer/indexer_manager/event.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace indexer {
namespace indexer_manager {
template <typename>
PROTOBUF_CONSTEXPR IndexerTendermintEventWrapper::IndexerTendermintEventWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.txn_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_)*/nullptr} {}
struct IndexerTendermintEventWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerTendermintEventWrapperDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerTendermintEventWrapperDefaultTypeInternal() {}
  union {
    IndexerTendermintEventWrapper _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerTendermintEventWrapperDefaultTypeInternal _IndexerTendermintEventWrapper_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexerEventsStoreValue::IndexerEventsStoreValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexerEventsStoreValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerEventsStoreValueDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerEventsStoreValueDefaultTypeInternal() {}
  union {
    IndexerEventsStoreValue _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerEventsStoreValueDefaultTypeInternal _IndexerEventsStoreValue_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexerTendermintEvent::IndexerTendermintEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.subtype_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.event_index_)*/ 0u

  , /*decltype(_impl_.ordering_within_block_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct IndexerTendermintEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerTendermintEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerTendermintEventDefaultTypeInternal() {}
  union {
    IndexerTendermintEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerTendermintEventDefaultTypeInternal _IndexerTendermintEvent_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexerTendermintBlock::IndexerTendermintBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.tx_hashes_)*/{}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.height_)*/ 0u
} {}
struct IndexerTendermintBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerTendermintBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerTendermintBlockDefaultTypeInternal() {}
  union {
    IndexerTendermintBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerTendermintBlockDefaultTypeInternal _IndexerTendermintBlock_default_instance_;
}  // namespace indexer_manager
}  // namespace indexer
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper, _impl_.event_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper, _impl_.txn_hash_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue, _impl_.events_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _impl_.subtype_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _impl_.data_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _impl_.event_index_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _impl_.ordering_within_block_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock, _impl_.tx_hashes_),
    ~0u,
    0,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper)},
        { 12, -1, -1, sizeof(::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue)},
        { 21, -1, -1, sizeof(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent)},
        { 35, 47, -1, sizeof(::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::indexer::indexer_manager::_IndexerTendermintEventWrapper_default_instance_._instance,
    &::dydxprotocol::indexer::indexer_manager::_IndexerEventsStoreValue_default_instance_._instance,
    &::dydxprotocol::indexer::indexer_manager::_IndexerTendermintEvent_default_instance_._instance,
    &::dydxprotocol::indexer::indexer_manager::_IndexerTendermintBlock_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n0dydxprotocol/indexer/indexer_manager/e"
    "vent.proto\022$dydxprotocol.indexer.indexer"
    "_manager\032\037google/protobuf/timestamp.prot"
    "o\032\024gogoproto/gogo.proto\"~\n\035IndexerTender"
    "mintEventWrapper\022K\n\005event\030\001 \001(\0132<.dydxpr"
    "otocol.indexer.indexer_manager.IndexerTe"
    "ndermintEvent\022\020\n\010txn_hash\030\002 \001(\t\"n\n\027Index"
    "erEventsStoreValue\022S\n\006events\030\001 \003(\0132C.dyd"
    "xprotocol.indexer.indexer_manager.Indexe"
    "rTendermintEventWrapper\"\305\002\n\026IndexerTende"
    "rmintEvent\022\017\n\007subtype\030\001 \001(\t\022\014\n\004data\030\002 \001("
    "\t\022\033\n\021transaction_index\030\003 \001(\rH\000\022^\n\013block_"
    "event\030\004 \001(\0162G.dydxprotocol.indexer.index"
    "er_manager.IndexerTendermintEvent.BlockE"
    "ventH\000\022\023\n\013event_index\030\005 \001(\r\"a\n\nBlockEven"
    "t\022\033\n\027BLOCK_EVENT_UNSPECIFIED\020\000\022\033\n\027BLOCK_"
    "EVENT_BEGIN_BLOCK\020\001\022\031\n\025BLOCK_EVENT_END_B"
    "LOCK\020\002B\027\n\025ordering_within_block\"\275\001\n\026Inde"
    "xerTendermintBlock\022\016\n\006height\030\001 \001(\r\0222\n\004ti"
    "me\030\002 \001(\0132\032.google.protobuf.TimestampB\010\310\336"
    "\037\000\220\337\037\001\022L\n\006events\030\003 \003(\0132<.dydxprotocol.in"
    "dexer.indexer_manager.IndexerTendermintE"
    "vent\022\021\n\ttx_hashes\030\004 \003(\tBCZAgithub.com/dy"
    "dxprotocol/v4-chain/protocol/indexer/ind"
    "exer_managerb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto = {
    false,
    false,
    980,
    descriptor_table_protodef_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto,
    "dydxprotocol/indexer/indexer_manager/event.proto",
    &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_once,
    descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto::offsets,
    file_level_metadata_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto,
    file_level_enum_descriptors_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto,
    file_level_service_descriptors_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto(&descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto);
namespace dydxprotocol {
namespace indexer {
namespace indexer_manager {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexerTendermintEvent_BlockEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[0];
}
bool IndexerTendermintEvent_BlockEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::BLOCK_EVENT_UNSPECIFIED;
constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::BLOCK_EVENT_BEGIN_BLOCK;
constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::BLOCK_EVENT_END_BLOCK;
constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::BlockEvent_MIN;
constexpr IndexerTendermintEvent_BlockEvent IndexerTendermintEvent::BlockEvent_MAX;
constexpr int IndexerTendermintEvent::BlockEvent_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class IndexerTendermintEventWrapper::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexerTendermintEventWrapper>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IndexerTendermintEventWrapper, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent& event(const IndexerTendermintEventWrapper* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent&
IndexerTendermintEventWrapper::_Internal::event(const IndexerTendermintEventWrapper* msg) {
  return *msg->_impl_.event_;
}
IndexerTendermintEventWrapper::IndexerTendermintEventWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
}
IndexerTendermintEventWrapper::IndexerTendermintEventWrapper(const IndexerTendermintEventWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerTendermintEventWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_hash_) {}

    , decltype(_impl_.event_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.txn_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.txn_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_txn_hash().empty()) {
    _this->_impl_.txn_hash_.Set(from._internal_txn_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.event_ = new ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent(*from._impl_.event_);
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
}

inline void IndexerTendermintEventWrapper::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.txn_hash_) {}

    , decltype(_impl_.event_){nullptr}
  };
  _impl_.txn_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.txn_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexerTendermintEventWrapper::~IndexerTendermintEventWrapper() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerTendermintEventWrapper::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.txn_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.event_;
}

void IndexerTendermintEventWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerTendermintEventWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.txn_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.event_ != nullptr);
    _impl_.event_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerTendermintEventWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string txn_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_txn_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerTendermintEventWrapper::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::event(this),
        _Internal::event(this).GetCachedSize(), target, stream);
  }

  // string txn_hash = 2;
  if (!this->_internal_txn_hash().empty()) {
    const std::string& _s = this->_internal_txn_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper.txn_hash");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  return target;
}

::size_t IndexerTendermintEventWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txn_hash = 2;
  if (!this->_internal_txn_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_txn_hash());
  }

  // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent event = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerTendermintEventWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerTendermintEventWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerTendermintEventWrapper::GetClassData() const { return &_class_data_; }


void IndexerTendermintEventWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerTendermintEventWrapper*>(&to_msg);
  auto& from = static_cast<const IndexerTendermintEventWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_txn_hash().empty()) {
    _this->_internal_set_txn_hash(from._internal_txn_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_event()->::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent::MergeFrom(
        from._internal_event());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerTendermintEventWrapper::CopyFrom(const IndexerTendermintEventWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerTendermintEventWrapper::IsInitialized() const {
  return true;
}

void IndexerTendermintEventWrapper::InternalSwap(IndexerTendermintEventWrapper* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.txn_hash_, lhs_arena,
                                       &other->_impl_.txn_hash_, rhs_arena);
  swap(_impl_.event_, other->_impl_.event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerTendermintEventWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[0]);
}
// ===================================================================

class IndexerEventsStoreValue::_Internal {
 public:
};

IndexerEventsStoreValue::IndexerEventsStoreValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
}
IndexerEventsStoreValue::IndexerEventsStoreValue(const IndexerEventsStoreValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerEventsStoreValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
}

inline void IndexerEventsStoreValue::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexerEventsStoreValue::~IndexerEventsStoreValue() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerEventsStoreValue::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
}

void IndexerEventsStoreValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerEventsStoreValue::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerEventsStoreValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerEventsStoreValue::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  return target;
}

::size_t IndexerEventsStoreValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEventWrapper events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerEventsStoreValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerEventsStoreValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerEventsStoreValue::GetClassData() const { return &_class_data_; }


void IndexerEventsStoreValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerEventsStoreValue*>(&to_msg);
  auto& from = static_cast<const IndexerEventsStoreValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerEventsStoreValue::CopyFrom(const IndexerEventsStoreValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.indexer_manager.IndexerEventsStoreValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerEventsStoreValue::IsInitialized() const {
  return true;
}

void IndexerEventsStoreValue::InternalSwap(IndexerEventsStoreValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerEventsStoreValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[1]);
}
// ===================================================================

class IndexerTendermintEvent::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent, _impl_._oneof_case_);
};

IndexerTendermintEvent::IndexerTendermintEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
}
IndexerTendermintEvent::IndexerTendermintEvent(const IndexerTendermintEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerTendermintEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.subtype_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.event_index_) {}

    , decltype(_impl_.ordering_within_block_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.subtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subtype_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtype().empty()) {
    _this->_impl_.subtype_.Set(from._internal_subtype(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.event_index_ = from._impl_.event_index_;
  clear_has_ordering_within_block();
  switch (from.ordering_within_block_case()) {
    case kTransactionIndex: {
      _this->_internal_set_transaction_index(from._internal_transaction_index());
      break;
    }
    case kBlockEvent: {
      _this->_internal_set_block_event(from._internal_block_event());
      break;
    }
    case ORDERING_WITHIN_BLOCK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
}

inline void IndexerTendermintEvent::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.subtype_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.event_index_) { 0u }

    , decltype(_impl_.ordering_within_block_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.subtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subtype_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_ordering_within_block();
}

IndexerTendermintEvent::~IndexerTendermintEvent() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerTendermintEvent::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subtype_.Destroy();
  _impl_.data_.Destroy();
  if (has_ordering_within_block()) {
    clear_ordering_within_block();
  }
}

void IndexerTendermintEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerTendermintEvent::clear_ordering_within_block() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  switch (ordering_within_block_case()) {
    case kTransactionIndex: {
      // No need to clear
      break;
    }
    case kBlockEvent: {
      // No need to clear
      break;
    }
    case ORDERING_WITHIN_BLOCK_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ORDERING_WITHIN_BLOCK_NOT_SET;
}


void IndexerTendermintEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subtype_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.event_index_ = 0u;
  clear_ordering_within_block();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerTendermintEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 transaction_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_transaction_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.BlockEvent block_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_block_event(static_cast<::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent_BlockEvent>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 event_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.event_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerTendermintEvent::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subtype = 1;
  if (!this->_internal_subtype().empty()) {
    const std::string& _s = this->_internal_subtype();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.subtype");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.data");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  switch (ordering_within_block_case()) {
    case kTransactionIndex: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          3, this->_internal_transaction_index(), target);
      break;
    }
    case kBlockEvent: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this->_internal_block_event(), target);
      break;
    }
    default: ;
  }
  // uint32 event_index = 5;
  if (this->_internal_event_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_event_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  return target;
}

::size_t IndexerTendermintEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subtype = 1;
  if (!this->_internal_subtype().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subtype());
  }

  // string data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_data());
  }

  // uint32 event_index = 5;
  if (this->_internal_event_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_event_index());
  }

  switch (ordering_within_block_case()) {
    // uint32 transaction_index = 3;
    case kTransactionIndex: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_transaction_index());
      break;
    }
    // .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent.BlockEvent block_event = 4;
    case kBlockEvent: {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_block_event());
      break;
    }
    case ORDERING_WITHIN_BLOCK_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerTendermintEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerTendermintEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerTendermintEvent::GetClassData() const { return &_class_data_; }


void IndexerTendermintEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerTendermintEvent*>(&to_msg);
  auto& from = static_cast<const IndexerTendermintEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subtype().empty()) {
    _this->_internal_set_subtype(from._internal_subtype());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_event_index() != 0) {
    _this->_internal_set_event_index(from._internal_event_index());
  }
  switch (from.ordering_within_block_case()) {
    case kTransactionIndex: {
      _this->_internal_set_transaction_index(from._internal_transaction_index());
      break;
    }
    case kBlockEvent: {
      _this->_internal_set_block_event(from._internal_block_event());
      break;
    }
    case ORDERING_WITHIN_BLOCK_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerTendermintEvent::CopyFrom(const IndexerTendermintEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerTendermintEvent::IsInitialized() const {
  return true;
}

void IndexerTendermintEvent::InternalSwap(IndexerTendermintEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subtype_, lhs_arena,
                                       &other->_impl_.subtype_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);

  swap(_impl_.event_index_, other->_impl_.event_index_);
  swap(_impl_.ordering_within_block_, other->_impl_.ordering_within_block_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerTendermintEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[2]);
}
// ===================================================================

class IndexerTendermintBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexerTendermintBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IndexerTendermintBlock, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const IndexerTendermintBlock* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IndexerTendermintBlock::_Internal::time(const IndexerTendermintBlock* msg) {
  return *msg->_impl_.time_;
}
void IndexerTendermintBlock::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IndexerTendermintBlock::IndexerTendermintBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
}
IndexerTendermintBlock::IndexerTendermintBlock(const IndexerTendermintBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerTendermintBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.tx_hashes_){from._impl_.tx_hashes_}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
}

inline void IndexerTendermintBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.tx_hashes_){arena}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.height_) { 0u }

  };
}

IndexerTendermintBlock::~IndexerTendermintBlock() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerTendermintBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_events()->~RepeatedPtrField();
  _internal_mutable_tx_hashes()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void IndexerTendermintBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerTendermintBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_events()->Clear();
  _internal_mutable_tx_hashes()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_.height_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerTendermintBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string tx_hashes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tx_hashes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerTendermintBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_height(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent events = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tx_hashes = 4;
  for (int i = 0, n = this->_internal_tx_hashes_size(); i < n; ++i) {
    const auto& s = this->_internal_tx_hashes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock.tx_hashes");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  return target;
}

::size_t IndexerTendermintBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.indexer.indexer_manager.IndexerTendermintEvent events = 3;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tx_hashes = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_tx_hashes().size());
  for (int i = 0, n = _internal_tx_hashes().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_tx_hashes().Get(i));
  }

  // .google.protobuf.Timestamp time = 2 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // uint32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerTendermintBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerTendermintBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerTendermintBlock::GetClassData() const { return &_class_data_; }


void IndexerTendermintBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerTendermintBlock*>(&to_msg);
  auto& from = static_cast<const IndexerTendermintBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(from._internal_events());
  _this->_internal_mutable_tx_hashes()->MergeFrom(from._internal_tx_hashes());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerTendermintBlock::CopyFrom(const IndexerTendermintBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.indexer_manager.IndexerTendermintBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerTendermintBlock::IsInitialized() const {
  return true;
}

void IndexerTendermintBlock::InternalSwap(IndexerTendermintBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_events()->InternalSwap(other->_internal_mutable_events());
  _internal_mutable_tx_hashes()->InternalSwap(
      other->_internal_mutable_tx_hashes());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexerTendermintBlock, _impl_.height_)
      + sizeof(IndexerTendermintBlock::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(IndexerTendermintBlock, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerTendermintBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2findexer_5fmanager_2fevent_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace indexer_manager
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEventWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::indexer_manager::IndexerEventsStoreValue >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::indexer_manager::IndexerTendermintBlock >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
