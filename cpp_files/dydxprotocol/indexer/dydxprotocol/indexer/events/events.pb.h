// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/events/events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fevents_2fevents_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fevents_2fevents_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
#include "dydxprotocol/indexer/shared/removal_reason.pb.h"
#include "dydxprotocol/indexer/protocol/v1/clob.pb.h"
#include "dydxprotocol/indexer/protocol/v1/subaccount.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2findexer_2fevents_2fevents_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
namespace dydxprotocol {
namespace indexer {
namespace events {
class AssetCreateEventV1;
struct AssetCreateEventV1DefaultTypeInternal;
extern AssetCreateEventV1DefaultTypeInternal _AssetCreateEventV1_default_instance_;
class FundingEventV1;
struct FundingEventV1DefaultTypeInternal;
extern FundingEventV1DefaultTypeInternal _FundingEventV1_default_instance_;
class FundingUpdateV1;
struct FundingUpdateV1DefaultTypeInternal;
extern FundingUpdateV1DefaultTypeInternal _FundingUpdateV1_default_instance_;
class LiquidationOrderV1;
struct LiquidationOrderV1DefaultTypeInternal;
extern LiquidationOrderV1DefaultTypeInternal _LiquidationOrderV1_default_instance_;
class LiquidityTierUpsertEventV1;
struct LiquidityTierUpsertEventV1DefaultTypeInternal;
extern LiquidityTierUpsertEventV1DefaultTypeInternal _LiquidityTierUpsertEventV1_default_instance_;
class MarketBaseEventV1;
struct MarketBaseEventV1DefaultTypeInternal;
extern MarketBaseEventV1DefaultTypeInternal _MarketBaseEventV1_default_instance_;
class MarketCreateEventV1;
struct MarketCreateEventV1DefaultTypeInternal;
extern MarketCreateEventV1DefaultTypeInternal _MarketCreateEventV1_default_instance_;
class MarketEventV1;
struct MarketEventV1DefaultTypeInternal;
extern MarketEventV1DefaultTypeInternal _MarketEventV1_default_instance_;
class MarketModifyEventV1;
struct MarketModifyEventV1DefaultTypeInternal;
extern MarketModifyEventV1DefaultTypeInternal _MarketModifyEventV1_default_instance_;
class MarketPriceUpdateEventV1;
struct MarketPriceUpdateEventV1DefaultTypeInternal;
extern MarketPriceUpdateEventV1DefaultTypeInternal _MarketPriceUpdateEventV1_default_instance_;
class OrderFillEventV1;
struct OrderFillEventV1DefaultTypeInternal;
extern OrderFillEventV1DefaultTypeInternal _OrderFillEventV1_default_instance_;
class PerpetualMarketCreateEventV1;
struct PerpetualMarketCreateEventV1DefaultTypeInternal;
extern PerpetualMarketCreateEventV1DefaultTypeInternal _PerpetualMarketCreateEventV1_default_instance_;
class SourceOfFunds;
struct SourceOfFundsDefaultTypeInternal;
extern SourceOfFundsDefaultTypeInternal _SourceOfFunds_default_instance_;
class StatefulOrderEventV1;
struct StatefulOrderEventV1DefaultTypeInternal;
extern StatefulOrderEventV1DefaultTypeInternal _StatefulOrderEventV1_default_instance_;
class StatefulOrderEventV1_ConditionalOrderPlacementV1;
struct StatefulOrderEventV1_ConditionalOrderPlacementV1DefaultTypeInternal;
extern StatefulOrderEventV1_ConditionalOrderPlacementV1DefaultTypeInternal _StatefulOrderEventV1_ConditionalOrderPlacementV1_default_instance_;
class StatefulOrderEventV1_ConditionalOrderTriggeredV1;
struct StatefulOrderEventV1_ConditionalOrderTriggeredV1DefaultTypeInternal;
extern StatefulOrderEventV1_ConditionalOrderTriggeredV1DefaultTypeInternal _StatefulOrderEventV1_ConditionalOrderTriggeredV1_default_instance_;
class StatefulOrderEventV1_LongTermOrderPlacementV1;
struct StatefulOrderEventV1_LongTermOrderPlacementV1DefaultTypeInternal;
extern StatefulOrderEventV1_LongTermOrderPlacementV1DefaultTypeInternal _StatefulOrderEventV1_LongTermOrderPlacementV1_default_instance_;
class StatefulOrderEventV1_StatefulOrderPlacementV1;
struct StatefulOrderEventV1_StatefulOrderPlacementV1DefaultTypeInternal;
extern StatefulOrderEventV1_StatefulOrderPlacementV1DefaultTypeInternal _StatefulOrderEventV1_StatefulOrderPlacementV1_default_instance_;
class StatefulOrderEventV1_StatefulOrderRemovalV1;
struct StatefulOrderEventV1_StatefulOrderRemovalV1DefaultTypeInternal;
extern StatefulOrderEventV1_StatefulOrderRemovalV1DefaultTypeInternal _StatefulOrderEventV1_StatefulOrderRemovalV1_default_instance_;
class SubaccountUpdateEventV1;
struct SubaccountUpdateEventV1DefaultTypeInternal;
extern SubaccountUpdateEventV1DefaultTypeInternal _SubaccountUpdateEventV1_default_instance_;
class TransferEventV1;
struct TransferEventV1DefaultTypeInternal;
extern TransferEventV1DefaultTypeInternal _TransferEventV1_default_instance_;
class UpdateClobPairEventV1;
struct UpdateClobPairEventV1DefaultTypeInternal;
extern UpdateClobPairEventV1DefaultTypeInternal _UpdateClobPairEventV1_default_instance_;
class UpdatePerpetualEventV1;
struct UpdatePerpetualEventV1DefaultTypeInternal;
extern UpdatePerpetualEventV1DefaultTypeInternal _UpdatePerpetualEventV1_default_instance_;
}  // namespace events
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::indexer::events::AssetCreateEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::AssetCreateEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::FundingEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::FundingEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::FundingUpdateV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::FundingUpdateV1>(Arena*);
template <>
::dydxprotocol::indexer::events::LiquidationOrderV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::LiquidationOrderV1>(Arena*);
template <>
::dydxprotocol::indexer::events::LiquidityTierUpsertEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::LiquidityTierUpsertEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::MarketBaseEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::MarketBaseEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::MarketCreateEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::MarketCreateEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::MarketEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::MarketEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::MarketModifyEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::MarketModifyEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::MarketPriceUpdateEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::OrderFillEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::OrderFillEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::PerpetualMarketCreateEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::PerpetualMarketCreateEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::SourceOfFunds* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::SourceOfFunds>(Arena*);
template <>
::dydxprotocol::indexer::events::StatefulOrderEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::StatefulOrderEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1>(Arena*);
template <>
::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1>(Arena*);
template <>
::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1>(Arena*);
template <>
::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1>(Arena*);
template <>
::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1>(Arena*);
template <>
::dydxprotocol::indexer::events::SubaccountUpdateEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::SubaccountUpdateEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::TransferEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::TransferEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::UpdateClobPairEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::UpdateClobPairEventV1>(Arena*);
template <>
::dydxprotocol::indexer::events::UpdatePerpetualEventV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::events::UpdatePerpetualEventV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace indexer {
namespace events {
enum FundingEventV1_Type : int {
  FundingEventV1_Type_TYPE_UNSPECIFIED = 0,
  FundingEventV1_Type_TYPE_PREMIUM_SAMPLE = 1,
  FundingEventV1_Type_TYPE_FUNDING_RATE_AND_INDEX = 2,
  FundingEventV1_Type_TYPE_PREMIUM_VOTE = 3,
  FundingEventV1_Type_FundingEventV1_Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FundingEventV1_Type_FundingEventV1_Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FundingEventV1_Type_IsValid(int value);
constexpr FundingEventV1_Type FundingEventV1_Type_Type_MIN = static_cast<FundingEventV1_Type>(0);
constexpr FundingEventV1_Type FundingEventV1_Type_Type_MAX = static_cast<FundingEventV1_Type>(3);
constexpr int FundingEventV1_Type_Type_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
FundingEventV1_Type_descriptor();
template <typename T>
const std::string& FundingEventV1_Type_Name(T value) {
  static_assert(std::is_same<T, FundingEventV1_Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return FundingEventV1_Type_Name(static_cast<FundingEventV1_Type>(value));
}
template <>
inline const std::string& FundingEventV1_Type_Name(FundingEventV1_Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<FundingEventV1_Type_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FundingEventV1_Type_Parse(absl::string_view name, FundingEventV1_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FundingEventV1_Type>(
      FundingEventV1_Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FundingUpdateV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.FundingUpdateV1) */ {
 public:
  inline FundingUpdateV1() : FundingUpdateV1(nullptr) {}
  ~FundingUpdateV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FundingUpdateV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FundingUpdateV1(const FundingUpdateV1& from);
  FundingUpdateV1(FundingUpdateV1&& from) noexcept
    : FundingUpdateV1() {
    *this = ::std::move(from);
  }

  inline FundingUpdateV1& operator=(const FundingUpdateV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingUpdateV1& operator=(FundingUpdateV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FundingUpdateV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const FundingUpdateV1* internal_default_instance() {
    return reinterpret_cast<const FundingUpdateV1*>(
               &_FundingUpdateV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FundingUpdateV1& a, FundingUpdateV1& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingUpdateV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FundingUpdateV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FundingUpdateV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FundingUpdateV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FundingUpdateV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FundingUpdateV1& from) {
    FundingUpdateV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingUpdateV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.FundingUpdateV1";
  }
  protected:
  explicit FundingUpdateV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundingIndexFieldNumber = 3,
    kPerpetualIdFieldNumber = 1,
    kFundingValuePpmFieldNumber = 2,
  };
  // bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_funding_index() ;
  const std::string& funding_index() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_funding_index(Arg_&& arg, Args_... args);
  std::string* mutable_funding_index();
  PROTOBUF_NODISCARD std::string* release_funding_index();
  void set_allocated_funding_index(std::string* ptr);

  private:
  const std::string& _internal_funding_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funding_index(
      const std::string& value);
  std::string* _internal_mutable_funding_index();

  public:
  // uint32 perpetual_id = 1;
  void clear_perpetual_id() ;
  ::uint32_t perpetual_id() const;
  void set_perpetual_id(::uint32_t value);

  private:
  ::uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(::uint32_t value);

  public:
  // int32 funding_value_ppm = 2;
  void clear_funding_value_ppm() ;
  ::int32_t funding_value_ppm() const;
  void set_funding_value_ppm(::int32_t value);

  private:
  ::int32_t _internal_funding_value_ppm() const;
  void _internal_set_funding_value_ppm(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.FundingUpdateV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_index_;
    ::uint32_t perpetual_id_;
    ::int32_t funding_value_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class FundingEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.FundingEventV1) */ {
 public:
  inline FundingEventV1() : FundingEventV1(nullptr) {}
  ~FundingEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FundingEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FundingEventV1(const FundingEventV1& from);
  FundingEventV1(FundingEventV1&& from) noexcept
    : FundingEventV1() {
    *this = ::std::move(from);
  }

  inline FundingEventV1& operator=(const FundingEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingEventV1& operator=(FundingEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FundingEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const FundingEventV1* internal_default_instance() {
    return reinterpret_cast<const FundingEventV1*>(
               &_FundingEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FundingEventV1& a, FundingEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FundingEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FundingEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FundingEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FundingEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FundingEventV1& from) {
    FundingEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.FundingEventV1";
  }
  protected:
  explicit FundingEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Type = FundingEventV1_Type;
  static constexpr Type TYPE_UNSPECIFIED = FundingEventV1_Type_TYPE_UNSPECIFIED;
  static constexpr Type TYPE_PREMIUM_SAMPLE = FundingEventV1_Type_TYPE_PREMIUM_SAMPLE;
  static constexpr Type TYPE_FUNDING_RATE_AND_INDEX = FundingEventV1_Type_TYPE_FUNDING_RATE_AND_INDEX;
  static constexpr Type TYPE_PREMIUM_VOTE = FundingEventV1_Type_TYPE_PREMIUM_VOTE;
  static inline bool Type_IsValid(int value) {
    return FundingEventV1_Type_IsValid(value);
  }
  static constexpr Type Type_MIN = FundingEventV1_Type_Type_MIN;
  static constexpr Type Type_MAX = FundingEventV1_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE = FundingEventV1_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor() {
    return FundingEventV1_Type_descriptor();
  }
  template <typename T>
  static inline const std::string& Type_Name(T value) {
    return FundingEventV1_Type_Name(value);
  }
  static inline bool Type_Parse(absl::string_view name, Type* value) {
    return FundingEventV1_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .dydxprotocol.indexer.events.FundingUpdateV1 updates = 1 [(.gogoproto.nullable) = false];
  int updates_size() const;
  private:
  int _internal_updates_size() const;

  public:
  void clear_updates() ;
  ::dydxprotocol::indexer::events::FundingUpdateV1* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::events::FundingUpdateV1 >*
      mutable_updates();
  private:
  const ::dydxprotocol::indexer::events::FundingUpdateV1& _internal_updates(int index) const;
  ::dydxprotocol::indexer::events::FundingUpdateV1* _internal_add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::events::FundingUpdateV1>& _internal_updates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::events::FundingUpdateV1>* _internal_mutable_updates();
  public:
  const ::dydxprotocol::indexer::events::FundingUpdateV1& updates(int index) const;
  ::dydxprotocol::indexer::events::FundingUpdateV1* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::events::FundingUpdateV1 >&
      updates() const;
  // .dydxprotocol.indexer.events.FundingEventV1.Type type = 2;
  void clear_type() ;
  ::dydxprotocol::indexer::events::FundingEventV1_Type type() const;
  void set_type(::dydxprotocol::indexer::events::FundingEventV1_Type value);

  private:
  ::dydxprotocol::indexer::events::FundingEventV1_Type _internal_type() const;
  void _internal_set_type(::dydxprotocol::indexer::events::FundingEventV1_Type value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.FundingEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::events::FundingUpdateV1 > updates_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class MarketEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.MarketEventV1) */ {
 public:
  inline MarketEventV1() : MarketEventV1(nullptr) {}
  ~MarketEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketEventV1(const MarketEventV1& from);
  MarketEventV1(MarketEventV1&& from) noexcept
    : MarketEventV1() {
    *this = ::std::move(from);
  }

  inline MarketEventV1& operator=(const MarketEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketEventV1& operator=(MarketEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketEventV1& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kPriceUpdate = 2,
    kMarketCreate = 3,
    kMarketModify = 4,
    EVENT_NOT_SET = 0,
  };

  static inline const MarketEventV1* internal_default_instance() {
    return reinterpret_cast<const MarketEventV1*>(
               &_MarketEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MarketEventV1& a, MarketEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketEventV1& from) {
    MarketEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.MarketEventV1";
  }
  protected:
  explicit MarketEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kPriceUpdateFieldNumber = 2,
    kMarketCreateFieldNumber = 3,
    kMarketModifyFieldNumber = 4,
  };
  // uint32 market_id = 1;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // .dydxprotocol.indexer.events.MarketPriceUpdateEventV1 price_update = 2;
  bool has_price_update() const;
  private:
  bool _internal_has_price_update() const;

  public:
  void clear_price_update() ;
  const ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1& price_update() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* release_price_update();
  ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* mutable_price_update();
  void set_allocated_price_update(::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* price_update);
  private:
  const ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1& _internal_price_update() const;
  ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* _internal_mutable_price_update();
  public:
  void unsafe_arena_set_allocated_price_update(
      ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* price_update);
  ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* unsafe_arena_release_price_update();
  // .dydxprotocol.indexer.events.MarketCreateEventV1 market_create = 3;
  bool has_market_create() const;
  private:
  bool _internal_has_market_create() const;

  public:
  void clear_market_create() ;
  const ::dydxprotocol::indexer::events::MarketCreateEventV1& market_create() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::MarketCreateEventV1* release_market_create();
  ::dydxprotocol::indexer::events::MarketCreateEventV1* mutable_market_create();
  void set_allocated_market_create(::dydxprotocol::indexer::events::MarketCreateEventV1* market_create);
  private:
  const ::dydxprotocol::indexer::events::MarketCreateEventV1& _internal_market_create() const;
  ::dydxprotocol::indexer::events::MarketCreateEventV1* _internal_mutable_market_create();
  public:
  void unsafe_arena_set_allocated_market_create(
      ::dydxprotocol::indexer::events::MarketCreateEventV1* market_create);
  ::dydxprotocol::indexer::events::MarketCreateEventV1* unsafe_arena_release_market_create();
  // .dydxprotocol.indexer.events.MarketModifyEventV1 market_modify = 4;
  bool has_market_modify() const;
  private:
  bool _internal_has_market_modify() const;

  public:
  void clear_market_modify() ;
  const ::dydxprotocol::indexer::events::MarketModifyEventV1& market_modify() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::MarketModifyEventV1* release_market_modify();
  ::dydxprotocol::indexer::events::MarketModifyEventV1* mutable_market_modify();
  void set_allocated_market_modify(::dydxprotocol::indexer::events::MarketModifyEventV1* market_modify);
  private:
  const ::dydxprotocol::indexer::events::MarketModifyEventV1& _internal_market_modify() const;
  ::dydxprotocol::indexer::events::MarketModifyEventV1* _internal_mutable_market_modify();
  public:
  void unsafe_arena_set_allocated_market_modify(
      ::dydxprotocol::indexer::events::MarketModifyEventV1* market_modify);
  ::dydxprotocol::indexer::events::MarketModifyEventV1* unsafe_arena_release_market_modify();
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.MarketEventV1)
 private:
  class _Internal;
  void set_has_price_update();
  void set_has_market_create();
  void set_has_market_modify();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t market_id_;
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* price_update_;
      ::dydxprotocol::indexer::events::MarketCreateEventV1* market_create_;
      ::dydxprotocol::indexer::events::MarketModifyEventV1* market_modify_;
    } event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class MarketPriceUpdateEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.MarketPriceUpdateEventV1) */ {
 public:
  inline MarketPriceUpdateEventV1() : MarketPriceUpdateEventV1(nullptr) {}
  ~MarketPriceUpdateEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketPriceUpdateEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketPriceUpdateEventV1(const MarketPriceUpdateEventV1& from);
  MarketPriceUpdateEventV1(MarketPriceUpdateEventV1&& from) noexcept
    : MarketPriceUpdateEventV1() {
    *this = ::std::move(from);
  }

  inline MarketPriceUpdateEventV1& operator=(const MarketPriceUpdateEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketPriceUpdateEventV1& operator=(MarketPriceUpdateEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketPriceUpdateEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketPriceUpdateEventV1* internal_default_instance() {
    return reinterpret_cast<const MarketPriceUpdateEventV1*>(
               &_MarketPriceUpdateEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MarketPriceUpdateEventV1& a, MarketPriceUpdateEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketPriceUpdateEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketPriceUpdateEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketPriceUpdateEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketPriceUpdateEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketPriceUpdateEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketPriceUpdateEventV1& from) {
    MarketPriceUpdateEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketPriceUpdateEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.MarketPriceUpdateEventV1";
  }
  protected:
  explicit MarketPriceUpdateEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceWithExponentFieldNumber = 1,
  };
  // uint64 price_with_exponent = 1;
  void clear_price_with_exponent() ;
  ::uint64_t price_with_exponent() const;
  void set_price_with_exponent(::uint64_t value);

  private:
  ::uint64_t _internal_price_with_exponent() const;
  void _internal_set_price_with_exponent(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.MarketPriceUpdateEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t price_with_exponent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class MarketBaseEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.MarketBaseEventV1) */ {
 public:
  inline MarketBaseEventV1() : MarketBaseEventV1(nullptr) {}
  ~MarketBaseEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketBaseEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketBaseEventV1(const MarketBaseEventV1& from);
  MarketBaseEventV1(MarketBaseEventV1&& from) noexcept
    : MarketBaseEventV1() {
    *this = ::std::move(from);
  }

  inline MarketBaseEventV1& operator=(const MarketBaseEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketBaseEventV1& operator=(MarketBaseEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketBaseEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketBaseEventV1* internal_default_instance() {
    return reinterpret_cast<const MarketBaseEventV1*>(
               &_MarketBaseEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MarketBaseEventV1& a, MarketBaseEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketBaseEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketBaseEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketBaseEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketBaseEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketBaseEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketBaseEventV1& from) {
    MarketBaseEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketBaseEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.MarketBaseEventV1";
  }
  protected:
  explicit MarketBaseEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairFieldNumber = 1,
    kMinPriceChangePpmFieldNumber = 2,
  };
  // string pair = 1;
  void clear_pair() ;
  const std::string& pair() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_pair(Arg_&& arg, Args_... args);
  std::string* mutable_pair();
  PROTOBUF_NODISCARD std::string* release_pair();
  void set_allocated_pair(std::string* ptr);

  private:
  const std::string& _internal_pair() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pair(
      const std::string& value);
  std::string* _internal_mutable_pair();

  public:
  // uint32 min_price_change_ppm = 2;
  void clear_min_price_change_ppm() ;
  ::uint32_t min_price_change_ppm() const;
  void set_min_price_change_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_min_price_change_ppm() const;
  void _internal_set_min_price_change_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.MarketBaseEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pair_;
    ::uint32_t min_price_change_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class MarketCreateEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.MarketCreateEventV1) */ {
 public:
  inline MarketCreateEventV1() : MarketCreateEventV1(nullptr) {}
  ~MarketCreateEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketCreateEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketCreateEventV1(const MarketCreateEventV1& from);
  MarketCreateEventV1(MarketCreateEventV1&& from) noexcept
    : MarketCreateEventV1() {
    *this = ::std::move(from);
  }

  inline MarketCreateEventV1& operator=(const MarketCreateEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketCreateEventV1& operator=(MarketCreateEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketCreateEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketCreateEventV1* internal_default_instance() {
    return reinterpret_cast<const MarketCreateEventV1*>(
               &_MarketCreateEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarketCreateEventV1& a, MarketCreateEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketCreateEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketCreateEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketCreateEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketCreateEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketCreateEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketCreateEventV1& from) {
    MarketCreateEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketCreateEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.MarketCreateEventV1";
  }
  protected:
  explicit MarketCreateEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
    kExponentFieldNumber = 2,
  };
  // .dydxprotocol.indexer.events.MarketBaseEventV1 base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::dydxprotocol::indexer::events::MarketBaseEventV1& base() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::MarketBaseEventV1* release_base();
  ::dydxprotocol::indexer::events::MarketBaseEventV1* mutable_base();
  void set_allocated_base(::dydxprotocol::indexer::events::MarketBaseEventV1* base);
  private:
  const ::dydxprotocol::indexer::events::MarketBaseEventV1& _internal_base() const;
  ::dydxprotocol::indexer::events::MarketBaseEventV1* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::dydxprotocol::indexer::events::MarketBaseEventV1* base);
  ::dydxprotocol::indexer::events::MarketBaseEventV1* unsafe_arena_release_base();
  // sint32 exponent = 2;
  void clear_exponent() ;
  ::int32_t exponent() const;
  void set_exponent(::int32_t value);

  private:
  ::int32_t _internal_exponent() const;
  void _internal_set_exponent(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.MarketCreateEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::events::MarketBaseEventV1* base_;
    ::int32_t exponent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class MarketModifyEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.MarketModifyEventV1) */ {
 public:
  inline MarketModifyEventV1() : MarketModifyEventV1(nullptr) {}
  ~MarketModifyEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketModifyEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketModifyEventV1(const MarketModifyEventV1& from);
  MarketModifyEventV1(MarketModifyEventV1&& from) noexcept
    : MarketModifyEventV1() {
    *this = ::std::move(from);
  }

  inline MarketModifyEventV1& operator=(const MarketModifyEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketModifyEventV1& operator=(MarketModifyEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketModifyEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketModifyEventV1* internal_default_instance() {
    return reinterpret_cast<const MarketModifyEventV1*>(
               &_MarketModifyEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MarketModifyEventV1& a, MarketModifyEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketModifyEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketModifyEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketModifyEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketModifyEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketModifyEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketModifyEventV1& from) {
    MarketModifyEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketModifyEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.MarketModifyEventV1";
  }
  protected:
  explicit MarketModifyEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // .dydxprotocol.indexer.events.MarketBaseEventV1 base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::dydxprotocol::indexer::events::MarketBaseEventV1& base() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::MarketBaseEventV1* release_base();
  ::dydxprotocol::indexer::events::MarketBaseEventV1* mutable_base();
  void set_allocated_base(::dydxprotocol::indexer::events::MarketBaseEventV1* base);
  private:
  const ::dydxprotocol::indexer::events::MarketBaseEventV1& _internal_base() const;
  ::dydxprotocol::indexer::events::MarketBaseEventV1* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::dydxprotocol::indexer::events::MarketBaseEventV1* base);
  ::dydxprotocol::indexer::events::MarketBaseEventV1* unsafe_arena_release_base();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.MarketModifyEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::events::MarketBaseEventV1* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class SourceOfFunds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.SourceOfFunds) */ {
 public:
  inline SourceOfFunds() : SourceOfFunds(nullptr) {}
  ~SourceOfFunds() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SourceOfFunds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceOfFunds(const SourceOfFunds& from);
  SourceOfFunds(SourceOfFunds&& from) noexcept
    : SourceOfFunds() {
    *this = ::std::move(from);
  }

  inline SourceOfFunds& operator=(const SourceOfFunds& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceOfFunds& operator=(SourceOfFunds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceOfFunds& default_instance() {
    return *internal_default_instance();
  }
  enum SourceCase {
    kSubaccountId = 1,
    kAddress = 2,
    SOURCE_NOT_SET = 0,
  };

  static inline const SourceOfFunds* internal_default_instance() {
    return reinterpret_cast<const SourceOfFunds*>(
               &_SourceOfFunds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SourceOfFunds& a, SourceOfFunds& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceOfFunds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceOfFunds* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceOfFunds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceOfFunds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceOfFunds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SourceOfFunds& from) {
    SourceOfFunds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceOfFunds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.SourceOfFunds";
  }
  protected:
  explicit SourceOfFunds(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1;
  bool has_subaccount_id() const;
  private:
  bool _internal_has_subaccount_id() const;

  public:
  void clear_subaccount_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* release_subaccount_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* mutable_subaccount_id();
  void set_allocated_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& _internal_subaccount_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _internal_mutable_subaccount_id();
  public:
  void unsafe_arena_set_allocated_subaccount_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* unsafe_arena_release_subaccount_id();
  // string address = 2 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  bool has_address() const;
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.SourceOfFunds)
 private:
  class _Internal;
  void set_has_subaccount_id();
  void set_has_address();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SourceUnion {
      constexpr SourceUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    } source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class TransferEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.TransferEventV1) */ {
 public:
  inline TransferEventV1() : TransferEventV1(nullptr) {}
  ~TransferEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TransferEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransferEventV1(const TransferEventV1& from);
  TransferEventV1(TransferEventV1&& from) noexcept
    : TransferEventV1() {
    *this = ::std::move(from);
  }

  inline TransferEventV1& operator=(const TransferEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferEventV1& operator=(TransferEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransferEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransferEventV1* internal_default_instance() {
    return reinterpret_cast<const TransferEventV1*>(
               &_TransferEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransferEventV1& a, TransferEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransferEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransferEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransferEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransferEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransferEventV1& from) {
    TransferEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.TransferEventV1";
  }
  protected:
  explicit TransferEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderSubaccountIdFieldNumber = 1,
    kRecipientSubaccountIdFieldNumber = 2,
    kSenderFieldNumber = 5,
    kRecipientFieldNumber = 6,
    kAmountFieldNumber = 4,
    kAssetIdFieldNumber = 3,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId sender_subaccount_id = 1;
  bool has_sender_subaccount_id() const;
  void clear_sender_subaccount_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& sender_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* release_sender_subaccount_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* mutable_sender_subaccount_id();
  void set_allocated_sender_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* sender_subaccount_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& _internal_sender_subaccount_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _internal_mutable_sender_subaccount_id();
  public:
  void unsafe_arena_set_allocated_sender_subaccount_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* sender_subaccount_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* unsafe_arena_release_sender_subaccount_id();
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId recipient_subaccount_id = 2;
  bool has_recipient_subaccount_id() const;
  void clear_recipient_subaccount_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& recipient_subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* release_recipient_subaccount_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* mutable_recipient_subaccount_id();
  void set_allocated_recipient_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* recipient_subaccount_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& _internal_recipient_subaccount_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _internal_mutable_recipient_subaccount_id();
  public:
  void unsafe_arena_set_allocated_recipient_subaccount_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* recipient_subaccount_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* unsafe_arena_release_recipient_subaccount_id();
  // .dydxprotocol.indexer.events.SourceOfFunds sender = 5;
  bool has_sender() const;
  void clear_sender() ;
  const ::dydxprotocol::indexer::events::SourceOfFunds& sender() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::SourceOfFunds* release_sender();
  ::dydxprotocol::indexer::events::SourceOfFunds* mutable_sender();
  void set_allocated_sender(::dydxprotocol::indexer::events::SourceOfFunds* sender);
  private:
  const ::dydxprotocol::indexer::events::SourceOfFunds& _internal_sender() const;
  ::dydxprotocol::indexer::events::SourceOfFunds* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::dydxprotocol::indexer::events::SourceOfFunds* sender);
  ::dydxprotocol::indexer::events::SourceOfFunds* unsafe_arena_release_sender();
  // .dydxprotocol.indexer.events.SourceOfFunds recipient = 6;
  bool has_recipient() const;
  void clear_recipient() ;
  const ::dydxprotocol::indexer::events::SourceOfFunds& recipient() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::SourceOfFunds* release_recipient();
  ::dydxprotocol::indexer::events::SourceOfFunds* mutable_recipient();
  void set_allocated_recipient(::dydxprotocol::indexer::events::SourceOfFunds* recipient);
  private:
  const ::dydxprotocol::indexer::events::SourceOfFunds& _internal_recipient() const;
  ::dydxprotocol::indexer::events::SourceOfFunds* _internal_mutable_recipient();
  public:
  void unsafe_arena_set_allocated_recipient(
      ::dydxprotocol::indexer::events::SourceOfFunds* recipient);
  ::dydxprotocol::indexer::events::SourceOfFunds* unsafe_arena_release_recipient();
  // uint64 amount = 4;
  void clear_amount() ;
  ::uint64_t amount() const;
  void set_amount(::uint64_t value);

  private:
  ::uint64_t _internal_amount() const;
  void _internal_set_amount(::uint64_t value);

  public:
  // uint32 asset_id = 3;
  void clear_asset_id() ;
  ::uint32_t asset_id() const;
  void set_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.TransferEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* sender_subaccount_id_;
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* recipient_subaccount_id_;
    ::dydxprotocol::indexer::events::SourceOfFunds* sender_;
    ::dydxprotocol::indexer::events::SourceOfFunds* recipient_;
    ::uint64_t amount_;
    ::uint32_t asset_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class OrderFillEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.OrderFillEventV1) */ {
 public:
  inline OrderFillEventV1() : OrderFillEventV1(nullptr) {}
  ~OrderFillEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderFillEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderFillEventV1(const OrderFillEventV1& from);
  OrderFillEventV1(OrderFillEventV1&& from) noexcept
    : OrderFillEventV1() {
    *this = ::std::move(from);
  }

  inline OrderFillEventV1& operator=(const OrderFillEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderFillEventV1& operator=(OrderFillEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderFillEventV1& default_instance() {
    return *internal_default_instance();
  }
  enum TakerOrderCase {
    kOrder = 2,
    kLiquidationOrder = 4,
    TAKER_ORDER_NOT_SET = 0,
  };

  static inline const OrderFillEventV1* internal_default_instance() {
    return reinterpret_cast<const OrderFillEventV1*>(
               &_OrderFillEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OrderFillEventV1& a, OrderFillEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderFillEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderFillEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderFillEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderFillEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderFillEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderFillEventV1& from) {
    OrderFillEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderFillEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.OrderFillEventV1";
  }
  protected:
  explicit OrderFillEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMakerOrderFieldNumber = 1,
    kFillAmountFieldNumber = 3,
    kMakerFeeFieldNumber = 5,
    kTakerFeeFieldNumber = 6,
    kTotalFilledMakerFieldNumber = 7,
    kTotalFilledTakerFieldNumber = 8,
    kOrderFieldNumber = 2,
    kLiquidationOrderFieldNumber = 4,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder maker_order = 1 [(.gogoproto.nullable) = false];
  bool has_maker_order() const;
  void clear_maker_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& maker_order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_maker_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_maker_order();
  void set_allocated_maker_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* maker_order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_maker_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_maker_order();
  public:
  void unsafe_arena_set_allocated_maker_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* maker_order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_maker_order();
  // uint64 fill_amount = 3;
  void clear_fill_amount() ;
  ::uint64_t fill_amount() const;
  void set_fill_amount(::uint64_t value);

  private:
  ::uint64_t _internal_fill_amount() const;
  void _internal_set_fill_amount(::uint64_t value);

  public:
  // sint64 maker_fee = 5;
  void clear_maker_fee() ;
  ::int64_t maker_fee() const;
  void set_maker_fee(::int64_t value);

  private:
  ::int64_t _internal_maker_fee() const;
  void _internal_set_maker_fee(::int64_t value);

  public:
  // sint64 taker_fee = 6;
  void clear_taker_fee() ;
  ::int64_t taker_fee() const;
  void set_taker_fee(::int64_t value);

  private:
  ::int64_t _internal_taker_fee() const;
  void _internal_set_taker_fee(::int64_t value);

  public:
  // uint64 total_filled_maker = 7;
  void clear_total_filled_maker() ;
  ::uint64_t total_filled_maker() const;
  void set_total_filled_maker(::uint64_t value);

  private:
  ::uint64_t _internal_total_filled_maker() const;
  void _internal_set_total_filled_maker(::uint64_t value);

  public:
  // uint64 total_filled_taker = 8;
  void clear_total_filled_taker() ;
  ::uint64_t total_filled_taker() const;
  void set_total_filled_taker(::uint64_t value);

  private:
  ::uint64_t _internal_total_filled_taker() const;
  void _internal_set_total_filled_taker(::uint64_t value);

  public:
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;

  public:
  void clear_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_order();
  void set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_order();
  // .dydxprotocol.indexer.events.LiquidationOrderV1 liquidation_order = 4;
  bool has_liquidation_order() const;
  private:
  bool _internal_has_liquidation_order() const;

  public:
  void clear_liquidation_order() ;
  const ::dydxprotocol::indexer::events::LiquidationOrderV1& liquidation_order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::LiquidationOrderV1* release_liquidation_order();
  ::dydxprotocol::indexer::events::LiquidationOrderV1* mutable_liquidation_order();
  void set_allocated_liquidation_order(::dydxprotocol::indexer::events::LiquidationOrderV1* liquidation_order);
  private:
  const ::dydxprotocol::indexer::events::LiquidationOrderV1& _internal_liquidation_order() const;
  ::dydxprotocol::indexer::events::LiquidationOrderV1* _internal_mutable_liquidation_order();
  public:
  void unsafe_arena_set_allocated_liquidation_order(
      ::dydxprotocol::indexer::events::LiquidationOrderV1* liquidation_order);
  ::dydxprotocol::indexer::events::LiquidationOrderV1* unsafe_arena_release_liquidation_order();
  void clear_taker_order();
  TakerOrderCase taker_order_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.OrderFillEventV1)
 private:
  class _Internal;
  void set_has_order();
  void set_has_liquidation_order();

  inline bool has_taker_order() const;
  inline void clear_has_taker_order();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* maker_order_;
    ::uint64_t fill_amount_;
    ::int64_t maker_fee_;
    ::int64_t taker_fee_;
    ::uint64_t total_filled_maker_;
    ::uint64_t total_filled_taker_;
    union TakerOrderUnion {
      constexpr TakerOrderUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order_;
      ::dydxprotocol::indexer::events::LiquidationOrderV1* liquidation_order_;
    } taker_order_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class LiquidationOrderV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.LiquidationOrderV1) */ {
 public:
  inline LiquidationOrderV1() : LiquidationOrderV1(nullptr) {}
  ~LiquidationOrderV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LiquidationOrderV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LiquidationOrderV1(const LiquidationOrderV1& from);
  LiquidationOrderV1(LiquidationOrderV1&& from) noexcept
    : LiquidationOrderV1() {
    *this = ::std::move(from);
  }

  inline LiquidationOrderV1& operator=(const LiquidationOrderV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidationOrderV1& operator=(LiquidationOrderV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiquidationOrderV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiquidationOrderV1* internal_default_instance() {
    return reinterpret_cast<const LiquidationOrderV1*>(
               &_LiquidationOrderV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LiquidationOrderV1& a, LiquidationOrderV1& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidationOrderV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidationOrderV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiquidationOrderV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LiquidationOrderV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LiquidationOrderV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LiquidationOrderV1& from) {
    LiquidationOrderV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidationOrderV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.LiquidationOrderV1";
  }
  protected:
  explicit LiquidationOrderV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiquidatedFieldNumber = 1,
    kClobPairIdFieldNumber = 2,
    kPerpetualIdFieldNumber = 3,
    kTotalSizeFieldNumber = 4,
    kSubticksFieldNumber = 6,
    kIsBuyFieldNumber = 5,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
  bool has_liquidated() const;
  void clear_liquidated() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& liquidated() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* release_liquidated();
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* mutable_liquidated();
  void set_allocated_liquidated(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* liquidated);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& _internal_liquidated() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _internal_mutable_liquidated();
  public:
  void unsafe_arena_set_allocated_liquidated(
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* liquidated);
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* unsafe_arena_release_liquidated();
  // uint32 clob_pair_id = 2;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // uint32 perpetual_id = 3;
  void clear_perpetual_id() ;
  ::uint32_t perpetual_id() const;
  void set_perpetual_id(::uint32_t value);

  private:
  ::uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(::uint32_t value);

  public:
  // uint64 total_size = 4;
  void clear_total_size() ;
  ::uint64_t total_size() const;
  void set_total_size(::uint64_t value);

  private:
  ::uint64_t _internal_total_size() const;
  void _internal_set_total_size(::uint64_t value);

  public:
  // uint64 subticks = 6;
  void clear_subticks() ;
  ::uint64_t subticks() const;
  void set_subticks(::uint64_t value);

  private:
  ::uint64_t _internal_subticks() const;
  void _internal_set_subticks(::uint64_t value);

  public:
  // bool is_buy = 5;
  void clear_is_buy() ;
  bool is_buy() const;
  void set_is_buy(bool value);

  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.LiquidationOrderV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* liquidated_;
    ::uint32_t clob_pair_id_;
    ::uint32_t perpetual_id_;
    ::uint64_t total_size_;
    ::uint64_t subticks_;
    bool is_buy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class SubaccountUpdateEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.SubaccountUpdateEventV1) */ {
 public:
  inline SubaccountUpdateEventV1() : SubaccountUpdateEventV1(nullptr) {}
  ~SubaccountUpdateEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubaccountUpdateEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubaccountUpdateEventV1(const SubaccountUpdateEventV1& from);
  SubaccountUpdateEventV1(SubaccountUpdateEventV1&& from) noexcept
    : SubaccountUpdateEventV1() {
    *this = ::std::move(from);
  }

  inline SubaccountUpdateEventV1& operator=(const SubaccountUpdateEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubaccountUpdateEventV1& operator=(SubaccountUpdateEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubaccountUpdateEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubaccountUpdateEventV1* internal_default_instance() {
    return reinterpret_cast<const SubaccountUpdateEventV1*>(
               &_SubaccountUpdateEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubaccountUpdateEventV1& a, SubaccountUpdateEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(SubaccountUpdateEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubaccountUpdateEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubaccountUpdateEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubaccountUpdateEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubaccountUpdateEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubaccountUpdateEventV1& from) {
    SubaccountUpdateEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubaccountUpdateEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.SubaccountUpdateEventV1";
  }
  protected:
  explicit SubaccountUpdateEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedPerpetualPositionsFieldNumber = 3,
    kUpdatedAssetPositionsFieldNumber = 4,
    kSubaccountIdFieldNumber = 1,
  };
  // repeated .dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition updated_perpetual_positions = 3;
  int updated_perpetual_positions_size() const;
  private:
  int _internal_updated_perpetual_positions_size() const;

  public:
  void clear_updated_perpetual_positions() ;
  ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* mutable_updated_perpetual_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition >*
      mutable_updated_perpetual_positions();
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition& _internal_updated_perpetual_positions(int index) const;
  ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* _internal_add_updated_perpetual_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition>& _internal_updated_perpetual_positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition>* _internal_mutable_updated_perpetual_positions();
  public:
  const ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition& updated_perpetual_positions(int index) const;
  ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* add_updated_perpetual_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition >&
      updated_perpetual_positions() const;
  // repeated .dydxprotocol.indexer.protocol.v1.IndexerAssetPosition updated_asset_positions = 4;
  int updated_asset_positions_size() const;
  private:
  int _internal_updated_asset_positions_size() const;

  public:
  void clear_updated_asset_positions() ;
  ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* mutable_updated_asset_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition >*
      mutable_updated_asset_positions();
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition& _internal_updated_asset_positions(int index) const;
  ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* _internal_add_updated_asset_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition>& _internal_updated_asset_positions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition>* _internal_mutable_updated_asset_positions();
  public:
  const ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition& updated_asset_positions(int index) const;
  ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* add_updated_asset_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition >&
      updated_asset_positions() const;
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1;
  bool has_subaccount_id() const;
  void clear_subaccount_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* release_subaccount_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* mutable_subaccount_id();
  void set_allocated_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& _internal_subaccount_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _internal_mutable_subaccount_id();
  public:
  void unsafe_arena_set_allocated_subaccount_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* unsafe_arena_release_subaccount_id();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.SubaccountUpdateEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition > updated_perpetual_positions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition > updated_asset_positions_;
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class StatefulOrderEventV1_StatefulOrderPlacementV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1) */ {
 public:
  inline StatefulOrderEventV1_StatefulOrderPlacementV1() : StatefulOrderEventV1_StatefulOrderPlacementV1(nullptr) {}
  ~StatefulOrderEventV1_StatefulOrderPlacementV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatefulOrderEventV1_StatefulOrderPlacementV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderEventV1_StatefulOrderPlacementV1(const StatefulOrderEventV1_StatefulOrderPlacementV1& from);
  StatefulOrderEventV1_StatefulOrderPlacementV1(StatefulOrderEventV1_StatefulOrderPlacementV1&& from) noexcept
    : StatefulOrderEventV1_StatefulOrderPlacementV1() {
    *this = ::std::move(from);
  }

  inline StatefulOrderEventV1_StatefulOrderPlacementV1& operator=(const StatefulOrderEventV1_StatefulOrderPlacementV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderEventV1_StatefulOrderPlacementV1& operator=(StatefulOrderEventV1_StatefulOrderPlacementV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderEventV1_StatefulOrderPlacementV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatefulOrderEventV1_StatefulOrderPlacementV1* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderEventV1_StatefulOrderPlacementV1*>(
               &_StatefulOrderEventV1_StatefulOrderPlacementV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StatefulOrderEventV1_StatefulOrderPlacementV1& a, StatefulOrderEventV1_StatefulOrderPlacementV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderEventV1_StatefulOrderPlacementV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderEventV1_StatefulOrderPlacementV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderEventV1_StatefulOrderPlacementV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderEventV1_StatefulOrderPlacementV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderEventV1_StatefulOrderPlacementV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderEventV1_StatefulOrderPlacementV1& from) {
    StatefulOrderEventV1_StatefulOrderPlacementV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderEventV1_StatefulOrderPlacementV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1";
  }
  protected:
  explicit StatefulOrderEventV1_StatefulOrderPlacementV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
  bool has_order() const;
  void clear_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_order();
  void set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_order();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class StatefulOrderEventV1_StatefulOrderRemovalV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1) */ {
 public:
  inline StatefulOrderEventV1_StatefulOrderRemovalV1() : StatefulOrderEventV1_StatefulOrderRemovalV1(nullptr) {}
  ~StatefulOrderEventV1_StatefulOrderRemovalV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatefulOrderEventV1_StatefulOrderRemovalV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderEventV1_StatefulOrderRemovalV1(const StatefulOrderEventV1_StatefulOrderRemovalV1& from);
  StatefulOrderEventV1_StatefulOrderRemovalV1(StatefulOrderEventV1_StatefulOrderRemovalV1&& from) noexcept
    : StatefulOrderEventV1_StatefulOrderRemovalV1() {
    *this = ::std::move(from);
  }

  inline StatefulOrderEventV1_StatefulOrderRemovalV1& operator=(const StatefulOrderEventV1_StatefulOrderRemovalV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderEventV1_StatefulOrderRemovalV1& operator=(StatefulOrderEventV1_StatefulOrderRemovalV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderEventV1_StatefulOrderRemovalV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatefulOrderEventV1_StatefulOrderRemovalV1* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderEventV1_StatefulOrderRemovalV1*>(
               &_StatefulOrderEventV1_StatefulOrderRemovalV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StatefulOrderEventV1_StatefulOrderRemovalV1& a, StatefulOrderEventV1_StatefulOrderRemovalV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderEventV1_StatefulOrderRemovalV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderEventV1_StatefulOrderRemovalV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderEventV1_StatefulOrderRemovalV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderEventV1_StatefulOrderRemovalV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderEventV1_StatefulOrderRemovalV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderEventV1_StatefulOrderRemovalV1& from) {
    StatefulOrderEventV1_StatefulOrderRemovalV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderEventV1_StatefulOrderRemovalV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1";
  }
  protected:
  explicit StatefulOrderEventV1_StatefulOrderRemovalV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedOrderIdFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
  bool has_removed_order_id() const;
  void clear_removed_order_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& removed_order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* release_removed_order_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* mutable_removed_order_id();
  void set_allocated_removed_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& _internal_removed_order_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _internal_mutable_removed_order_id();
  public:
  void unsafe_arena_set_allocated_removed_order_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* unsafe_arena_release_removed_order_id();
  // .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
  void clear_reason() ;
  ::dydxprotocol::indexer::shared::OrderRemovalReason reason() const;
  void set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value);

  private:
  ::dydxprotocol::indexer::shared::OrderRemovalReason _internal_reason() const;
  void _internal_set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id_;
    int reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class StatefulOrderEventV1_ConditionalOrderPlacementV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1) */ {
 public:
  inline StatefulOrderEventV1_ConditionalOrderPlacementV1() : StatefulOrderEventV1_ConditionalOrderPlacementV1(nullptr) {}
  ~StatefulOrderEventV1_ConditionalOrderPlacementV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatefulOrderEventV1_ConditionalOrderPlacementV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderEventV1_ConditionalOrderPlacementV1(const StatefulOrderEventV1_ConditionalOrderPlacementV1& from);
  StatefulOrderEventV1_ConditionalOrderPlacementV1(StatefulOrderEventV1_ConditionalOrderPlacementV1&& from) noexcept
    : StatefulOrderEventV1_ConditionalOrderPlacementV1() {
    *this = ::std::move(from);
  }

  inline StatefulOrderEventV1_ConditionalOrderPlacementV1& operator=(const StatefulOrderEventV1_ConditionalOrderPlacementV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderEventV1_ConditionalOrderPlacementV1& operator=(StatefulOrderEventV1_ConditionalOrderPlacementV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderEventV1_ConditionalOrderPlacementV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatefulOrderEventV1_ConditionalOrderPlacementV1* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderEventV1_ConditionalOrderPlacementV1*>(
               &_StatefulOrderEventV1_ConditionalOrderPlacementV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StatefulOrderEventV1_ConditionalOrderPlacementV1& a, StatefulOrderEventV1_ConditionalOrderPlacementV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderEventV1_ConditionalOrderPlacementV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderEventV1_ConditionalOrderPlacementV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderEventV1_ConditionalOrderPlacementV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderEventV1_ConditionalOrderPlacementV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderEventV1_ConditionalOrderPlacementV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderEventV1_ConditionalOrderPlacementV1& from) {
    StatefulOrderEventV1_ConditionalOrderPlacementV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderEventV1_ConditionalOrderPlacementV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1";
  }
  protected:
  explicit StatefulOrderEventV1_ConditionalOrderPlacementV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
  bool has_order() const;
  void clear_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_order();
  void set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_order();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class StatefulOrderEventV1_ConditionalOrderTriggeredV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1) */ {
 public:
  inline StatefulOrderEventV1_ConditionalOrderTriggeredV1() : StatefulOrderEventV1_ConditionalOrderTriggeredV1(nullptr) {}
  ~StatefulOrderEventV1_ConditionalOrderTriggeredV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatefulOrderEventV1_ConditionalOrderTriggeredV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderEventV1_ConditionalOrderTriggeredV1(const StatefulOrderEventV1_ConditionalOrderTriggeredV1& from);
  StatefulOrderEventV1_ConditionalOrderTriggeredV1(StatefulOrderEventV1_ConditionalOrderTriggeredV1&& from) noexcept
    : StatefulOrderEventV1_ConditionalOrderTriggeredV1() {
    *this = ::std::move(from);
  }

  inline StatefulOrderEventV1_ConditionalOrderTriggeredV1& operator=(const StatefulOrderEventV1_ConditionalOrderTriggeredV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderEventV1_ConditionalOrderTriggeredV1& operator=(StatefulOrderEventV1_ConditionalOrderTriggeredV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderEventV1_ConditionalOrderTriggeredV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatefulOrderEventV1_ConditionalOrderTriggeredV1* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderEventV1_ConditionalOrderTriggeredV1*>(
               &_StatefulOrderEventV1_ConditionalOrderTriggeredV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StatefulOrderEventV1_ConditionalOrderTriggeredV1& a, StatefulOrderEventV1_ConditionalOrderTriggeredV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderEventV1_ConditionalOrderTriggeredV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderEventV1_ConditionalOrderTriggeredV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderEventV1_ConditionalOrderTriggeredV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderEventV1_ConditionalOrderTriggeredV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderEventV1_ConditionalOrderTriggeredV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderEventV1_ConditionalOrderTriggeredV1& from) {
    StatefulOrderEventV1_ConditionalOrderTriggeredV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderEventV1_ConditionalOrderTriggeredV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1";
  }
  protected:
  explicit StatefulOrderEventV1_ConditionalOrderTriggeredV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggeredOrderIdFieldNumber = 1,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId triggered_order_id = 1;
  bool has_triggered_order_id() const;
  void clear_triggered_order_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& triggered_order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* release_triggered_order_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* mutable_triggered_order_id();
  void set_allocated_triggered_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* triggered_order_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& _internal_triggered_order_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _internal_mutable_triggered_order_id();
  public:
  void unsafe_arena_set_allocated_triggered_order_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* triggered_order_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* unsafe_arena_release_triggered_order_id();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* triggered_order_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class StatefulOrderEventV1_LongTermOrderPlacementV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1) */ {
 public:
  inline StatefulOrderEventV1_LongTermOrderPlacementV1() : StatefulOrderEventV1_LongTermOrderPlacementV1(nullptr) {}
  ~StatefulOrderEventV1_LongTermOrderPlacementV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatefulOrderEventV1_LongTermOrderPlacementV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderEventV1_LongTermOrderPlacementV1(const StatefulOrderEventV1_LongTermOrderPlacementV1& from);
  StatefulOrderEventV1_LongTermOrderPlacementV1(StatefulOrderEventV1_LongTermOrderPlacementV1&& from) noexcept
    : StatefulOrderEventV1_LongTermOrderPlacementV1() {
    *this = ::std::move(from);
  }

  inline StatefulOrderEventV1_LongTermOrderPlacementV1& operator=(const StatefulOrderEventV1_LongTermOrderPlacementV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderEventV1_LongTermOrderPlacementV1& operator=(StatefulOrderEventV1_LongTermOrderPlacementV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderEventV1_LongTermOrderPlacementV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatefulOrderEventV1_LongTermOrderPlacementV1* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderEventV1_LongTermOrderPlacementV1*>(
               &_StatefulOrderEventV1_LongTermOrderPlacementV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(StatefulOrderEventV1_LongTermOrderPlacementV1& a, StatefulOrderEventV1_LongTermOrderPlacementV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderEventV1_LongTermOrderPlacementV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderEventV1_LongTermOrderPlacementV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderEventV1_LongTermOrderPlacementV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderEventV1_LongTermOrderPlacementV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderEventV1_LongTermOrderPlacementV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderEventV1_LongTermOrderPlacementV1& from) {
    StatefulOrderEventV1_LongTermOrderPlacementV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderEventV1_LongTermOrderPlacementV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1";
  }
  protected:
  explicit StatefulOrderEventV1_LongTermOrderPlacementV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
  bool has_order() const;
  void clear_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_order();
  void set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_order();
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class StatefulOrderEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.StatefulOrderEventV1) */ {
 public:
  inline StatefulOrderEventV1() : StatefulOrderEventV1(nullptr) {}
  ~StatefulOrderEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatefulOrderEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatefulOrderEventV1(const StatefulOrderEventV1& from);
  StatefulOrderEventV1(StatefulOrderEventV1&& from) noexcept
    : StatefulOrderEventV1() {
    *this = ::std::move(from);
  }

  inline StatefulOrderEventV1& operator=(const StatefulOrderEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatefulOrderEventV1& operator=(StatefulOrderEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatefulOrderEventV1& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kOrderPlace = 1,
    kOrderRemoval = 4,
    kConditionalOrderPlacement = 5,
    kConditionalOrderTriggered = 6,
    kLongTermOrderPlacement = 7,
    EVENT_NOT_SET = 0,
  };

  static inline const StatefulOrderEventV1* internal_default_instance() {
    return reinterpret_cast<const StatefulOrderEventV1*>(
               &_StatefulOrderEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StatefulOrderEventV1& a, StatefulOrderEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(StatefulOrderEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatefulOrderEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatefulOrderEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatefulOrderEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatefulOrderEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatefulOrderEventV1& from) {
    StatefulOrderEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatefulOrderEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.StatefulOrderEventV1";
  }
  protected:
  explicit StatefulOrderEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatefulOrderEventV1_StatefulOrderPlacementV1 StatefulOrderPlacementV1;
  typedef StatefulOrderEventV1_StatefulOrderRemovalV1 StatefulOrderRemovalV1;
  typedef StatefulOrderEventV1_ConditionalOrderPlacementV1 ConditionalOrderPlacementV1;
  typedef StatefulOrderEventV1_ConditionalOrderTriggeredV1 ConditionalOrderTriggeredV1;
  typedef StatefulOrderEventV1_LongTermOrderPlacementV1 LongTermOrderPlacementV1;

  // accessors -------------------------------------------------------

  enum : int {
    kOrderPlaceFieldNumber = 1,
    kOrderRemovalFieldNumber = 4,
    kConditionalOrderPlacementFieldNumber = 5,
    kConditionalOrderTriggeredFieldNumber = 6,
    kLongTermOrderPlacementFieldNumber = 7,
  };
  // .dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1 order_place = 1;
  bool has_order_place() const;
  private:
  bool _internal_has_order_place() const;

  public:
  void clear_order_place() ;
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1& order_place() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* release_order_place();
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* mutable_order_place();
  void set_allocated_order_place(::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* order_place);
  private:
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1& _internal_order_place() const;
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* _internal_mutable_order_place();
  public:
  void unsafe_arena_set_allocated_order_place(
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* order_place);
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* unsafe_arena_release_order_place();
  // .dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1 order_removal = 4;
  bool has_order_removal() const;
  private:
  bool _internal_has_order_removal() const;

  public:
  void clear_order_removal() ;
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1& order_removal() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* release_order_removal();
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* mutable_order_removal();
  void set_allocated_order_removal(::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* order_removal);
  private:
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1& _internal_order_removal() const;
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* _internal_mutable_order_removal();
  public:
  void unsafe_arena_set_allocated_order_removal(
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* order_removal);
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* unsafe_arena_release_order_removal();
  // .dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1 conditional_order_placement = 5;
  bool has_conditional_order_placement() const;
  private:
  bool _internal_has_conditional_order_placement() const;

  public:
  void clear_conditional_order_placement() ;
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1& conditional_order_placement() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* release_conditional_order_placement();
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* mutable_conditional_order_placement();
  void set_allocated_conditional_order_placement(::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* conditional_order_placement);
  private:
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1& _internal_conditional_order_placement() const;
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* _internal_mutable_conditional_order_placement();
  public:
  void unsafe_arena_set_allocated_conditional_order_placement(
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* conditional_order_placement);
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* unsafe_arena_release_conditional_order_placement();
  // .dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1 conditional_order_triggered = 6;
  bool has_conditional_order_triggered() const;
  private:
  bool _internal_has_conditional_order_triggered() const;

  public:
  void clear_conditional_order_triggered() ;
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1& conditional_order_triggered() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* release_conditional_order_triggered();
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* mutable_conditional_order_triggered();
  void set_allocated_conditional_order_triggered(::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* conditional_order_triggered);
  private:
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1& _internal_conditional_order_triggered() const;
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* _internal_mutable_conditional_order_triggered();
  public:
  void unsafe_arena_set_allocated_conditional_order_triggered(
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* conditional_order_triggered);
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* unsafe_arena_release_conditional_order_triggered();
  // .dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1 long_term_order_placement = 7;
  bool has_long_term_order_placement() const;
  private:
  bool _internal_has_long_term_order_placement() const;

  public:
  void clear_long_term_order_placement() ;
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1& long_term_order_placement() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* release_long_term_order_placement();
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* mutable_long_term_order_placement();
  void set_allocated_long_term_order_placement(::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* long_term_order_placement);
  private:
  const ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1& _internal_long_term_order_placement() const;
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* _internal_mutable_long_term_order_placement();
  public:
  void unsafe_arena_set_allocated_long_term_order_placement(
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* long_term_order_placement);
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* unsafe_arena_release_long_term_order_placement();
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.StatefulOrderEventV1)
 private:
  class _Internal;
  void set_has_order_place();
  void set_has_order_removal();
  void set_has_conditional_order_placement();
  void set_has_conditional_order_triggered();
  void set_has_long_term_order_placement();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* order_place_;
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* order_removal_;
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* conditional_order_placement_;
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* conditional_order_triggered_;
      ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* long_term_order_placement_;
    } event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class AssetCreateEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.AssetCreateEventV1) */ {
 public:
  inline AssetCreateEventV1() : AssetCreateEventV1(nullptr) {}
  ~AssetCreateEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssetCreateEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AssetCreateEventV1(const AssetCreateEventV1& from);
  AssetCreateEventV1(AssetCreateEventV1&& from) noexcept
    : AssetCreateEventV1() {
    *this = ::std::move(from);
  }

  inline AssetCreateEventV1& operator=(const AssetCreateEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetCreateEventV1& operator=(AssetCreateEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssetCreateEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssetCreateEventV1* internal_default_instance() {
    return reinterpret_cast<const AssetCreateEventV1*>(
               &_AssetCreateEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AssetCreateEventV1& a, AssetCreateEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(AssetCreateEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssetCreateEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssetCreateEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssetCreateEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AssetCreateEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AssetCreateEventV1& from) {
    AssetCreateEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetCreateEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.AssetCreateEventV1";
  }
  protected:
  explicit AssetCreateEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSymbolFieldNumber = 2,
    kIdFieldNumber = 1,
    kHasMarketFieldNumber = 3,
    kMarketIdFieldNumber = 4,
    kAtomicResolutionFieldNumber = 5,
  };
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* ptr);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // bool has_market = 3;
  void clear_has_market() ;
  bool has_market() const;
  void set_has_market(bool value);

  private:
  bool _internal_has_market() const;
  void _internal_set_has_market(bool value);

  public:
  // uint32 market_id = 4;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // sint32 atomic_resolution = 5;
  void clear_atomic_resolution() ;
  ::int32_t atomic_resolution() const;
  void set_atomic_resolution(::int32_t value);

  private:
  ::int32_t _internal_atomic_resolution() const;
  void _internal_set_atomic_resolution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.AssetCreateEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
    ::uint32_t id_;
    bool has_market_;
    ::uint32_t market_id_;
    ::int32_t atomic_resolution_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class PerpetualMarketCreateEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1) */ {
 public:
  inline PerpetualMarketCreateEventV1() : PerpetualMarketCreateEventV1(nullptr) {}
  ~PerpetualMarketCreateEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualMarketCreateEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualMarketCreateEventV1(const PerpetualMarketCreateEventV1& from);
  PerpetualMarketCreateEventV1(PerpetualMarketCreateEventV1&& from) noexcept
    : PerpetualMarketCreateEventV1() {
    *this = ::std::move(from);
  }

  inline PerpetualMarketCreateEventV1& operator=(const PerpetualMarketCreateEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualMarketCreateEventV1& operator=(PerpetualMarketCreateEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualMarketCreateEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualMarketCreateEventV1* internal_default_instance() {
    return reinterpret_cast<const PerpetualMarketCreateEventV1*>(
               &_PerpetualMarketCreateEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PerpetualMarketCreateEventV1& a, PerpetualMarketCreateEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualMarketCreateEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualMarketCreateEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualMarketCreateEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualMarketCreateEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualMarketCreateEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualMarketCreateEventV1& from) {
    PerpetualMarketCreateEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualMarketCreateEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.PerpetualMarketCreateEventV1";
  }
  protected:
  explicit PerpetualMarketCreateEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickerFieldNumber = 3,
    kIdFieldNumber = 1,
    kClobPairIdFieldNumber = 2,
    kMarketIdFieldNumber = 4,
    kStatusFieldNumber = 5,
    kQuantumConversionExponentFieldNumber = 6,
    kAtomicResolutionFieldNumber = 7,
    kStepBaseQuantumsFieldNumber = 9,
    kSubticksPerTickFieldNumber = 8,
    kLiquidityTierFieldNumber = 10,
  };
  // string ticker = 3;
  void clear_ticker() ;
  const std::string& ticker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ptr);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 clob_pair_id = 2;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // uint32 market_id = 4;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // .dydxprotocol.indexer.protocol.v1.ClobPairStatus status = 5;
  void clear_status() ;
  ::dydxprotocol::indexer::protocol::v1::ClobPairStatus status() const;
  void set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value);

  private:
  ::dydxprotocol::indexer::protocol::v1::ClobPairStatus _internal_status() const;
  void _internal_set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value);

  public:
  // sint32 quantum_conversion_exponent = 6;
  void clear_quantum_conversion_exponent() ;
  ::int32_t quantum_conversion_exponent() const;
  void set_quantum_conversion_exponent(::int32_t value);

  private:
  ::int32_t _internal_quantum_conversion_exponent() const;
  void _internal_set_quantum_conversion_exponent(::int32_t value);

  public:
  // sint32 atomic_resolution = 7;
  void clear_atomic_resolution() ;
  ::int32_t atomic_resolution() const;
  void set_atomic_resolution(::int32_t value);

  private:
  ::int32_t _internal_atomic_resolution() const;
  void _internal_set_atomic_resolution(::int32_t value);

  public:
  // uint64 step_base_quantums = 9;
  void clear_step_base_quantums() ;
  ::uint64_t step_base_quantums() const;
  void set_step_base_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_step_base_quantums() const;
  void _internal_set_step_base_quantums(::uint64_t value);

  public:
  // uint32 subticks_per_tick = 8;
  void clear_subticks_per_tick() ;
  ::uint32_t subticks_per_tick() const;
  void set_subticks_per_tick(::uint32_t value);

  private:
  ::uint32_t _internal_subticks_per_tick() const;
  void _internal_set_subticks_per_tick(::uint32_t value);

  public:
  // uint32 liquidity_tier = 10;
  void clear_liquidity_tier() ;
  ::uint32_t liquidity_tier() const;
  void set_liquidity_tier(::uint32_t value);

  private:
  ::uint32_t _internal_liquidity_tier() const;
  void _internal_set_liquidity_tier(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
    ::uint32_t id_;
    ::uint32_t clob_pair_id_;
    ::uint32_t market_id_;
    int status_;
    ::int32_t quantum_conversion_exponent_;
    ::int32_t atomic_resolution_;
    ::uint64_t step_base_quantums_;
    ::uint32_t subticks_per_tick_;
    ::uint32_t liquidity_tier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class LiquidityTierUpsertEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1) */ {
 public:
  inline LiquidityTierUpsertEventV1() : LiquidityTierUpsertEventV1(nullptr) {}
  ~LiquidityTierUpsertEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LiquidityTierUpsertEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LiquidityTierUpsertEventV1(const LiquidityTierUpsertEventV1& from);
  LiquidityTierUpsertEventV1(LiquidityTierUpsertEventV1&& from) noexcept
    : LiquidityTierUpsertEventV1() {
    *this = ::std::move(from);
  }

  inline LiquidityTierUpsertEventV1& operator=(const LiquidityTierUpsertEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityTierUpsertEventV1& operator=(LiquidityTierUpsertEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiquidityTierUpsertEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiquidityTierUpsertEventV1* internal_default_instance() {
    return reinterpret_cast<const LiquidityTierUpsertEventV1*>(
               &_LiquidityTierUpsertEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(LiquidityTierUpsertEventV1& a, LiquidityTierUpsertEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityTierUpsertEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityTierUpsertEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiquidityTierUpsertEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LiquidityTierUpsertEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LiquidityTierUpsertEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LiquidityTierUpsertEventV1& from) {
    LiquidityTierUpsertEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityTierUpsertEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.LiquidityTierUpsertEventV1";
  }
  protected:
  explicit LiquidityTierUpsertEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kInitialMarginPpmFieldNumber = 3,
    kBasePositionNotionalFieldNumber = 5,
    kMaintenanceFractionPpmFieldNumber = 4,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 initial_margin_ppm = 3;
  void clear_initial_margin_ppm() ;
  ::uint32_t initial_margin_ppm() const;
  void set_initial_margin_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_initial_margin_ppm() const;
  void _internal_set_initial_margin_ppm(::uint32_t value);

  public:
  // uint64 base_position_notional = 5;
  void clear_base_position_notional() ;
  ::uint64_t base_position_notional() const;
  void set_base_position_notional(::uint64_t value);

  private:
  ::uint64_t _internal_base_position_notional() const;
  void _internal_set_base_position_notional(::uint64_t value);

  public:
  // uint32 maintenance_fraction_ppm = 4;
  void clear_maintenance_fraction_ppm() ;
  ::uint32_t maintenance_fraction_ppm() const;
  void set_maintenance_fraction_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_maintenance_fraction_ppm() const;
  void _internal_set_maintenance_fraction_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t id_;
    ::uint32_t initial_margin_ppm_;
    ::uint64_t base_position_notional_;
    ::uint32_t maintenance_fraction_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class UpdateClobPairEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.UpdateClobPairEventV1) */ {
 public:
  inline UpdateClobPairEventV1() : UpdateClobPairEventV1(nullptr) {}
  ~UpdateClobPairEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateClobPairEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateClobPairEventV1(const UpdateClobPairEventV1& from);
  UpdateClobPairEventV1(UpdateClobPairEventV1&& from) noexcept
    : UpdateClobPairEventV1() {
    *this = ::std::move(from);
  }

  inline UpdateClobPairEventV1& operator=(const UpdateClobPairEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateClobPairEventV1& operator=(UpdateClobPairEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateClobPairEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateClobPairEventV1* internal_default_instance() {
    return reinterpret_cast<const UpdateClobPairEventV1*>(
               &_UpdateClobPairEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateClobPairEventV1& a, UpdateClobPairEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateClobPairEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateClobPairEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateClobPairEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateClobPairEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateClobPairEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateClobPairEventV1& from) {
    UpdateClobPairEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateClobPairEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.UpdateClobPairEventV1";
  }
  protected:
  explicit UpdateClobPairEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClobPairIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kQuantumConversionExponentFieldNumber = 3,
    kSubticksPerTickFieldNumber = 4,
    kStepBaseQuantumsFieldNumber = 5,
  };
  // uint32 clob_pair_id = 1;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // .dydxprotocol.indexer.protocol.v1.ClobPairStatus status = 2;
  void clear_status() ;
  ::dydxprotocol::indexer::protocol::v1::ClobPairStatus status() const;
  void set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value);

  private:
  ::dydxprotocol::indexer::protocol::v1::ClobPairStatus _internal_status() const;
  void _internal_set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value);

  public:
  // sint32 quantum_conversion_exponent = 3;
  void clear_quantum_conversion_exponent() ;
  ::int32_t quantum_conversion_exponent() const;
  void set_quantum_conversion_exponent(::int32_t value);

  private:
  ::int32_t _internal_quantum_conversion_exponent() const;
  void _internal_set_quantum_conversion_exponent(::int32_t value);

  public:
  // uint32 subticks_per_tick = 4;
  void clear_subticks_per_tick() ;
  ::uint32_t subticks_per_tick() const;
  void set_subticks_per_tick(::uint32_t value);

  private:
  ::uint32_t _internal_subticks_per_tick() const;
  void _internal_set_subticks_per_tick(::uint32_t value);

  public:
  // uint64 step_base_quantums = 5;
  void clear_step_base_quantums() ;
  ::uint64_t step_base_quantums() const;
  void set_step_base_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_step_base_quantums() const;
  void _internal_set_step_base_quantums(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.UpdateClobPairEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t clob_pair_id_;
    int status_;
    ::int32_t quantum_conversion_exponent_;
    ::uint32_t subticks_per_tick_;
    ::uint64_t step_base_quantums_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};// -------------------------------------------------------------------

class UpdatePerpetualEventV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.events.UpdatePerpetualEventV1) */ {
 public:
  inline UpdatePerpetualEventV1() : UpdatePerpetualEventV1(nullptr) {}
  ~UpdatePerpetualEventV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdatePerpetualEventV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePerpetualEventV1(const UpdatePerpetualEventV1& from);
  UpdatePerpetualEventV1(UpdatePerpetualEventV1&& from) noexcept
    : UpdatePerpetualEventV1() {
    *this = ::std::move(from);
  }

  inline UpdatePerpetualEventV1& operator=(const UpdatePerpetualEventV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePerpetualEventV1& operator=(UpdatePerpetualEventV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePerpetualEventV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePerpetualEventV1* internal_default_instance() {
    return reinterpret_cast<const UpdatePerpetualEventV1*>(
               &_UpdatePerpetualEventV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdatePerpetualEventV1& a, UpdatePerpetualEventV1& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePerpetualEventV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePerpetualEventV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePerpetualEventV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePerpetualEventV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePerpetualEventV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePerpetualEventV1& from) {
    UpdatePerpetualEventV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePerpetualEventV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.events.UpdatePerpetualEventV1";
  }
  protected:
  explicit UpdatePerpetualEventV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickerFieldNumber = 2,
    kIdFieldNumber = 1,
    kMarketIdFieldNumber = 3,
    kAtomicResolutionFieldNumber = 4,
    kLiquidityTierFieldNumber = 5,
  };
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ptr);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 market_id = 3;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // sint32 atomic_resolution = 4;
  void clear_atomic_resolution() ;
  ::int32_t atomic_resolution() const;
  void set_atomic_resolution(::int32_t value);

  private:
  ::int32_t _internal_atomic_resolution() const;
  void _internal_set_atomic_resolution(::int32_t value);

  public:
  // uint32 liquidity_tier = 5;
  void clear_liquidity_tier() ;
  ::uint32_t liquidity_tier() const;
  void set_liquidity_tier(::uint32_t value);

  private:
  ::uint32_t _internal_liquidity_tier() const;
  void _internal_set_liquidity_tier(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.events.UpdatePerpetualEventV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
    ::uint32_t id_;
    ::uint32_t market_id_;
    ::int32_t atomic_resolution_;
    ::uint32_t liquidity_tier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fevents_2fevents_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FundingUpdateV1

// uint32 perpetual_id = 1;
inline void FundingUpdateV1::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline ::uint32_t FundingUpdateV1::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.FundingUpdateV1.perpetual_id)
  return _internal_perpetual_id();
}
inline void FundingUpdateV1::set_perpetual_id(::uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.FundingUpdateV1.perpetual_id)
}
inline ::uint32_t FundingUpdateV1::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline void FundingUpdateV1::_internal_set_perpetual_id(::uint32_t value) {
  ;
  _impl_.perpetual_id_ = value;
}

// int32 funding_value_ppm = 2;
inline void FundingUpdateV1::clear_funding_value_ppm() {
  _impl_.funding_value_ppm_ = 0;
}
inline ::int32_t FundingUpdateV1::funding_value_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.FundingUpdateV1.funding_value_ppm)
  return _internal_funding_value_ppm();
}
inline void FundingUpdateV1::set_funding_value_ppm(::int32_t value) {
  _internal_set_funding_value_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.FundingUpdateV1.funding_value_ppm)
}
inline ::int32_t FundingUpdateV1::_internal_funding_value_ppm() const {
  return _impl_.funding_value_ppm_;
}
inline void FundingUpdateV1::_internal_set_funding_value_ppm(::int32_t value) {
  ;
  _impl_.funding_value_ppm_ = value;
}

// bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void FundingUpdateV1::clear_funding_index() {
  _impl_.funding_index_.ClearToEmpty();
}
inline const std::string& FundingUpdateV1::funding_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.FundingUpdateV1.funding_index)
  return _internal_funding_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FundingUpdateV1::set_funding_index(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.funding_index_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.FundingUpdateV1.funding_index)
}
inline std::string* FundingUpdateV1::mutable_funding_index() {
  std::string* _s = _internal_mutable_funding_index();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.FundingUpdateV1.funding_index)
  return _s;
}
inline const std::string& FundingUpdateV1::_internal_funding_index() const {
  return _impl_.funding_index_.Get();
}
inline void FundingUpdateV1::_internal_set_funding_index(const std::string& value) {
  ;


  _impl_.funding_index_.Set(value, GetArenaForAllocation());
}
inline std::string* FundingUpdateV1::_internal_mutable_funding_index() {
  ;
  return _impl_.funding_index_.Mutable( GetArenaForAllocation());
}
inline std::string* FundingUpdateV1::release_funding_index() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.FundingUpdateV1.funding_index)
  return _impl_.funding_index_.Release();
}
inline void FundingUpdateV1::set_allocated_funding_index(std::string* value) {
  _impl_.funding_index_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.funding_index_.IsDefault()) {
          _impl_.funding_index_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.FundingUpdateV1.funding_index)
}

// -------------------------------------------------------------------

// FundingEventV1

// repeated .dydxprotocol.indexer.events.FundingUpdateV1 updates = 1 [(.gogoproto.nullable) = false];
inline int FundingEventV1::_internal_updates_size() const {
  return _impl_.updates_.size();
}
inline int FundingEventV1::updates_size() const {
  return _internal_updates_size();
}
inline void FundingEventV1::clear_updates() {
  _internal_mutable_updates()->Clear();
}
inline ::dydxprotocol::indexer::events::FundingUpdateV1* FundingEventV1::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.FundingEventV1.updates)
  return _internal_mutable_updates()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::events::FundingUpdateV1 >*
FundingEventV1::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.indexer.events.FundingEventV1.updates)
  return _internal_mutable_updates();
}
inline const ::dydxprotocol::indexer::events::FundingUpdateV1& FundingEventV1::_internal_updates(int index) const {
  return _internal_updates().Get(index);
}
inline const ::dydxprotocol::indexer::events::FundingUpdateV1& FundingEventV1::updates(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.FundingEventV1.updates)
  return _internal_updates(index);
}
inline ::dydxprotocol::indexer::events::FundingUpdateV1* FundingEventV1::_internal_add_updates() {
  return _internal_mutable_updates()->Add();
}
inline ::dydxprotocol::indexer::events::FundingUpdateV1* FundingEventV1::add_updates() {
  ::dydxprotocol::indexer::events::FundingUpdateV1* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.events.FundingEventV1.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::events::FundingUpdateV1 >&
FundingEventV1::updates() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.indexer.events.FundingEventV1.updates)
  return _internal_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::events::FundingUpdateV1>&
FundingEventV1::_internal_updates() const {
  return _impl_.updates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::events::FundingUpdateV1>*
FundingEventV1::_internal_mutable_updates() {
  return &_impl_.updates_;
}

// .dydxprotocol.indexer.events.FundingEventV1.Type type = 2;
inline void FundingEventV1::clear_type() {
  _impl_.type_ = 0;
}
inline ::dydxprotocol::indexer::events::FundingEventV1_Type FundingEventV1::type() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.FundingEventV1.type)
  return _internal_type();
}
inline void FundingEventV1::set_type(::dydxprotocol::indexer::events::FundingEventV1_Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.FundingEventV1.type)
}
inline ::dydxprotocol::indexer::events::FundingEventV1_Type FundingEventV1::_internal_type() const {
  return static_cast<::dydxprotocol::indexer::events::FundingEventV1_Type>(_impl_.type_);
}
inline void FundingEventV1::_internal_set_type(::dydxprotocol::indexer::events::FundingEventV1_Type value) {
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// MarketEventV1

// uint32 market_id = 1;
inline void MarketEventV1::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t MarketEventV1::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketEventV1.market_id)
  return _internal_market_id();
}
inline void MarketEventV1::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.MarketEventV1.market_id)
}
inline ::uint32_t MarketEventV1::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void MarketEventV1::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// .dydxprotocol.indexer.events.MarketPriceUpdateEventV1 price_update = 2;
inline bool MarketEventV1::has_price_update() const {
  return event_case() == kPriceUpdate;
}
inline bool MarketEventV1::_internal_has_price_update() const {
  return event_case() == kPriceUpdate;
}
inline void MarketEventV1::set_has_price_update() {
  _impl_._oneof_case_[0] = kPriceUpdate;
}
inline void MarketEventV1::clear_price_update() {
  if (event_case() == kPriceUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.price_update_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* MarketEventV1::release_price_update() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.MarketEventV1.price_update)
  if (event_case() == kPriceUpdate) {
    clear_has_event();
    ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* temp = _impl_.event_.price_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.price_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1& MarketEventV1::_internal_price_update() const {
  return event_case() == kPriceUpdate
      ? *_impl_.event_.price_update_
      : reinterpret_cast<::dydxprotocol::indexer::events::MarketPriceUpdateEventV1&>(::dydxprotocol::indexer::events::_MarketPriceUpdateEventV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1& MarketEventV1::price_update() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketEventV1.price_update)
  return _internal_price_update();
}
inline ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* MarketEventV1::unsafe_arena_release_price_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.MarketEventV1.price_update)
  if (event_case() == kPriceUpdate) {
    clear_has_event();
    ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* temp = _impl_.event_.price_update_;
    _impl_.event_.price_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketEventV1::unsafe_arena_set_allocated_price_update(::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* price_update) {
  clear_event();
  if (price_update) {
    set_has_price_update();
    _impl_.event_.price_update_ = price_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.MarketEventV1.price_update)
}
inline ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* MarketEventV1::_internal_mutable_price_update() {
  if (event_case() != kPriceUpdate) {
    clear_event();
    set_has_price_update();
    _impl_.event_.price_update_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.price_update_;
}
inline ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* MarketEventV1::mutable_price_update() {
  ::dydxprotocol::indexer::events::MarketPriceUpdateEventV1* _msg = _internal_mutable_price_update();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.MarketEventV1.price_update)
  return _msg;
}

// .dydxprotocol.indexer.events.MarketCreateEventV1 market_create = 3;
inline bool MarketEventV1::has_market_create() const {
  return event_case() == kMarketCreate;
}
inline bool MarketEventV1::_internal_has_market_create() const {
  return event_case() == kMarketCreate;
}
inline void MarketEventV1::set_has_market_create() {
  _impl_._oneof_case_[0] = kMarketCreate;
}
inline void MarketEventV1::clear_market_create() {
  if (event_case() == kMarketCreate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.market_create_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::MarketCreateEventV1* MarketEventV1::release_market_create() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.MarketEventV1.market_create)
  if (event_case() == kMarketCreate) {
    clear_has_event();
    ::dydxprotocol::indexer::events::MarketCreateEventV1* temp = _impl_.event_.market_create_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.market_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::MarketCreateEventV1& MarketEventV1::_internal_market_create() const {
  return event_case() == kMarketCreate
      ? *_impl_.event_.market_create_
      : reinterpret_cast<::dydxprotocol::indexer::events::MarketCreateEventV1&>(::dydxprotocol::indexer::events::_MarketCreateEventV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::MarketCreateEventV1& MarketEventV1::market_create() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketEventV1.market_create)
  return _internal_market_create();
}
inline ::dydxprotocol::indexer::events::MarketCreateEventV1* MarketEventV1::unsafe_arena_release_market_create() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.MarketEventV1.market_create)
  if (event_case() == kMarketCreate) {
    clear_has_event();
    ::dydxprotocol::indexer::events::MarketCreateEventV1* temp = _impl_.event_.market_create_;
    _impl_.event_.market_create_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketEventV1::unsafe_arena_set_allocated_market_create(::dydxprotocol::indexer::events::MarketCreateEventV1* market_create) {
  clear_event();
  if (market_create) {
    set_has_market_create();
    _impl_.event_.market_create_ = market_create;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.MarketEventV1.market_create)
}
inline ::dydxprotocol::indexer::events::MarketCreateEventV1* MarketEventV1::_internal_mutable_market_create() {
  if (event_case() != kMarketCreate) {
    clear_event();
    set_has_market_create();
    _impl_.event_.market_create_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::MarketCreateEventV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.market_create_;
}
inline ::dydxprotocol::indexer::events::MarketCreateEventV1* MarketEventV1::mutable_market_create() {
  ::dydxprotocol::indexer::events::MarketCreateEventV1* _msg = _internal_mutable_market_create();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.MarketEventV1.market_create)
  return _msg;
}

// .dydxprotocol.indexer.events.MarketModifyEventV1 market_modify = 4;
inline bool MarketEventV1::has_market_modify() const {
  return event_case() == kMarketModify;
}
inline bool MarketEventV1::_internal_has_market_modify() const {
  return event_case() == kMarketModify;
}
inline void MarketEventV1::set_has_market_modify() {
  _impl_._oneof_case_[0] = kMarketModify;
}
inline void MarketEventV1::clear_market_modify() {
  if (event_case() == kMarketModify) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.market_modify_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::MarketModifyEventV1* MarketEventV1::release_market_modify() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.MarketEventV1.market_modify)
  if (event_case() == kMarketModify) {
    clear_has_event();
    ::dydxprotocol::indexer::events::MarketModifyEventV1* temp = _impl_.event_.market_modify_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.market_modify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::MarketModifyEventV1& MarketEventV1::_internal_market_modify() const {
  return event_case() == kMarketModify
      ? *_impl_.event_.market_modify_
      : reinterpret_cast<::dydxprotocol::indexer::events::MarketModifyEventV1&>(::dydxprotocol::indexer::events::_MarketModifyEventV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::MarketModifyEventV1& MarketEventV1::market_modify() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketEventV1.market_modify)
  return _internal_market_modify();
}
inline ::dydxprotocol::indexer::events::MarketModifyEventV1* MarketEventV1::unsafe_arena_release_market_modify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.MarketEventV1.market_modify)
  if (event_case() == kMarketModify) {
    clear_has_event();
    ::dydxprotocol::indexer::events::MarketModifyEventV1* temp = _impl_.event_.market_modify_;
    _impl_.event_.market_modify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketEventV1::unsafe_arena_set_allocated_market_modify(::dydxprotocol::indexer::events::MarketModifyEventV1* market_modify) {
  clear_event();
  if (market_modify) {
    set_has_market_modify();
    _impl_.event_.market_modify_ = market_modify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.MarketEventV1.market_modify)
}
inline ::dydxprotocol::indexer::events::MarketModifyEventV1* MarketEventV1::_internal_mutable_market_modify() {
  if (event_case() != kMarketModify) {
    clear_event();
    set_has_market_modify();
    _impl_.event_.market_modify_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::MarketModifyEventV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.market_modify_;
}
inline ::dydxprotocol::indexer::events::MarketModifyEventV1* MarketEventV1::mutable_market_modify() {
  ::dydxprotocol::indexer::events::MarketModifyEventV1* _msg = _internal_mutable_market_modify();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.MarketEventV1.market_modify)
  return _msg;
}

inline bool MarketEventV1::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void MarketEventV1::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline MarketEventV1::EventCase MarketEventV1::event_case() const {
  return MarketEventV1::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MarketPriceUpdateEventV1

// uint64 price_with_exponent = 1;
inline void MarketPriceUpdateEventV1::clear_price_with_exponent() {
  _impl_.price_with_exponent_ = ::uint64_t{0u};
}
inline ::uint64_t MarketPriceUpdateEventV1::price_with_exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketPriceUpdateEventV1.price_with_exponent)
  return _internal_price_with_exponent();
}
inline void MarketPriceUpdateEventV1::set_price_with_exponent(::uint64_t value) {
  _internal_set_price_with_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.MarketPriceUpdateEventV1.price_with_exponent)
}
inline ::uint64_t MarketPriceUpdateEventV1::_internal_price_with_exponent() const {
  return _impl_.price_with_exponent_;
}
inline void MarketPriceUpdateEventV1::_internal_set_price_with_exponent(::uint64_t value) {
  ;
  _impl_.price_with_exponent_ = value;
}

// -------------------------------------------------------------------

// MarketBaseEventV1

// string pair = 1;
inline void MarketBaseEventV1::clear_pair() {
  _impl_.pair_.ClearToEmpty();
}
inline const std::string& MarketBaseEventV1::pair() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketBaseEventV1.pair)
  return _internal_pair();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketBaseEventV1::set_pair(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.pair_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.MarketBaseEventV1.pair)
}
inline std::string* MarketBaseEventV1::mutable_pair() {
  std::string* _s = _internal_mutable_pair();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.MarketBaseEventV1.pair)
  return _s;
}
inline const std::string& MarketBaseEventV1::_internal_pair() const {
  return _impl_.pair_.Get();
}
inline void MarketBaseEventV1::_internal_set_pair(const std::string& value) {
  ;


  _impl_.pair_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketBaseEventV1::_internal_mutable_pair() {
  ;
  return _impl_.pair_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketBaseEventV1::release_pair() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.MarketBaseEventV1.pair)
  return _impl_.pair_.Release();
}
inline void MarketBaseEventV1::set_allocated_pair(std::string* value) {
  _impl_.pair_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.pair_.IsDefault()) {
          _impl_.pair_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.MarketBaseEventV1.pair)
}

// uint32 min_price_change_ppm = 2;
inline void MarketBaseEventV1::clear_min_price_change_ppm() {
  _impl_.min_price_change_ppm_ = 0u;
}
inline ::uint32_t MarketBaseEventV1::min_price_change_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketBaseEventV1.min_price_change_ppm)
  return _internal_min_price_change_ppm();
}
inline void MarketBaseEventV1::set_min_price_change_ppm(::uint32_t value) {
  _internal_set_min_price_change_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.MarketBaseEventV1.min_price_change_ppm)
}
inline ::uint32_t MarketBaseEventV1::_internal_min_price_change_ppm() const {
  return _impl_.min_price_change_ppm_;
}
inline void MarketBaseEventV1::_internal_set_min_price_change_ppm(::uint32_t value) {
  ;
  _impl_.min_price_change_ppm_ = value;
}

// -------------------------------------------------------------------

// MarketCreateEventV1

// .dydxprotocol.indexer.events.MarketBaseEventV1 base = 1;
inline bool MarketCreateEventV1::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline void MarketCreateEventV1::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::indexer::events::MarketBaseEventV1& MarketCreateEventV1::_internal_base() const {
  const ::dydxprotocol::indexer::events::MarketBaseEventV1* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::events::MarketBaseEventV1&>(
      ::dydxprotocol::indexer::events::_MarketBaseEventV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::MarketBaseEventV1& MarketCreateEventV1::base() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketCreateEventV1.base)
  return _internal_base();
}
inline void MarketCreateEventV1::unsafe_arena_set_allocated_base(
    ::dydxprotocol::indexer::events::MarketBaseEventV1* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.MarketCreateEventV1.base)
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketCreateEventV1::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::events::MarketBaseEventV1* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketCreateEventV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.MarketCreateEventV1.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::events::MarketBaseEventV1* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketCreateEventV1::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::events::MarketBaseEventV1>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketCreateEventV1::mutable_base() {
  ::dydxprotocol::indexer::events::MarketBaseEventV1* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.MarketCreateEventV1.base)
  return _msg;
}
inline void MarketCreateEventV1::set_allocated_base(::dydxprotocol::indexer::events::MarketBaseEventV1* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.MarketCreateEventV1.base)
}

// sint32 exponent = 2;
inline void MarketCreateEventV1::clear_exponent() {
  _impl_.exponent_ = 0;
}
inline ::int32_t MarketCreateEventV1::exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketCreateEventV1.exponent)
  return _internal_exponent();
}
inline void MarketCreateEventV1::set_exponent(::int32_t value) {
  _internal_set_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.MarketCreateEventV1.exponent)
}
inline ::int32_t MarketCreateEventV1::_internal_exponent() const {
  return _impl_.exponent_;
}
inline void MarketCreateEventV1::_internal_set_exponent(::int32_t value) {
  ;
  _impl_.exponent_ = value;
}

// -------------------------------------------------------------------

// MarketModifyEventV1

// .dydxprotocol.indexer.events.MarketBaseEventV1 base = 1;
inline bool MarketModifyEventV1::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline void MarketModifyEventV1::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::indexer::events::MarketBaseEventV1& MarketModifyEventV1::_internal_base() const {
  const ::dydxprotocol::indexer::events::MarketBaseEventV1* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::events::MarketBaseEventV1&>(
      ::dydxprotocol::indexer::events::_MarketBaseEventV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::MarketBaseEventV1& MarketModifyEventV1::base() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.MarketModifyEventV1.base)
  return _internal_base();
}
inline void MarketModifyEventV1::unsafe_arena_set_allocated_base(
    ::dydxprotocol::indexer::events::MarketBaseEventV1* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.MarketModifyEventV1.base)
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketModifyEventV1::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::events::MarketBaseEventV1* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketModifyEventV1::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.MarketModifyEventV1.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::events::MarketBaseEventV1* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketModifyEventV1::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::events::MarketBaseEventV1>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::dydxprotocol::indexer::events::MarketBaseEventV1* MarketModifyEventV1::mutable_base() {
  ::dydxprotocol::indexer::events::MarketBaseEventV1* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.MarketModifyEventV1.base)
  return _msg;
}
inline void MarketModifyEventV1::set_allocated_base(::dydxprotocol::indexer::events::MarketBaseEventV1* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.MarketModifyEventV1.base)
}

// -------------------------------------------------------------------

// SourceOfFunds

// .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1;
inline bool SourceOfFunds::has_subaccount_id() const {
  return source_case() == kSubaccountId;
}
inline bool SourceOfFunds::_internal_has_subaccount_id() const {
  return source_case() == kSubaccountId;
}
inline void SourceOfFunds::set_has_subaccount_id() {
  _impl_._oneof_case_[0] = kSubaccountId;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SourceOfFunds::release_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.SourceOfFunds.subaccount_id)
  if (source_case() == kSubaccountId) {
    clear_has_source();
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.source_.subaccount_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.source_.subaccount_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& SourceOfFunds::_internal_subaccount_id() const {
  return source_case() == kSubaccountId
      ? *_impl_.source_.subaccount_id_
      : reinterpret_cast<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&>(::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& SourceOfFunds::subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.SourceOfFunds.subaccount_id)
  return _internal_subaccount_id();
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SourceOfFunds::unsafe_arena_release_subaccount_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.SourceOfFunds.subaccount_id)
  if (source_case() == kSubaccountId) {
    clear_has_source();
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.source_.subaccount_id_;
    _impl_.source_.subaccount_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SourceOfFunds::unsafe_arena_set_allocated_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id) {
  clear_source();
  if (subaccount_id) {
    set_has_subaccount_id();
    _impl_.source_.subaccount_id_ = subaccount_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.SourceOfFunds.subaccount_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SourceOfFunds::_internal_mutable_subaccount_id() {
  if (source_case() != kSubaccountId) {
    clear_source();
    set_has_subaccount_id();
    _impl_.source_.subaccount_id_ = CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId >(GetArenaForAllocation());
  }
  return _impl_.source_.subaccount_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SourceOfFunds::mutable_subaccount_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _msg = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.SourceOfFunds.subaccount_id)
  return _msg;
}

// string address = 2 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline bool SourceOfFunds::has_address() const {
  return source_case() == kAddress;
}
inline void SourceOfFunds::set_has_address() {
  _impl_._oneof_case_[0] = kAddress;
}
inline void SourceOfFunds::clear_address() {
  if (source_case() == kAddress) {
    _impl_.source_.address_.Destroy();
    clear_has_source();
  }
}
inline const std::string& SourceOfFunds::address() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.SourceOfFunds.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SourceOfFunds::set_address(Arg_&& arg,
                                                     Args_... args) {
  if (source_case() != kAddress) {
    clear_source();

    set_has_address();
    _impl_.source_.address_.InitDefault();
  }
  _impl_.source_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.SourceOfFunds.address)
}
inline std::string* SourceOfFunds::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.SourceOfFunds.address)
  return _s;
}
inline const std::string& SourceOfFunds::_internal_address() const {
  if (source_case() != kAddress) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.source_.address_.Get();
}
inline void SourceOfFunds::_internal_set_address(const std::string& value) {
  if (source_case() != kAddress) {
    clear_source();

    set_has_address();
    _impl_.source_.address_.InitDefault();
  }


  _impl_.source_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceOfFunds::_internal_mutable_address() {
  if (source_case() != kAddress) {
    clear_source();

    set_has_address();
    _impl_.source_.address_.InitDefault();
  }
  return _impl_.source_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* SourceOfFunds::release_address() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.SourceOfFunds.address)
  if (source_case() != kAddress) {
    return nullptr;
  }
  clear_has_source();
  return _impl_.source_.address_.Release();
}
inline void SourceOfFunds::set_allocated_address(std::string* value) {
  if (has_source()) {
    clear_source();
  }
  if (value != nullptr) {
    set_has_address();
    _impl_.source_.address_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.SourceOfFunds.address)
}

inline bool SourceOfFunds::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void SourceOfFunds::clear_has_source() {
  _impl_._oneof_case_[0] = SOURCE_NOT_SET;
}
inline SourceOfFunds::SourceCase SourceOfFunds::source_case() const {
  return SourceOfFunds::SourceCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransferEventV1

// .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId sender_subaccount_id = 1;
inline bool TransferEventV1::has_sender_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& TransferEventV1::_internal_sender_subaccount_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* p = _impl_.sender_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& TransferEventV1::sender_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.TransferEventV1.sender_subaccount_id)
  return _internal_sender_subaccount_id();
}
inline void TransferEventV1::unsafe_arena_set_allocated_sender_subaccount_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* sender_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_subaccount_id_);
  }
  _impl_.sender_subaccount_id_ = sender_subaccount_id;
  if (sender_subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.TransferEventV1.sender_subaccount_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::release_sender_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.sender_subaccount_id_;
  _impl_.sender_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::unsafe_arena_release_sender_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.TransferEventV1.sender_subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.sender_subaccount_id_;
  _impl_.sender_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::_internal_mutable_sender_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sender_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId>(GetArenaForAllocation());
    _impl_.sender_subaccount_id_ = p;
  }
  return _impl_.sender_subaccount_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::mutable_sender_subaccount_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _msg = _internal_mutable_sender_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.TransferEventV1.sender_subaccount_id)
  return _msg;
}
inline void TransferEventV1::set_allocated_sender_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* sender_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_subaccount_id_);
  }
  if (sender_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_subaccount_id));
    if (message_arena != submessage_arena) {
      sender_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_subaccount_id_ = sender_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.TransferEventV1.sender_subaccount_id)
}

// .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId recipient_subaccount_id = 2;
inline bool TransferEventV1::has_recipient_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recipient_subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& TransferEventV1::_internal_recipient_subaccount_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* p = _impl_.recipient_subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& TransferEventV1::recipient_subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.TransferEventV1.recipient_subaccount_id)
  return _internal_recipient_subaccount_id();
}
inline void TransferEventV1::unsafe_arena_set_allocated_recipient_subaccount_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* recipient_subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_subaccount_id_);
  }
  _impl_.recipient_subaccount_id_ = recipient_subaccount_id;
  if (recipient_subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.TransferEventV1.recipient_subaccount_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::release_recipient_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.recipient_subaccount_id_;
  _impl_.recipient_subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::unsafe_arena_release_recipient_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.TransferEventV1.recipient_subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.recipient_subaccount_id_;
  _impl_.recipient_subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::_internal_mutable_recipient_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.recipient_subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId>(GetArenaForAllocation());
    _impl_.recipient_subaccount_id_ = p;
  }
  return _impl_.recipient_subaccount_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* TransferEventV1::mutable_recipient_subaccount_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _msg = _internal_mutable_recipient_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.TransferEventV1.recipient_subaccount_id)
  return _msg;
}
inline void TransferEventV1::set_allocated_recipient_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* recipient_subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_subaccount_id_);
  }
  if (recipient_subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(recipient_subaccount_id));
    if (message_arena != submessage_arena) {
      recipient_subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipient_subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.recipient_subaccount_id_ = recipient_subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.TransferEventV1.recipient_subaccount_id)
}

// uint32 asset_id = 3;
inline void TransferEventV1::clear_asset_id() {
  _impl_.asset_id_ = 0u;
}
inline ::uint32_t TransferEventV1::asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.TransferEventV1.asset_id)
  return _internal_asset_id();
}
inline void TransferEventV1::set_asset_id(::uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.TransferEventV1.asset_id)
}
inline ::uint32_t TransferEventV1::_internal_asset_id() const {
  return _impl_.asset_id_;
}
inline void TransferEventV1::_internal_set_asset_id(::uint32_t value) {
  ;
  _impl_.asset_id_ = value;
}

// uint64 amount = 4;
inline void TransferEventV1::clear_amount() {
  _impl_.amount_ = ::uint64_t{0u};
}
inline ::uint64_t TransferEventV1::amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.TransferEventV1.amount)
  return _internal_amount();
}
inline void TransferEventV1::set_amount(::uint64_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.TransferEventV1.amount)
}
inline ::uint64_t TransferEventV1::_internal_amount() const {
  return _impl_.amount_;
}
inline void TransferEventV1::_internal_set_amount(::uint64_t value) {
  ;
  _impl_.amount_ = value;
}

// .dydxprotocol.indexer.events.SourceOfFunds sender = 5;
inline bool TransferEventV1::has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sender_ != nullptr);
  return value;
}
inline void TransferEventV1::clear_sender() {
  if (_impl_.sender_ != nullptr) _impl_.sender_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::dydxprotocol::indexer::events::SourceOfFunds& TransferEventV1::_internal_sender() const {
  const ::dydxprotocol::indexer::events::SourceOfFunds* p = _impl_.sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::events::SourceOfFunds&>(
      ::dydxprotocol::indexer::events::_SourceOfFunds_default_instance_);
}
inline const ::dydxprotocol::indexer::events::SourceOfFunds& TransferEventV1::sender() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.TransferEventV1.sender)
  return _internal_sender();
}
inline void TransferEventV1::unsafe_arena_set_allocated_sender(
    ::dydxprotocol::indexer::events::SourceOfFunds* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sender_);
  }
  _impl_.sender_ = sender;
  if (sender) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.TransferEventV1.sender)
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::release_sender() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::dydxprotocol::indexer::events::SourceOfFunds* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.TransferEventV1.sender)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::dydxprotocol::indexer::events::SourceOfFunds* temp = _impl_.sender_;
  _impl_.sender_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::_internal_mutable_sender() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::events::SourceOfFunds>(GetArenaForAllocation());
    _impl_.sender_ = p;
  }
  return _impl_.sender_;
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::mutable_sender() {
  ::dydxprotocol::indexer::events::SourceOfFunds* _msg = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.TransferEventV1.sender)
  return _msg;
}
inline void TransferEventV1::set_allocated_sender(::dydxprotocol::indexer::events::SourceOfFunds* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sender_;
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sender);
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.TransferEventV1.sender)
}

// .dydxprotocol.indexer.events.SourceOfFunds recipient = 6;
inline bool TransferEventV1::has_recipient() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.recipient_ != nullptr);
  return value;
}
inline void TransferEventV1::clear_recipient() {
  if (_impl_.recipient_ != nullptr) _impl_.recipient_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::dydxprotocol::indexer::events::SourceOfFunds& TransferEventV1::_internal_recipient() const {
  const ::dydxprotocol::indexer::events::SourceOfFunds* p = _impl_.recipient_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::events::SourceOfFunds&>(
      ::dydxprotocol::indexer::events::_SourceOfFunds_default_instance_);
}
inline const ::dydxprotocol::indexer::events::SourceOfFunds& TransferEventV1::recipient() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.TransferEventV1.recipient)
  return _internal_recipient();
}
inline void TransferEventV1::unsafe_arena_set_allocated_recipient(
    ::dydxprotocol::indexer::events::SourceOfFunds* recipient) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.recipient_);
  }
  _impl_.recipient_ = recipient;
  if (recipient) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.TransferEventV1.recipient)
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::release_recipient() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::dydxprotocol::indexer::events::SourceOfFunds* temp = _impl_.recipient_;
  _impl_.recipient_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::unsafe_arena_release_recipient() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.TransferEventV1.recipient)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::dydxprotocol::indexer::events::SourceOfFunds* temp = _impl_.recipient_;
  _impl_.recipient_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::_internal_mutable_recipient() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.recipient_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::events::SourceOfFunds>(GetArenaForAllocation());
    _impl_.recipient_ = p;
  }
  return _impl_.recipient_;
}
inline ::dydxprotocol::indexer::events::SourceOfFunds* TransferEventV1::mutable_recipient() {
  ::dydxprotocol::indexer::events::SourceOfFunds* _msg = _internal_mutable_recipient();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.TransferEventV1.recipient)
  return _msg;
}
inline void TransferEventV1::set_allocated_recipient(::dydxprotocol::indexer::events::SourceOfFunds* recipient) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.recipient_;
  }
  if (recipient) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recipient);
    if (message_arena != submessage_arena) {
      recipient = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recipient, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.recipient_ = recipient;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.TransferEventV1.recipient)
}

// -------------------------------------------------------------------

// OrderFillEventV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrder maker_order = 1 [(.gogoproto.nullable) = false];
inline bool OrderFillEventV1::has_maker_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maker_order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& OrderFillEventV1::_internal_maker_order() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder* p = _impl_.maker_order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& OrderFillEventV1::maker_order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.maker_order)
  return _internal_maker_order();
}
inline void OrderFillEventV1::unsafe_arena_set_allocated_maker_order(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* maker_order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_);
  }
  _impl_.maker_order_ = maker_order;
  if (maker_order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.OrderFillEventV1.maker_order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::release_maker_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.maker_order_;
  _impl_.maker_order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::unsafe_arena_release_maker_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.OrderFillEventV1.maker_order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.maker_order_;
  _impl_.maker_order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::_internal_mutable_maker_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.maker_order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(GetArenaForAllocation());
    _impl_.maker_order_ = p;
  }
  return _impl_.maker_order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::mutable_maker_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_maker_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.OrderFillEventV1.maker_order)
  return _msg;
}
inline void OrderFillEventV1::set_allocated_maker_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* maker_order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maker_order_);
  }
  if (maker_order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maker_order));
    if (message_arena != submessage_arena) {
      maker_order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maker_order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.maker_order_ = maker_order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.OrderFillEventV1.maker_order)
}

// .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 2;
inline bool OrderFillEventV1::has_order() const {
  return taker_order_case() == kOrder;
}
inline bool OrderFillEventV1::_internal_has_order() const {
  return taker_order_case() == kOrder;
}
inline void OrderFillEventV1::set_has_order() {
  _impl_._oneof_case_[0] = kOrder;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.OrderFillEventV1.order)
  if (taker_order_case() == kOrder) {
    clear_has_taker_order();
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.taker_order_.order_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.taker_order_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& OrderFillEventV1::_internal_order() const {
  return taker_order_case() == kOrder
      ? *_impl_.taker_order_.order_
      : reinterpret_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& OrderFillEventV1::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.order)
  return _internal_order();
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.OrderFillEventV1.order)
  if (taker_order_case() == kOrder) {
    clear_has_taker_order();
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.taker_order_.order_;
    _impl_.taker_order_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderFillEventV1::unsafe_arena_set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  clear_taker_order();
  if (order) {
    set_has_order();
    _impl_.taker_order_.order_ = order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.OrderFillEventV1.order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::_internal_mutable_order() {
  if (taker_order_case() != kOrder) {
    clear_taker_order();
    set_has_order();
    _impl_.taker_order_.order_ = CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerOrder >(GetArenaForAllocation());
  }
  return _impl_.taker_order_.order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderFillEventV1::mutable_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.OrderFillEventV1.order)
  return _msg;
}

// .dydxprotocol.indexer.events.LiquidationOrderV1 liquidation_order = 4;
inline bool OrderFillEventV1::has_liquidation_order() const {
  return taker_order_case() == kLiquidationOrder;
}
inline bool OrderFillEventV1::_internal_has_liquidation_order() const {
  return taker_order_case() == kLiquidationOrder;
}
inline void OrderFillEventV1::set_has_liquidation_order() {
  _impl_._oneof_case_[0] = kLiquidationOrder;
}
inline void OrderFillEventV1::clear_liquidation_order() {
  if (taker_order_case() == kLiquidationOrder) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.taker_order_.liquidation_order_;
    }
    clear_has_taker_order();
  }
}
inline ::dydxprotocol::indexer::events::LiquidationOrderV1* OrderFillEventV1::release_liquidation_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.OrderFillEventV1.liquidation_order)
  if (taker_order_case() == kLiquidationOrder) {
    clear_has_taker_order();
    ::dydxprotocol::indexer::events::LiquidationOrderV1* temp = _impl_.taker_order_.liquidation_order_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.taker_order_.liquidation_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::LiquidationOrderV1& OrderFillEventV1::_internal_liquidation_order() const {
  return taker_order_case() == kLiquidationOrder
      ? *_impl_.taker_order_.liquidation_order_
      : reinterpret_cast<::dydxprotocol::indexer::events::LiquidationOrderV1&>(::dydxprotocol::indexer::events::_LiquidationOrderV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::LiquidationOrderV1& OrderFillEventV1::liquidation_order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.liquidation_order)
  return _internal_liquidation_order();
}
inline ::dydxprotocol::indexer::events::LiquidationOrderV1* OrderFillEventV1::unsafe_arena_release_liquidation_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.OrderFillEventV1.liquidation_order)
  if (taker_order_case() == kLiquidationOrder) {
    clear_has_taker_order();
    ::dydxprotocol::indexer::events::LiquidationOrderV1* temp = _impl_.taker_order_.liquidation_order_;
    _impl_.taker_order_.liquidation_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderFillEventV1::unsafe_arena_set_allocated_liquidation_order(::dydxprotocol::indexer::events::LiquidationOrderV1* liquidation_order) {
  clear_taker_order();
  if (liquidation_order) {
    set_has_liquidation_order();
    _impl_.taker_order_.liquidation_order_ = liquidation_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.OrderFillEventV1.liquidation_order)
}
inline ::dydxprotocol::indexer::events::LiquidationOrderV1* OrderFillEventV1::_internal_mutable_liquidation_order() {
  if (taker_order_case() != kLiquidationOrder) {
    clear_taker_order();
    set_has_liquidation_order();
    _impl_.taker_order_.liquidation_order_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::LiquidationOrderV1 >(GetArenaForAllocation());
  }
  return _impl_.taker_order_.liquidation_order_;
}
inline ::dydxprotocol::indexer::events::LiquidationOrderV1* OrderFillEventV1::mutable_liquidation_order() {
  ::dydxprotocol::indexer::events::LiquidationOrderV1* _msg = _internal_mutable_liquidation_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.OrderFillEventV1.liquidation_order)
  return _msg;
}

// uint64 fill_amount = 3;
inline void OrderFillEventV1::clear_fill_amount() {
  _impl_.fill_amount_ = ::uint64_t{0u};
}
inline ::uint64_t OrderFillEventV1::fill_amount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.fill_amount)
  return _internal_fill_amount();
}
inline void OrderFillEventV1::set_fill_amount(::uint64_t value) {
  _internal_set_fill_amount(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.OrderFillEventV1.fill_amount)
}
inline ::uint64_t OrderFillEventV1::_internal_fill_amount() const {
  return _impl_.fill_amount_;
}
inline void OrderFillEventV1::_internal_set_fill_amount(::uint64_t value) {
  ;
  _impl_.fill_amount_ = value;
}

// sint64 maker_fee = 5;
inline void OrderFillEventV1::clear_maker_fee() {
  _impl_.maker_fee_ = ::int64_t{0};
}
inline ::int64_t OrderFillEventV1::maker_fee() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.maker_fee)
  return _internal_maker_fee();
}
inline void OrderFillEventV1::set_maker_fee(::int64_t value) {
  _internal_set_maker_fee(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.OrderFillEventV1.maker_fee)
}
inline ::int64_t OrderFillEventV1::_internal_maker_fee() const {
  return _impl_.maker_fee_;
}
inline void OrderFillEventV1::_internal_set_maker_fee(::int64_t value) {
  ;
  _impl_.maker_fee_ = value;
}

// sint64 taker_fee = 6;
inline void OrderFillEventV1::clear_taker_fee() {
  _impl_.taker_fee_ = ::int64_t{0};
}
inline ::int64_t OrderFillEventV1::taker_fee() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.taker_fee)
  return _internal_taker_fee();
}
inline void OrderFillEventV1::set_taker_fee(::int64_t value) {
  _internal_set_taker_fee(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.OrderFillEventV1.taker_fee)
}
inline ::int64_t OrderFillEventV1::_internal_taker_fee() const {
  return _impl_.taker_fee_;
}
inline void OrderFillEventV1::_internal_set_taker_fee(::int64_t value) {
  ;
  _impl_.taker_fee_ = value;
}

// uint64 total_filled_maker = 7;
inline void OrderFillEventV1::clear_total_filled_maker() {
  _impl_.total_filled_maker_ = ::uint64_t{0u};
}
inline ::uint64_t OrderFillEventV1::total_filled_maker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.total_filled_maker)
  return _internal_total_filled_maker();
}
inline void OrderFillEventV1::set_total_filled_maker(::uint64_t value) {
  _internal_set_total_filled_maker(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.OrderFillEventV1.total_filled_maker)
}
inline ::uint64_t OrderFillEventV1::_internal_total_filled_maker() const {
  return _impl_.total_filled_maker_;
}
inline void OrderFillEventV1::_internal_set_total_filled_maker(::uint64_t value) {
  ;
  _impl_.total_filled_maker_ = value;
}

// uint64 total_filled_taker = 8;
inline void OrderFillEventV1::clear_total_filled_taker() {
  _impl_.total_filled_taker_ = ::uint64_t{0u};
}
inline ::uint64_t OrderFillEventV1::total_filled_taker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.OrderFillEventV1.total_filled_taker)
  return _internal_total_filled_taker();
}
inline void OrderFillEventV1::set_total_filled_taker(::uint64_t value) {
  _internal_set_total_filled_taker(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.OrderFillEventV1.total_filled_taker)
}
inline ::uint64_t OrderFillEventV1::_internal_total_filled_taker() const {
  return _impl_.total_filled_taker_;
}
inline void OrderFillEventV1::_internal_set_total_filled_taker(::uint64_t value) {
  ;
  _impl_.total_filled_taker_ = value;
}

inline bool OrderFillEventV1::has_taker_order() const {
  return taker_order_case() != TAKER_ORDER_NOT_SET;
}
inline void OrderFillEventV1::clear_has_taker_order() {
  _impl_._oneof_case_[0] = TAKER_ORDER_NOT_SET;
}
inline OrderFillEventV1::TakerOrderCase OrderFillEventV1::taker_order_case() const {
  return OrderFillEventV1::TakerOrderCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// LiquidationOrderV1

// .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId liquidated = 1 [(.gogoproto.nullable) = false];
inline bool LiquidationOrderV1::has_liquidated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.liquidated_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& LiquidationOrderV1::_internal_liquidated() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* p = _impl_.liquidated_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& LiquidationOrderV1::liquidated() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidationOrderV1.liquidated)
  return _internal_liquidated();
}
inline void LiquidationOrderV1::unsafe_arena_set_allocated_liquidated(
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* liquidated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_);
  }
  _impl_.liquidated_ = liquidated;
  if (liquidated) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.LiquidationOrderV1.liquidated)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* LiquidationOrderV1::release_liquidated() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.liquidated_;
  _impl_.liquidated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* LiquidationOrderV1::unsafe_arena_release_liquidated() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.LiquidationOrderV1.liquidated)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.liquidated_;
  _impl_.liquidated_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* LiquidationOrderV1::_internal_mutable_liquidated() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.liquidated_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId>(GetArenaForAllocation());
    _impl_.liquidated_ = p;
  }
  return _impl_.liquidated_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* LiquidationOrderV1::mutable_liquidated() {
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _msg = _internal_mutable_liquidated();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.LiquidationOrderV1.liquidated)
  return _msg;
}
inline void LiquidationOrderV1::set_allocated_liquidated(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* liquidated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.liquidated_);
  }
  if (liquidated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(liquidated));
    if (message_arena != submessage_arena) {
      liquidated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, liquidated, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.liquidated_ = liquidated;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.LiquidationOrderV1.liquidated)
}

// uint32 clob_pair_id = 2;
inline void LiquidationOrderV1::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t LiquidationOrderV1::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidationOrderV1.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void LiquidationOrderV1::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidationOrderV1.clob_pair_id)
}
inline ::uint32_t LiquidationOrderV1::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void LiquidationOrderV1::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// uint32 perpetual_id = 3;
inline void LiquidationOrderV1::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline ::uint32_t LiquidationOrderV1::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidationOrderV1.perpetual_id)
  return _internal_perpetual_id();
}
inline void LiquidationOrderV1::set_perpetual_id(::uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidationOrderV1.perpetual_id)
}
inline ::uint32_t LiquidationOrderV1::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline void LiquidationOrderV1::_internal_set_perpetual_id(::uint32_t value) {
  ;
  _impl_.perpetual_id_ = value;
}

// uint64 total_size = 4;
inline void LiquidationOrderV1::clear_total_size() {
  _impl_.total_size_ = ::uint64_t{0u};
}
inline ::uint64_t LiquidationOrderV1::total_size() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidationOrderV1.total_size)
  return _internal_total_size();
}
inline void LiquidationOrderV1::set_total_size(::uint64_t value) {
  _internal_set_total_size(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidationOrderV1.total_size)
}
inline ::uint64_t LiquidationOrderV1::_internal_total_size() const {
  return _impl_.total_size_;
}
inline void LiquidationOrderV1::_internal_set_total_size(::uint64_t value) {
  ;
  _impl_.total_size_ = value;
}

// bool is_buy = 5;
inline void LiquidationOrderV1::clear_is_buy() {
  _impl_.is_buy_ = false;
}
inline bool LiquidationOrderV1::is_buy() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidationOrderV1.is_buy)
  return _internal_is_buy();
}
inline void LiquidationOrderV1::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidationOrderV1.is_buy)
}
inline bool LiquidationOrderV1::_internal_is_buy() const {
  return _impl_.is_buy_;
}
inline void LiquidationOrderV1::_internal_set_is_buy(bool value) {
  ;
  _impl_.is_buy_ = value;
}

// uint64 subticks = 6;
inline void LiquidationOrderV1::clear_subticks() {
  _impl_.subticks_ = ::uint64_t{0u};
}
inline ::uint64_t LiquidationOrderV1::subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidationOrderV1.subticks)
  return _internal_subticks();
}
inline void LiquidationOrderV1::set_subticks(::uint64_t value) {
  _internal_set_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidationOrderV1.subticks)
}
inline ::uint64_t LiquidationOrderV1::_internal_subticks() const {
  return _impl_.subticks_;
}
inline void LiquidationOrderV1::_internal_set_subticks(::uint64_t value) {
  ;
  _impl_.subticks_ = value;
}

// -------------------------------------------------------------------

// SubaccountUpdateEventV1

// .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1;
inline bool SubaccountUpdateEventV1::has_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& SubaccountUpdateEventV1::_internal_subaccount_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* p = _impl_.subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& SubaccountUpdateEventV1::subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.SubaccountUpdateEventV1.subaccount_id)
  return _internal_subaccount_id();
}
inline void SubaccountUpdateEventV1::unsafe_arena_set_allocated_subaccount_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  _impl_.subaccount_id_ = subaccount_id;
  if (subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.SubaccountUpdateEventV1.subaccount_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SubaccountUpdateEventV1::release_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SubaccountUpdateEventV1::unsafe_arena_release_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.SubaccountUpdateEventV1.subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SubaccountUpdateEventV1::_internal_mutable_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId>(GetArenaForAllocation());
    _impl_.subaccount_id_ = p;
  }
  return _impl_.subaccount_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* SubaccountUpdateEventV1::mutable_subaccount_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _msg = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.SubaccountUpdateEventV1.subaccount_id)
  return _msg;
}
inline void SubaccountUpdateEventV1::set_allocated_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  if (subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount_id));
    if (message_arena != submessage_arena) {
      subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subaccount_id_ = subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.SubaccountUpdateEventV1.subaccount_id)
}

// repeated .dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition updated_perpetual_positions = 3;
inline int SubaccountUpdateEventV1::_internal_updated_perpetual_positions_size() const {
  return _impl_.updated_perpetual_positions_.size();
}
inline int SubaccountUpdateEventV1::updated_perpetual_positions_size() const {
  return _internal_updated_perpetual_positions_size();
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* SubaccountUpdateEventV1::mutable_updated_perpetual_positions(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_perpetual_positions)
  return _internal_mutable_updated_perpetual_positions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition >*
SubaccountUpdateEventV1::mutable_updated_perpetual_positions() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_perpetual_positions)
  return _internal_mutable_updated_perpetual_positions();
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition& SubaccountUpdateEventV1::_internal_updated_perpetual_positions(int index) const {
  return _internal_updated_perpetual_positions().Get(index);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition& SubaccountUpdateEventV1::updated_perpetual_positions(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_perpetual_positions)
  return _internal_updated_perpetual_positions(index);
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* SubaccountUpdateEventV1::_internal_add_updated_perpetual_positions() {
  return _internal_mutable_updated_perpetual_positions()->Add();
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* SubaccountUpdateEventV1::add_updated_perpetual_positions() {
  ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* _add = _internal_add_updated_perpetual_positions();
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_perpetual_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition >&
SubaccountUpdateEventV1::updated_perpetual_positions() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_perpetual_positions)
  return _internal_updated_perpetual_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition>&
SubaccountUpdateEventV1::_internal_updated_perpetual_positions() const {
  return _impl_.updated_perpetual_positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition>*
SubaccountUpdateEventV1::_internal_mutable_updated_perpetual_positions() {
  return &_impl_.updated_perpetual_positions_;
}

// repeated .dydxprotocol.indexer.protocol.v1.IndexerAssetPosition updated_asset_positions = 4;
inline int SubaccountUpdateEventV1::_internal_updated_asset_positions_size() const {
  return _impl_.updated_asset_positions_.size();
}
inline int SubaccountUpdateEventV1::updated_asset_positions_size() const {
  return _internal_updated_asset_positions_size();
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* SubaccountUpdateEventV1::mutable_updated_asset_positions(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_asset_positions)
  return _internal_mutable_updated_asset_positions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition >*
SubaccountUpdateEventV1::mutable_updated_asset_positions() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_asset_positions)
  return _internal_mutable_updated_asset_positions();
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition& SubaccountUpdateEventV1::_internal_updated_asset_positions(int index) const {
  return _internal_updated_asset_positions().Get(index);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition& SubaccountUpdateEventV1::updated_asset_positions(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_asset_positions)
  return _internal_updated_asset_positions(index);
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* SubaccountUpdateEventV1::_internal_add_updated_asset_positions() {
  return _internal_mutable_updated_asset_positions()->Add();
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* SubaccountUpdateEventV1::add_updated_asset_positions() {
  ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* _add = _internal_add_updated_asset_positions();
  // @@protoc_insertion_point(field_add:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_asset_positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition >&
SubaccountUpdateEventV1::updated_asset_positions() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.indexer.events.SubaccountUpdateEventV1.updated_asset_positions)
  return _internal_updated_asset_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition>&
SubaccountUpdateEventV1::_internal_updated_asset_positions() const {
  return _impl_.updated_asset_positions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition>*
SubaccountUpdateEventV1::_internal_mutable_updated_asset_positions() {
  return &_impl_.updated_asset_positions_;
}

// -------------------------------------------------------------------

// StatefulOrderEventV1_StatefulOrderPlacementV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
inline bool StatefulOrderEventV1_StatefulOrderPlacementV1::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& StatefulOrderEventV1_StatefulOrderPlacementV1::_internal_order() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& StatefulOrderEventV1_StatefulOrderPlacementV1::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1.order)
  return _internal_order();
}
inline void StatefulOrderEventV1_StatefulOrderPlacementV1::unsafe_arena_set_allocated_order(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1.order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_StatefulOrderPlacementV1::release_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_StatefulOrderPlacementV1::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1.order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_StatefulOrderPlacementV1::_internal_mutable_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_StatefulOrderPlacementV1::mutable_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1.order)
  return _msg;
}
inline void StatefulOrderEventV1_StatefulOrderPlacementV1::set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1.order)
}

// -------------------------------------------------------------------

// StatefulOrderEventV1_StatefulOrderRemovalV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
inline bool StatefulOrderEventV1_StatefulOrderRemovalV1::has_removed_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.removed_order_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& StatefulOrderEventV1_StatefulOrderRemovalV1::_internal_removed_order_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* p = _impl_.removed_order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrderId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& StatefulOrderEventV1_StatefulOrderRemovalV1::removed_order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.removed_order_id)
  return _internal_removed_order_id();
}
inline void StatefulOrderEventV1_StatefulOrderRemovalV1::unsafe_arena_set_allocated_removed_order_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_order_id_);
  }
  _impl_.removed_order_id_ = removed_order_id;
  if (removed_order_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.removed_order_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_StatefulOrderRemovalV1::release_removed_order_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.removed_order_id_;
  _impl_.removed_order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_StatefulOrderRemovalV1::unsafe_arena_release_removed_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.removed_order_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.removed_order_id_;
  _impl_.removed_order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_StatefulOrderRemovalV1::_internal_mutable_removed_order_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.removed_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrderId>(GetArenaForAllocation());
    _impl_.removed_order_id_ = p;
  }
  return _impl_.removed_order_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_StatefulOrderRemovalV1::mutable_removed_order_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _msg = _internal_mutable_removed_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.removed_order_id)
  return _msg;
}
inline void StatefulOrderEventV1_StatefulOrderRemovalV1::set_allocated_removed_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_order_id_);
  }
  if (removed_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_order_id));
    if (message_arena != submessage_arena) {
      removed_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed_order_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.removed_order_id_ = removed_order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.removed_order_id)
}

// .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
inline void StatefulOrderEventV1_StatefulOrderRemovalV1::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::dydxprotocol::indexer::shared::OrderRemovalReason StatefulOrderEventV1_StatefulOrderRemovalV1::reason() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.reason)
  return _internal_reason();
}
inline void StatefulOrderEventV1_StatefulOrderRemovalV1::set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value) {
   _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1.reason)
}
inline ::dydxprotocol::indexer::shared::OrderRemovalReason StatefulOrderEventV1_StatefulOrderRemovalV1::_internal_reason() const {
  return static_cast<::dydxprotocol::indexer::shared::OrderRemovalReason>(_impl_.reason_);
}
inline void StatefulOrderEventV1_StatefulOrderRemovalV1::_internal_set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value) {
  ;
  _impl_.reason_ = value;
}

// -------------------------------------------------------------------

// StatefulOrderEventV1_ConditionalOrderPlacementV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
inline bool StatefulOrderEventV1_ConditionalOrderPlacementV1::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& StatefulOrderEventV1_ConditionalOrderPlacementV1::_internal_order() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& StatefulOrderEventV1_ConditionalOrderPlacementV1::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1.order)
  return _internal_order();
}
inline void StatefulOrderEventV1_ConditionalOrderPlacementV1::unsafe_arena_set_allocated_order(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1.order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_ConditionalOrderPlacementV1::release_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_ConditionalOrderPlacementV1::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1.order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_ConditionalOrderPlacementV1::_internal_mutable_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_ConditionalOrderPlacementV1::mutable_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1.order)
  return _msg;
}
inline void StatefulOrderEventV1_ConditionalOrderPlacementV1::set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1.order)
}

// -------------------------------------------------------------------

// StatefulOrderEventV1_ConditionalOrderTriggeredV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrderId triggered_order_id = 1;
inline bool StatefulOrderEventV1_ConditionalOrderTriggeredV1::has_triggered_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.triggered_order_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& StatefulOrderEventV1_ConditionalOrderTriggeredV1::_internal_triggered_order_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* p = _impl_.triggered_order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrderId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& StatefulOrderEventV1_ConditionalOrderTriggeredV1::triggered_order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1.triggered_order_id)
  return _internal_triggered_order_id();
}
inline void StatefulOrderEventV1_ConditionalOrderTriggeredV1::unsafe_arena_set_allocated_triggered_order_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* triggered_order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.triggered_order_id_);
  }
  _impl_.triggered_order_id_ = triggered_order_id;
  if (triggered_order_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1.triggered_order_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_ConditionalOrderTriggeredV1::release_triggered_order_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.triggered_order_id_;
  _impl_.triggered_order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_ConditionalOrderTriggeredV1::unsafe_arena_release_triggered_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1.triggered_order_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.triggered_order_id_;
  _impl_.triggered_order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_ConditionalOrderTriggeredV1::_internal_mutable_triggered_order_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.triggered_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrderId>(GetArenaForAllocation());
    _impl_.triggered_order_id_ = p;
  }
  return _impl_.triggered_order_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* StatefulOrderEventV1_ConditionalOrderTriggeredV1::mutable_triggered_order_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _msg = _internal_mutable_triggered_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1.triggered_order_id)
  return _msg;
}
inline void StatefulOrderEventV1_ConditionalOrderTriggeredV1::set_allocated_triggered_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* triggered_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.triggered_order_id_);
  }
  if (triggered_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(triggered_order_id));
    if (message_arena != submessage_arena) {
      triggered_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, triggered_order_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.triggered_order_id_ = triggered_order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1.triggered_order_id)
}

// -------------------------------------------------------------------

// StatefulOrderEventV1_LongTermOrderPlacementV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
inline bool StatefulOrderEventV1_LongTermOrderPlacementV1::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& StatefulOrderEventV1_LongTermOrderPlacementV1::_internal_order() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& StatefulOrderEventV1_LongTermOrderPlacementV1::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1.order)
  return _internal_order();
}
inline void StatefulOrderEventV1_LongTermOrderPlacementV1::unsafe_arena_set_allocated_order(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1.order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_LongTermOrderPlacementV1::release_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_LongTermOrderPlacementV1::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1.order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_LongTermOrderPlacementV1::_internal_mutable_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* StatefulOrderEventV1_LongTermOrderPlacementV1::mutable_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1.order)
  return _msg;
}
inline void StatefulOrderEventV1_LongTermOrderPlacementV1::set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1.order)
}

// -------------------------------------------------------------------

// StatefulOrderEventV1

// .dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderPlacementV1 order_place = 1;
inline bool StatefulOrderEventV1::has_order_place() const {
  return event_case() == kOrderPlace;
}
inline bool StatefulOrderEventV1::_internal_has_order_place() const {
  return event_case() == kOrderPlace;
}
inline void StatefulOrderEventV1::set_has_order_place() {
  _impl_._oneof_case_[0] = kOrderPlace;
}
inline void StatefulOrderEventV1::clear_order_place() {
  if (event_case() == kOrderPlace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.order_place_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* StatefulOrderEventV1::release_order_place() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.order_place)
  if (event_case() == kOrderPlace) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* temp = _impl_.event_.order_place_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.order_place_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1& StatefulOrderEventV1::_internal_order_place() const {
  return event_case() == kOrderPlace
      ? *_impl_.event_.order_place_
      : reinterpret_cast<::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1&>(::dydxprotocol::indexer::events::_StatefulOrderEventV1_StatefulOrderPlacementV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1& StatefulOrderEventV1::order_place() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.order_place)
  return _internal_order_place();
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* StatefulOrderEventV1::unsafe_arena_release_order_place() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.StatefulOrderEventV1.order_place)
  if (event_case() == kOrderPlace) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* temp = _impl_.event_.order_place_;
    _impl_.event_.order_place_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatefulOrderEventV1::unsafe_arena_set_allocated_order_place(::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* order_place) {
  clear_event();
  if (order_place) {
    set_has_order_place();
    _impl_.event_.order_place_ = order_place;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.order_place)
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* StatefulOrderEventV1::_internal_mutable_order_place() {
  if (event_case() != kOrderPlace) {
    clear_event();
    set_has_order_place();
    _impl_.event_.order_place_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.order_place_;
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* StatefulOrderEventV1::mutable_order_place() {
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderPlacementV1* _msg = _internal_mutable_order_place();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.order_place)
  return _msg;
}

// .dydxprotocol.indexer.events.StatefulOrderEventV1.StatefulOrderRemovalV1 order_removal = 4;
inline bool StatefulOrderEventV1::has_order_removal() const {
  return event_case() == kOrderRemoval;
}
inline bool StatefulOrderEventV1::_internal_has_order_removal() const {
  return event_case() == kOrderRemoval;
}
inline void StatefulOrderEventV1::set_has_order_removal() {
  _impl_._oneof_case_[0] = kOrderRemoval;
}
inline void StatefulOrderEventV1::clear_order_removal() {
  if (event_case() == kOrderRemoval) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.order_removal_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* StatefulOrderEventV1::release_order_removal() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.order_removal)
  if (event_case() == kOrderRemoval) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* temp = _impl_.event_.order_removal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1& StatefulOrderEventV1::_internal_order_removal() const {
  return event_case() == kOrderRemoval
      ? *_impl_.event_.order_removal_
      : reinterpret_cast<::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1&>(::dydxprotocol::indexer::events::_StatefulOrderEventV1_StatefulOrderRemovalV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1& StatefulOrderEventV1::order_removal() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.order_removal)
  return _internal_order_removal();
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* StatefulOrderEventV1::unsafe_arena_release_order_removal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.StatefulOrderEventV1.order_removal)
  if (event_case() == kOrderRemoval) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* temp = _impl_.event_.order_removal_;
    _impl_.event_.order_removal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatefulOrderEventV1::unsafe_arena_set_allocated_order_removal(::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* order_removal) {
  clear_event();
  if (order_removal) {
    set_has_order_removal();
    _impl_.event_.order_removal_ = order_removal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.order_removal)
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* StatefulOrderEventV1::_internal_mutable_order_removal() {
  if (event_case() != kOrderRemoval) {
    clear_event();
    set_has_order_removal();
    _impl_.event_.order_removal_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.order_removal_;
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* StatefulOrderEventV1::mutable_order_removal() {
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_StatefulOrderRemovalV1* _msg = _internal_mutable_order_removal();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.order_removal)
  return _msg;
}

// .dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderPlacementV1 conditional_order_placement = 5;
inline bool StatefulOrderEventV1::has_conditional_order_placement() const {
  return event_case() == kConditionalOrderPlacement;
}
inline bool StatefulOrderEventV1::_internal_has_conditional_order_placement() const {
  return event_case() == kConditionalOrderPlacement;
}
inline void StatefulOrderEventV1::set_has_conditional_order_placement() {
  _impl_._oneof_case_[0] = kConditionalOrderPlacement;
}
inline void StatefulOrderEventV1::clear_conditional_order_placement() {
  if (event_case() == kConditionalOrderPlacement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.conditional_order_placement_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* StatefulOrderEventV1::release_conditional_order_placement() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_placement)
  if (event_case() == kConditionalOrderPlacement) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* temp = _impl_.event_.conditional_order_placement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.conditional_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1& StatefulOrderEventV1::_internal_conditional_order_placement() const {
  return event_case() == kConditionalOrderPlacement
      ? *_impl_.event_.conditional_order_placement_
      : reinterpret_cast<::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1&>(::dydxprotocol::indexer::events::_StatefulOrderEventV1_ConditionalOrderPlacementV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1& StatefulOrderEventV1::conditional_order_placement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_placement)
  return _internal_conditional_order_placement();
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* StatefulOrderEventV1::unsafe_arena_release_conditional_order_placement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_placement)
  if (event_case() == kConditionalOrderPlacement) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* temp = _impl_.event_.conditional_order_placement_;
    _impl_.event_.conditional_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatefulOrderEventV1::unsafe_arena_set_allocated_conditional_order_placement(::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* conditional_order_placement) {
  clear_event();
  if (conditional_order_placement) {
    set_has_conditional_order_placement();
    _impl_.event_.conditional_order_placement_ = conditional_order_placement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_placement)
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* StatefulOrderEventV1::_internal_mutable_conditional_order_placement() {
  if (event_case() != kConditionalOrderPlacement) {
    clear_event();
    set_has_conditional_order_placement();
    _impl_.event_.conditional_order_placement_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.conditional_order_placement_;
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* StatefulOrderEventV1::mutable_conditional_order_placement() {
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderPlacementV1* _msg = _internal_mutable_conditional_order_placement();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_placement)
  return _msg;
}

// .dydxprotocol.indexer.events.StatefulOrderEventV1.ConditionalOrderTriggeredV1 conditional_order_triggered = 6;
inline bool StatefulOrderEventV1::has_conditional_order_triggered() const {
  return event_case() == kConditionalOrderTriggered;
}
inline bool StatefulOrderEventV1::_internal_has_conditional_order_triggered() const {
  return event_case() == kConditionalOrderTriggered;
}
inline void StatefulOrderEventV1::set_has_conditional_order_triggered() {
  _impl_._oneof_case_[0] = kConditionalOrderTriggered;
}
inline void StatefulOrderEventV1::clear_conditional_order_triggered() {
  if (event_case() == kConditionalOrderTriggered) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.conditional_order_triggered_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* StatefulOrderEventV1::release_conditional_order_triggered() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_triggered)
  if (event_case() == kConditionalOrderTriggered) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* temp = _impl_.event_.conditional_order_triggered_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.conditional_order_triggered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1& StatefulOrderEventV1::_internal_conditional_order_triggered() const {
  return event_case() == kConditionalOrderTriggered
      ? *_impl_.event_.conditional_order_triggered_
      : reinterpret_cast<::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1&>(::dydxprotocol::indexer::events::_StatefulOrderEventV1_ConditionalOrderTriggeredV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1& StatefulOrderEventV1::conditional_order_triggered() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_triggered)
  return _internal_conditional_order_triggered();
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* StatefulOrderEventV1::unsafe_arena_release_conditional_order_triggered() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_triggered)
  if (event_case() == kConditionalOrderTriggered) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* temp = _impl_.event_.conditional_order_triggered_;
    _impl_.event_.conditional_order_triggered_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatefulOrderEventV1::unsafe_arena_set_allocated_conditional_order_triggered(::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* conditional_order_triggered) {
  clear_event();
  if (conditional_order_triggered) {
    set_has_conditional_order_triggered();
    _impl_.event_.conditional_order_triggered_ = conditional_order_triggered;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_triggered)
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* StatefulOrderEventV1::_internal_mutable_conditional_order_triggered() {
  if (event_case() != kConditionalOrderTriggered) {
    clear_event();
    set_has_conditional_order_triggered();
    _impl_.event_.conditional_order_triggered_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.conditional_order_triggered_;
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* StatefulOrderEventV1::mutable_conditional_order_triggered() {
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_ConditionalOrderTriggeredV1* _msg = _internal_mutable_conditional_order_triggered();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.conditional_order_triggered)
  return _msg;
}

// .dydxprotocol.indexer.events.StatefulOrderEventV1.LongTermOrderPlacementV1 long_term_order_placement = 7;
inline bool StatefulOrderEventV1::has_long_term_order_placement() const {
  return event_case() == kLongTermOrderPlacement;
}
inline bool StatefulOrderEventV1::_internal_has_long_term_order_placement() const {
  return event_case() == kLongTermOrderPlacement;
}
inline void StatefulOrderEventV1::set_has_long_term_order_placement() {
  _impl_._oneof_case_[0] = kLongTermOrderPlacement;
}
inline void StatefulOrderEventV1::clear_long_term_order_placement() {
  if (event_case() == kLongTermOrderPlacement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.event_.long_term_order_placement_;
    }
    clear_has_event();
  }
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* StatefulOrderEventV1::release_long_term_order_placement() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.StatefulOrderEventV1.long_term_order_placement)
  if (event_case() == kLongTermOrderPlacement) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* temp = _impl_.event_.long_term_order_placement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.long_term_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1& StatefulOrderEventV1::_internal_long_term_order_placement() const {
  return event_case() == kLongTermOrderPlacement
      ? *_impl_.event_.long_term_order_placement_
      : reinterpret_cast<::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1&>(::dydxprotocol::indexer::events::_StatefulOrderEventV1_LongTermOrderPlacementV1_default_instance_);
}
inline const ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1& StatefulOrderEventV1::long_term_order_placement() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.StatefulOrderEventV1.long_term_order_placement)
  return _internal_long_term_order_placement();
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* StatefulOrderEventV1::unsafe_arena_release_long_term_order_placement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.events.StatefulOrderEventV1.long_term_order_placement)
  if (event_case() == kLongTermOrderPlacement) {
    clear_has_event();
    ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* temp = _impl_.event_.long_term_order_placement_;
    _impl_.event_.long_term_order_placement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StatefulOrderEventV1::unsafe_arena_set_allocated_long_term_order_placement(::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* long_term_order_placement) {
  clear_event();
  if (long_term_order_placement) {
    set_has_long_term_order_placement();
    _impl_.event_.long_term_order_placement_ = long_term_order_placement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.events.StatefulOrderEventV1.long_term_order_placement)
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* StatefulOrderEventV1::_internal_mutable_long_term_order_placement() {
  if (event_case() != kLongTermOrderPlacement) {
    clear_event();
    set_has_long_term_order_placement();
    _impl_.event_.long_term_order_placement_ = CreateMaybeMessage< ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1 >(GetArenaForAllocation());
  }
  return _impl_.event_.long_term_order_placement_;
}
inline ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* StatefulOrderEventV1::mutable_long_term_order_placement() {
  ::dydxprotocol::indexer::events::StatefulOrderEventV1_LongTermOrderPlacementV1* _msg = _internal_mutable_long_term_order_placement();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.StatefulOrderEventV1.long_term_order_placement)
  return _msg;
}

inline bool StatefulOrderEventV1::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void StatefulOrderEventV1::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline StatefulOrderEventV1::EventCase StatefulOrderEventV1::event_case() const {
  return StatefulOrderEventV1::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AssetCreateEventV1

// uint32 id = 1;
inline void AssetCreateEventV1::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t AssetCreateEventV1::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.AssetCreateEventV1.id)
  return _internal_id();
}
inline void AssetCreateEventV1::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.AssetCreateEventV1.id)
}
inline ::uint32_t AssetCreateEventV1::_internal_id() const {
  return _impl_.id_;
}
inline void AssetCreateEventV1::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string symbol = 2;
inline void AssetCreateEventV1::clear_symbol() {
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& AssetCreateEventV1::symbol() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.AssetCreateEventV1.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssetCreateEventV1::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.AssetCreateEventV1.symbol)
}
inline std::string* AssetCreateEventV1::mutable_symbol() {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.AssetCreateEventV1.symbol)
  return _s;
}
inline const std::string& AssetCreateEventV1::_internal_symbol() const {
  return _impl_.symbol_.Get();
}
inline void AssetCreateEventV1::_internal_set_symbol(const std::string& value) {
  ;


  _impl_.symbol_.Set(value, GetArenaForAllocation());
}
inline std::string* AssetCreateEventV1::_internal_mutable_symbol() {
  ;
  return _impl_.symbol_.Mutable( GetArenaForAllocation());
}
inline std::string* AssetCreateEventV1::release_symbol() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.AssetCreateEventV1.symbol)
  return _impl_.symbol_.Release();
}
inline void AssetCreateEventV1::set_allocated_symbol(std::string* value) {
  _impl_.symbol_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.symbol_.IsDefault()) {
          _impl_.symbol_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.AssetCreateEventV1.symbol)
}

// bool has_market = 3;
inline void AssetCreateEventV1::clear_has_market() {
  _impl_.has_market_ = false;
}
inline bool AssetCreateEventV1::has_market() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.AssetCreateEventV1.has_market)
  return _internal_has_market();
}
inline void AssetCreateEventV1::set_has_market(bool value) {
  _internal_set_has_market(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.AssetCreateEventV1.has_market)
}
inline bool AssetCreateEventV1::_internal_has_market() const {
  return _impl_.has_market_;
}
inline void AssetCreateEventV1::_internal_set_has_market(bool value) {
  ;
  _impl_.has_market_ = value;
}

// uint32 market_id = 4;
inline void AssetCreateEventV1::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t AssetCreateEventV1::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.AssetCreateEventV1.market_id)
  return _internal_market_id();
}
inline void AssetCreateEventV1::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.AssetCreateEventV1.market_id)
}
inline ::uint32_t AssetCreateEventV1::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void AssetCreateEventV1::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// sint32 atomic_resolution = 5;
inline void AssetCreateEventV1::clear_atomic_resolution() {
  _impl_.atomic_resolution_ = 0;
}
inline ::int32_t AssetCreateEventV1::atomic_resolution() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.AssetCreateEventV1.atomic_resolution)
  return _internal_atomic_resolution();
}
inline void AssetCreateEventV1::set_atomic_resolution(::int32_t value) {
  _internal_set_atomic_resolution(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.AssetCreateEventV1.atomic_resolution)
}
inline ::int32_t AssetCreateEventV1::_internal_atomic_resolution() const {
  return _impl_.atomic_resolution_;
}
inline void AssetCreateEventV1::_internal_set_atomic_resolution(::int32_t value) {
  ;
  _impl_.atomic_resolution_ = value;
}

// -------------------------------------------------------------------

// PerpetualMarketCreateEventV1

// uint32 id = 1;
inline void PerpetualMarketCreateEventV1::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t PerpetualMarketCreateEventV1::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.id)
  return _internal_id();
}
inline void PerpetualMarketCreateEventV1::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.id)
}
inline ::uint32_t PerpetualMarketCreateEventV1::_internal_id() const {
  return _impl_.id_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// uint32 clob_pair_id = 2;
inline void PerpetualMarketCreateEventV1::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t PerpetualMarketCreateEventV1::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void PerpetualMarketCreateEventV1::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.clob_pair_id)
}
inline ::uint32_t PerpetualMarketCreateEventV1::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// string ticker = 3;
inline void PerpetualMarketCreateEventV1::clear_ticker() {
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& PerpetualMarketCreateEventV1::ticker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerpetualMarketCreateEventV1::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.ticker)
}
inline std::string* PerpetualMarketCreateEventV1::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.ticker)
  return _s;
}
inline const std::string& PerpetualMarketCreateEventV1::_internal_ticker() const {
  return _impl_.ticker_.Get();
}
inline void PerpetualMarketCreateEventV1::_internal_set_ticker(const std::string& value) {
  ;


  _impl_.ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* PerpetualMarketCreateEventV1::_internal_mutable_ticker() {
  ;
  return _impl_.ticker_.Mutable( GetArenaForAllocation());
}
inline std::string* PerpetualMarketCreateEventV1::release_ticker() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.ticker)
  return _impl_.ticker_.Release();
}
inline void PerpetualMarketCreateEventV1::set_allocated_ticker(std::string* value) {
  _impl_.ticker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.ticker)
}

// uint32 market_id = 4;
inline void PerpetualMarketCreateEventV1::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t PerpetualMarketCreateEventV1::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.market_id)
  return _internal_market_id();
}
inline void PerpetualMarketCreateEventV1::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.market_id)
}
inline ::uint32_t PerpetualMarketCreateEventV1::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// .dydxprotocol.indexer.protocol.v1.ClobPairStatus status = 5;
inline void PerpetualMarketCreateEventV1::clear_status() {
  _impl_.status_ = 0;
}
inline ::dydxprotocol::indexer::protocol::v1::ClobPairStatus PerpetualMarketCreateEventV1::status() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.status)
  return _internal_status();
}
inline void PerpetualMarketCreateEventV1::set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.status)
}
inline ::dydxprotocol::indexer::protocol::v1::ClobPairStatus PerpetualMarketCreateEventV1::_internal_status() const {
  return static_cast<::dydxprotocol::indexer::protocol::v1::ClobPairStatus>(_impl_.status_);
}
inline void PerpetualMarketCreateEventV1::_internal_set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value) {
  ;
  _impl_.status_ = value;
}

// sint32 quantum_conversion_exponent = 6;
inline void PerpetualMarketCreateEventV1::clear_quantum_conversion_exponent() {
  _impl_.quantum_conversion_exponent_ = 0;
}
inline ::int32_t PerpetualMarketCreateEventV1::quantum_conversion_exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.quantum_conversion_exponent)
  return _internal_quantum_conversion_exponent();
}
inline void PerpetualMarketCreateEventV1::set_quantum_conversion_exponent(::int32_t value) {
  _internal_set_quantum_conversion_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.quantum_conversion_exponent)
}
inline ::int32_t PerpetualMarketCreateEventV1::_internal_quantum_conversion_exponent() const {
  return _impl_.quantum_conversion_exponent_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_quantum_conversion_exponent(::int32_t value) {
  ;
  _impl_.quantum_conversion_exponent_ = value;
}

// sint32 atomic_resolution = 7;
inline void PerpetualMarketCreateEventV1::clear_atomic_resolution() {
  _impl_.atomic_resolution_ = 0;
}
inline ::int32_t PerpetualMarketCreateEventV1::atomic_resolution() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.atomic_resolution)
  return _internal_atomic_resolution();
}
inline void PerpetualMarketCreateEventV1::set_atomic_resolution(::int32_t value) {
  _internal_set_atomic_resolution(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.atomic_resolution)
}
inline ::int32_t PerpetualMarketCreateEventV1::_internal_atomic_resolution() const {
  return _impl_.atomic_resolution_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_atomic_resolution(::int32_t value) {
  ;
  _impl_.atomic_resolution_ = value;
}

// uint32 subticks_per_tick = 8;
inline void PerpetualMarketCreateEventV1::clear_subticks_per_tick() {
  _impl_.subticks_per_tick_ = 0u;
}
inline ::uint32_t PerpetualMarketCreateEventV1::subticks_per_tick() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.subticks_per_tick)
  return _internal_subticks_per_tick();
}
inline void PerpetualMarketCreateEventV1::set_subticks_per_tick(::uint32_t value) {
  _internal_set_subticks_per_tick(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.subticks_per_tick)
}
inline ::uint32_t PerpetualMarketCreateEventV1::_internal_subticks_per_tick() const {
  return _impl_.subticks_per_tick_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_subticks_per_tick(::uint32_t value) {
  ;
  _impl_.subticks_per_tick_ = value;
}

// uint64 step_base_quantums = 9;
inline void PerpetualMarketCreateEventV1::clear_step_base_quantums() {
  _impl_.step_base_quantums_ = ::uint64_t{0u};
}
inline ::uint64_t PerpetualMarketCreateEventV1::step_base_quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.step_base_quantums)
  return _internal_step_base_quantums();
}
inline void PerpetualMarketCreateEventV1::set_step_base_quantums(::uint64_t value) {
  _internal_set_step_base_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.step_base_quantums)
}
inline ::uint64_t PerpetualMarketCreateEventV1::_internal_step_base_quantums() const {
  return _impl_.step_base_quantums_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_step_base_quantums(::uint64_t value) {
  ;
  _impl_.step_base_quantums_ = value;
}

// uint32 liquidity_tier = 10;
inline void PerpetualMarketCreateEventV1::clear_liquidity_tier() {
  _impl_.liquidity_tier_ = 0u;
}
inline ::uint32_t PerpetualMarketCreateEventV1::liquidity_tier() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.liquidity_tier)
  return _internal_liquidity_tier();
}
inline void PerpetualMarketCreateEventV1::set_liquidity_tier(::uint32_t value) {
  _internal_set_liquidity_tier(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.PerpetualMarketCreateEventV1.liquidity_tier)
}
inline ::uint32_t PerpetualMarketCreateEventV1::_internal_liquidity_tier() const {
  return _impl_.liquidity_tier_;
}
inline void PerpetualMarketCreateEventV1::_internal_set_liquidity_tier(::uint32_t value) {
  ;
  _impl_.liquidity_tier_ = value;
}

// -------------------------------------------------------------------

// LiquidityTierUpsertEventV1

// uint32 id = 1;
inline void LiquidityTierUpsertEventV1::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t LiquidityTierUpsertEventV1::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.id)
  return _internal_id();
}
inline void LiquidityTierUpsertEventV1::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.id)
}
inline ::uint32_t LiquidityTierUpsertEventV1::_internal_id() const {
  return _impl_.id_;
}
inline void LiquidityTierUpsertEventV1::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void LiquidityTierUpsertEventV1::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LiquidityTierUpsertEventV1::name() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiquidityTierUpsertEventV1::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.name)
}
inline std::string* LiquidityTierUpsertEventV1::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.name)
  return _s;
}
inline const std::string& LiquidityTierUpsertEventV1::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LiquidityTierUpsertEventV1::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LiquidityTierUpsertEventV1::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* LiquidityTierUpsertEventV1::release_name() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.name)
  return _impl_.name_.Release();
}
inline void LiquidityTierUpsertEventV1::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.name)
}

// uint32 initial_margin_ppm = 3;
inline void LiquidityTierUpsertEventV1::clear_initial_margin_ppm() {
  _impl_.initial_margin_ppm_ = 0u;
}
inline ::uint32_t LiquidityTierUpsertEventV1::initial_margin_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.initial_margin_ppm)
  return _internal_initial_margin_ppm();
}
inline void LiquidityTierUpsertEventV1::set_initial_margin_ppm(::uint32_t value) {
  _internal_set_initial_margin_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.initial_margin_ppm)
}
inline ::uint32_t LiquidityTierUpsertEventV1::_internal_initial_margin_ppm() const {
  return _impl_.initial_margin_ppm_;
}
inline void LiquidityTierUpsertEventV1::_internal_set_initial_margin_ppm(::uint32_t value) {
  ;
  _impl_.initial_margin_ppm_ = value;
}

// uint32 maintenance_fraction_ppm = 4;
inline void LiquidityTierUpsertEventV1::clear_maintenance_fraction_ppm() {
  _impl_.maintenance_fraction_ppm_ = 0u;
}
inline ::uint32_t LiquidityTierUpsertEventV1::maintenance_fraction_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.maintenance_fraction_ppm)
  return _internal_maintenance_fraction_ppm();
}
inline void LiquidityTierUpsertEventV1::set_maintenance_fraction_ppm(::uint32_t value) {
  _internal_set_maintenance_fraction_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.maintenance_fraction_ppm)
}
inline ::uint32_t LiquidityTierUpsertEventV1::_internal_maintenance_fraction_ppm() const {
  return _impl_.maintenance_fraction_ppm_;
}
inline void LiquidityTierUpsertEventV1::_internal_set_maintenance_fraction_ppm(::uint32_t value) {
  ;
  _impl_.maintenance_fraction_ppm_ = value;
}

// uint64 base_position_notional = 5;
inline void LiquidityTierUpsertEventV1::clear_base_position_notional() {
  _impl_.base_position_notional_ = ::uint64_t{0u};
}
inline ::uint64_t LiquidityTierUpsertEventV1::base_position_notional() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.base_position_notional)
  return _internal_base_position_notional();
}
inline void LiquidityTierUpsertEventV1::set_base_position_notional(::uint64_t value) {
  _internal_set_base_position_notional(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.LiquidityTierUpsertEventV1.base_position_notional)
}
inline ::uint64_t LiquidityTierUpsertEventV1::_internal_base_position_notional() const {
  return _impl_.base_position_notional_;
}
inline void LiquidityTierUpsertEventV1::_internal_set_base_position_notional(::uint64_t value) {
  ;
  _impl_.base_position_notional_ = value;
}

// -------------------------------------------------------------------

// UpdateClobPairEventV1

// uint32 clob_pair_id = 1;
inline void UpdateClobPairEventV1::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t UpdateClobPairEventV1::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdateClobPairEventV1.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void UpdateClobPairEventV1::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdateClobPairEventV1.clob_pair_id)
}
inline ::uint32_t UpdateClobPairEventV1::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void UpdateClobPairEventV1::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// .dydxprotocol.indexer.protocol.v1.ClobPairStatus status = 2;
inline void UpdateClobPairEventV1::clear_status() {
  _impl_.status_ = 0;
}
inline ::dydxprotocol::indexer::protocol::v1::ClobPairStatus UpdateClobPairEventV1::status() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdateClobPairEventV1.status)
  return _internal_status();
}
inline void UpdateClobPairEventV1::set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdateClobPairEventV1.status)
}
inline ::dydxprotocol::indexer::protocol::v1::ClobPairStatus UpdateClobPairEventV1::_internal_status() const {
  return static_cast<::dydxprotocol::indexer::protocol::v1::ClobPairStatus>(_impl_.status_);
}
inline void UpdateClobPairEventV1::_internal_set_status(::dydxprotocol::indexer::protocol::v1::ClobPairStatus value) {
  ;
  _impl_.status_ = value;
}

// sint32 quantum_conversion_exponent = 3;
inline void UpdateClobPairEventV1::clear_quantum_conversion_exponent() {
  _impl_.quantum_conversion_exponent_ = 0;
}
inline ::int32_t UpdateClobPairEventV1::quantum_conversion_exponent() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdateClobPairEventV1.quantum_conversion_exponent)
  return _internal_quantum_conversion_exponent();
}
inline void UpdateClobPairEventV1::set_quantum_conversion_exponent(::int32_t value) {
  _internal_set_quantum_conversion_exponent(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdateClobPairEventV1.quantum_conversion_exponent)
}
inline ::int32_t UpdateClobPairEventV1::_internal_quantum_conversion_exponent() const {
  return _impl_.quantum_conversion_exponent_;
}
inline void UpdateClobPairEventV1::_internal_set_quantum_conversion_exponent(::int32_t value) {
  ;
  _impl_.quantum_conversion_exponent_ = value;
}

// uint32 subticks_per_tick = 4;
inline void UpdateClobPairEventV1::clear_subticks_per_tick() {
  _impl_.subticks_per_tick_ = 0u;
}
inline ::uint32_t UpdateClobPairEventV1::subticks_per_tick() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdateClobPairEventV1.subticks_per_tick)
  return _internal_subticks_per_tick();
}
inline void UpdateClobPairEventV1::set_subticks_per_tick(::uint32_t value) {
  _internal_set_subticks_per_tick(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdateClobPairEventV1.subticks_per_tick)
}
inline ::uint32_t UpdateClobPairEventV1::_internal_subticks_per_tick() const {
  return _impl_.subticks_per_tick_;
}
inline void UpdateClobPairEventV1::_internal_set_subticks_per_tick(::uint32_t value) {
  ;
  _impl_.subticks_per_tick_ = value;
}

// uint64 step_base_quantums = 5;
inline void UpdateClobPairEventV1::clear_step_base_quantums() {
  _impl_.step_base_quantums_ = ::uint64_t{0u};
}
inline ::uint64_t UpdateClobPairEventV1::step_base_quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdateClobPairEventV1.step_base_quantums)
  return _internal_step_base_quantums();
}
inline void UpdateClobPairEventV1::set_step_base_quantums(::uint64_t value) {
  _internal_set_step_base_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdateClobPairEventV1.step_base_quantums)
}
inline ::uint64_t UpdateClobPairEventV1::_internal_step_base_quantums() const {
  return _impl_.step_base_quantums_;
}
inline void UpdateClobPairEventV1::_internal_set_step_base_quantums(::uint64_t value) {
  ;
  _impl_.step_base_quantums_ = value;
}

// -------------------------------------------------------------------

// UpdatePerpetualEventV1

// uint32 id = 1;
inline void UpdatePerpetualEventV1::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t UpdatePerpetualEventV1::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdatePerpetualEventV1.id)
  return _internal_id();
}
inline void UpdatePerpetualEventV1::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdatePerpetualEventV1.id)
}
inline ::uint32_t UpdatePerpetualEventV1::_internal_id() const {
  return _impl_.id_;
}
inline void UpdatePerpetualEventV1::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string ticker = 2;
inline void UpdatePerpetualEventV1::clear_ticker() {
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& UpdatePerpetualEventV1::ticker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdatePerpetualEventV1.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdatePerpetualEventV1::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdatePerpetualEventV1.ticker)
}
inline std::string* UpdatePerpetualEventV1::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.events.UpdatePerpetualEventV1.ticker)
  return _s;
}
inline const std::string& UpdatePerpetualEventV1::_internal_ticker() const {
  return _impl_.ticker_.Get();
}
inline void UpdatePerpetualEventV1::_internal_set_ticker(const std::string& value) {
  ;


  _impl_.ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePerpetualEventV1::_internal_mutable_ticker() {
  ;
  return _impl_.ticker_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdatePerpetualEventV1::release_ticker() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.events.UpdatePerpetualEventV1.ticker)
  return _impl_.ticker_.Release();
}
inline void UpdatePerpetualEventV1::set_allocated_ticker(std::string* value) {
  _impl_.ticker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.events.UpdatePerpetualEventV1.ticker)
}

// uint32 market_id = 3;
inline void UpdatePerpetualEventV1::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t UpdatePerpetualEventV1::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdatePerpetualEventV1.market_id)
  return _internal_market_id();
}
inline void UpdatePerpetualEventV1::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdatePerpetualEventV1.market_id)
}
inline ::uint32_t UpdatePerpetualEventV1::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void UpdatePerpetualEventV1::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// sint32 atomic_resolution = 4;
inline void UpdatePerpetualEventV1::clear_atomic_resolution() {
  _impl_.atomic_resolution_ = 0;
}
inline ::int32_t UpdatePerpetualEventV1::atomic_resolution() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdatePerpetualEventV1.atomic_resolution)
  return _internal_atomic_resolution();
}
inline void UpdatePerpetualEventV1::set_atomic_resolution(::int32_t value) {
  _internal_set_atomic_resolution(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdatePerpetualEventV1.atomic_resolution)
}
inline ::int32_t UpdatePerpetualEventV1::_internal_atomic_resolution() const {
  return _impl_.atomic_resolution_;
}
inline void UpdatePerpetualEventV1::_internal_set_atomic_resolution(::int32_t value) {
  ;
  _impl_.atomic_resolution_ = value;
}

// uint32 liquidity_tier = 5;
inline void UpdatePerpetualEventV1::clear_liquidity_tier() {
  _impl_.liquidity_tier_ = 0u;
}
inline ::uint32_t UpdatePerpetualEventV1::liquidity_tier() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.events.UpdatePerpetualEventV1.liquidity_tier)
  return _internal_liquidity_tier();
}
inline void UpdatePerpetualEventV1::set_liquidity_tier(::uint32_t value) {
  _internal_set_liquidity_tier(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.events.UpdatePerpetualEventV1.liquidity_tier)
}
inline ::uint32_t UpdatePerpetualEventV1::_internal_liquidity_tier() const {
  return _impl_.liquidity_tier_;
}
inline void UpdatePerpetualEventV1::_internal_set_liquidity_tier(::uint32_t value) {
  ;
  _impl_.liquidity_tier_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace events
}  // namespace indexer
}  // namespace dydxprotocol


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::dydxprotocol::indexer::events::FundingEventV1_Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::events::FundingEventV1_Type>() {
  return ::dydxprotocol::indexer::events::FundingEventV1_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fevents_2fevents_2eproto_2epb_2eh
