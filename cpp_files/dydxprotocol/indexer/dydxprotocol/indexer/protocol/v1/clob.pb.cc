// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/protocol/v1/clob.proto

#include "dydxprotocol/indexer/protocol/v1/clob.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR IndexerOrderId::IndexerOrderId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subaccount_id_)*/nullptr
  , /*decltype(_impl_.client_id_)*/ 0u

  , /*decltype(_impl_.order_flags_)*/ 0u

  , /*decltype(_impl_.clob_pair_id_)*/ 0u
} {}
struct IndexerOrderIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerOrderIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerOrderIdDefaultTypeInternal() {}
  union {
    IndexerOrderId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerOrderIdDefaultTypeInternal _IndexerOrderId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexerOrder::IndexerOrder(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_id_)*/nullptr
  , /*decltype(_impl_.quantums_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.subticks_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.side_)*/ 0

  , /*decltype(_impl_.time_in_force_)*/ 0

  , /*decltype(_impl_.reduce_only_)*/ false

  , /*decltype(_impl_.client_metadata_)*/ 0u

  , /*decltype(_impl_.conditional_order_trigger_subticks_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.condition_type_)*/ 0

  , /*decltype(_impl_.good_til_oneof_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct IndexerOrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerOrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerOrderDefaultTypeInternal() {}
  union {
    IndexerOrder _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerOrderDefaultTypeInternal _IndexerOrder_default_instance_;
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[4];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrderId, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrderId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrderId, _impl_.subaccount_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrderId, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrderId, _impl_.order_flags_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrderId, _impl_.clob_pair_id_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.order_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.side_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.quantums_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.subticks_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.time_in_force_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.reduce_only_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.client_metadata_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.condition_type_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.conditional_order_trigger_subticks_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_.good_til_oneof_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::dydxprotocol::indexer::protocol::v1::IndexerOrderId)},
        { 16, 36, -1, sizeof(::dydxprotocol::indexer::protocol::v1::IndexerOrder)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::indexer::protocol::v1::_IndexerOrderId_default_instance_._instance,
    &::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+dydxprotocol/indexer/protocol/v1/clob."
    "proto\022 dydxprotocol.indexer.protocol.v1\032"
    "1dydxprotocol/indexer/protocol/v1/subacc"
    "ount.proto\032\024gogoproto/gogo.proto\"\242\001\n\016Ind"
    "exerOrderId\022R\n\rsubaccount_id\030\001 \001(\01325.dyd"
    "xprotocol.indexer.protocol.v1.IndexerSub"
    "accountIdB\004\310\336\037\000\022\021\n\tclient_id\030\002 \001(\007\022\023\n\013or"
    "der_flags\030\003 \001(\r\022\024\n\014clob_pair_id\030\004 \001(\r\"\272\006"
    "\n\014IndexerOrder\022H\n\010order_id\030\001 \001(\01320.dydxp"
    "rotocol.indexer.protocol.v1.IndexerOrder"
    "IdB\004\310\336\037\000\022A\n\004side\030\002 \001(\01623.dydxprotocol.in"
    "dexer.protocol.v1.IndexerOrder.Side\022\020\n\010q"
    "uantums\030\003 \001(\004\022\020\n\010subticks\030\004 \001(\004\022\030\n\016good_"
    "til_block\030\005 \001(\rH\000\022\035\n\023good_til_block_time"
    "\030\006 \001(\007H\000\022Q\n\rtime_in_force\030\007 \001(\0162:.dydxpr"
    "otocol.indexer.protocol.v1.IndexerOrder."
    "TimeInForce\022\023\n\013reduce_only\030\010 \001(\010\022\027\n\017clie"
    "nt_metadata\030\t \001(\r\022T\n\016condition_type\030\n \001("
    "\0162<.dydxprotocol.indexer.protocol.v1.Ind"
    "exerOrder.ConditionType\022*\n\"conditional_o"
    "rder_trigger_subticks\030\013 \001(\004\"9\n\004Side\022\024\n\020S"
    "IDE_UNSPECIFIED\020\000\022\014\n\010SIDE_BUY\020\001\022\r\n\tSIDE_"
    "SELL\020\002\"\200\001\n\013TimeInForce\022\035\n\031TIME_IN_FORCE_"
    "UNSPECIFIED\020\000\022\025\n\021TIME_IN_FORCE_IOC\020\001\022\033\n\027"
    "TIME_IN_FORCE_POST_ONLY\020\002\022\036\n\032TIME_IN_FOR"
    "CE_FILL_OR_KILL\020\003\"m\n\rConditionType\022\036\n\032CO"
    "NDITION_TYPE_UNSPECIFIED\020\000\022\034\n\030CONDITION_"
    "TYPE_STOP_LOSS\020\001\022\036\n\032CONDITION_TYPE_TAKE_"
    "PROFIT\020\002B\020\n\016good_til_oneof*\321\001\n\016ClobPairS"
    "tatus\022 \n\034CLOB_PAIR_STATUS_UNSPECIFIED\020\000\022"
    "\033\n\027CLOB_PAIR_STATUS_ACTIVE\020\001\022\033\n\027CLOB_PAI"
    "R_STATUS_PAUSED\020\002\022 \n\034CLOB_PAIR_STATUS_CA"
    "NCEL_ONLY\020\003\022\036\n\032CLOB_PAIR_STATUS_POST_ONL"
    "Y\020\004\022!\n\035CLOB_PAIR_STATUS_INITIALIZING\020\005B\?"
    "Z=github.com/dydxprotocol/v4-chain/proto"
    "col/indexer/protocol/v1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_deps[2] =
    {
        &::descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto = {
    false,
    false,
    1431,
    descriptor_table_protodef_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto,
    "dydxprotocol/indexer/protocol/v1/clob.proto",
    &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_once,
    descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto::offsets,
    file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto,
    file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto,
    file_level_service_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto(&descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto);
namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexerOrder_Side_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[0];
}
bool IndexerOrder_Side_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IndexerOrder_Side IndexerOrder::SIDE_UNSPECIFIED;
constexpr IndexerOrder_Side IndexerOrder::SIDE_BUY;
constexpr IndexerOrder_Side IndexerOrder::SIDE_SELL;
constexpr IndexerOrder_Side IndexerOrder::Side_MIN;
constexpr IndexerOrder_Side IndexerOrder::Side_MAX;
constexpr int IndexerOrder::Side_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexerOrder_TimeInForce_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[1];
}
bool IndexerOrder_TimeInForce_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IndexerOrder_TimeInForce IndexerOrder::TIME_IN_FORCE_UNSPECIFIED;
constexpr IndexerOrder_TimeInForce IndexerOrder::TIME_IN_FORCE_IOC;
constexpr IndexerOrder_TimeInForce IndexerOrder::TIME_IN_FORCE_POST_ONLY;
constexpr IndexerOrder_TimeInForce IndexerOrder::TIME_IN_FORCE_FILL_OR_KILL;
constexpr IndexerOrder_TimeInForce IndexerOrder::TimeInForce_MIN;
constexpr IndexerOrder_TimeInForce IndexerOrder::TimeInForce_MAX;
constexpr int IndexerOrder::TimeInForce_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndexerOrder_ConditionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[2];
}
bool IndexerOrder_ConditionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr IndexerOrder_ConditionType IndexerOrder::CONDITION_TYPE_UNSPECIFIED;
constexpr IndexerOrder_ConditionType IndexerOrder::CONDITION_TYPE_STOP_LOSS;
constexpr IndexerOrder_ConditionType IndexerOrder::CONDITION_TYPE_TAKE_PROFIT;
constexpr IndexerOrder_ConditionType IndexerOrder::ConditionType_MIN;
constexpr IndexerOrder_ConditionType IndexerOrder::ConditionType_MAX;
constexpr int IndexerOrder::ConditionType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClobPairStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[3];
}
bool ClobPairStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class IndexerOrderId::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexerOrderId>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IndexerOrderId, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& subaccount_id(const IndexerOrderId* msg);
  static void set_has_subaccount_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&
IndexerOrderId::_Internal::subaccount_id(const IndexerOrderId* msg) {
  return *msg->_impl_.subaccount_id_;
}
void IndexerOrderId::clear_subaccount_id() {
  if (_impl_.subaccount_id_ != nullptr) _impl_.subaccount_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IndexerOrderId::IndexerOrderId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
}
IndexerOrderId::IndexerOrderId(const IndexerOrderId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerOrderId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.order_flags_) {}

    , decltype(_impl_.clob_pair_id_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.subaccount_id_ = new ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId(*from._impl_.subaccount_id_);
  }
  ::memcpy(&_impl_.client_id_, &from._impl_.client_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.clob_pair_id_) -
    reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.clob_pair_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
}

inline void IndexerOrderId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subaccount_id_){nullptr}
    , decltype(_impl_.client_id_) { 0u }

    , decltype(_impl_.order_flags_) { 0u }

    , decltype(_impl_.clob_pair_id_) { 0u }

  };
}

IndexerOrderId::~IndexerOrderId() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerOrderId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.subaccount_id_;
}

void IndexerOrderId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerOrderId::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subaccount_id_ != nullptr);
    _impl_.subaccount_id_->Clear();
  }
  ::memset(&_impl_.client_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.clob_pair_id_) -
      reinterpret_cast<char*>(&_impl_.client_id_)) + sizeof(_impl_.clob_pair_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerOrderId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subaccount_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // fixed32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr);
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 order_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.order_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 clob_pair_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.clob_pair_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerOrderId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::subaccount_id(this),
        _Internal::subaccount_id(this).GetCachedSize(), target, stream);
  }

  // fixed32 client_id = 2;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this->_internal_client_id(), target);
  }

  // uint32 order_flags = 3;
  if (this->_internal_order_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_order_flags(), target);
  }

  // uint32 clob_pair_id = 4;
  if (this->_internal_clob_pair_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_clob_pair_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  return target;
}

::size_t IndexerOrderId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subaccount_id_);
  }

  // fixed32 client_id = 2;
  if (this->_internal_client_id() != 0) {
    total_size += 5;
  }

  // uint32 order_flags = 3;
  if (this->_internal_order_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_order_flags());
  }

  // uint32 clob_pair_id = 4;
  if (this->_internal_clob_pair_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_clob_pair_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerOrderId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerOrderId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerOrderId::GetClassData() const { return &_class_data_; }


void IndexerOrderId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerOrderId*>(&to_msg);
  auto& from = static_cast<const IndexerOrderId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subaccount_id()->::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId::MergeFrom(
        from._internal_subaccount_id());
  }
  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (from._internal_order_flags() != 0) {
    _this->_internal_set_order_flags(from._internal_order_flags());
  }
  if (from._internal_clob_pair_id() != 0) {
    _this->_internal_set_clob_pair_id(from._internal_clob_pair_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerOrderId::CopyFrom(const IndexerOrderId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerOrderId::IsInitialized() const {
  return true;
}

void IndexerOrderId::InternalSwap(IndexerOrderId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexerOrderId, _impl_.clob_pair_id_)
      + sizeof(IndexerOrderId::_impl_.clob_pair_id_)
      - PROTOBUF_FIELD_OFFSET(IndexerOrderId, _impl_.subaccount_id_)>(
          reinterpret_cast<char*>(&_impl_.subaccount_id_),
          reinterpret_cast<char*>(&other->_impl_.subaccount_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerOrderId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[0]);
}
// ===================================================================

class IndexerOrder::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexerOrder>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IndexerOrder, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerOrder, _impl_._oneof_case_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& order_id(const IndexerOrder* msg);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&
IndexerOrder::_Internal::order_id(const IndexerOrder* msg) {
  return *msg->_impl_.order_id_;
}
IndexerOrder::IndexerOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.protocol.v1.IndexerOrder)
}
IndexerOrder::IndexerOrder(const IndexerOrder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerOrder* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.quantums_) {}

    , decltype(_impl_.subticks_) {}

    , decltype(_impl_.side_) {}

    , decltype(_impl_.time_in_force_) {}

    , decltype(_impl_.reduce_only_) {}

    , decltype(_impl_.client_metadata_) {}

    , decltype(_impl_.conditional_order_trigger_subticks_) {}

    , decltype(_impl_.condition_type_) {}

    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_id_ = new ::dydxprotocol::indexer::protocol::v1::IndexerOrderId(*from._impl_.order_id_);
  }
  ::memcpy(&_impl_.quantums_, &from._impl_.quantums_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.condition_type_) -
    reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.condition_type_));
  clear_has_good_til_oneof();
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.protocol.v1.IndexerOrder)
}

inline void IndexerOrder::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.quantums_) { ::uint64_t{0u} }

    , decltype(_impl_.subticks_) { ::uint64_t{0u} }

    , decltype(_impl_.side_) { 0 }

    , decltype(_impl_.time_in_force_) { 0 }

    , decltype(_impl_.reduce_only_) { false }

    , decltype(_impl_.client_metadata_) { 0u }

    , decltype(_impl_.conditional_order_trigger_subticks_) { ::uint64_t{0u} }

    , decltype(_impl_.condition_type_) { 0 }

    , decltype(_impl_.good_til_oneof_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_good_til_oneof();
}

IndexerOrder::~IndexerOrder() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerOrder::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_id_;
  if (has_good_til_oneof()) {
    clear_good_til_oneof();
  }
}

void IndexerOrder::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerOrder::clear_good_til_oneof() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  switch (good_til_oneof_case()) {
    case kGoodTilBlock: {
      // No need to clear
      break;
    }
    case kGoodTilBlockTime: {
      // No need to clear
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}


void IndexerOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_id_ != nullptr);
    _impl_.order_id_->Clear();
  }
  ::memset(&_impl_.quantums_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.condition_type_) -
      reinterpret_cast<char*>(&_impl_.quantums_)) + sizeof(_impl_.condition_type_));
  clear_good_til_oneof();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerOrder::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.protocol.v1.IndexerOrder.Side side = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 quantums = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 subticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 good_til_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _internal_set_good_til_block(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // fixed32 good_til_block_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _internal_set_good_til_block_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::uint32_t>(ptr));
          ptr += sizeof(::uint32_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.protocol.v1.IndexerOrder.TimeInForce time_in_force = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_time_in_force(static_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool reduce_only = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.reduce_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 client_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.client_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.protocol.v1.IndexerOrder.ConditionType condition_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_condition_type(static_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 conditional_order_trigger_subticks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.conditional_order_trigger_subticks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerOrder::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order_id(this),
        _Internal::order_id(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.Side side = 2;
  if (this->_internal_side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_side(), target);
  }

  // uint64 quantums = 3;
  if (this->_internal_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_quantums(), target);
  }

  // uint64 subticks = 4;
  if (this->_internal_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_subticks(), target);
  }

  switch (good_til_oneof_case()) {
    case kGoodTilBlock: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          5, this->_internal_good_til_block(), target);
      break;
    }
    case kGoodTilBlockTime: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
          6, this->_internal_good_til_block_time(), target);
      break;
    }
    default: ;
  }
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.TimeInForce time_in_force = 7;
  if (this->_internal_time_in_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_time_in_force(), target);
  }

  // bool reduce_only = 8;
  if (this->_internal_reduce_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_reduce_only(), target);
  }

  // uint32 client_metadata = 9;
  if (this->_internal_client_metadata() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this->_internal_client_metadata(), target);
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.ConditionType condition_type = 10;
  if (this->_internal_condition_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_condition_type(), target);
  }

  // uint64 conditional_order_trigger_subticks = 11;
  if (this->_internal_conditional_order_trigger_subticks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        11, this->_internal_conditional_order_trigger_subticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  return target;
}

::size_t IndexerOrder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_id_);
  }

  // uint64 quantums = 3;
  if (this->_internal_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_quantums());
  }

  // uint64 subticks = 4;
  if (this->_internal_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_subticks());
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.Side side = 2;
  if (this->_internal_side() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_side());
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.TimeInForce time_in_force = 7;
  if (this->_internal_time_in_force() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_time_in_force());
  }

  // bool reduce_only = 8;
  if (this->_internal_reduce_only() != 0) {
    total_size += 2;
  }

  // uint32 client_metadata = 9;
  if (this->_internal_client_metadata() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_client_metadata());
  }

  // uint64 conditional_order_trigger_subticks = 11;
  if (this->_internal_conditional_order_trigger_subticks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_conditional_order_trigger_subticks());
  }

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.ConditionType condition_type = 10;
  if (this->_internal_condition_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_condition_type());
  }

  switch (good_til_oneof_case()) {
    // uint32 good_til_block = 5;
    case kGoodTilBlock: {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_good_til_block());
      break;
    }
    // fixed32 good_til_block_time = 6;
    case kGoodTilBlockTime: {
      total_size += 5;
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerOrder::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerOrder::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerOrder::GetClassData() const { return &_class_data_; }


void IndexerOrder::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerOrder*>(&to_msg);
  auto& from = static_cast<const IndexerOrder&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order_id()->::dydxprotocol::indexer::protocol::v1::IndexerOrderId::MergeFrom(
        from._internal_order_id());
  }
  if (from._internal_quantums() != 0) {
    _this->_internal_set_quantums(from._internal_quantums());
  }
  if (from._internal_subticks() != 0) {
    _this->_internal_set_subticks(from._internal_subticks());
  }
  if (from._internal_side() != 0) {
    _this->_internal_set_side(from._internal_side());
  }
  if (from._internal_time_in_force() != 0) {
    _this->_internal_set_time_in_force(from._internal_time_in_force());
  }
  if (from._internal_reduce_only() != 0) {
    _this->_internal_set_reduce_only(from._internal_reduce_only());
  }
  if (from._internal_client_metadata() != 0) {
    _this->_internal_set_client_metadata(from._internal_client_metadata());
  }
  if (from._internal_conditional_order_trigger_subticks() != 0) {
    _this->_internal_set_conditional_order_trigger_subticks(from._internal_conditional_order_trigger_subticks());
  }
  if (from._internal_condition_type() != 0) {
    _this->_internal_set_condition_type(from._internal_condition_type());
  }
  switch (from.good_til_oneof_case()) {
    case kGoodTilBlock: {
      _this->_internal_set_good_til_block(from._internal_good_til_block());
      break;
    }
    case kGoodTilBlockTime: {
      _this->_internal_set_good_til_block_time(from._internal_good_til_block_time());
      break;
    }
    case GOOD_TIL_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerOrder::CopyFrom(const IndexerOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.protocol.v1.IndexerOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerOrder::IsInitialized() const {
  return true;
}

void IndexerOrder::InternalSwap(IndexerOrder* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexerOrder, _impl_.condition_type_)
      + sizeof(IndexerOrder::_impl_.condition_type_)
      - PROTOBUF_FIELD_OFFSET(IndexerOrder, _impl_.order_id_)>(
          reinterpret_cast<char*>(&_impl_.order_id_),
          reinterpret_cast<char*>(&other->_impl_.order_id_));
  swap(_impl_.good_til_oneof_, other->_impl_.good_til_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerOrder::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::protocol::v1::IndexerOrderId*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerOrderId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::protocol::v1::IndexerOrderId >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::protocol::v1::IndexerOrder*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerOrder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::protocol::v1::IndexerOrder >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
