// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/protocol/v1/subaccount.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto;
namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
class IndexerAssetPosition;
struct IndexerAssetPositionDefaultTypeInternal;
extern IndexerAssetPositionDefaultTypeInternal _IndexerAssetPosition_default_instance_;
class IndexerPerpetualPosition;
struct IndexerPerpetualPositionDefaultTypeInternal;
extern IndexerPerpetualPositionDefaultTypeInternal _IndexerPerpetualPosition_default_instance_;
class IndexerSubaccountId;
struct IndexerSubaccountIdDefaultTypeInternal;
extern IndexerSubaccountIdDefaultTypeInternal _IndexerSubaccountId_default_instance_;
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition* Arena::CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition>(Arena*);
template <>
::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition* Arena::CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition>(Arena*);
template <>
::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* Arena::CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class IndexerSubaccountId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId) */ {
 public:
  inline IndexerSubaccountId() : IndexerSubaccountId(nullptr) {}
  ~IndexerSubaccountId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerSubaccountId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerSubaccountId(const IndexerSubaccountId& from);
  IndexerSubaccountId(IndexerSubaccountId&& from) noexcept
    : IndexerSubaccountId() {
    *this = ::std::move(from);
  }

  inline IndexerSubaccountId& operator=(const IndexerSubaccountId& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerSubaccountId& operator=(IndexerSubaccountId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerSubaccountId& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerSubaccountId* internal_default_instance() {
    return reinterpret_cast<const IndexerSubaccountId*>(
               &_IndexerSubaccountId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexerSubaccountId& a, IndexerSubaccountId& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerSubaccountId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerSubaccountId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerSubaccountId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerSubaccountId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerSubaccountId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerSubaccountId& from) {
    IndexerSubaccountId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerSubaccountId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.protocol.v1.IndexerSubaccountId";
  }
  protected:
  explicit IndexerSubaccountId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // uint32 number = 2;
  void clear_number() ;
  ::uint32_t number() const;
  void set_number(::uint32_t value);

  private:
  ::uint32_t _internal_number() const;
  void _internal_set_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::uint32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto;
};// -------------------------------------------------------------------

class IndexerPerpetualPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition) */ {
 public:
  inline IndexerPerpetualPosition() : IndexerPerpetualPosition(nullptr) {}
  ~IndexerPerpetualPosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerPerpetualPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerPerpetualPosition(const IndexerPerpetualPosition& from);
  IndexerPerpetualPosition(IndexerPerpetualPosition&& from) noexcept
    : IndexerPerpetualPosition() {
    *this = ::std::move(from);
  }

  inline IndexerPerpetualPosition& operator=(const IndexerPerpetualPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerPerpetualPosition& operator=(IndexerPerpetualPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerPerpetualPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerPerpetualPosition* internal_default_instance() {
    return reinterpret_cast<const IndexerPerpetualPosition*>(
               &_IndexerPerpetualPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexerPerpetualPosition& a, IndexerPerpetualPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerPerpetualPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerPerpetualPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerPerpetualPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerPerpetualPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerPerpetualPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerPerpetualPosition& from) {
    IndexerPerpetualPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerPerpetualPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition";
  }
  protected:
  explicit IndexerPerpetualPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantumsFieldNumber = 2,
    kFundingIndexFieldNumber = 3,
    kFundingPaymentFieldNumber = 4,
    kPerpetualIdFieldNumber = 1,
  };
  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_quantums() ;
  const std::string& quantums() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quantums(Arg_&& arg, Args_... args);
  std::string* mutable_quantums();
  PROTOBUF_NODISCARD std::string* release_quantums();
  void set_allocated_quantums(std::string* ptr);

  private:
  const std::string& _internal_quantums() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quantums(
      const std::string& value);
  std::string* _internal_mutable_quantums();

  public:
  // bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_funding_index() ;
  const std::string& funding_index() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_funding_index(Arg_&& arg, Args_... args);
  std::string* mutable_funding_index();
  PROTOBUF_NODISCARD std::string* release_funding_index();
  void set_allocated_funding_index(std::string* ptr);

  private:
  const std::string& _internal_funding_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funding_index(
      const std::string& value);
  std::string* _internal_mutable_funding_index();

  public:
  // bytes funding_payment = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_funding_payment() ;
  const std::string& funding_payment() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_funding_payment(Arg_&& arg, Args_... args);
  std::string* mutable_funding_payment();
  PROTOBUF_NODISCARD std::string* release_funding_payment();
  void set_allocated_funding_payment(std::string* ptr);

  private:
  const std::string& _internal_funding_payment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funding_payment(
      const std::string& value);
  std::string* _internal_mutable_funding_payment();

  public:
  // uint32 perpetual_id = 1;
  void clear_perpetual_id() ;
  ::uint32_t perpetual_id() const;
  void set_perpetual_id(::uint32_t value);

  private:
  ::uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quantums_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_index_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_payment_;
    ::uint32_t perpetual_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto;
};// -------------------------------------------------------------------

class IndexerAssetPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition) */ {
 public:
  inline IndexerAssetPosition() : IndexerAssetPosition(nullptr) {}
  ~IndexerAssetPosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerAssetPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerAssetPosition(const IndexerAssetPosition& from);
  IndexerAssetPosition(IndexerAssetPosition&& from) noexcept
    : IndexerAssetPosition() {
    *this = ::std::move(from);
  }

  inline IndexerAssetPosition& operator=(const IndexerAssetPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerAssetPosition& operator=(IndexerAssetPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerAssetPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerAssetPosition* internal_default_instance() {
    return reinterpret_cast<const IndexerAssetPosition*>(
               &_IndexerAssetPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IndexerAssetPosition& a, IndexerAssetPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerAssetPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerAssetPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerAssetPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerAssetPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerAssetPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerAssetPosition& from) {
    IndexerAssetPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerAssetPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.protocol.v1.IndexerAssetPosition";
  }
  protected:
  explicit IndexerAssetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuantumsFieldNumber = 2,
    kIndexFieldNumber = 3,
    kAssetIdFieldNumber = 1,
  };
  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_quantums() ;
  const std::string& quantums() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quantums(Arg_&& arg, Args_... args);
  std::string* mutable_quantums();
  PROTOBUF_NODISCARD std::string* release_quantums();
  void set_allocated_quantums(std::string* ptr);

  private:
  const std::string& _internal_quantums() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quantums(
      const std::string& value);
  std::string* _internal_mutable_quantums();

  public:
  // uint64 index = 3;
  void clear_index() ;
  ::uint64_t index() const;
  void set_index(::uint64_t value);

  private:
  ::uint64_t _internal_index() const;
  void _internal_set_index(::uint64_t value);

  public:
  // uint32 asset_id = 1;
  void clear_asset_id() ;
  ::uint32_t asset_id() const;
  void set_asset_id(::uint32_t value);

  private:
  ::uint32_t _internal_asset_id() const;
  void _internal_set_asset_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quantums_;
    ::uint64_t index_;
    ::uint32_t asset_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexerSubaccountId

// string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void IndexerSubaccountId::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& IndexerSubaccountId::owner() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerSubaccountId::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner)
}
inline std::string* IndexerSubaccountId::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner)
  return _s;
}
inline const std::string& IndexerSubaccountId::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void IndexerSubaccountId::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerSubaccountId::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerSubaccountId::release_owner() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner)
  return _impl_.owner_.Release();
}
inline void IndexerSubaccountId::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner)
}

// uint32 number = 2;
inline void IndexerSubaccountId::clear_number() {
  _impl_.number_ = 0u;
}
inline ::uint32_t IndexerSubaccountId::number() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.number)
  return _internal_number();
}
inline void IndexerSubaccountId::set_number(::uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.number)
}
inline ::uint32_t IndexerSubaccountId::_internal_number() const {
  return _impl_.number_;
}
inline void IndexerSubaccountId::_internal_set_number(::uint32_t value) {
  ;
  _impl_.number_ = value;
}

// -------------------------------------------------------------------

// IndexerPerpetualPosition

// uint32 perpetual_id = 1;
inline void IndexerPerpetualPosition::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline ::uint32_t IndexerPerpetualPosition::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.perpetual_id)
  return _internal_perpetual_id();
}
inline void IndexerPerpetualPosition::set_perpetual_id(::uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.perpetual_id)
}
inline ::uint32_t IndexerPerpetualPosition::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline void IndexerPerpetualPosition::_internal_set_perpetual_id(::uint32_t value) {
  ;
  _impl_.perpetual_id_ = value;
}

// bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void IndexerPerpetualPosition::clear_quantums() {
  _impl_.quantums_.ClearToEmpty();
}
inline const std::string& IndexerPerpetualPosition::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.quantums)
  return _internal_quantums();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerPerpetualPosition::set_quantums(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quantums_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.quantums)
}
inline std::string* IndexerPerpetualPosition::mutable_quantums() {
  std::string* _s = _internal_mutable_quantums();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.quantums)
  return _s;
}
inline const std::string& IndexerPerpetualPosition::_internal_quantums() const {
  return _impl_.quantums_.Get();
}
inline void IndexerPerpetualPosition::_internal_set_quantums(const std::string& value) {
  ;


  _impl_.quantums_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerPerpetualPosition::_internal_mutable_quantums() {
  ;
  return _impl_.quantums_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerPerpetualPosition::release_quantums() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.quantums)
  return _impl_.quantums_.Release();
}
inline void IndexerPerpetualPosition::set_allocated_quantums(std::string* value) {
  _impl_.quantums_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quantums_.IsDefault()) {
          _impl_.quantums_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.quantums)
}

// bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void IndexerPerpetualPosition::clear_funding_index() {
  _impl_.funding_index_.ClearToEmpty();
}
inline const std::string& IndexerPerpetualPosition::funding_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_index)
  return _internal_funding_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerPerpetualPosition::set_funding_index(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.funding_index_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_index)
}
inline std::string* IndexerPerpetualPosition::mutable_funding_index() {
  std::string* _s = _internal_mutable_funding_index();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_index)
  return _s;
}
inline const std::string& IndexerPerpetualPosition::_internal_funding_index() const {
  return _impl_.funding_index_.Get();
}
inline void IndexerPerpetualPosition::_internal_set_funding_index(const std::string& value) {
  ;


  _impl_.funding_index_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerPerpetualPosition::_internal_mutable_funding_index() {
  ;
  return _impl_.funding_index_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerPerpetualPosition::release_funding_index() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_index)
  return _impl_.funding_index_.Release();
}
inline void IndexerPerpetualPosition::set_allocated_funding_index(std::string* value) {
  _impl_.funding_index_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.funding_index_.IsDefault()) {
          _impl_.funding_index_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_index)
}

// bytes funding_payment = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void IndexerPerpetualPosition::clear_funding_payment() {
  _impl_.funding_payment_.ClearToEmpty();
}
inline const std::string& IndexerPerpetualPosition::funding_payment() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_payment)
  return _internal_funding_payment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerPerpetualPosition::set_funding_payment(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.funding_payment_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_payment)
}
inline std::string* IndexerPerpetualPosition::mutable_funding_payment() {
  std::string* _s = _internal_mutable_funding_payment();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_payment)
  return _s;
}
inline const std::string& IndexerPerpetualPosition::_internal_funding_payment() const {
  return _impl_.funding_payment_.Get();
}
inline void IndexerPerpetualPosition::_internal_set_funding_payment(const std::string& value) {
  ;


  _impl_.funding_payment_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerPerpetualPosition::_internal_mutable_funding_payment() {
  ;
  return _impl_.funding_payment_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerPerpetualPosition::release_funding_payment() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_payment)
  return _impl_.funding_payment_.Release();
}
inline void IndexerPerpetualPosition::set_allocated_funding_payment(std::string* value) {
  _impl_.funding_payment_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.funding_payment_.IsDefault()) {
          _impl_.funding_payment_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition.funding_payment)
}

// -------------------------------------------------------------------

// IndexerAssetPosition

// uint32 asset_id = 1;
inline void IndexerAssetPosition::clear_asset_id() {
  _impl_.asset_id_ = 0u;
}
inline ::uint32_t IndexerAssetPosition::asset_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.asset_id)
  return _internal_asset_id();
}
inline void IndexerAssetPosition::set_asset_id(::uint32_t value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.asset_id)
}
inline ::uint32_t IndexerAssetPosition::_internal_asset_id() const {
  return _impl_.asset_id_;
}
inline void IndexerAssetPosition::_internal_set_asset_id(::uint32_t value) {
  ;
  _impl_.asset_id_ = value;
}

// bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void IndexerAssetPosition::clear_quantums() {
  _impl_.quantums_.ClearToEmpty();
}
inline const std::string& IndexerAssetPosition::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.quantums)
  return _internal_quantums();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndexerAssetPosition::set_quantums(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.quantums_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.quantums)
}
inline std::string* IndexerAssetPosition::mutable_quantums() {
  std::string* _s = _internal_mutable_quantums();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.quantums)
  return _s;
}
inline const std::string& IndexerAssetPosition::_internal_quantums() const {
  return _impl_.quantums_.Get();
}
inline void IndexerAssetPosition::_internal_set_quantums(const std::string& value) {
  ;


  _impl_.quantums_.Set(value, GetArenaForAllocation());
}
inline std::string* IndexerAssetPosition::_internal_mutable_quantums() {
  ;
  return _impl_.quantums_.Mutable( GetArenaForAllocation());
}
inline std::string* IndexerAssetPosition::release_quantums() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.quantums)
  return _impl_.quantums_.Release();
}
inline void IndexerAssetPosition::set_allocated_quantums(std::string* value) {
  _impl_.quantums_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quantums_.IsDefault()) {
          _impl_.quantums_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.quantums)
}

// uint64 index = 3;
inline void IndexerAssetPosition::clear_index() {
  _impl_.index_ = ::uint64_t{0u};
}
inline ::uint64_t IndexerAssetPosition::index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.index)
  return _internal_index();
}
inline void IndexerAssetPosition::set_index(::uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition.index)
}
inline ::uint64_t IndexerAssetPosition::_internal_index() const {
  return _impl_.index_;
}
inline void IndexerAssetPosition::_internal_set_index(::uint64_t value) {
  ;
  _impl_.index_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_2epb_2eh
