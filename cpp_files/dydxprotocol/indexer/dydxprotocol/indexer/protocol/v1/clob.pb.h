// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/protocol/v1/clob.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "dydxprotocol/indexer/protocol/v1/subaccount.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto;
namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
class IndexerOrder;
struct IndexerOrderDefaultTypeInternal;
extern IndexerOrderDefaultTypeInternal _IndexerOrder_default_instance_;
class IndexerOrderId;
struct IndexerOrderIdDefaultTypeInternal;
extern IndexerOrderIdDefaultTypeInternal _IndexerOrderId_default_instance_;
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::indexer::protocol::v1::IndexerOrder* Arena::CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(Arena*);
template <>
::dydxprotocol::indexer::protocol::v1::IndexerOrderId* Arena::CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrderId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
enum IndexerOrder_Side : int {
  IndexerOrder_Side_SIDE_UNSPECIFIED = 0,
  IndexerOrder_Side_SIDE_BUY = 1,
  IndexerOrder_Side_SIDE_SELL = 2,
  IndexerOrder_Side_IndexerOrder_Side_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IndexerOrder_Side_IndexerOrder_Side_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IndexerOrder_Side_IsValid(int value);
constexpr IndexerOrder_Side IndexerOrder_Side_Side_MIN = static_cast<IndexerOrder_Side>(0);
constexpr IndexerOrder_Side IndexerOrder_Side_Side_MAX = static_cast<IndexerOrder_Side>(2);
constexpr int IndexerOrder_Side_Side_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
IndexerOrder_Side_descriptor();
template <typename T>
const std::string& IndexerOrder_Side_Name(T value) {
  static_assert(std::is_same<T, IndexerOrder_Side>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Side_Name().");
  return IndexerOrder_Side_Name(static_cast<IndexerOrder_Side>(value));
}
template <>
inline const std::string& IndexerOrder_Side_Name(IndexerOrder_Side value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<IndexerOrder_Side_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool IndexerOrder_Side_Parse(absl::string_view name, IndexerOrder_Side* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexerOrder_Side>(
      IndexerOrder_Side_descriptor(), name, value);
}
enum IndexerOrder_TimeInForce : int {
  IndexerOrder_TimeInForce_TIME_IN_FORCE_UNSPECIFIED = 0,
  IndexerOrder_TimeInForce_TIME_IN_FORCE_IOC = 1,
  IndexerOrder_TimeInForce_TIME_IN_FORCE_POST_ONLY = 2,
  IndexerOrder_TimeInForce_TIME_IN_FORCE_FILL_OR_KILL = 3,
  IndexerOrder_TimeInForce_IndexerOrder_TimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IndexerOrder_TimeInForce_IndexerOrder_TimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IndexerOrder_TimeInForce_IsValid(int value);
constexpr IndexerOrder_TimeInForce IndexerOrder_TimeInForce_TimeInForce_MIN = static_cast<IndexerOrder_TimeInForce>(0);
constexpr IndexerOrder_TimeInForce IndexerOrder_TimeInForce_TimeInForce_MAX = static_cast<IndexerOrder_TimeInForce>(3);
constexpr int IndexerOrder_TimeInForce_TimeInForce_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
IndexerOrder_TimeInForce_descriptor();
template <typename T>
const std::string& IndexerOrder_TimeInForce_Name(T value) {
  static_assert(std::is_same<T, IndexerOrder_TimeInForce>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TimeInForce_Name().");
  return IndexerOrder_TimeInForce_Name(static_cast<IndexerOrder_TimeInForce>(value));
}
template <>
inline const std::string& IndexerOrder_TimeInForce_Name(IndexerOrder_TimeInForce value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<IndexerOrder_TimeInForce_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool IndexerOrder_TimeInForce_Parse(absl::string_view name, IndexerOrder_TimeInForce* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexerOrder_TimeInForce>(
      IndexerOrder_TimeInForce_descriptor(), name, value);
}
enum IndexerOrder_ConditionType : int {
  IndexerOrder_ConditionType_CONDITION_TYPE_UNSPECIFIED = 0,
  IndexerOrder_ConditionType_CONDITION_TYPE_STOP_LOSS = 1,
  IndexerOrder_ConditionType_CONDITION_TYPE_TAKE_PROFIT = 2,
  IndexerOrder_ConditionType_IndexerOrder_ConditionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IndexerOrder_ConditionType_IndexerOrder_ConditionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IndexerOrder_ConditionType_IsValid(int value);
constexpr IndexerOrder_ConditionType IndexerOrder_ConditionType_ConditionType_MIN = static_cast<IndexerOrder_ConditionType>(0);
constexpr IndexerOrder_ConditionType IndexerOrder_ConditionType_ConditionType_MAX = static_cast<IndexerOrder_ConditionType>(2);
constexpr int IndexerOrder_ConditionType_ConditionType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
IndexerOrder_ConditionType_descriptor();
template <typename T>
const std::string& IndexerOrder_ConditionType_Name(T value) {
  static_assert(std::is_same<T, IndexerOrder_ConditionType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ConditionType_Name().");
  return IndexerOrder_ConditionType_Name(static_cast<IndexerOrder_ConditionType>(value));
}
template <>
inline const std::string& IndexerOrder_ConditionType_Name(IndexerOrder_ConditionType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<IndexerOrder_ConditionType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool IndexerOrder_ConditionType_Parse(absl::string_view name, IndexerOrder_ConditionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndexerOrder_ConditionType>(
      IndexerOrder_ConditionType_descriptor(), name, value);
}
enum ClobPairStatus : int {
  CLOB_PAIR_STATUS_UNSPECIFIED = 0,
  CLOB_PAIR_STATUS_ACTIVE = 1,
  CLOB_PAIR_STATUS_PAUSED = 2,
  CLOB_PAIR_STATUS_CANCEL_ONLY = 3,
  CLOB_PAIR_STATUS_POST_ONLY = 4,
  CLOB_PAIR_STATUS_INITIALIZING = 5,
  ClobPairStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ClobPairStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ClobPairStatus_IsValid(int value);
constexpr ClobPairStatus ClobPairStatus_MIN = static_cast<ClobPairStatus>(0);
constexpr ClobPairStatus ClobPairStatus_MAX = static_cast<ClobPairStatus>(5);
constexpr int ClobPairStatus_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ClobPairStatus_descriptor();
template <typename T>
const std::string& ClobPairStatus_Name(T value) {
  static_assert(std::is_same<T, ClobPairStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ClobPairStatus_Name().");
  return ClobPairStatus_Name(static_cast<ClobPairStatus>(value));
}
template <>
inline const std::string& ClobPairStatus_Name(ClobPairStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ClobPairStatus_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ClobPairStatus_Parse(absl::string_view name, ClobPairStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClobPairStatus>(
      ClobPairStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IndexerOrderId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.protocol.v1.IndexerOrderId) */ {
 public:
  inline IndexerOrderId() : IndexerOrderId(nullptr) {}
  ~IndexerOrderId() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerOrderId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerOrderId(const IndexerOrderId& from);
  IndexerOrderId(IndexerOrderId&& from) noexcept
    : IndexerOrderId() {
    *this = ::std::move(from);
  }

  inline IndexerOrderId& operator=(const IndexerOrderId& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerOrderId& operator=(IndexerOrderId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerOrderId& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexerOrderId* internal_default_instance() {
    return reinterpret_cast<const IndexerOrderId*>(
               &_IndexerOrderId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexerOrderId& a, IndexerOrderId& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerOrderId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerOrderId* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerOrderId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerOrderId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerOrderId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerOrderId& from) {
    IndexerOrderId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerOrderId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.protocol.v1.IndexerOrderId";
  }
  protected:
  explicit IndexerOrderId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kOrderFlagsFieldNumber = 3,
    kClobPairIdFieldNumber = 4,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
  bool has_subaccount_id() const;
  void clear_subaccount_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& subaccount_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* release_subaccount_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* mutable_subaccount_id();
  void set_allocated_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& _internal_subaccount_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _internal_mutable_subaccount_id();
  public:
  void unsafe_arena_set_allocated_subaccount_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* unsafe_arena_release_subaccount_id();
  // fixed32 client_id = 2;
  void clear_client_id() ;
  ::uint32_t client_id() const;
  void set_client_id(::uint32_t value);

  private:
  ::uint32_t _internal_client_id() const;
  void _internal_set_client_id(::uint32_t value);

  public:
  // uint32 order_flags = 3;
  void clear_order_flags() ;
  ::uint32_t order_flags() const;
  void set_order_flags(::uint32_t value);

  private:
  ::uint32_t _internal_order_flags() const;
  void _internal_set_order_flags(::uint32_t value);

  public:
  // uint32 clob_pair_id = 4;
  void clear_clob_pair_id() ;
  ::uint32_t clob_pair_id() const;
  void set_clob_pair_id(::uint32_t value);

  private:
  ::uint32_t _internal_clob_pair_id() const;
  void _internal_set_clob_pair_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.protocol.v1.IndexerOrderId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id_;
    ::uint32_t client_id_;
    ::uint32_t order_flags_;
    ::uint32_t clob_pair_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto;
};// -------------------------------------------------------------------

class IndexerOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.protocol.v1.IndexerOrder) */ {
 public:
  inline IndexerOrder() : IndexerOrder(nullptr) {}
  ~IndexerOrder() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IndexerOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexerOrder(const IndexerOrder& from);
  IndexerOrder(IndexerOrder&& from) noexcept
    : IndexerOrder() {
    *this = ::std::move(from);
  }

  inline IndexerOrder& operator=(const IndexerOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexerOrder& operator=(IndexerOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexerOrder& default_instance() {
    return *internal_default_instance();
  }
  enum GoodTilOneofCase {
    kGoodTilBlock = 5,
    kGoodTilBlockTime = 6,
    GOOD_TIL_ONEOF_NOT_SET = 0,
  };

  static inline const IndexerOrder* internal_default_instance() {
    return reinterpret_cast<const IndexerOrder*>(
               &_IndexerOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IndexerOrder& a, IndexerOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexerOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexerOrder* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexerOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexerOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexerOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexerOrder& from) {
    IndexerOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexerOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.protocol.v1.IndexerOrder";
  }
  protected:
  explicit IndexerOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Side = IndexerOrder_Side;
  static constexpr Side SIDE_UNSPECIFIED = IndexerOrder_Side_SIDE_UNSPECIFIED;
  static constexpr Side SIDE_BUY = IndexerOrder_Side_SIDE_BUY;
  static constexpr Side SIDE_SELL = IndexerOrder_Side_SIDE_SELL;
  static inline bool Side_IsValid(int value) {
    return IndexerOrder_Side_IsValid(value);
  }
  static constexpr Side Side_MIN = IndexerOrder_Side_Side_MIN;
  static constexpr Side Side_MAX = IndexerOrder_Side_Side_MAX;
  static constexpr int Side_ARRAYSIZE = IndexerOrder_Side_Side_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Side_descriptor() {
    return IndexerOrder_Side_descriptor();
  }
  template <typename T>
  static inline const std::string& Side_Name(T value) {
    return IndexerOrder_Side_Name(value);
  }
  static inline bool Side_Parse(absl::string_view name, Side* value) {
    return IndexerOrder_Side_Parse(name, value);
  }

  using TimeInForce = IndexerOrder_TimeInForce;
  static constexpr TimeInForce TIME_IN_FORCE_UNSPECIFIED = IndexerOrder_TimeInForce_TIME_IN_FORCE_UNSPECIFIED;
  static constexpr TimeInForce TIME_IN_FORCE_IOC = IndexerOrder_TimeInForce_TIME_IN_FORCE_IOC;
  static constexpr TimeInForce TIME_IN_FORCE_POST_ONLY = IndexerOrder_TimeInForce_TIME_IN_FORCE_POST_ONLY;
  static constexpr TimeInForce TIME_IN_FORCE_FILL_OR_KILL = IndexerOrder_TimeInForce_TIME_IN_FORCE_FILL_OR_KILL;
  static inline bool TimeInForce_IsValid(int value) {
    return IndexerOrder_TimeInForce_IsValid(value);
  }
  static constexpr TimeInForce TimeInForce_MIN = IndexerOrder_TimeInForce_TimeInForce_MIN;
  static constexpr TimeInForce TimeInForce_MAX = IndexerOrder_TimeInForce_TimeInForce_MAX;
  static constexpr int TimeInForce_ARRAYSIZE = IndexerOrder_TimeInForce_TimeInForce_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeInForce_descriptor() {
    return IndexerOrder_TimeInForce_descriptor();
  }
  template <typename T>
  static inline const std::string& TimeInForce_Name(T value) {
    return IndexerOrder_TimeInForce_Name(value);
  }
  static inline bool TimeInForce_Parse(absl::string_view name, TimeInForce* value) {
    return IndexerOrder_TimeInForce_Parse(name, value);
  }

  using ConditionType = IndexerOrder_ConditionType;
  static constexpr ConditionType CONDITION_TYPE_UNSPECIFIED = IndexerOrder_ConditionType_CONDITION_TYPE_UNSPECIFIED;
  static constexpr ConditionType CONDITION_TYPE_STOP_LOSS = IndexerOrder_ConditionType_CONDITION_TYPE_STOP_LOSS;
  static constexpr ConditionType CONDITION_TYPE_TAKE_PROFIT = IndexerOrder_ConditionType_CONDITION_TYPE_TAKE_PROFIT;
  static inline bool ConditionType_IsValid(int value) {
    return IndexerOrder_ConditionType_IsValid(value);
  }
  static constexpr ConditionType ConditionType_MIN = IndexerOrder_ConditionType_ConditionType_MIN;
  static constexpr ConditionType ConditionType_MAX = IndexerOrder_ConditionType_ConditionType_MAX;
  static constexpr int ConditionType_ARRAYSIZE = IndexerOrder_ConditionType_ConditionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionType_descriptor() {
    return IndexerOrder_ConditionType_descriptor();
  }
  template <typename T>
  static inline const std::string& ConditionType_Name(T value) {
    return IndexerOrder_ConditionType_Name(value);
  }
  static inline bool ConditionType_Parse(absl::string_view name, ConditionType* value) {
    return IndexerOrder_ConditionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kQuantumsFieldNumber = 3,
    kSubticksFieldNumber = 4,
    kSideFieldNumber = 2,
    kTimeInForceFieldNumber = 7,
    kReduceOnlyFieldNumber = 8,
    kClientMetadataFieldNumber = 9,
    kConditionalOrderTriggerSubticksFieldNumber = 11,
    kConditionTypeFieldNumber = 10,
    kGoodTilBlockFieldNumber = 5,
    kGoodTilBlockTimeFieldNumber = 6,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1 [(.gogoproto.nullable) = false];
  bool has_order_id() const;
  void clear_order_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* release_order_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* mutable_order_id();
  void set_allocated_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& _internal_order_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _internal_mutable_order_id();
  public:
  void unsafe_arena_set_allocated_order_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* unsafe_arena_release_order_id();
  // uint64 quantums = 3;
  void clear_quantums() ;
  ::uint64_t quantums() const;
  void set_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_quantums() const;
  void _internal_set_quantums(::uint64_t value);

  public:
  // uint64 subticks = 4;
  void clear_subticks() ;
  ::uint64_t subticks() const;
  void set_subticks(::uint64_t value);

  private:
  ::uint64_t _internal_subticks() const;
  void _internal_set_subticks(::uint64_t value);

  public:
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.Side side = 2;
  void clear_side() ;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side side() const;
  void set_side(::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side value);

  private:
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side _internal_side() const;
  void _internal_set_side(::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side value);

  public:
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.TimeInForce time_in_force = 7;
  void clear_time_in_force() ;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce time_in_force() const;
  void set_time_in_force(::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce value);

  private:
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce value);

  public:
  // bool reduce_only = 8;
  void clear_reduce_only() ;
  bool reduce_only() const;
  void set_reduce_only(bool value);

  private:
  bool _internal_reduce_only() const;
  void _internal_set_reduce_only(bool value);

  public:
  // uint32 client_metadata = 9;
  void clear_client_metadata() ;
  ::uint32_t client_metadata() const;
  void set_client_metadata(::uint32_t value);

  private:
  ::uint32_t _internal_client_metadata() const;
  void _internal_set_client_metadata(::uint32_t value);

  public:
  // uint64 conditional_order_trigger_subticks = 11;
  void clear_conditional_order_trigger_subticks() ;
  ::uint64_t conditional_order_trigger_subticks() const;
  void set_conditional_order_trigger_subticks(::uint64_t value);

  private:
  ::uint64_t _internal_conditional_order_trigger_subticks() const;
  void _internal_set_conditional_order_trigger_subticks(::uint64_t value);

  public:
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder.ConditionType condition_type = 10;
  void clear_condition_type() ;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType condition_type() const;
  void set_condition_type(::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType value);

  private:
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType _internal_condition_type() const;
  void _internal_set_condition_type(::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType value);

  public:
  // uint32 good_til_block = 5;
  bool has_good_til_block() const;
  void clear_good_til_block() ;
  ::uint32_t good_til_block() const;
  void set_good_til_block(::uint32_t value);

  private:
  ::uint32_t _internal_good_til_block() const;
  void _internal_set_good_til_block(::uint32_t value);

  public:
  // fixed32 good_til_block_time = 6;
  bool has_good_til_block_time() const;
  void clear_good_til_block_time() ;
  ::uint32_t good_til_block_time() const;
  void set_good_til_block_time(::uint32_t value);

  private:
  ::uint32_t _internal_good_til_block_time() const;
  void _internal_set_good_til_block_time(::uint32_t value);

  public:
  void clear_good_til_oneof();
  GoodTilOneofCase good_til_oneof_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.protocol.v1.IndexerOrder)
 private:
  class _Internal;
  void set_has_good_til_block();
  void set_has_good_til_block_time();

  inline bool has_good_til_oneof() const;
  inline void clear_has_good_til_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id_;
    ::uint64_t quantums_;
    ::uint64_t subticks_;
    int side_;
    int time_in_force_;
    bool reduce_only_;
    ::uint32_t client_metadata_;
    ::uint64_t conditional_order_trigger_subticks_;
    int condition_type_;
    union GoodTilOneofUnion {
      constexpr GoodTilOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::uint32_t good_til_block_;
      ::uint32_t good_til_block_time_;
    } good_til_oneof_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IndexerOrderId

// .dydxprotocol.indexer.protocol.v1.IndexerSubaccountId subaccount_id = 1 [(.gogoproto.nullable) = false];
inline bool IndexerOrderId::has_subaccount_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& IndexerOrderId::_internal_subaccount_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* p = _impl_.subaccount_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId& IndexerOrderId::subaccount_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrderId.subaccount_id)
  return _internal_subaccount_id();
}
inline void IndexerOrderId::unsafe_arena_set_allocated_subaccount_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  _impl_.subaccount_id_ = subaccount_id;
  if (subaccount_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerOrderId.subaccount_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* IndexerOrderId::release_subaccount_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* IndexerOrderId::unsafe_arena_release_subaccount_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerOrderId.subaccount_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* temp = _impl_.subaccount_id_;
  _impl_.subaccount_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* IndexerOrderId::_internal_mutable_subaccount_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subaccount_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId>(GetArenaForAllocation());
    _impl_.subaccount_id_ = p;
  }
  return _impl_.subaccount_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* IndexerOrderId::mutable_subaccount_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* _msg = _internal_mutable_subaccount_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerOrderId.subaccount_id)
  return _msg;
}
inline void IndexerOrderId::set_allocated_subaccount_id(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId* subaccount_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_id_);
  }
  if (subaccount_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount_id));
    if (message_arena != submessage_arena) {
      subaccount_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subaccount_id_ = subaccount_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerOrderId.subaccount_id)
}

// fixed32 client_id = 2;
inline void IndexerOrderId::clear_client_id() {
  _impl_.client_id_ = 0u;
}
inline ::uint32_t IndexerOrderId::client_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrderId.client_id)
  return _internal_client_id();
}
inline void IndexerOrderId::set_client_id(::uint32_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrderId.client_id)
}
inline ::uint32_t IndexerOrderId::_internal_client_id() const {
  return _impl_.client_id_;
}
inline void IndexerOrderId::_internal_set_client_id(::uint32_t value) {
  ;
  _impl_.client_id_ = value;
}

// uint32 order_flags = 3;
inline void IndexerOrderId::clear_order_flags() {
  _impl_.order_flags_ = 0u;
}
inline ::uint32_t IndexerOrderId::order_flags() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrderId.order_flags)
  return _internal_order_flags();
}
inline void IndexerOrderId::set_order_flags(::uint32_t value) {
  _internal_set_order_flags(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrderId.order_flags)
}
inline ::uint32_t IndexerOrderId::_internal_order_flags() const {
  return _impl_.order_flags_;
}
inline void IndexerOrderId::_internal_set_order_flags(::uint32_t value) {
  ;
  _impl_.order_flags_ = value;
}

// uint32 clob_pair_id = 4;
inline void IndexerOrderId::clear_clob_pair_id() {
  _impl_.clob_pair_id_ = 0u;
}
inline ::uint32_t IndexerOrderId::clob_pair_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrderId.clob_pair_id)
  return _internal_clob_pair_id();
}
inline void IndexerOrderId::set_clob_pair_id(::uint32_t value) {
  _internal_set_clob_pair_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrderId.clob_pair_id)
}
inline ::uint32_t IndexerOrderId::_internal_clob_pair_id() const {
  return _impl_.clob_pair_id_;
}
inline void IndexerOrderId::_internal_set_clob_pair_id(::uint32_t value) {
  ;
  _impl_.clob_pair_id_ = value;
}

// -------------------------------------------------------------------

// IndexerOrder

// .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1 [(.gogoproto.nullable) = false];
inline bool IndexerOrder::has_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_id_ != nullptr);
  return value;
}
inline void IndexerOrder::clear_order_id() {
  if (_impl_.order_id_ != nullptr) _impl_.order_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& IndexerOrder::_internal_order_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* p = _impl_.order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrderId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& IndexerOrder::order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.order_id)
  return _internal_order_id();
}
inline void IndexerOrder::unsafe_arena_set_allocated_order_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  _impl_.order_id_ = order_id;
  if (order_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerOrder.order_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* IndexerOrder::release_order_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* IndexerOrder::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.protocol.v1.IndexerOrder.order_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* IndexerOrder::_internal_mutable_order_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrderId>(GetArenaForAllocation());
    _impl_.order_id_ = p;
  }
  return _impl_.order_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* IndexerOrder::mutable_order_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _msg = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.protocol.v1.IndexerOrder.order_id)
  return _msg;
}
inline void IndexerOrder::set_allocated_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_id_;
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_id);
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.protocol.v1.IndexerOrder.order_id)
}

// .dydxprotocol.indexer.protocol.v1.IndexerOrder.Side side = 2;
inline void IndexerOrder::clear_side() {
  _impl_.side_ = 0;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side IndexerOrder::side() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.side)
  return _internal_side();
}
inline void IndexerOrder::set_side(::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side value) {
   _internal_set_side(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.side)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side IndexerOrder::_internal_side() const {
  return static_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side>(_impl_.side_);
}
inline void IndexerOrder::_internal_set_side(::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side value) {
  ;
  _impl_.side_ = value;
}

// uint64 quantums = 3;
inline void IndexerOrder::clear_quantums() {
  _impl_.quantums_ = ::uint64_t{0u};
}
inline ::uint64_t IndexerOrder::quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.quantums)
  return _internal_quantums();
}
inline void IndexerOrder::set_quantums(::uint64_t value) {
  _internal_set_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.quantums)
}
inline ::uint64_t IndexerOrder::_internal_quantums() const {
  return _impl_.quantums_;
}
inline void IndexerOrder::_internal_set_quantums(::uint64_t value) {
  ;
  _impl_.quantums_ = value;
}

// uint64 subticks = 4;
inline void IndexerOrder::clear_subticks() {
  _impl_.subticks_ = ::uint64_t{0u};
}
inline ::uint64_t IndexerOrder::subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.subticks)
  return _internal_subticks();
}
inline void IndexerOrder::set_subticks(::uint64_t value) {
  _internal_set_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.subticks)
}
inline ::uint64_t IndexerOrder::_internal_subticks() const {
  return _impl_.subticks_;
}
inline void IndexerOrder::_internal_set_subticks(::uint64_t value) {
  ;
  _impl_.subticks_ = value;
}

// uint32 good_til_block = 5;
inline bool IndexerOrder::has_good_til_block() const {
  return good_til_oneof_case() == kGoodTilBlock;
}
inline void IndexerOrder::set_has_good_til_block() {
  _impl_._oneof_case_[0] = kGoodTilBlock;
}
inline void IndexerOrder::clear_good_til_block() {
  if (good_til_oneof_case() == kGoodTilBlock) {
    _impl_.good_til_oneof_.good_til_block_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline ::uint32_t IndexerOrder::good_til_block() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.good_til_block)
  return _internal_good_til_block();
}
inline void IndexerOrder::set_good_til_block(::uint32_t value) {
  _internal_set_good_til_block(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.good_til_block)
}
inline ::uint32_t IndexerOrder::_internal_good_til_block() const {
  if (good_til_oneof_case() == kGoodTilBlock) {
    return _impl_.good_til_oneof_.good_til_block_;
  }
  return 0u;
}
inline void IndexerOrder::_internal_set_good_til_block(::uint32_t value) {
  if (good_til_oneof_case() != kGoodTilBlock) {
    clear_good_til_oneof();
    set_has_good_til_block();
  }
  _impl_.good_til_oneof_.good_til_block_ = value;
}

// fixed32 good_til_block_time = 6;
inline bool IndexerOrder::has_good_til_block_time() const {
  return good_til_oneof_case() == kGoodTilBlockTime;
}
inline void IndexerOrder::set_has_good_til_block_time() {
  _impl_._oneof_case_[0] = kGoodTilBlockTime;
}
inline void IndexerOrder::clear_good_til_block_time() {
  if (good_til_oneof_case() == kGoodTilBlockTime) {
    _impl_.good_til_oneof_.good_til_block_time_ = 0u;
    clear_has_good_til_oneof();
  }
}
inline ::uint32_t IndexerOrder::good_til_block_time() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.good_til_block_time)
  return _internal_good_til_block_time();
}
inline void IndexerOrder::set_good_til_block_time(::uint32_t value) {
  _internal_set_good_til_block_time(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.good_til_block_time)
}
inline ::uint32_t IndexerOrder::_internal_good_til_block_time() const {
  if (good_til_oneof_case() == kGoodTilBlockTime) {
    return _impl_.good_til_oneof_.good_til_block_time_;
  }
  return 0u;
}
inline void IndexerOrder::_internal_set_good_til_block_time(::uint32_t value) {
  if (good_til_oneof_case() != kGoodTilBlockTime) {
    clear_good_til_oneof();
    set_has_good_til_block_time();
  }
  _impl_.good_til_oneof_.good_til_block_time_ = value;
}

// .dydxprotocol.indexer.protocol.v1.IndexerOrder.TimeInForce time_in_force = 7;
inline void IndexerOrder::clear_time_in_force() {
  _impl_.time_in_force_ = 0;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce IndexerOrder::time_in_force() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.time_in_force)
  return _internal_time_in_force();
}
inline void IndexerOrder::set_time_in_force(::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce value) {
   _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.time_in_force)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce IndexerOrder::_internal_time_in_force() const {
  return static_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce>(_impl_.time_in_force_);
}
inline void IndexerOrder::_internal_set_time_in_force(::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce value) {
  ;
  _impl_.time_in_force_ = value;
}

// bool reduce_only = 8;
inline void IndexerOrder::clear_reduce_only() {
  _impl_.reduce_only_ = false;
}
inline bool IndexerOrder::reduce_only() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.reduce_only)
  return _internal_reduce_only();
}
inline void IndexerOrder::set_reduce_only(bool value) {
  _internal_set_reduce_only(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.reduce_only)
}
inline bool IndexerOrder::_internal_reduce_only() const {
  return _impl_.reduce_only_;
}
inline void IndexerOrder::_internal_set_reduce_only(bool value) {
  ;
  _impl_.reduce_only_ = value;
}

// uint32 client_metadata = 9;
inline void IndexerOrder::clear_client_metadata() {
  _impl_.client_metadata_ = 0u;
}
inline ::uint32_t IndexerOrder::client_metadata() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.client_metadata)
  return _internal_client_metadata();
}
inline void IndexerOrder::set_client_metadata(::uint32_t value) {
  _internal_set_client_metadata(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.client_metadata)
}
inline ::uint32_t IndexerOrder::_internal_client_metadata() const {
  return _impl_.client_metadata_;
}
inline void IndexerOrder::_internal_set_client_metadata(::uint32_t value) {
  ;
  _impl_.client_metadata_ = value;
}

// .dydxprotocol.indexer.protocol.v1.IndexerOrder.ConditionType condition_type = 10;
inline void IndexerOrder::clear_condition_type() {
  _impl_.condition_type_ = 0;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType IndexerOrder::condition_type() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.condition_type)
  return _internal_condition_type();
}
inline void IndexerOrder::set_condition_type(::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType value) {
   _internal_set_condition_type(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.condition_type)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType IndexerOrder::_internal_condition_type() const {
  return static_cast<::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType>(_impl_.condition_type_);
}
inline void IndexerOrder::_internal_set_condition_type(::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType value) {
  ;
  _impl_.condition_type_ = value;
}

// uint64 conditional_order_trigger_subticks = 11;
inline void IndexerOrder::clear_conditional_order_trigger_subticks() {
  _impl_.conditional_order_trigger_subticks_ = ::uint64_t{0u};
}
inline ::uint64_t IndexerOrder::conditional_order_trigger_subticks() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.protocol.v1.IndexerOrder.conditional_order_trigger_subticks)
  return _internal_conditional_order_trigger_subticks();
}
inline void IndexerOrder::set_conditional_order_trigger_subticks(::uint64_t value) {
  _internal_set_conditional_order_trigger_subticks(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.protocol.v1.IndexerOrder.conditional_order_trigger_subticks)
}
inline ::uint64_t IndexerOrder::_internal_conditional_order_trigger_subticks() const {
  return _impl_.conditional_order_trigger_subticks_;
}
inline void IndexerOrder::_internal_set_conditional_order_trigger_subticks(::uint64_t value) {
  ;
  _impl_.conditional_order_trigger_subticks_ = value;
}

inline bool IndexerOrder::has_good_til_oneof() const {
  return good_til_oneof_case() != GOOD_TIL_ONEOF_NOT_SET;
}
inline void IndexerOrder::clear_has_good_til_oneof() {
  _impl_._oneof_case_[0] = GOOD_TIL_ONEOF_NOT_SET;
}
inline IndexerOrder::GoodTilOneofCase IndexerOrder::good_til_oneof_case() const {
  return IndexerOrder::GoodTilOneofCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side>() {
  return ::dydxprotocol::indexer::protocol::v1::IndexerOrder_Side_descriptor();
}
template <>
struct is_proto_enum<::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce>() {
  return ::dydxprotocol::indexer::protocol::v1::IndexerOrder_TimeInForce_descriptor();
}
template <>
struct is_proto_enum<::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType>() {
  return ::dydxprotocol::indexer::protocol::v1::IndexerOrder_ConditionType_descriptor();
}
template <>
struct is_proto_enum<::dydxprotocol::indexer::protocol::v1::ClobPairStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::protocol::v1::ClobPairStatus>() {
  return ::dydxprotocol::indexer::protocol::v1::ClobPairStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto_2epb_2eh
