// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/protocol/v1/subaccount.proto

#include "dydxprotocol/indexer/protocol/v1/subaccount.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR IndexerSubaccountId::IndexerSubaccountId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.number_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexerSubaccountIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerSubaccountIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerSubaccountIdDefaultTypeInternal() {}
  union {
    IndexerSubaccountId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerSubaccountIdDefaultTypeInternal _IndexerSubaccountId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexerPerpetualPosition::IndexerPerpetualPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quantums_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.funding_index_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.funding_payment_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.perpetual_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexerPerpetualPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerPerpetualPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerPerpetualPositionDefaultTypeInternal() {}
  union {
    IndexerPerpetualPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerPerpetualPositionDefaultTypeInternal _IndexerPerpetualPosition_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IndexerAssetPosition::IndexerAssetPosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quantums_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.index_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.asset_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexerAssetPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexerAssetPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexerAssetPositionDefaultTypeInternal() {}
  union {
    IndexerAssetPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexerAssetPositionDefaultTypeInternal _IndexerAssetPosition_default_instance_;
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId, _impl_.owner_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId, _impl_.number_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition, _impl_.perpetual_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition, _impl_.quantums_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition, _impl_.funding_index_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition, _impl_.funding_payment_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition, _impl_.asset_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition, _impl_.quantums_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition, _impl_.index_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId)},
        { 10, -1, -1, sizeof(::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition)},
        { 22, -1, -1, sizeof(::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::indexer::protocol::v1::_IndexerSubaccountId_default_instance_._instance,
    &::dydxprotocol::indexer::protocol::v1::_IndexerPerpetualPosition_default_instance_._instance,
    &::dydxprotocol::indexer::protocol::v1::_IndexerAssetPosition_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1dydxprotocol/indexer/protocol/v1/subac"
    "count.proto\022 dydxprotocol.indexer.protoc"
    "ol.v1\032\031cosmos_proto/cosmos.proto\032\024gogopr"
    "oto/gogo.proto\"N\n\023IndexerSubaccountId\022\'\n"
    "\005owner\030\001 \001(\tB\030\322\264-\024cosmos.AddressString\022\016"
    "\n\006number\030\002 \001(\r\"\320\002\n\030IndexerPerpetualPosit"
    "ion\022\024\n\014perpetual_id\030\001 \001(\r\022Z\n\010quantums\030\002 "
    "\001(\014BH\310\336\037\000\332\336\037@github.com/dydxprotocol/v4-"
    "chain/protocol/dtypes.SerializableInt\022_\n"
    "\rfunding_index\030\003 \001(\014BH\310\336\037\000\332\336\037@github.com"
    "/dydxprotocol/v4-chain/protocol/dtypes.S"
    "erializableInt\022a\n\017funding_payment\030\004 \001(\014B"
    "H\310\336\037\000\332\336\037@github.com/dydxprotocol/v4-chai"
    "n/protocol/dtypes.SerializableInt\"\223\001\n\024In"
    "dexerAssetPosition\022\020\n\010asset_id\030\001 \001(\r\022Z\n\010"
    "quantums\030\002 \001(\014BH\310\336\037\000\332\336\037@github.com/dydxp"
    "rotocol/v4-chain/protocol/dtypes.Seriali"
    "zableInt\022\r\n\005index\030\003 \001(\004B\?Z=github.com/dy"
    "dxprotocol/v4-chain/protocol/indexer/pro"
    "tocol/v1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto = {
    false,
    false,
    776,
    descriptor_table_protodef_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto,
    "dydxprotocol/indexer/protocol/v1/subaccount.proto",
    &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_once,
    descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto::offsets,
    file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto,
    file_level_enum_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto,
    file_level_service_descriptors_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto(&descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto);
namespace dydxprotocol {
namespace indexer {
namespace protocol {
namespace v1 {
// ===================================================================

class IndexerSubaccountId::_Internal {
 public:
};

IndexerSubaccountId::IndexerSubaccountId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
}
IndexerSubaccountId::IndexerSubaccountId(const IndexerSubaccountId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerSubaccountId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_) {}

    , decltype(_impl_.number_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner().empty()) {
    _this->_impl_.owner_.Set(from._internal_owner(), _this->GetArenaForAllocation());
  }
  _this->_impl_.number_ = from._impl_.number_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
}

inline void IndexerSubaccountId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_) {}

    , decltype(_impl_.number_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexerSubaccountId::~IndexerSubaccountId() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerSubaccountId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_.Destroy();
}

void IndexerSubaccountId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerSubaccountId::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_.ClearToEmpty();
  _impl_.number_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerSubaccountId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerSubaccountId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_owner().empty()) {
    const std::string& _s = this->_internal_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.indexer.protocol.v1.IndexerSubaccountId.owner");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 number = 2;
  if (this->_internal_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  return target;
}

::size_t IndexerSubaccountId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  if (!this->_internal_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_owner());
  }

  // uint32 number = 2;
  if (this->_internal_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerSubaccountId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerSubaccountId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerSubaccountId::GetClassData() const { return &_class_data_; }


void IndexerSubaccountId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerSubaccountId*>(&to_msg);
  auto& from = static_cast<const IndexerSubaccountId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_owner().empty()) {
    _this->_internal_set_owner(from._internal_owner());
  }
  if (from._internal_number() != 0) {
    _this->_internal_set_number(from._internal_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerSubaccountId::CopyFrom(const IndexerSubaccountId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.protocol.v1.IndexerSubaccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerSubaccountId::IsInitialized() const {
  return true;
}

void IndexerSubaccountId::InternalSwap(IndexerSubaccountId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_, lhs_arena,
                                       &other->_impl_.owner_, rhs_arena);

  swap(_impl_.number_, other->_impl_.number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerSubaccountId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto[0]);
}
// ===================================================================

class IndexerPerpetualPosition::_Internal {
 public:
};

IndexerPerpetualPosition::IndexerPerpetualPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
}
IndexerPerpetualPosition::IndexerPerpetualPosition(const IndexerPerpetualPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerPerpetualPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quantums_) {}

    , decltype(_impl_.funding_index_) {}

    , decltype(_impl_.funding_payment_) {}

    , decltype(_impl_.perpetual_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quantums_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantums_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantums().empty()) {
    _this->_impl_.quantums_.Set(from._internal_quantums(), _this->GetArenaForAllocation());
  }
  _impl_.funding_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funding_index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funding_index().empty()) {
    _this->_impl_.funding_index_.Set(from._internal_funding_index(), _this->GetArenaForAllocation());
  }
  _impl_.funding_payment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funding_payment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funding_payment().empty()) {
    _this->_impl_.funding_payment_.Set(from._internal_funding_payment(), _this->GetArenaForAllocation());
  }
  _this->_impl_.perpetual_id_ = from._impl_.perpetual_id_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
}

inline void IndexerPerpetualPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.quantums_) {}

    , decltype(_impl_.funding_index_) {}

    , decltype(_impl_.funding_payment_) {}

    , decltype(_impl_.perpetual_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quantums_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantums_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.funding_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funding_index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.funding_payment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funding_payment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexerPerpetualPosition::~IndexerPerpetualPosition() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerPerpetualPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quantums_.Destroy();
  _impl_.funding_index_.Destroy();
  _impl_.funding_payment_.Destroy();
}

void IndexerPerpetualPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerPerpetualPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quantums_.ClearToEmpty();
  _impl_.funding_index_.ClearToEmpty();
  _impl_.funding_payment_.ClearToEmpty();
  _impl_.perpetual_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerPerpetualPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 perpetual_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.perpetual_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantums();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_funding_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes funding_payment = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_funding_payment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerPerpetualPosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 perpetual_id = 1;
  if (this->_internal_perpetual_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_perpetual_id(), target);
  }

  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_quantums().empty()) {
    const std::string& _s = this->_internal_quantums();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_funding_index().empty()) {
    const std::string& _s = this->_internal_funding_index();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // bytes funding_payment = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_funding_payment().empty()) {
    const std::string& _s = this->_internal_funding_payment();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  return target;
}

::size_t IndexerPerpetualPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_quantums().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_quantums());
  }

  // bytes funding_index = 3 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_funding_index().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_funding_index());
  }

  // bytes funding_payment = 4 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_funding_payment().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_funding_payment());
  }

  // uint32 perpetual_id = 1;
  if (this->_internal_perpetual_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_perpetual_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerPerpetualPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerPerpetualPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerPerpetualPosition::GetClassData() const { return &_class_data_; }


void IndexerPerpetualPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerPerpetualPosition*>(&to_msg);
  auto& from = static_cast<const IndexerPerpetualPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quantums().empty()) {
    _this->_internal_set_quantums(from._internal_quantums());
  }
  if (!from._internal_funding_index().empty()) {
    _this->_internal_set_funding_index(from._internal_funding_index());
  }
  if (!from._internal_funding_payment().empty()) {
    _this->_internal_set_funding_payment(from._internal_funding_payment());
  }
  if (from._internal_perpetual_id() != 0) {
    _this->_internal_set_perpetual_id(from._internal_perpetual_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerPerpetualPosition::CopyFrom(const IndexerPerpetualPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.protocol.v1.IndexerPerpetualPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerPerpetualPosition::IsInitialized() const {
  return true;
}

void IndexerPerpetualPosition::InternalSwap(IndexerPerpetualPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantums_, lhs_arena,
                                       &other->_impl_.quantums_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.funding_index_, lhs_arena,
                                       &other->_impl_.funding_index_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.funding_payment_, lhs_arena,
                                       &other->_impl_.funding_payment_, rhs_arena);

  swap(_impl_.perpetual_id_, other->_impl_.perpetual_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerPerpetualPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto[1]);
}
// ===================================================================

class IndexerAssetPosition::_Internal {
 public:
};

IndexerAssetPosition::IndexerAssetPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
}
IndexerAssetPosition::IndexerAssetPosition(const IndexerAssetPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexerAssetPosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quantums_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.asset_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quantums_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantums_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quantums().empty()) {
    _this->_impl_.quantums_.Set(from._internal_quantums(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.asset_id_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.asset_id_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
}

inline void IndexerAssetPosition::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.quantums_) {}

    , decltype(_impl_.index_) { ::uint64_t{0u} }

    , decltype(_impl_.asset_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quantums_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.quantums_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IndexerAssetPosition::~IndexerAssetPosition() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexerAssetPosition::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quantums_.Destroy();
}

void IndexerAssetPosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexerAssetPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quantums_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.asset_id_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.asset_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexerAssetPosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.asset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_quantums();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IndexerAssetPosition::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 asset_id = 1;
  if (this->_internal_asset_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_asset_id(), target);
  }

  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_quantums().empty()) {
    const std::string& _s = this->_internal_quantums();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // uint64 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  return target;
}

::size_t IndexerAssetPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes quantums = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_quantums().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_quantums());
  }

  // uint64 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_index());
  }

  // uint32 asset_id = 1;
  if (this->_internal_asset_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_asset_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexerAssetPosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexerAssetPosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexerAssetPosition::GetClassData() const { return &_class_data_; }


void IndexerAssetPosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexerAssetPosition*>(&to_msg);
  auto& from = static_cast<const IndexerAssetPosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quantums().empty()) {
    _this->_internal_set_quantums(from._internal_quantums());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_asset_id() != 0) {
    _this->_internal_set_asset_id(from._internal_asset_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexerAssetPosition::CopyFrom(const IndexerAssetPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.protocol.v1.IndexerAssetPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexerAssetPosition::IsInitialized() const {
  return true;
}

void IndexerAssetPosition::InternalSwap(IndexerAssetPosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.quantums_, lhs_arena,
                                       &other->_impl_.quantums_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexerAssetPosition, _impl_.asset_id_)
      + sizeof(IndexerAssetPosition::_impl_.asset_id_)
      - PROTOBUF_FIELD_OFFSET(IndexerAssetPosition, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexerAssetPosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2fprotocol_2fv1_2fsubaccount_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace protocol
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::protocol::v1::IndexerSubaccountId >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::protocol::v1::IndexerPerpetualPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::protocol::v1::IndexerAssetPosition >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
