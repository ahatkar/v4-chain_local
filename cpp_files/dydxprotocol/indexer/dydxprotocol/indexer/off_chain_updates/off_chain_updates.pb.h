// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/off_chain_updates/off_chain_updates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "dydxprotocol/indexer/shared/removal_reason.pb.h"
#include "dydxprotocol/indexer/protocol/v1/clob.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto;
namespace dydxprotocol {
namespace indexer {
namespace off_chain_updates {
class OffChainUpdateV1;
struct OffChainUpdateV1DefaultTypeInternal;
extern OffChainUpdateV1DefaultTypeInternal _OffChainUpdateV1_default_instance_;
class OrderPlaceV1;
struct OrderPlaceV1DefaultTypeInternal;
extern OrderPlaceV1DefaultTypeInternal _OrderPlaceV1_default_instance_;
class OrderRemoveV1;
struct OrderRemoveV1DefaultTypeInternal;
extern OrderRemoveV1DefaultTypeInternal _OrderRemoveV1_default_instance_;
class OrderUpdateV1;
struct OrderUpdateV1DefaultTypeInternal;
extern OrderUpdateV1DefaultTypeInternal _OrderUpdateV1_default_instance_;
}  // namespace off_chain_updates
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1>(Arena*);
template <>
::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1>(Arena*);
template <>
::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1>(Arena*);
template <>
::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* Arena::CreateMaybeMessage<::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace indexer {
namespace off_chain_updates {
enum OrderPlaceV1_OrderPlacementStatus : int {
  OrderPlaceV1_OrderPlacementStatus_ORDER_PLACEMENT_STATUS_UNSPECIFIED = 0,
  OrderPlaceV1_OrderPlacementStatus_ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED = 1,
  OrderPlaceV1_OrderPlacementStatus_ORDER_PLACEMENT_STATUS_OPENED = 2,
  OrderPlaceV1_OrderPlacementStatus_OrderPlaceV1_OrderPlacementStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderPlaceV1_OrderPlacementStatus_OrderPlaceV1_OrderPlacementStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderPlaceV1_OrderPlacementStatus_IsValid(int value);
constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1_OrderPlacementStatus_OrderPlacementStatus_MIN = static_cast<OrderPlaceV1_OrderPlacementStatus>(0);
constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1_OrderPlacementStatus_OrderPlacementStatus_MAX = static_cast<OrderPlaceV1_OrderPlacementStatus>(2);
constexpr int OrderPlaceV1_OrderPlacementStatus_OrderPlacementStatus_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
OrderPlaceV1_OrderPlacementStatus_descriptor();
template <typename T>
const std::string& OrderPlaceV1_OrderPlacementStatus_Name(T value) {
  static_assert(std::is_same<T, OrderPlaceV1_OrderPlacementStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderPlacementStatus_Name().");
  return OrderPlaceV1_OrderPlacementStatus_Name(static_cast<OrderPlaceV1_OrderPlacementStatus>(value));
}
template <>
inline const std::string& OrderPlaceV1_OrderPlacementStatus_Name(OrderPlaceV1_OrderPlacementStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<OrderPlaceV1_OrderPlacementStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool OrderPlaceV1_OrderPlacementStatus_Parse(absl::string_view name, OrderPlaceV1_OrderPlacementStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderPlaceV1_OrderPlacementStatus>(
      OrderPlaceV1_OrderPlacementStatus_descriptor(), name, value);
}
enum OrderRemoveV1_OrderRemovalStatus : int {
  OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_UNSPECIFIED = 0,
  OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED = 1,
  OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_CANCELED = 2,
  OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_FILLED = 3,
  OrderRemoveV1_OrderRemovalStatus_OrderRemoveV1_OrderRemovalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderRemoveV1_OrderRemovalStatus_OrderRemoveV1_OrderRemovalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderRemoveV1_OrderRemovalStatus_IsValid(int value);
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1_OrderRemovalStatus_OrderRemovalStatus_MIN = static_cast<OrderRemoveV1_OrderRemovalStatus>(0);
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1_OrderRemovalStatus_OrderRemovalStatus_MAX = static_cast<OrderRemoveV1_OrderRemovalStatus>(3);
constexpr int OrderRemoveV1_OrderRemovalStatus_OrderRemovalStatus_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
OrderRemoveV1_OrderRemovalStatus_descriptor();
template <typename T>
const std::string& OrderRemoveV1_OrderRemovalStatus_Name(T value) {
  static_assert(std::is_same<T, OrderRemoveV1_OrderRemovalStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderRemovalStatus_Name().");
  return OrderRemoveV1_OrderRemovalStatus_Name(static_cast<OrderRemoveV1_OrderRemovalStatus>(value));
}
template <>
inline const std::string& OrderRemoveV1_OrderRemovalStatus_Name(OrderRemoveV1_OrderRemovalStatus value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<OrderRemoveV1_OrderRemovalStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool OrderRemoveV1_OrderRemovalStatus_Parse(absl::string_view name, OrderRemoveV1_OrderRemovalStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderRemoveV1_OrderRemovalStatus>(
      OrderRemoveV1_OrderRemovalStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class OrderPlaceV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1) */ {
 public:
  inline OrderPlaceV1() : OrderPlaceV1(nullptr) {}
  ~OrderPlaceV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderPlaceV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderPlaceV1(const OrderPlaceV1& from);
  OrderPlaceV1(OrderPlaceV1&& from) noexcept
    : OrderPlaceV1() {
    *this = ::std::move(from);
  }

  inline OrderPlaceV1& operator=(const OrderPlaceV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderPlaceV1& operator=(OrderPlaceV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderPlaceV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderPlaceV1* internal_default_instance() {
    return reinterpret_cast<const OrderPlaceV1*>(
               &_OrderPlaceV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderPlaceV1& a, OrderPlaceV1& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderPlaceV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderPlaceV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderPlaceV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderPlaceV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderPlaceV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderPlaceV1& from) {
    OrderPlaceV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderPlaceV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.off_chain_updates.OrderPlaceV1";
  }
  protected:
  explicit OrderPlaceV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using OrderPlacementStatus = OrderPlaceV1_OrderPlacementStatus;
  static constexpr OrderPlacementStatus ORDER_PLACEMENT_STATUS_UNSPECIFIED = OrderPlaceV1_OrderPlacementStatus_ORDER_PLACEMENT_STATUS_UNSPECIFIED;
  static constexpr OrderPlacementStatus ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED = OrderPlaceV1_OrderPlacementStatus_ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED;
  static constexpr OrderPlacementStatus ORDER_PLACEMENT_STATUS_OPENED = OrderPlaceV1_OrderPlacementStatus_ORDER_PLACEMENT_STATUS_OPENED;
  static inline bool OrderPlacementStatus_IsValid(int value) {
    return OrderPlaceV1_OrderPlacementStatus_IsValid(value);
  }
  static constexpr OrderPlacementStatus OrderPlacementStatus_MIN = OrderPlaceV1_OrderPlacementStatus_OrderPlacementStatus_MIN;
  static constexpr OrderPlacementStatus OrderPlacementStatus_MAX = OrderPlaceV1_OrderPlacementStatus_OrderPlacementStatus_MAX;
  static constexpr int OrderPlacementStatus_ARRAYSIZE = OrderPlaceV1_OrderPlacementStatus_OrderPlacementStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderPlacementStatus_descriptor() {
    return OrderPlaceV1_OrderPlacementStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& OrderPlacementStatus_Name(T value) {
    return OrderPlaceV1_OrderPlacementStatus_Name(value);
  }
  static inline bool OrderPlacementStatus_Parse(absl::string_view name, OrderPlacementStatus* value) {
    return OrderPlaceV1_OrderPlacementStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
    kPlacementStatusFieldNumber = 2,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
  bool has_order() const;
  void clear_order() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrder* release_order();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* mutable_order();
  void set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& _internal_order() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* unsafe_arena_release_order();
  // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.OrderPlacementStatus placement_status = 2;
  void clear_placement_status() ;
  ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus placement_status() const;
  void set_placement_status(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus value);

  private:
  ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus _internal_placement_status() const;
  void _internal_set_placement_status(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order_;
    int placement_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto;
};// -------------------------------------------------------------------

class OrderRemoveV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1) */ {
 public:
  inline OrderRemoveV1() : OrderRemoveV1(nullptr) {}
  ~OrderRemoveV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderRemoveV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRemoveV1(const OrderRemoveV1& from);
  OrderRemoveV1(OrderRemoveV1&& from) noexcept
    : OrderRemoveV1() {
    *this = ::std::move(from);
  }

  inline OrderRemoveV1& operator=(const OrderRemoveV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRemoveV1& operator=(OrderRemoveV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRemoveV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRemoveV1* internal_default_instance() {
    return reinterpret_cast<const OrderRemoveV1*>(
               &_OrderRemoveV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderRemoveV1& a, OrderRemoveV1& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRemoveV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRemoveV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderRemoveV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderRemoveV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRemoveV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderRemoveV1& from) {
    OrderRemoveV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRemoveV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.off_chain_updates.OrderRemoveV1";
  }
  protected:
  explicit OrderRemoveV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using OrderRemovalStatus = OrderRemoveV1_OrderRemovalStatus;
  static constexpr OrderRemovalStatus ORDER_REMOVAL_STATUS_UNSPECIFIED = OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_UNSPECIFIED;
  static constexpr OrderRemovalStatus ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED = OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED;
  static constexpr OrderRemovalStatus ORDER_REMOVAL_STATUS_CANCELED = OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_CANCELED;
  static constexpr OrderRemovalStatus ORDER_REMOVAL_STATUS_FILLED = OrderRemoveV1_OrderRemovalStatus_ORDER_REMOVAL_STATUS_FILLED;
  static inline bool OrderRemovalStatus_IsValid(int value) {
    return OrderRemoveV1_OrderRemovalStatus_IsValid(value);
  }
  static constexpr OrderRemovalStatus OrderRemovalStatus_MIN = OrderRemoveV1_OrderRemovalStatus_OrderRemovalStatus_MIN;
  static constexpr OrderRemovalStatus OrderRemovalStatus_MAX = OrderRemoveV1_OrderRemovalStatus_OrderRemovalStatus_MAX;
  static constexpr int OrderRemovalStatus_ARRAYSIZE = OrderRemoveV1_OrderRemovalStatus_OrderRemovalStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderRemovalStatus_descriptor() {
    return OrderRemoveV1_OrderRemovalStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& OrderRemovalStatus_Name(T value) {
    return OrderRemoveV1_OrderRemovalStatus_Name(value);
  }
  static inline bool OrderRemovalStatus_Parse(absl::string_view name, OrderRemovalStatus* value) {
    return OrderRemoveV1_OrderRemovalStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemovedOrderIdFieldNumber = 1,
    kReasonFieldNumber = 2,
    kRemovalStatusFieldNumber = 3,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
  bool has_removed_order_id() const;
  void clear_removed_order_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& removed_order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* release_removed_order_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* mutable_removed_order_id();
  void set_allocated_removed_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& _internal_removed_order_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _internal_mutable_removed_order_id();
  public:
  void unsafe_arena_set_allocated_removed_order_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* unsafe_arena_release_removed_order_id();
  // .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
  void clear_reason() ;
  ::dydxprotocol::indexer::shared::OrderRemovalReason reason() const;
  void set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value);

  private:
  ::dydxprotocol::indexer::shared::OrderRemovalReason _internal_reason() const;
  void _internal_set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value);

  public:
  // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.OrderRemovalStatus removal_status = 3;
  void clear_removal_status() ;
  ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus removal_status() const;
  void set_removal_status(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus value);

  private:
  ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus _internal_removal_status() const;
  void _internal_set_removal_status(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id_;
    int reason_;
    int removal_status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1) */ {
 public:
  inline OrderUpdateV1() : OrderUpdateV1(nullptr) {}
  ~OrderUpdateV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OrderUpdateV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateV1(const OrderUpdateV1& from);
  OrderUpdateV1(OrderUpdateV1&& from) noexcept
    : OrderUpdateV1() {
    *this = ::std::move(from);
  }

  inline OrderUpdateV1& operator=(const OrderUpdateV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateV1& operator=(OrderUpdateV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateV1& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdateV1* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateV1*>(
               &_OrderUpdateV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderUpdateV1& a, OrderUpdateV1& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateV1& from) {
    OrderUpdateV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.off_chain_updates.OrderUpdateV1";
  }
  protected:
  explicit OrderUpdateV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kTotalFilledQuantumsFieldNumber = 2,
  };
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1;
  bool has_order_id() const;
  void clear_order_id() ;
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& order_id() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* release_order_id();
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* mutable_order_id();
  void set_allocated_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id);
  private:
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& _internal_order_id() const;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _internal_mutable_order_id();
  public:
  void unsafe_arena_set_allocated_order_id(
      ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id);
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* unsafe_arena_release_order_id();
  // uint64 total_filled_quantums = 2;
  void clear_total_filled_quantums() ;
  ::uint64_t total_filled_quantums() const;
  void set_total_filled_quantums(::uint64_t value);

  private:
  ::uint64_t _internal_total_filled_quantums() const;
  void _internal_set_total_filled_quantums(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id_;
    ::uint64_t total_filled_quantums_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto;
};// -------------------------------------------------------------------

class OffChainUpdateV1 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1) */ {
 public:
  inline OffChainUpdateV1() : OffChainUpdateV1(nullptr) {}
  ~OffChainUpdateV1() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR OffChainUpdateV1(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OffChainUpdateV1(const OffChainUpdateV1& from);
  OffChainUpdateV1(OffChainUpdateV1&& from) noexcept
    : OffChainUpdateV1() {
    *this = ::std::move(from);
  }

  inline OffChainUpdateV1& operator=(const OffChainUpdateV1& from) {
    CopyFrom(from);
    return *this;
  }
  inline OffChainUpdateV1& operator=(OffChainUpdateV1&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OffChainUpdateV1& default_instance() {
    return *internal_default_instance();
  }
  enum UpdateMessageCase {
    kOrderPlace = 1,
    kOrderRemove = 2,
    kOrderUpdate = 3,
    UPDATE_MESSAGE_NOT_SET = 0,
  };

  static inline const OffChainUpdateV1* internal_default_instance() {
    return reinterpret_cast<const OffChainUpdateV1*>(
               &_OffChainUpdateV1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OffChainUpdateV1& a, OffChainUpdateV1& b) {
    a.Swap(&b);
  }
  inline void Swap(OffChainUpdateV1* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OffChainUpdateV1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OffChainUpdateV1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OffChainUpdateV1>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OffChainUpdateV1& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OffChainUpdateV1& from) {
    OffChainUpdateV1::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OffChainUpdateV1* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1";
  }
  protected:
  explicit OffChainUpdateV1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderPlaceFieldNumber = 1,
    kOrderRemoveFieldNumber = 2,
    kOrderUpdateFieldNumber = 3,
  };
  // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1 order_place = 1;
  bool has_order_place() const;
  private:
  bool _internal_has_order_place() const;

  public:
  void clear_order_place() ;
  const ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1& order_place() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* release_order_place();
  ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* mutable_order_place();
  void set_allocated_order_place(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* order_place);
  private:
  const ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1& _internal_order_place() const;
  ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* _internal_mutable_order_place();
  public:
  void unsafe_arena_set_allocated_order_place(
      ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* order_place);
  ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* unsafe_arena_release_order_place();
  // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1 order_remove = 2;
  bool has_order_remove() const;
  private:
  bool _internal_has_order_remove() const;

  public:
  void clear_order_remove() ;
  const ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1& order_remove() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* release_order_remove();
  ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* mutable_order_remove();
  void set_allocated_order_remove(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* order_remove);
  private:
  const ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1& _internal_order_remove() const;
  ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* _internal_mutable_order_remove();
  public:
  void unsafe_arena_set_allocated_order_remove(
      ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* order_remove);
  ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* unsafe_arena_release_order_remove();
  // .dydxprotocol.indexer.off_chain_updates.OrderUpdateV1 order_update = 3;
  bool has_order_update() const;
  private:
  bool _internal_has_order_update() const;

  public:
  void clear_order_update() ;
  const ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1& order_update() const;
  PROTOBUF_NODISCARD ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* release_order_update();
  ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* mutable_order_update();
  void set_allocated_order_update(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* order_update);
  private:
  const ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1& _internal_order_update() const;
  ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* _internal_mutable_order_update();
  public:
  void unsafe_arena_set_allocated_order_update(
      ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* order_update);
  ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* unsafe_arena_release_order_update();
  void clear_update_message();
  UpdateMessageCase update_message_case() const;
  // @@protoc_insertion_point(class_scope:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
 private:
  class _Internal;
  void set_has_order_place();
  void set_has_order_remove();
  void set_has_order_update();

  inline bool has_update_message() const;
  inline void clear_has_update_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union UpdateMessageUnion {
      constexpr UpdateMessageUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* order_place_;
      ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* order_remove_;
      ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* order_update_;
    } update_message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OrderPlaceV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
inline bool OrderPlaceV1::has_order() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& OrderPlaceV1::_internal_order() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrder* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrder_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& OrderPlaceV1::order() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.order)
  return _internal_order();
}
inline void OrderPlaceV1::unsafe_arena_set_allocated_order(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.order)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderPlaceV1::release_order() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderPlaceV1::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.order)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderPlaceV1::_internal_mutable_order() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrder>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrder* OrderPlaceV1::mutable_order() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrder* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.order)
  return _msg;
}
inline void OrderPlaceV1::set_allocated_order(::dydxprotocol::indexer::protocol::v1::IndexerOrder* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.order)
}

// .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.OrderPlacementStatus placement_status = 2;
inline void OrderPlaceV1::clear_placement_status() {
  _impl_.placement_status_ = 0;
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::placement_status() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.placement_status)
  return _internal_placement_status();
}
inline void OrderPlaceV1::set_placement_status(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus value) {
   _internal_set_placement_status(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.placement_status)
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::_internal_placement_status() const {
  return static_cast<::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus>(_impl_.placement_status_);
}
inline void OrderPlaceV1::_internal_set_placement_status(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus value) {
  ;
  _impl_.placement_status_ = value;
}

// -------------------------------------------------------------------

// OrderRemoveV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
inline bool OrderRemoveV1::has_removed_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.removed_order_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& OrderRemoveV1::_internal_removed_order_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* p = _impl_.removed_order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrderId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& OrderRemoveV1::removed_order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removed_order_id)
  return _internal_removed_order_id();
}
inline void OrderRemoveV1::unsafe_arena_set_allocated_removed_order_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_order_id_);
  }
  _impl_.removed_order_id_ = removed_order_id;
  if (removed_order_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removed_order_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderRemoveV1::release_removed_order_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.removed_order_id_;
  _impl_.removed_order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderRemoveV1::unsafe_arena_release_removed_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removed_order_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.removed_order_id_;
  _impl_.removed_order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderRemoveV1::_internal_mutable_removed_order_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.removed_order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrderId>(GetArenaForAllocation());
    _impl_.removed_order_id_ = p;
  }
  return _impl_.removed_order_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderRemoveV1::mutable_removed_order_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _msg = _internal_mutable_removed_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removed_order_id)
  return _msg;
}
inline void OrderRemoveV1::set_allocated_removed_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* removed_order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.removed_order_id_);
  }
  if (removed_order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(removed_order_id));
    if (message_arena != submessage_arena) {
      removed_order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, removed_order_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.removed_order_id_ = removed_order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removed_order_id)
}

// .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
inline void OrderRemoveV1::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::dydxprotocol::indexer::shared::OrderRemovalReason OrderRemoveV1::reason() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.reason)
  return _internal_reason();
}
inline void OrderRemoveV1::set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value) {
   _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.reason)
}
inline ::dydxprotocol::indexer::shared::OrderRemovalReason OrderRemoveV1::_internal_reason() const {
  return static_cast<::dydxprotocol::indexer::shared::OrderRemovalReason>(_impl_.reason_);
}
inline void OrderRemoveV1::_internal_set_reason(::dydxprotocol::indexer::shared::OrderRemovalReason value) {
  ;
  _impl_.reason_ = value;
}

// .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.OrderRemovalStatus removal_status = 3;
inline void OrderRemoveV1::clear_removal_status() {
  _impl_.removal_status_ = 0;
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::removal_status() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removal_status)
  return _internal_removal_status();
}
inline void OrderRemoveV1::set_removal_status(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus value) {
   _internal_set_removal_status(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.removal_status)
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::_internal_removal_status() const {
  return static_cast<::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus>(_impl_.removal_status_);
}
inline void OrderRemoveV1::_internal_set_removal_status(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus value) {
  ;
  _impl_.removal_status_ = value;
}

// -------------------------------------------------------------------

// OrderUpdateV1

// .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1;
inline bool OrderUpdateV1::has_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.order_id_ != nullptr);
  return value;
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& OrderUpdateV1::_internal_order_id() const {
  const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* p = _impl_.order_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&>(
      ::dydxprotocol::indexer::protocol::v1::_IndexerOrderId_default_instance_);
}
inline const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& OrderUpdateV1::order_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.order_id)
  return _internal_order_id();
}
inline void OrderUpdateV1::unsafe_arena_set_allocated_order_id(
    ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  _impl_.order_id_ = order_id;
  if (order_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.order_id)
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderUpdateV1::release_order_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderUpdateV1::unsafe_arena_release_order_id() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.order_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* temp = _impl_.order_id_;
  _impl_.order_id_ = nullptr;
  return temp;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderUpdateV1::_internal_mutable_order_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.order_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::indexer::protocol::v1::IndexerOrderId>(GetArenaForAllocation());
    _impl_.order_id_ = p;
  }
  return _impl_.order_id_;
}
inline ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* OrderUpdateV1::mutable_order_id() {
  ::dydxprotocol::indexer::protocol::v1::IndexerOrderId* _msg = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.order_id)
  return _msg;
}
inline void OrderUpdateV1::set_allocated_order_id(::dydxprotocol::indexer::protocol::v1::IndexerOrderId* order_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_id_);
  }
  if (order_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_id));
    if (message_arena != submessage_arena) {
      order_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.order_id_ = order_id;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.order_id)
}

// uint64 total_filled_quantums = 2;
inline void OrderUpdateV1::clear_total_filled_quantums() {
  _impl_.total_filled_quantums_ = ::uint64_t{0u};
}
inline ::uint64_t OrderUpdateV1::total_filled_quantums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.total_filled_quantums)
  return _internal_total_filled_quantums();
}
inline void OrderUpdateV1::set_total_filled_quantums(::uint64_t value) {
  _internal_set_total_filled_quantums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1.total_filled_quantums)
}
inline ::uint64_t OrderUpdateV1::_internal_total_filled_quantums() const {
  return _impl_.total_filled_quantums_;
}
inline void OrderUpdateV1::_internal_set_total_filled_quantums(::uint64_t value) {
  ;
  _impl_.total_filled_quantums_ = value;
}

// -------------------------------------------------------------------

// OffChainUpdateV1

// .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1 order_place = 1;
inline bool OffChainUpdateV1::has_order_place() const {
  return update_message_case() == kOrderPlace;
}
inline bool OffChainUpdateV1::_internal_has_order_place() const {
  return update_message_case() == kOrderPlace;
}
inline void OffChainUpdateV1::set_has_order_place() {
  _impl_._oneof_case_[0] = kOrderPlace;
}
inline void OffChainUpdateV1::clear_order_place() {
  if (update_message_case() == kOrderPlace) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_message_.order_place_;
    }
    clear_has_update_message();
  }
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* OffChainUpdateV1::release_order_place() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_place)
  if (update_message_case() == kOrderPlace) {
    clear_has_update_message();
    ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* temp = _impl_.update_message_.order_place_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_message_.order_place_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1& OffChainUpdateV1::_internal_order_place() const {
  return update_message_case() == kOrderPlace
      ? *_impl_.update_message_.order_place_
      : reinterpret_cast<::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1&>(::dydxprotocol::indexer::off_chain_updates::_OrderPlaceV1_default_instance_);
}
inline const ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1& OffChainUpdateV1::order_place() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_place)
  return _internal_order_place();
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* OffChainUpdateV1::unsafe_arena_release_order_place() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_place)
  if (update_message_case() == kOrderPlace) {
    clear_has_update_message();
    ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* temp = _impl_.update_message_.order_place_;
    _impl_.update_message_.order_place_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OffChainUpdateV1::unsafe_arena_set_allocated_order_place(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* order_place) {
  clear_update_message();
  if (order_place) {
    set_has_order_place();
    _impl_.update_message_.order_place_ = order_place;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_place)
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* OffChainUpdateV1::_internal_mutable_order_place() {
  if (update_message_case() != kOrderPlace) {
    clear_update_message();
    set_has_order_place();
    _impl_.update_message_.order_place_ = CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1 >(GetArenaForAllocation());
  }
  return _impl_.update_message_.order_place_;
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* OffChainUpdateV1::mutable_order_place() {
  ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* _msg = _internal_mutable_order_place();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_place)
  return _msg;
}

// .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1 order_remove = 2;
inline bool OffChainUpdateV1::has_order_remove() const {
  return update_message_case() == kOrderRemove;
}
inline bool OffChainUpdateV1::_internal_has_order_remove() const {
  return update_message_case() == kOrderRemove;
}
inline void OffChainUpdateV1::set_has_order_remove() {
  _impl_._oneof_case_[0] = kOrderRemove;
}
inline void OffChainUpdateV1::clear_order_remove() {
  if (update_message_case() == kOrderRemove) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_message_.order_remove_;
    }
    clear_has_update_message();
  }
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* OffChainUpdateV1::release_order_remove() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_remove)
  if (update_message_case() == kOrderRemove) {
    clear_has_update_message();
    ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* temp = _impl_.update_message_.order_remove_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_message_.order_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1& OffChainUpdateV1::_internal_order_remove() const {
  return update_message_case() == kOrderRemove
      ? *_impl_.update_message_.order_remove_
      : reinterpret_cast<::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1&>(::dydxprotocol::indexer::off_chain_updates::_OrderRemoveV1_default_instance_);
}
inline const ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1& OffChainUpdateV1::order_remove() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_remove)
  return _internal_order_remove();
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* OffChainUpdateV1::unsafe_arena_release_order_remove() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_remove)
  if (update_message_case() == kOrderRemove) {
    clear_has_update_message();
    ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* temp = _impl_.update_message_.order_remove_;
    _impl_.update_message_.order_remove_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OffChainUpdateV1::unsafe_arena_set_allocated_order_remove(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* order_remove) {
  clear_update_message();
  if (order_remove) {
    set_has_order_remove();
    _impl_.update_message_.order_remove_ = order_remove;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_remove)
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* OffChainUpdateV1::_internal_mutable_order_remove() {
  if (update_message_case() != kOrderRemove) {
    clear_update_message();
    set_has_order_remove();
    _impl_.update_message_.order_remove_ = CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1 >(GetArenaForAllocation());
  }
  return _impl_.update_message_.order_remove_;
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* OffChainUpdateV1::mutable_order_remove() {
  ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* _msg = _internal_mutable_order_remove();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_remove)
  return _msg;
}

// .dydxprotocol.indexer.off_chain_updates.OrderUpdateV1 order_update = 3;
inline bool OffChainUpdateV1::has_order_update() const {
  return update_message_case() == kOrderUpdate;
}
inline bool OffChainUpdateV1::_internal_has_order_update() const {
  return update_message_case() == kOrderUpdate;
}
inline void OffChainUpdateV1::set_has_order_update() {
  _impl_._oneof_case_[0] = kOrderUpdate;
}
inline void OffChainUpdateV1::clear_order_update() {
  if (update_message_case() == kOrderUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_message_.order_update_;
    }
    clear_has_update_message();
  }
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* OffChainUpdateV1::release_order_update() {
  // @@protoc_insertion_point(field_release:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_update)
  if (update_message_case() == kOrderUpdate) {
    clear_has_update_message();
    ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* temp = _impl_.update_message_.order_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_message_.order_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1& OffChainUpdateV1::_internal_order_update() const {
  return update_message_case() == kOrderUpdate
      ? *_impl_.update_message_.order_update_
      : reinterpret_cast<::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1&>(::dydxprotocol::indexer::off_chain_updates::_OrderUpdateV1_default_instance_);
}
inline const ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1& OffChainUpdateV1::order_update() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_update)
  return _internal_order_update();
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* OffChainUpdateV1::unsafe_arena_release_order_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_update)
  if (update_message_case() == kOrderUpdate) {
    clear_has_update_message();
    ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* temp = _impl_.update_message_.order_update_;
    _impl_.update_message_.order_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OffChainUpdateV1::unsafe_arena_set_allocated_order_update(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* order_update) {
  clear_update_message();
  if (order_update) {
    set_has_order_update();
    _impl_.update_message_.order_update_ = order_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_update)
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* OffChainUpdateV1::_internal_mutable_order_update() {
  if (update_message_case() != kOrderUpdate) {
    clear_update_message();
    set_has_order_update();
    _impl_.update_message_.order_update_ = CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1 >(GetArenaForAllocation());
  }
  return _impl_.update_message_.order_update_;
}
inline ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* OffChainUpdateV1::mutable_order_update() {
  ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* _msg = _internal_mutable_order_update();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_update)
  return _msg;
}

inline bool OffChainUpdateV1::has_update_message() const {
  return update_message_case() != UPDATE_MESSAGE_NOT_SET;
}
inline void OffChainUpdateV1::clear_has_update_message() {
  _impl_._oneof_case_[0] = UPDATE_MESSAGE_NOT_SET;
}
inline OffChainUpdateV1::UpdateMessageCase OffChainUpdateV1::update_message_case() const {
  return OffChainUpdateV1::UpdateMessageCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace off_chain_updates
}  // namespace indexer
}  // namespace dydxprotocol


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus>() {
  return ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus_descriptor();
}
template <>
struct is_proto_enum<::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus>() {
  return ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_2epb_2eh
