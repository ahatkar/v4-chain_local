// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/indexer/off_chain_updates/off_chain_updates.proto

#include "dydxprotocol/indexer/off_chain_updates/off_chain_updates.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace indexer {
namespace off_chain_updates {
template <typename>
PROTOBUF_CONSTEXPR OrderPlaceV1::OrderPlaceV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_)*/nullptr
  , /*decltype(_impl_.placement_status_)*/ 0
} {}
struct OrderPlaceV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderPlaceV1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderPlaceV1DefaultTypeInternal() {}
  union {
    OrderPlaceV1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderPlaceV1DefaultTypeInternal _OrderPlaceV1_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderRemoveV1::OrderRemoveV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removed_order_id_)*/nullptr
  , /*decltype(_impl_.reason_)*/ 0

  , /*decltype(_impl_.removal_status_)*/ 0
} {}
struct OrderRemoveV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderRemoveV1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderRemoveV1DefaultTypeInternal() {}
  union {
    OrderRemoveV1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderRemoveV1DefaultTypeInternal _OrderRemoveV1_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OrderUpdateV1::OrderUpdateV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.order_id_)*/nullptr
  , /*decltype(_impl_.total_filled_quantums_)*/ ::uint64_t{0u}
} {}
struct OrderUpdateV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateV1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateV1DefaultTypeInternal() {}
  union {
    OrderUpdateV1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateV1DefaultTypeInternal _OrderUpdateV1_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR OffChainUpdateV1::OffChainUpdateV1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_message_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OffChainUpdateV1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR OffChainUpdateV1DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OffChainUpdateV1DefaultTypeInternal() {}
  union {
    OffChainUpdateV1 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OffChainUpdateV1DefaultTypeInternal _OffChainUpdateV1_default_instance_;
}  // namespace off_chain_updates
}  // namespace indexer
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1, _impl_.order_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1, _impl_.placement_status_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1, _impl_.removed_order_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1, _impl_.removal_status_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1, _impl_.order_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1, _impl_.total_filled_quantums_),
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1, _impl_.update_message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1)},
        { 12, 23, -1, sizeof(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1)},
        { 26, 36, -1, sizeof(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1)},
        { 38, -1, -1, sizeof(::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::indexer::off_chain_updates::_OrderPlaceV1_default_instance_._instance,
    &::dydxprotocol::indexer::off_chain_updates::_OrderRemoveV1_default_instance_._instance,
    &::dydxprotocol::indexer::off_chain_updates::_OrderUpdateV1_default_instance_._instance,
    &::dydxprotocol::indexer::off_chain_updates::_OffChainUpdateV1_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n>dydxprotocol/indexer/off_chain_updates"
    "/off_chain_updates.proto\022&dydxprotocol.i"
    "ndexer.off_chain_updates\0320dydxprotocol/i"
    "ndexer/shared/removal_reason.proto\032+dydx"
    "protocol/indexer/protocol/v1/clob.proto\""
    "\305\002\n\014OrderPlaceV1\022=\n\005order\030\001 \001(\0132..dydxpr"
    "otocol.indexer.protocol.v1.IndexerOrder\022"
    "c\n\020placement_status\030\002 \001(\0162I.dydxprotocol"
    ".indexer.off_chain_updates.OrderPlaceV1."
    "OrderPlacementStatus\"\220\001\n\024OrderPlacementS"
    "tatus\022&\n\"ORDER_PLACEMENT_STATUS_UNSPECIF"
    "IED\020\000\022-\n)ORDER_PLACEMENT_STATUS_BEST_EFF"
    "ORT_OPENED\020\001\022!\n\035ORDER_PLACEMENT_STATUS_O"
    "PENED\020\002\"\256\003\n\rOrderRemoveV1\022J\n\020removed_ord"
    "er_id\030\001 \001(\01320.dydxprotocol.indexer.proto"
    "col.v1.IndexerOrderId\022\?\n\006reason\030\002 \001(\0162/."
    "dydxprotocol.indexer.shared.OrderRemoval"
    "Reason\022`\n\016removal_status\030\003 \001(\0162H.dydxpro"
    "tocol.indexer.off_chain_updates.OrderRem"
    "oveV1.OrderRemovalStatus\"\255\001\n\022OrderRemova"
    "lStatus\022$\n ORDER_REMOVAL_STATUS_UNSPECIF"
    "IED\020\000\022-\n)ORDER_REMOVAL_STATUS_BEST_EFFOR"
    "T_CANCELED\020\001\022!\n\035ORDER_REMOVAL_STATUS_CAN"
    "CELED\020\002\022\037\n\033ORDER_REMOVAL_STATUS_FILLED\020\003"
    "\"r\n\rOrderUpdateV1\022B\n\010order_id\030\001 \001(\01320.dy"
    "dxprotocol.indexer.protocol.v1.IndexerOr"
    "derId\022\035\n\025total_filled_quantums\030\002 \001(\004\"\217\002\n"
    "\020OffChainUpdateV1\022K\n\013order_place\030\001 \001(\01324"
    ".dydxprotocol.indexer.off_chain_updates."
    "OrderPlaceV1H\000\022M\n\014order_remove\030\002 \001(\01325.d"
    "ydxprotocol.indexer.off_chain_updates.Or"
    "derRemoveV1H\000\022M\n\014order_update\030\003 \001(\01325.dy"
    "dxprotocol.indexer.off_chain_updates.Ord"
    "erUpdateV1H\000B\020\n\016update_messageBEZCgithub"
    ".com/dydxprotocol/v4-chain/protocol/inde"
    "xer/off_chain_updatesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_deps[2] =
    {
        &::descriptor_table_dydxprotocol_2findexer_2fprotocol_2fv1_2fclob_2eproto,
        &::descriptor_table_dydxprotocol_2findexer_2fshared_2fremoval_5freason_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto = {
    false,
    false,
    1429,
    descriptor_table_protodef_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto,
    "dydxprotocol/indexer/off_chain_updates/off_chain_updates.proto",
    &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_once,
    descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto::offsets,
    file_level_metadata_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto,
    file_level_enum_descriptors_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto,
    file_level_service_descriptors_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto(&descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto);
namespace dydxprotocol {
namespace indexer {
namespace off_chain_updates {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderPlaceV1_OrderPlacementStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[0];
}
bool OrderPlaceV1_OrderPlacementStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::ORDER_PLACEMENT_STATUS_UNSPECIFIED;
constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::ORDER_PLACEMENT_STATUS_BEST_EFFORT_OPENED;
constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::ORDER_PLACEMENT_STATUS_OPENED;
constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::OrderPlacementStatus_MIN;
constexpr OrderPlaceV1_OrderPlacementStatus OrderPlaceV1::OrderPlacementStatus_MAX;
constexpr int OrderPlaceV1::OrderPlacementStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderRemoveV1_OrderRemovalStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto);
  return file_level_enum_descriptors_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[1];
}
bool OrderRemoveV1_OrderRemovalStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::ORDER_REMOVAL_STATUS_UNSPECIFIED;
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::ORDER_REMOVAL_STATUS_BEST_EFFORT_CANCELED;
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::ORDER_REMOVAL_STATUS_CANCELED;
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::ORDER_REMOVAL_STATUS_FILLED;
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::OrderRemovalStatus_MIN;
constexpr OrderRemoveV1_OrderRemovalStatus OrderRemoveV1::OrderRemovalStatus_MAX;
constexpr int OrderRemoveV1::OrderRemovalStatus_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class OrderPlaceV1::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderPlaceV1>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderPlaceV1, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerOrder& order(const OrderPlaceV1* msg);
  static void set_has_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerOrder&
OrderPlaceV1::_Internal::order(const OrderPlaceV1* msg) {
  return *msg->_impl_.order_;
}
void OrderPlaceV1::clear_order() {
  if (_impl_.order_ != nullptr) _impl_.order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OrderPlaceV1::OrderPlaceV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
}
OrderPlaceV1::OrderPlaceV1(const OrderPlaceV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderPlaceV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.placement_status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_ = new ::dydxprotocol::indexer::protocol::v1::IndexerOrder(*from._impl_.order_);
  }
  _this->_impl_.placement_status_ = from._impl_.placement_status_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
}

inline void OrderPlaceV1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_){nullptr}
    , decltype(_impl_.placement_status_) { 0 }

  };
}

OrderPlaceV1::~OrderPlaceV1() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderPlaceV1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_;
}

void OrderPlaceV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderPlaceV1::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_ != nullptr);
    _impl_.order_->Clear();
  }
  _impl_.placement_status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderPlaceV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.OrderPlacementStatus placement_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_placement_status(static_cast<::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1_OrderPlacementStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderPlaceV1::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order(this),
        _Internal::order(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.OrderPlacementStatus placement_status = 2;
  if (this->_internal_placement_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_placement_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  return target;
}

::size_t OrderPlaceV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.indexer.protocol.v1.IndexerOrder order = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_);
  }

  // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1.OrderPlacementStatus placement_status = 2;
  if (this->_internal_placement_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_placement_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderPlaceV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderPlaceV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderPlaceV1::GetClassData() const { return &_class_data_; }


void OrderPlaceV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderPlaceV1*>(&to_msg);
  auto& from = static_cast<const OrderPlaceV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order()->::dydxprotocol::indexer::protocol::v1::IndexerOrder::MergeFrom(
        from._internal_order());
  }
  if (from._internal_placement_status() != 0) {
    _this->_internal_set_placement_status(from._internal_placement_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderPlaceV1::CopyFrom(const OrderPlaceV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.off_chain_updates.OrderPlaceV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPlaceV1::IsInitialized() const {
  return true;
}

void OrderPlaceV1::InternalSwap(OrderPlaceV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderPlaceV1, _impl_.placement_status_)
      + sizeof(OrderPlaceV1::_impl_.placement_status_)
      - PROTOBUF_FIELD_OFFSET(OrderPlaceV1, _impl_.order_)>(
          reinterpret_cast<char*>(&_impl_.order_),
          reinterpret_cast<char*>(&other->_impl_.order_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderPlaceV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[0]);
}
// ===================================================================

class OrderRemoveV1::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderRemoveV1>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderRemoveV1, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& removed_order_id(const OrderRemoveV1* msg);
  static void set_has_removed_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&
OrderRemoveV1::_Internal::removed_order_id(const OrderRemoveV1* msg) {
  return *msg->_impl_.removed_order_id_;
}
void OrderRemoveV1::clear_removed_order_id() {
  if (_impl_.removed_order_id_ != nullptr) _impl_.removed_order_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OrderRemoveV1::OrderRemoveV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
}
OrderRemoveV1::OrderRemoveV1(const OrderRemoveV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderRemoveV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_order_id_){nullptr}
    , decltype(_impl_.reason_) {}

    , decltype(_impl_.removal_status_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.removed_order_id_ = new ::dydxprotocol::indexer::protocol::v1::IndexerOrderId(*from._impl_.removed_order_id_);
  }
  ::memcpy(&_impl_.reason_, &from._impl_.reason_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.removal_status_) -
    reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.removal_status_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
}

inline void OrderRemoveV1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_order_id_){nullptr}
    , decltype(_impl_.reason_) { 0 }

    , decltype(_impl_.removal_status_) { 0 }

  };
}

OrderRemoveV1::~OrderRemoveV1() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderRemoveV1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.removed_order_id_;
}

void OrderRemoveV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderRemoveV1::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.removed_order_id_ != nullptr);
    _impl_.removed_order_id_->Clear();
  }
  ::memset(&_impl_.reason_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.removal_status_) -
      reinterpret_cast<char*>(&_impl_.reason_)) + sizeof(_impl_.removal_status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderRemoveV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_order_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::dydxprotocol::indexer::shared::OrderRemovalReason>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.OrderRemovalStatus removal_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_removal_status(static_cast<::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1_OrderRemovalStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderRemoveV1::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::removed_order_id(this),
        _Internal::removed_order_id(this).GetCachedSize(), target, stream);
  }

  // .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_reason(), target);
  }

  // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.OrderRemovalStatus removal_status = 3;
  if (this->_internal_removal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_removal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  return target;
}

::size_t OrderRemoveV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId removed_order_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removed_order_id_);
  }

  // .dydxprotocol.indexer.shared.OrderRemovalReason reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1.OrderRemovalStatus removal_status = 3;
  if (this->_internal_removal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_removal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderRemoveV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderRemoveV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderRemoveV1::GetClassData() const { return &_class_data_; }


void OrderRemoveV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderRemoveV1*>(&to_msg);
  auto& from = static_cast<const OrderRemoveV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_removed_order_id()->::dydxprotocol::indexer::protocol::v1::IndexerOrderId::MergeFrom(
        from._internal_removed_order_id());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_removal_status() != 0) {
    _this->_internal_set_removal_status(from._internal_removal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderRemoveV1::CopyFrom(const OrderRemoveV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.off_chain_updates.OrderRemoveV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRemoveV1::IsInitialized() const {
  return true;
}

void OrderRemoveV1::InternalSwap(OrderRemoveV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderRemoveV1, _impl_.removal_status_)
      + sizeof(OrderRemoveV1::_impl_.removal_status_)
      - PROTOBUF_FIELD_OFFSET(OrderRemoveV1, _impl_.removed_order_id_)>(
          reinterpret_cast<char*>(&_impl_.removed_order_id_),
          reinterpret_cast<char*>(&other->_impl_.removed_order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderRemoveV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[1]);
}
// ===================================================================

class OrderUpdateV1::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderUpdateV1>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderUpdateV1, _impl_._has_bits_);
  static const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId& order_id(const OrderUpdateV1* msg);
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::indexer::protocol::v1::IndexerOrderId&
OrderUpdateV1::_Internal::order_id(const OrderUpdateV1* msg) {
  return *msg->_impl_.order_id_;
}
void OrderUpdateV1::clear_order_id() {
  if (_impl_.order_id_ != nullptr) _impl_.order_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OrderUpdateV1::OrderUpdateV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
}
OrderUpdateV1::OrderUpdateV1(const OrderUpdateV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.total_filled_quantums_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.order_id_ = new ::dydxprotocol::indexer::protocol::v1::IndexerOrderId(*from._impl_.order_id_);
  }
  _this->_impl_.total_filled_quantums_ = from._impl_.total_filled_quantums_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
}

inline void OrderUpdateV1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.order_id_){nullptr}
    , decltype(_impl_.total_filled_quantums_) { ::uint64_t{0u} }

  };
}

OrderUpdateV1::~OrderUpdateV1() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdateV1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.order_id_;
}

void OrderUpdateV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateV1::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.order_id_ != nullptr);
    _impl_.order_id_->Clear();
  }
  _impl_.total_filled_quantums_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 total_filled_quantums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.total_filled_quantums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateV1::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::order_id(this),
        _Internal::order_id(this).GetCachedSize(), target, stream);
  }

  // uint64 total_filled_quantums = 2;
  if (this->_internal_total_filled_quantums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_total_filled_quantums(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  return target;
}

::size_t OrderUpdateV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dydxprotocol.indexer.protocol.v1.IndexerOrderId order_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.order_id_);
  }

  // uint64 total_filled_quantums = 2;
  if (this->_internal_total_filled_quantums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_total_filled_quantums());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateV1::GetClassData() const { return &_class_data_; }


void OrderUpdateV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateV1*>(&to_msg);
  auto& from = static_cast<const OrderUpdateV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_order_id()->::dydxprotocol::indexer::protocol::v1::IndexerOrderId::MergeFrom(
        from._internal_order_id());
  }
  if (from._internal_total_filled_quantums() != 0) {
    _this->_internal_set_total_filled_quantums(from._internal_total_filled_quantums());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateV1::CopyFrom(const OrderUpdateV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.off_chain_updates.OrderUpdateV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateV1::IsInitialized() const {
  return true;
}

void OrderUpdateV1::InternalSwap(OrderUpdateV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdateV1, _impl_.total_filled_quantums_)
      + sizeof(OrderUpdateV1::_impl_.total_filled_quantums_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdateV1, _impl_.order_id_)>(
          reinterpret_cast<char*>(&_impl_.order_id_),
          reinterpret_cast<char*>(&other->_impl_.order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[2]);
}
// ===================================================================

class OffChainUpdateV1::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1, _impl_._oneof_case_);
  static const ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1& order_place(const OffChainUpdateV1* msg);
  static const ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1& order_remove(const OffChainUpdateV1* msg);
  static const ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1& order_update(const OffChainUpdateV1* msg);
};

const ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1&
OffChainUpdateV1::_Internal::order_place(const OffChainUpdateV1* msg) {
  return *msg->_impl_.update_message_.order_place_;
}
const ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1&
OffChainUpdateV1::_Internal::order_remove(const OffChainUpdateV1* msg) {
  return *msg->_impl_.update_message_.order_remove_;
}
const ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1&
OffChainUpdateV1::_Internal::order_update(const OffChainUpdateV1* msg) {
  return *msg->_impl_.update_message_.order_update_;
}
void OffChainUpdateV1::set_allocated_order_place(::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1* order_place) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_message();
  if (order_place) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_place);
    if (message_arena != submessage_arena) {
      order_place = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_place, submessage_arena);
    }
    set_has_order_place();
    _impl_.update_message_.order_place_ = order_place;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_place)
}
void OffChainUpdateV1::set_allocated_order_remove(::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1* order_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_message();
  if (order_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_remove);
    if (message_arena != submessage_arena) {
      order_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_remove, submessage_arena);
    }
    set_has_order_remove();
    _impl_.update_message_.order_remove_ = order_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_remove)
}
void OffChainUpdateV1::set_allocated_order_update(::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1* order_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update_message();
  if (order_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_update);
    if (message_arena != submessage_arena) {
      order_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update, submessage_arena);
    }
    set_has_order_update();
    _impl_.update_message_.order_update_ = order_update;
  }
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1.order_update)
}
OffChainUpdateV1::OffChainUpdateV1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
}
OffChainUpdateV1::OffChainUpdateV1(const OffChainUpdateV1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OffChainUpdateV1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_update_message();
  switch (from.update_message_case()) {
    case kOrderPlace: {
      _this->_internal_mutable_order_place()->::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1::MergeFrom(
          from._internal_order_place());
      break;
    }
    case kOrderRemove: {
      _this->_internal_mutable_order_remove()->::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1::MergeFrom(
          from._internal_order_remove());
      break;
    }
    case kOrderUpdate: {
      _this->_internal_mutable_order_update()->::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1::MergeFrom(
          from._internal_order_update());
      break;
    }
    case UPDATE_MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
}

inline void OffChainUpdateV1::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.update_message_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_update_message();
}

OffChainUpdateV1::~OffChainUpdateV1() {
  // @@protoc_insertion_point(destructor:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OffChainUpdateV1::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_update_message()) {
    clear_update_message();
  }
}

void OffChainUpdateV1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OffChainUpdateV1::clear_update_message() {
// @@protoc_insertion_point(one_of_clear_start:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  switch (update_message_case()) {
    case kOrderPlace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_message_.order_place_;
      }
      break;
    }
    case kOrderRemove: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_message_.order_remove_;
      }
      break;
    }
    case kOrderUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_message_.order_update_;
      }
      break;
    }
    case UPDATE_MESSAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = UPDATE_MESSAGE_NOT_SET;
}


void OffChainUpdateV1::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OffChainUpdateV1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1 order_place = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_place(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1 order_remove = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_remove(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .dydxprotocol.indexer.off_chain_updates.OrderUpdateV1 order_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OffChainUpdateV1::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (update_message_case()) {
    case kOrderPlace: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::order_place(this),
          _Internal::order_place(this).GetCachedSize(), target, stream);
      break;
    }
    case kOrderRemove: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::order_remove(this),
          _Internal::order_remove(this).GetCachedSize(), target, stream);
      break;
    }
    case kOrderUpdate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::order_update(this),
          _Internal::order_update(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  return target;
}

::size_t OffChainUpdateV1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_message_case()) {
    // .dydxprotocol.indexer.off_chain_updates.OrderPlaceV1 order_place = 1;
    case kOrderPlace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_message_.order_place_);
      break;
    }
    // .dydxprotocol.indexer.off_chain_updates.OrderRemoveV1 order_remove = 2;
    case kOrderRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_message_.order_remove_);
      break;
    }
    // .dydxprotocol.indexer.off_chain_updates.OrderUpdateV1 order_update = 3;
    case kOrderUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_message_.order_update_);
      break;
    }
    case UPDATE_MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OffChainUpdateV1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OffChainUpdateV1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OffChainUpdateV1::GetClassData() const { return &_class_data_; }


void OffChainUpdateV1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OffChainUpdateV1*>(&to_msg);
  auto& from = static_cast<const OffChainUpdateV1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_message_case()) {
    case kOrderPlace: {
      _this->_internal_mutable_order_place()->::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1::MergeFrom(
          from._internal_order_place());
      break;
    }
    case kOrderRemove: {
      _this->_internal_mutable_order_remove()->::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1::MergeFrom(
          from._internal_order_remove());
      break;
    }
    case kOrderUpdate: {
      _this->_internal_mutable_order_update()->::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1::MergeFrom(
          from._internal_order_update());
      break;
    }
    case UPDATE_MESSAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OffChainUpdateV1::CopyFrom(const OffChainUpdateV1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.indexer.off_chain_updates.OffChainUpdateV1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OffChainUpdateV1::IsInitialized() const {
  return true;
}

void OffChainUpdateV1::InternalSwap(OffChainUpdateV1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.update_message_, other->_impl_.update_message_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OffChainUpdateV1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_getter, &descriptor_table_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto_once,
      file_level_metadata_dydxprotocol_2findexer_2foff_5fchain_5fupdates_2foff_5fchain_5fupdates_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace off_chain_updates
}  // namespace indexer
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::off_chain_updates::OrderPlaceV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::off_chain_updates::OrderRemoveV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::off_chain_updates::OrderUpdateV1 >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1*
Arena::CreateMaybeMessage< ::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::indexer::off_chain_updates::OffChainUpdateV1 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
