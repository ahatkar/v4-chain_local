// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/subaccounts/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos_proto/cosmos.pb.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "dydxprotocol/subaccounts/subaccount.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fsubaccounts_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fsubaccounts_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fsubaccounts_2fquery_2eproto;
namespace dydxprotocol {
namespace subaccounts {
class QueryAllSubaccountRequest;
struct QueryAllSubaccountRequestDefaultTypeInternal;
extern QueryAllSubaccountRequestDefaultTypeInternal _QueryAllSubaccountRequest_default_instance_;
class QueryGetSubaccountRequest;
struct QueryGetSubaccountRequestDefaultTypeInternal;
extern QueryGetSubaccountRequestDefaultTypeInternal _QueryGetSubaccountRequest_default_instance_;
class QuerySubaccountAllResponse;
struct QuerySubaccountAllResponseDefaultTypeInternal;
extern QuerySubaccountAllResponseDefaultTypeInternal _QuerySubaccountAllResponse_default_instance_;
class QuerySubaccountResponse;
struct QuerySubaccountResponseDefaultTypeInternal;
extern QuerySubaccountResponseDefaultTypeInternal _QuerySubaccountResponse_default_instance_;
}  // namespace subaccounts
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::subaccounts::QueryAllSubaccountRequest* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::QueryAllSubaccountRequest>(Arena*);
template <>
::dydxprotocol::subaccounts::QueryGetSubaccountRequest* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::QueryGetSubaccountRequest>(Arena*);
template <>
::dydxprotocol::subaccounts::QuerySubaccountAllResponse* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::QuerySubaccountAllResponse>(Arena*);
template <>
::dydxprotocol::subaccounts::QuerySubaccountResponse* Arena::CreateMaybeMessage<::dydxprotocol::subaccounts::QuerySubaccountResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace subaccounts {

// ===================================================================


// -------------------------------------------------------------------

class QueryGetSubaccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.QueryGetSubaccountRequest) */ {
 public:
  inline QueryGetSubaccountRequest() : QueryGetSubaccountRequest(nullptr) {}
  ~QueryGetSubaccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryGetSubaccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryGetSubaccountRequest(const QueryGetSubaccountRequest& from);
  QueryGetSubaccountRequest(QueryGetSubaccountRequest&& from) noexcept
    : QueryGetSubaccountRequest() {
    *this = ::std::move(from);
  }

  inline QueryGetSubaccountRequest& operator=(const QueryGetSubaccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryGetSubaccountRequest& operator=(QueryGetSubaccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryGetSubaccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryGetSubaccountRequest* internal_default_instance() {
    return reinterpret_cast<const QueryGetSubaccountRequest*>(
               &_QueryGetSubaccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryGetSubaccountRequest& a, QueryGetSubaccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryGetSubaccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryGetSubaccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryGetSubaccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryGetSubaccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryGetSubaccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryGetSubaccountRequest& from) {
    QueryGetSubaccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryGetSubaccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.subaccounts.QueryGetSubaccountRequest";
  }
  protected:
  explicit QueryGetSubaccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // uint32 number = 2;
  void clear_number() ;
  ::uint32_t number() const;
  void set_number(::uint32_t value);

  private:
  ::uint32_t _internal_number() const;
  void _internal_set_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.QueryGetSubaccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::uint32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySubaccountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.QuerySubaccountResponse) */ {
 public:
  inline QuerySubaccountResponse() : QuerySubaccountResponse(nullptr) {}
  ~QuerySubaccountResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySubaccountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySubaccountResponse(const QuerySubaccountResponse& from);
  QuerySubaccountResponse(QuerySubaccountResponse&& from) noexcept
    : QuerySubaccountResponse() {
    *this = ::std::move(from);
  }

  inline QuerySubaccountResponse& operator=(const QuerySubaccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySubaccountResponse& operator=(QuerySubaccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySubaccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySubaccountResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySubaccountResponse*>(
               &_QuerySubaccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QuerySubaccountResponse& a, QuerySubaccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySubaccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySubaccountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySubaccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySubaccountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySubaccountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySubaccountResponse& from) {
    QuerySubaccountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySubaccountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.subaccounts.QuerySubaccountResponse";
  }
  protected:
  explicit QuerySubaccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountFieldNumber = 1,
  };
  // .dydxprotocol.subaccounts.Subaccount subaccount = 1 [(.gogoproto.nullable) = false];
  bool has_subaccount() const;
  void clear_subaccount() ;
  const ::dydxprotocol::subaccounts::Subaccount& subaccount() const;
  PROTOBUF_NODISCARD ::dydxprotocol::subaccounts::Subaccount* release_subaccount();
  ::dydxprotocol::subaccounts::Subaccount* mutable_subaccount();
  void set_allocated_subaccount(::dydxprotocol::subaccounts::Subaccount* subaccount);
  private:
  const ::dydxprotocol::subaccounts::Subaccount& _internal_subaccount() const;
  ::dydxprotocol::subaccounts::Subaccount* _internal_mutable_subaccount();
  public:
  void unsafe_arena_set_allocated_subaccount(
      ::dydxprotocol::subaccounts::Subaccount* subaccount);
  ::dydxprotocol::subaccounts::Subaccount* unsafe_arena_release_subaccount();
  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.QuerySubaccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::subaccounts::Subaccount* subaccount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllSubaccountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.QueryAllSubaccountRequest) */ {
 public:
  inline QueryAllSubaccountRequest() : QueryAllSubaccountRequest(nullptr) {}
  ~QueryAllSubaccountRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllSubaccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllSubaccountRequest(const QueryAllSubaccountRequest& from);
  QueryAllSubaccountRequest(QueryAllSubaccountRequest&& from) noexcept
    : QueryAllSubaccountRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllSubaccountRequest& operator=(const QueryAllSubaccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllSubaccountRequest& operator=(QueryAllSubaccountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllSubaccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllSubaccountRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllSubaccountRequest*>(
               &_QueryAllSubaccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllSubaccountRequest& a, QueryAllSubaccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllSubaccountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllSubaccountRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllSubaccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllSubaccountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllSubaccountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllSubaccountRequest& from) {
    QueryAllSubaccountRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllSubaccountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.subaccounts.QueryAllSubaccountRequest";
  }
  protected:
  explicit QueryAllSubaccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.QueryAllSubaccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fquery_2eproto;
};// -------------------------------------------------------------------

class QuerySubaccountAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.subaccounts.QuerySubaccountAllResponse) */ {
 public:
  inline QuerySubaccountAllResponse() : QuerySubaccountAllResponse(nullptr) {}
  ~QuerySubaccountAllResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuerySubaccountAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QuerySubaccountAllResponse(const QuerySubaccountAllResponse& from);
  QuerySubaccountAllResponse(QuerySubaccountAllResponse&& from) noexcept
    : QuerySubaccountAllResponse() {
    *this = ::std::move(from);
  }

  inline QuerySubaccountAllResponse& operator=(const QuerySubaccountAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuerySubaccountAllResponse& operator=(QuerySubaccountAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuerySubaccountAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuerySubaccountAllResponse* internal_default_instance() {
    return reinterpret_cast<const QuerySubaccountAllResponse*>(
               &_QuerySubaccountAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QuerySubaccountAllResponse& a, QuerySubaccountAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QuerySubaccountAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuerySubaccountAllResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuerySubaccountAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuerySubaccountAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QuerySubaccountAllResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QuerySubaccountAllResponse& from) {
    QuerySubaccountAllResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuerySubaccountAllResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.subaccounts.QuerySubaccountAllResponse";
  }
  protected:
  explicit QuerySubaccountAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubaccountFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .dydxprotocol.subaccounts.Subaccount subaccount = 1 [(.gogoproto.nullable) = false];
  int subaccount_size() const;
  private:
  int _internal_subaccount_size() const;

  public:
  void clear_subaccount() ;
  ::dydxprotocol::subaccounts::Subaccount* mutable_subaccount(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::Subaccount >*
      mutable_subaccount();
  private:
  const ::dydxprotocol::subaccounts::Subaccount& _internal_subaccount(int index) const;
  ::dydxprotocol::subaccounts::Subaccount* _internal_add_subaccount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::Subaccount>& _internal_subaccount() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::Subaccount>* _internal_mutable_subaccount();
  public:
  const ::dydxprotocol::subaccounts::Subaccount& subaccount(int index) const;
  ::dydxprotocol::subaccounts::Subaccount* add_subaccount();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::Subaccount >&
      subaccount() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.subaccounts.QuerySubaccountAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::Subaccount > subaccount_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fsubaccounts_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryGetSubaccountRequest

// string owner = 1 [(.cosmos_proto.scalar) = "cosmos.AddressString"];
inline void QueryGetSubaccountRequest::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& QueryGetSubaccountRequest::owner() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.QueryGetSubaccountRequest.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryGetSubaccountRequest::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.QueryGetSubaccountRequest.owner)
}
inline std::string* QueryGetSubaccountRequest::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.QueryGetSubaccountRequest.owner)
  return _s;
}
inline const std::string& QueryGetSubaccountRequest::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void QueryGetSubaccountRequest::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryGetSubaccountRequest::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryGetSubaccountRequest::release_owner() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.QueryGetSubaccountRequest.owner)
  return _impl_.owner_.Release();
}
inline void QueryGetSubaccountRequest::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.QueryGetSubaccountRequest.owner)
}

// uint32 number = 2;
inline void QueryGetSubaccountRequest::clear_number() {
  _impl_.number_ = 0u;
}
inline ::uint32_t QueryGetSubaccountRequest::number() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.QueryGetSubaccountRequest.number)
  return _internal_number();
}
inline void QueryGetSubaccountRequest::set_number(::uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.subaccounts.QueryGetSubaccountRequest.number)
}
inline ::uint32_t QueryGetSubaccountRequest::_internal_number() const {
  return _impl_.number_;
}
inline void QueryGetSubaccountRequest::_internal_set_number(::uint32_t value) {
  ;
  _impl_.number_ = value;
}

// -------------------------------------------------------------------

// QuerySubaccountResponse

// .dydxprotocol.subaccounts.Subaccount subaccount = 1 [(.gogoproto.nullable) = false];
inline bool QuerySubaccountResponse::has_subaccount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subaccount_ != nullptr);
  return value;
}
inline const ::dydxprotocol::subaccounts::Subaccount& QuerySubaccountResponse::_internal_subaccount() const {
  const ::dydxprotocol::subaccounts::Subaccount* p = _impl_.subaccount_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::subaccounts::Subaccount&>(
      ::dydxprotocol::subaccounts::_Subaccount_default_instance_);
}
inline const ::dydxprotocol::subaccounts::Subaccount& QuerySubaccountResponse::subaccount() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.QuerySubaccountResponse.subaccount)
  return _internal_subaccount();
}
inline void QuerySubaccountResponse::unsafe_arena_set_allocated_subaccount(
    ::dydxprotocol::subaccounts::Subaccount* subaccount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_);
  }
  _impl_.subaccount_ = subaccount;
  if (subaccount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.subaccounts.QuerySubaccountResponse.subaccount)
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountResponse::release_subaccount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::Subaccount* temp = _impl_.subaccount_;
  _impl_.subaccount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountResponse::unsafe_arena_release_subaccount() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.QuerySubaccountResponse.subaccount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::subaccounts::Subaccount* temp = _impl_.subaccount_;
  _impl_.subaccount_ = nullptr;
  return temp;
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountResponse::_internal_mutable_subaccount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subaccount_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::subaccounts::Subaccount>(GetArenaForAllocation());
    _impl_.subaccount_ = p;
  }
  return _impl_.subaccount_;
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountResponse::mutable_subaccount() {
  ::dydxprotocol::subaccounts::Subaccount* _msg = _internal_mutable_subaccount();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.QuerySubaccountResponse.subaccount)
  return _msg;
}
inline void QuerySubaccountResponse::set_allocated_subaccount(::dydxprotocol::subaccounts::Subaccount* subaccount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.subaccount_);
  }
  if (subaccount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subaccount));
    if (message_arena != submessage_arena) {
      subaccount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subaccount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.subaccount_ = subaccount;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.QuerySubaccountResponse.subaccount)
}

// -------------------------------------------------------------------

// QueryAllSubaccountRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1;
inline bool QueryAllSubaccountRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllSubaccountRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllSubaccountRequest::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.QueryAllSubaccountRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllSubaccountRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.subaccounts.QueryAllSubaccountRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllSubaccountRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllSubaccountRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.QueryAllSubaccountRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllSubaccountRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllSubaccountRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.QueryAllSubaccountRequest.pagination)
  return _msg;
}
inline void QueryAllSubaccountRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.QueryAllSubaccountRequest.pagination)
}

// -------------------------------------------------------------------

// QuerySubaccountAllResponse

// repeated .dydxprotocol.subaccounts.Subaccount subaccount = 1 [(.gogoproto.nullable) = false];
inline int QuerySubaccountAllResponse::_internal_subaccount_size() const {
  return _impl_.subaccount_.size();
}
inline int QuerySubaccountAllResponse::subaccount_size() const {
  return _internal_subaccount_size();
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountAllResponse::mutable_subaccount(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.QuerySubaccountAllResponse.subaccount)
  return _internal_mutable_subaccount()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::Subaccount >*
QuerySubaccountAllResponse::mutable_subaccount() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.subaccounts.QuerySubaccountAllResponse.subaccount)
  return _internal_mutable_subaccount();
}
inline const ::dydxprotocol::subaccounts::Subaccount& QuerySubaccountAllResponse::_internal_subaccount(int index) const {
  return _internal_subaccount().Get(index);
}
inline const ::dydxprotocol::subaccounts::Subaccount& QuerySubaccountAllResponse::subaccount(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.QuerySubaccountAllResponse.subaccount)
  return _internal_subaccount(index);
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountAllResponse::_internal_add_subaccount() {
  return _internal_mutable_subaccount()->Add();
}
inline ::dydxprotocol::subaccounts::Subaccount* QuerySubaccountAllResponse::add_subaccount() {
  ::dydxprotocol::subaccounts::Subaccount* _add = _internal_add_subaccount();
  // @@protoc_insertion_point(field_add:dydxprotocol.subaccounts.QuerySubaccountAllResponse.subaccount)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::subaccounts::Subaccount >&
QuerySubaccountAllResponse::subaccount() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.subaccounts.QuerySubaccountAllResponse.subaccount)
  return _internal_subaccount();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::Subaccount>&
QuerySubaccountAllResponse::_internal_subaccount() const {
  return _impl_.subaccount_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::subaccounts::Subaccount>*
QuerySubaccountAllResponse::_internal_mutable_subaccount() {
  return &_impl_.subaccount_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2;
inline bool QuerySubaccountAllResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySubaccountAllResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QuerySubaccountAllResponse::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.subaccounts.QuerySubaccountAllResponse.pagination)
  return _internal_pagination();
}
inline void QuerySubaccountAllResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.subaccounts.QuerySubaccountAllResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySubaccountAllResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySubaccountAllResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.subaccounts.QuerySubaccountAllResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySubaccountAllResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QuerySubaccountAllResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.subaccounts.QuerySubaccountAllResponse.pagination)
  return _msg;
}
inline void QuerySubaccountAllResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.subaccounts.QuerySubaccountAllResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace subaccounts
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fsubaccounts_2fquery_2eproto_2epb_2eh
