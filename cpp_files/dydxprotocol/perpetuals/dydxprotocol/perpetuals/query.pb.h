// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/perpetuals/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fperpetuals_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fperpetuals_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "dydxprotocol/perpetuals/perpetual.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fperpetuals_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fperpetuals_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fperpetuals_2fquery_2eproto;
namespace dydxprotocol {
namespace perpetuals {
class QueryAllPerpetualsRequest;
struct QueryAllPerpetualsRequestDefaultTypeInternal;
extern QueryAllPerpetualsRequestDefaultTypeInternal _QueryAllPerpetualsRequest_default_instance_;
class QueryAllPerpetualsResponse;
struct QueryAllPerpetualsResponseDefaultTypeInternal;
extern QueryAllPerpetualsResponseDefaultTypeInternal _QueryAllPerpetualsResponse_default_instance_;
class QueryPerpetualRequest;
struct QueryPerpetualRequestDefaultTypeInternal;
extern QueryPerpetualRequestDefaultTypeInternal _QueryPerpetualRequest_default_instance_;
class QueryPerpetualResponse;
struct QueryPerpetualResponseDefaultTypeInternal;
extern QueryPerpetualResponseDefaultTypeInternal _QueryPerpetualResponse_default_instance_;
}  // namespace perpetuals
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::perpetuals::QueryAllPerpetualsRequest* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::QueryAllPerpetualsRequest>(Arena*);
template <>
::dydxprotocol::perpetuals::QueryAllPerpetualsResponse* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::QueryAllPerpetualsResponse>(Arena*);
template <>
::dydxprotocol::perpetuals::QueryPerpetualRequest* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::QueryPerpetualRequest>(Arena*);
template <>
::dydxprotocol::perpetuals::QueryPerpetualResponse* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::QueryPerpetualResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace perpetuals {

// ===================================================================


// -------------------------------------------------------------------

class QueryPerpetualRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.QueryPerpetualRequest) */ {
 public:
  inline QueryPerpetualRequest() : QueryPerpetualRequest(nullptr) {}
  ~QueryPerpetualRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPerpetualRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPerpetualRequest(const QueryPerpetualRequest& from);
  QueryPerpetualRequest(QueryPerpetualRequest&& from) noexcept
    : QueryPerpetualRequest() {
    *this = ::std::move(from);
  }

  inline QueryPerpetualRequest& operator=(const QueryPerpetualRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPerpetualRequest& operator=(QueryPerpetualRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPerpetualRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPerpetualRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPerpetualRequest*>(
               &_QueryPerpetualRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryPerpetualRequest& a, QueryPerpetualRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPerpetualRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPerpetualRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPerpetualRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPerpetualRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPerpetualRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPerpetualRequest& from) {
    QueryPerpetualRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPerpetualRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.QueryPerpetualRequest";
  }
  protected:
  explicit QueryPerpetualRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.QueryPerpetualRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPerpetualResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.QueryPerpetualResponse) */ {
 public:
  inline QueryPerpetualResponse() : QueryPerpetualResponse(nullptr) {}
  ~QueryPerpetualResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPerpetualResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPerpetualResponse(const QueryPerpetualResponse& from);
  QueryPerpetualResponse(QueryPerpetualResponse&& from) noexcept
    : QueryPerpetualResponse() {
    *this = ::std::move(from);
  }

  inline QueryPerpetualResponse& operator=(const QueryPerpetualResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPerpetualResponse& operator=(QueryPerpetualResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPerpetualResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPerpetualResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPerpetualResponse*>(
               &_QueryPerpetualResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryPerpetualResponse& a, QueryPerpetualResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPerpetualResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPerpetualResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPerpetualResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPerpetualResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPerpetualResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPerpetualResponse& from) {
    QueryPerpetualResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPerpetualResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.QueryPerpetualResponse";
  }
  protected:
  explicit QueryPerpetualResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerpetualFieldNumber = 1,
  };
  // .dydxprotocol.perpetuals.Perpetual perpetual = 1 [(.gogoproto.nullable) = false];
  bool has_perpetual() const;
  void clear_perpetual() ;
  const ::dydxprotocol::perpetuals::Perpetual& perpetual() const;
  PROTOBUF_NODISCARD ::dydxprotocol::perpetuals::Perpetual* release_perpetual();
  ::dydxprotocol::perpetuals::Perpetual* mutable_perpetual();
  void set_allocated_perpetual(::dydxprotocol::perpetuals::Perpetual* perpetual);
  private:
  const ::dydxprotocol::perpetuals::Perpetual& _internal_perpetual() const;
  ::dydxprotocol::perpetuals::Perpetual* _internal_mutable_perpetual();
  public:
  void unsafe_arena_set_allocated_perpetual(
      ::dydxprotocol::perpetuals::Perpetual* perpetual);
  ::dydxprotocol::perpetuals::Perpetual* unsafe_arena_release_perpetual();
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.QueryPerpetualResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::dydxprotocol::perpetuals::Perpetual* perpetual_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllPerpetualsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.QueryAllPerpetualsRequest) */ {
 public:
  inline QueryAllPerpetualsRequest() : QueryAllPerpetualsRequest(nullptr) {}
  ~QueryAllPerpetualsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllPerpetualsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllPerpetualsRequest(const QueryAllPerpetualsRequest& from);
  QueryAllPerpetualsRequest(QueryAllPerpetualsRequest&& from) noexcept
    : QueryAllPerpetualsRequest() {
    *this = ::std::move(from);
  }

  inline QueryAllPerpetualsRequest& operator=(const QueryAllPerpetualsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllPerpetualsRequest& operator=(QueryAllPerpetualsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllPerpetualsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllPerpetualsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryAllPerpetualsRequest*>(
               &_QueryAllPerpetualsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryAllPerpetualsRequest& a, QueryAllPerpetualsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllPerpetualsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllPerpetualsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllPerpetualsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllPerpetualsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllPerpetualsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllPerpetualsRequest& from) {
    QueryAllPerpetualsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllPerpetualsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.QueryAllPerpetualsRequest";
  }
  protected:
  explicit QueryAllPerpetualsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.QueryAllPerpetualsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryAllPerpetualsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.QueryAllPerpetualsResponse) */ {
 public:
  inline QueryAllPerpetualsResponse() : QueryAllPerpetualsResponse(nullptr) {}
  ~QueryAllPerpetualsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryAllPerpetualsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryAllPerpetualsResponse(const QueryAllPerpetualsResponse& from);
  QueryAllPerpetualsResponse(QueryAllPerpetualsResponse&& from) noexcept
    : QueryAllPerpetualsResponse() {
    *this = ::std::move(from);
  }

  inline QueryAllPerpetualsResponse& operator=(const QueryAllPerpetualsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAllPerpetualsResponse& operator=(QueryAllPerpetualsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryAllPerpetualsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryAllPerpetualsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryAllPerpetualsResponse*>(
               &_QueryAllPerpetualsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryAllPerpetualsResponse& a, QueryAllPerpetualsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAllPerpetualsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryAllPerpetualsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryAllPerpetualsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryAllPerpetualsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryAllPerpetualsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryAllPerpetualsResponse& from) {
    QueryAllPerpetualsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAllPerpetualsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.QueryAllPerpetualsResponse";
  }
  protected:
  explicit QueryAllPerpetualsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerpetualFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .dydxprotocol.perpetuals.Perpetual perpetual = 1 [(.gogoproto.nullable) = false];
  int perpetual_size() const;
  private:
  int _internal_perpetual_size() const;

  public:
  void clear_perpetual() ;
  ::dydxprotocol::perpetuals::Perpetual* mutable_perpetual(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::Perpetual >*
      mutable_perpetual();
  private:
  const ::dydxprotocol::perpetuals::Perpetual& _internal_perpetual(int index) const;
  ::dydxprotocol::perpetuals::Perpetual* _internal_add_perpetual();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::Perpetual>& _internal_perpetual() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::Perpetual>* _internal_mutable_perpetual();
  public:
  const ::dydxprotocol::perpetuals::Perpetual& perpetual(int index) const;
  ::dydxprotocol::perpetuals::Perpetual* add_perpetual();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::Perpetual >&
      perpetual() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2;
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.QueryAllPerpetualsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::Perpetual > perpetual_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryPerpetualRequest

// uint32 id = 1;
inline void QueryPerpetualRequest::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t QueryPerpetualRequest::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.QueryPerpetualRequest.id)
  return _internal_id();
}
inline void QueryPerpetualRequest::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.QueryPerpetualRequest.id)
}
inline ::uint32_t QueryPerpetualRequest::_internal_id() const {
  return _impl_.id_;
}
inline void QueryPerpetualRequest::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// -------------------------------------------------------------------

// QueryPerpetualResponse

// .dydxprotocol.perpetuals.Perpetual perpetual = 1 [(.gogoproto.nullable) = false];
inline bool QueryPerpetualResponse::has_perpetual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.perpetual_ != nullptr);
  return value;
}
inline const ::dydxprotocol::perpetuals::Perpetual& QueryPerpetualResponse::_internal_perpetual() const {
  const ::dydxprotocol::perpetuals::Perpetual* p = _impl_.perpetual_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::perpetuals::Perpetual&>(
      ::dydxprotocol::perpetuals::_Perpetual_default_instance_);
}
inline const ::dydxprotocol::perpetuals::Perpetual& QueryPerpetualResponse::perpetual() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.QueryPerpetualResponse.perpetual)
  return _internal_perpetual();
}
inline void QueryPerpetualResponse::unsafe_arena_set_allocated_perpetual(
    ::dydxprotocol::perpetuals::Perpetual* perpetual) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perpetual_);
  }
  _impl_.perpetual_ = perpetual;
  if (perpetual) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.perpetuals.QueryPerpetualResponse.perpetual)
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryPerpetualResponse::release_perpetual() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::perpetuals::Perpetual* temp = _impl_.perpetual_;
  _impl_.perpetual_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryPerpetualResponse::unsafe_arena_release_perpetual() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.QueryPerpetualResponse.perpetual)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::perpetuals::Perpetual* temp = _impl_.perpetual_;
  _impl_.perpetual_ = nullptr;
  return temp;
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryPerpetualResponse::_internal_mutable_perpetual() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.perpetual_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::perpetuals::Perpetual>(GetArenaForAllocation());
    _impl_.perpetual_ = p;
  }
  return _impl_.perpetual_;
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryPerpetualResponse::mutable_perpetual() {
  ::dydxprotocol::perpetuals::Perpetual* _msg = _internal_mutable_perpetual();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.QueryPerpetualResponse.perpetual)
  return _msg;
}
inline void QueryPerpetualResponse::set_allocated_perpetual(::dydxprotocol::perpetuals::Perpetual* perpetual) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.perpetual_);
  }
  if (perpetual) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(perpetual));
    if (message_arena != submessage_arena) {
      perpetual = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, perpetual, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.perpetual_ = perpetual;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.QueryPerpetualResponse.perpetual)
}

// -------------------------------------------------------------------

// QueryAllPerpetualsRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1;
inline bool QueryAllPerpetualsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllPerpetualsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryAllPerpetualsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.QueryAllPerpetualsRequest.pagination)
  return _internal_pagination();
}
inline void QueryAllPerpetualsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.perpetuals.QueryAllPerpetualsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllPerpetualsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllPerpetualsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.QueryAllPerpetualsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllPerpetualsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryAllPerpetualsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.QueryAllPerpetualsRequest.pagination)
  return _msg;
}
inline void QueryAllPerpetualsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.QueryAllPerpetualsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryAllPerpetualsResponse

// repeated .dydxprotocol.perpetuals.Perpetual perpetual = 1 [(.gogoproto.nullable) = false];
inline int QueryAllPerpetualsResponse::_internal_perpetual_size() const {
  return _impl_.perpetual_.size();
}
inline int QueryAllPerpetualsResponse::perpetual_size() const {
  return _internal_perpetual_size();
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryAllPerpetualsResponse::mutable_perpetual(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.perpetual)
  return _internal_mutable_perpetual()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::Perpetual >*
QueryAllPerpetualsResponse::mutable_perpetual() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.perpetual)
  return _internal_mutable_perpetual();
}
inline const ::dydxprotocol::perpetuals::Perpetual& QueryAllPerpetualsResponse::_internal_perpetual(int index) const {
  return _internal_perpetual().Get(index);
}
inline const ::dydxprotocol::perpetuals::Perpetual& QueryAllPerpetualsResponse::perpetual(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.perpetual)
  return _internal_perpetual(index);
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryAllPerpetualsResponse::_internal_add_perpetual() {
  return _internal_mutable_perpetual()->Add();
}
inline ::dydxprotocol::perpetuals::Perpetual* QueryAllPerpetualsResponse::add_perpetual() {
  ::dydxprotocol::perpetuals::Perpetual* _add = _internal_add_perpetual();
  // @@protoc_insertion_point(field_add:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.perpetual)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::Perpetual >&
QueryAllPerpetualsResponse::perpetual() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.perpetual)
  return _internal_perpetual();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::Perpetual>&
QueryAllPerpetualsResponse::_internal_perpetual() const {
  return _impl_.perpetual_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::Perpetual>*
QueryAllPerpetualsResponse::_internal_mutable_perpetual() {
  return &_impl_.perpetual_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2;
inline bool QueryAllPerpetualsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllPerpetualsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryAllPerpetualsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.pagination)
  return _internal_pagination();
}
inline void QueryAllPerpetualsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllPerpetualsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllPerpetualsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllPerpetualsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryAllPerpetualsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.pagination)
  return _msg;
}
inline void QueryAllPerpetualsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.QueryAllPerpetualsResponse.pagination)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace perpetuals
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fperpetuals_2fquery_2eproto_2epb_2eh
