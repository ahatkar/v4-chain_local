// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/perpetuals/perpetual.proto

#include "dydxprotocol/perpetuals/perpetual.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace dydxprotocol {
namespace perpetuals {
template <typename>
PROTOBUF_CONSTEXPR Perpetual::Perpetual(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.funding_index_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.params_)*/nullptr
  , /*decltype(_impl_.open_interest_)*/ ::uint64_t{0u}
} {}
struct PerpetualDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualDefaultTypeInternal() {}
  union {
    Perpetual _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualDefaultTypeInternal _Perpetual_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PerpetualParams::PerpetualParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ticker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.market_id_)*/ 0u

  , /*decltype(_impl_.atomic_resolution_)*/ 0

  , /*decltype(_impl_.default_funding_ppm_)*/ 0

  , /*decltype(_impl_.liquidity_tier_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PerpetualParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerpetualParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerpetualParamsDefaultTypeInternal() {}
  union {
    PerpetualParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerpetualParamsDefaultTypeInternal _PerpetualParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MarketPremiums::MarketPremiums(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.premiums_)*/ {}
  ,/* _impl_._premiums_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.perpetual_id_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketPremiumsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketPremiumsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketPremiumsDefaultTypeInternal() {}
  union {
    MarketPremiums _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketPremiumsDefaultTypeInternal _MarketPremiums_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PremiumStore::PremiumStore(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.all_market_premiums_)*/{}
  , /*decltype(_impl_.num_premiums_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PremiumStoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PremiumStoreDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PremiumStoreDefaultTypeInternal() {}
  union {
    PremiumStore _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PremiumStoreDefaultTypeInternal _PremiumStore_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LiquidityTier::LiquidityTier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.id_)*/ 0u

  , /*decltype(_impl_.initial_margin_ppm_)*/ 0u

  , /*decltype(_impl_.base_position_notional_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.impact_notional_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.maintenance_fraction_ppm_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LiquidityTierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LiquidityTierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LiquidityTierDefaultTypeInternal() {}
  union {
    LiquidityTier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LiquidityTierDefaultTypeInternal _LiquidityTier_default_instance_;
}  // namespace perpetuals
}  // namespace dydxprotocol
static ::_pb::Metadata file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_dydxprotocol_2fperpetuals_2fperpetual_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_dydxprotocol_2fperpetuals_2fperpetual_2eproto = nullptr;
const ::uint32_t TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::Perpetual, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::Perpetual, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::Perpetual, _impl_.params_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::Perpetual, _impl_.funding_index_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::Perpetual, _impl_.open_interest_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _impl_.ticker_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _impl_.atomic_resolution_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _impl_.default_funding_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PerpetualParams, _impl_.liquidity_tier_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::MarketPremiums, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::MarketPremiums, _impl_.perpetual_id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::MarketPremiums, _impl_.premiums_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PremiumStore, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PremiumStore, _impl_.all_market_premiums_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::PremiumStore, _impl_.num_premiums_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _impl_.initial_margin_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _impl_.maintenance_fraction_ppm_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _impl_.base_position_notional_),
    PROTOBUF_FIELD_OFFSET(::dydxprotocol::perpetuals::LiquidityTier, _impl_.impact_notional_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::dydxprotocol::perpetuals::Perpetual)},
        { 14, -1, -1, sizeof(::dydxprotocol::perpetuals::PerpetualParams)},
        { 28, -1, -1, sizeof(::dydxprotocol::perpetuals::MarketPremiums)},
        { 38, -1, -1, sizeof(::dydxprotocol::perpetuals::PremiumStore)},
        { 48, -1, -1, sizeof(::dydxprotocol::perpetuals::LiquidityTier)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dydxprotocol::perpetuals::_Perpetual_default_instance_._instance,
    &::dydxprotocol::perpetuals::_PerpetualParams_default_instance_._instance,
    &::dydxprotocol::perpetuals::_MarketPremiums_default_instance_._instance,
    &::dydxprotocol::perpetuals::_PremiumStore_default_instance_._instance,
    &::dydxprotocol::perpetuals::_LiquidityTier_default_instance_._instance,
};
const char descriptor_table_protodef_dydxprotocol_2fperpetuals_2fperpetual_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'dydxprotocol/perpetuals/perpetual.prot"
    "o\022\027dydxprotocol.perpetuals\032\024gogoproto/go"
    "go.proto\"\303\001\n\tPerpetual\022>\n\006params\030\001 \001(\0132("
    ".dydxprotocol.perpetuals.PerpetualParams"
    "B\004\310\336\037\000\022_\n\rfunding_index\030\002 \001(\014BH\310\336\037\000\332\336\037@g"
    "ithub.com/dydxprotocol/v4-chain/protocol"
    "/dtypes.SerializableInt\022\025\n\ropen_interest"
    "\030\003 \001(\004\"\220\001\n\017PerpetualParams\022\n\n\002id\030\001 \001(\r\022\016"
    "\n\006ticker\030\002 \001(\t\022\021\n\tmarket_id\030\003 \001(\r\022\031\n\021ato"
    "mic_resolution\030\004 \001(\021\022\033\n\023default_funding_"
    "ppm\030\005 \001(\021\022\026\n\016liquidity_tier\030\006 \001(\r\"8\n\016Mar"
    "ketPremiums\022\024\n\014perpetual_id\030\001 \001(\r\022\020\n\010pre"
    "miums\030\002 \003(\021\"p\n\014PremiumStore\022J\n\023all_marke"
    "t_premiums\030\001 \003(\0132\'.dydxprotocol.perpetua"
    "ls.MarketPremiumsB\004\310\336\037\000\022\024\n\014num_premiums\030"
    "\002 \001(\r\"\240\001\n\rLiquidityTier\022\n\n\002id\030\001 \001(\r\022\014\n\004n"
    "ame\030\002 \001(\t\022\032\n\022initial_margin_ppm\030\003 \001(\r\022 \n"
    "\030maintenance_fraction_ppm\030\004 \001(\r\022\036\n\026base_"
    "position_notional\030\005 \001(\004\022\027\n\017impact_notion"
    "al\030\006 \001(\004B>Z<github.com/dydxprotocol/v4-c"
    "hain/protocol/x/perpetuals/typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto = {
    false,
    false,
    840,
    descriptor_table_protodef_dydxprotocol_2fperpetuals_2fperpetual_2eproto,
    "dydxprotocol/perpetuals/perpetual.proto",
    &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once,
    descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto::offsets,
    file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto,
    file_level_enum_descriptors_dydxprotocol_2fperpetuals_2fperpetual_2eproto,
    file_level_service_descriptors_dydxprotocol_2fperpetuals_2fperpetual_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_getter() {
  return &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dydxprotocol_2fperpetuals_2fperpetual_2eproto(&descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto);
namespace dydxprotocol {
namespace perpetuals {
// ===================================================================

class Perpetual::_Internal {
 public:
  using HasBits = decltype(std::declval<Perpetual>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Perpetual, _impl_._has_bits_);
  static const ::dydxprotocol::perpetuals::PerpetualParams& params(const Perpetual* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dydxprotocol::perpetuals::PerpetualParams&
Perpetual::_Internal::params(const Perpetual* msg) {
  return *msg->_impl_.params_;
}
Perpetual::Perpetual(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.perpetuals.Perpetual)
}
Perpetual::Perpetual(const Perpetual& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Perpetual* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funding_index_) {}

    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.open_interest_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.funding_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funding_index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_funding_index().empty()) {
    _this->_impl_.funding_index_.Set(from._internal_funding_index(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::dydxprotocol::perpetuals::PerpetualParams(*from._impl_.params_);
  }
  _this->_impl_.open_interest_ = from._impl_.open_interest_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.perpetuals.Perpetual)
}

inline void Perpetual::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.funding_index_) {}

    , decltype(_impl_.params_){nullptr}
    , decltype(_impl_.open_interest_) { ::uint64_t{0u} }

  };
  _impl_.funding_index_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.funding_index_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Perpetual::~Perpetual() {
  // @@protoc_insertion_point(destructor:dydxprotocol.perpetuals.Perpetual)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Perpetual::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.funding_index_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void Perpetual::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Perpetual::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.perpetuals.Perpetual)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.funding_index_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_.open_interest_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Perpetual::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dydxprotocol.perpetuals.PerpetualParams params = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes funding_index = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_funding_index();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 open_interest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Perpetual::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.perpetuals.Perpetual)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dydxprotocol.perpetuals.PerpetualParams params = 1 [(.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  // bytes funding_index = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_funding_index().empty()) {
    const std::string& _s = this->_internal_funding_index();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // uint64 open_interest = 3;
  if (this->_internal_open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_open_interest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.perpetuals.Perpetual)
  return target;
}

::size_t Perpetual::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.perpetuals.Perpetual)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes funding_index = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  if (!this->_internal_funding_index().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_funding_index());
  }

  // .dydxprotocol.perpetuals.PerpetualParams params = 1 [(.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  // uint64 open_interest = 3;
  if (this->_internal_open_interest() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_open_interest());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Perpetual::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Perpetual::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Perpetual::GetClassData() const { return &_class_data_; }


void Perpetual::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Perpetual*>(&to_msg);
  auto& from = static_cast<const Perpetual&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.perpetuals.Perpetual)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_funding_index().empty()) {
    _this->_internal_set_funding_index(from._internal_funding_index());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::dydxprotocol::perpetuals::PerpetualParams::MergeFrom(
        from._internal_params());
  }
  if (from._internal_open_interest() != 0) {
    _this->_internal_set_open_interest(from._internal_open_interest());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Perpetual::CopyFrom(const Perpetual& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.perpetuals.Perpetual)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perpetual::IsInitialized() const {
  return true;
}

void Perpetual::InternalSwap(Perpetual* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.funding_index_, lhs_arena,
                                       &other->_impl_.funding_index_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Perpetual, _impl_.open_interest_)
      + sizeof(Perpetual::_impl_.open_interest_)
      - PROTOBUF_FIELD_OFFSET(Perpetual, _impl_.params_)>(
          reinterpret_cast<char*>(&_impl_.params_),
          reinterpret_cast<char*>(&other->_impl_.params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Perpetual::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_getter, &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once,
      file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto[0]);
}
// ===================================================================

class PerpetualParams::_Internal {
 public:
};

PerpetualParams::PerpetualParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.perpetuals.PerpetualParams)
}
PerpetualParams::PerpetualParams(const PerpetualParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PerpetualParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ticker_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.atomic_resolution_) {}

    , decltype(_impl_.default_funding_ppm_) {}

    , decltype(_impl_.liquidity_tier_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ticker().empty()) {
    _this->_impl_.ticker_.Set(from._internal_ticker(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.liquidity_tier_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.liquidity_tier_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.perpetuals.PerpetualParams)
}

inline void PerpetualParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ticker_) {}

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.market_id_) { 0u }

    , decltype(_impl_.atomic_resolution_) { 0 }

    , decltype(_impl_.default_funding_ppm_) { 0 }

    , decltype(_impl_.liquidity_tier_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ticker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ticker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PerpetualParams::~PerpetualParams() {
  // @@protoc_insertion_point(destructor:dydxprotocol.perpetuals.PerpetualParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerpetualParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ticker_.Destroy();
}

void PerpetualParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PerpetualParams::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.perpetuals.PerpetualParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ticker_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_tier_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.liquidity_tier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PerpetualParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ticker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ticker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.perpetuals.PerpetualParams.ticker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.market_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 atomic_resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.atomic_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // sint32 default_funding_ppm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.default_funding_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 liquidity_tier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.liquidity_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PerpetualParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.perpetuals.PerpetualParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    const std::string& _s = this->_internal_ticker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.perpetuals.PerpetualParams.ticker");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 market_id = 3;
  if (this->_internal_market_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_market_id(), target);
  }

  // sint32 atomic_resolution = 4;
  if (this->_internal_atomic_resolution() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        4, this->_internal_atomic_resolution(), target);
  }

  // sint32 default_funding_ppm = 5;
  if (this->_internal_default_funding_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(
        5, this->_internal_default_funding_ppm(), target);
  }

  // uint32 liquidity_tier = 6;
  if (this->_internal_liquidity_tier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_liquidity_tier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.perpetuals.PerpetualParams)
  return target;
}

::size_t PerpetualParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.perpetuals.PerpetualParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ticker = 2;
  if (!this->_internal_ticker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ticker());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 market_id = 3;
  if (this->_internal_market_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_market_id());
  }

  // sint32 atomic_resolution = 4;
  if (this->_internal_atomic_resolution() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_atomic_resolution());
  }

  // sint32 default_funding_ppm = 5;
  if (this->_internal_default_funding_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(
        this->_internal_default_funding_ppm());
  }

  // uint32 liquidity_tier = 6;
  if (this->_internal_liquidity_tier() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_liquidity_tier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PerpetualParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PerpetualParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PerpetualParams::GetClassData() const { return &_class_data_; }


void PerpetualParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PerpetualParams*>(&to_msg);
  auto& from = static_cast<const PerpetualParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.perpetuals.PerpetualParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_market_id() != 0) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_atomic_resolution() != 0) {
    _this->_internal_set_atomic_resolution(from._internal_atomic_resolution());
  }
  if (from._internal_default_funding_ppm() != 0) {
    _this->_internal_set_default_funding_ppm(from._internal_default_funding_ppm());
  }
  if (from._internal_liquidity_tier() != 0) {
    _this->_internal_set_liquidity_tier(from._internal_liquidity_tier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PerpetualParams::CopyFrom(const PerpetualParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.perpetuals.PerpetualParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerpetualParams::IsInitialized() const {
  return true;
}

void PerpetualParams::InternalSwap(PerpetualParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, lhs_arena,
                                       &other->_impl_.ticker_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PerpetualParams, _impl_.liquidity_tier_)
      + sizeof(PerpetualParams::_impl_.liquidity_tier_)
      - PROTOBUF_FIELD_OFFSET(PerpetualParams, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PerpetualParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_getter, &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once,
      file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto[1]);
}
// ===================================================================

class MarketPremiums::_Internal {
 public:
};

MarketPremiums::MarketPremiums(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.perpetuals.MarketPremiums)
}
MarketPremiums::MarketPremiums(const MarketPremiums& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketPremiums* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.premiums_) { from._impl_.premiums_ }
    ,/* _impl_._premiums_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.perpetual_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.perpetual_id_ = from._impl_.perpetual_id_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.perpetuals.MarketPremiums)
}

inline void MarketPremiums::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.premiums_) { arena }
    ,/* _impl_._premiums_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.perpetual_id_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketPremiums::~MarketPremiums() {
  // @@protoc_insertion_point(destructor:dydxprotocol.perpetuals.MarketPremiums)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketPremiums::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.premiums_.~RepeatedField();
}

void MarketPremiums::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketPremiums::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.perpetuals.MarketPremiums)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_premiums()->Clear();
  _impl_.perpetual_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketPremiums::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 perpetual_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.perpetual_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated sint32 premiums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_premiums(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 16) {
          _internal_add_premiums(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketPremiums::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.perpetuals.MarketPremiums)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 perpetual_id = 1;
  if (this->_internal_perpetual_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_perpetual_id(), target);
  }

  // repeated sint32 premiums = 2;
  {
    int byte_size = _impl_._premiums_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(2, _internal_premiums(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.perpetuals.MarketPremiums)
  return target;
}

::size_t MarketPremiums::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.perpetuals.MarketPremiums)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 premiums = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::SInt32Size(
        this->_internal_premiums())
    ;
    _impl_._premiums_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // uint32 perpetual_id = 1;
  if (this->_internal_perpetual_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_perpetual_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketPremiums::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketPremiums::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketPremiums::GetClassData() const { return &_class_data_; }


void MarketPremiums::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketPremiums*>(&to_msg);
  auto& from = static_cast<const MarketPremiums&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.perpetuals.MarketPremiums)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.premiums_.MergeFrom(from._impl_.premiums_);
  if (from._internal_perpetual_id() != 0) {
    _this->_internal_set_perpetual_id(from._internal_perpetual_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPremiums::CopyFrom(const MarketPremiums& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.perpetuals.MarketPremiums)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPremiums::IsInitialized() const {
  return true;
}

void MarketPremiums::InternalSwap(MarketPremiums* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.premiums_.InternalSwap(&other->_impl_.premiums_);

  swap(_impl_.perpetual_id_, other->_impl_.perpetual_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketPremiums::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_getter, &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once,
      file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto[2]);
}
// ===================================================================

class PremiumStore::_Internal {
 public:
};

PremiumStore::PremiumStore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.perpetuals.PremiumStore)
}
PremiumStore::PremiumStore(const PremiumStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PremiumStore* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.all_market_premiums_){from._impl_.all_market_premiums_}
    , decltype(_impl_.num_premiums_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_premiums_ = from._impl_.num_premiums_;
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.perpetuals.PremiumStore)
}

inline void PremiumStore::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.all_market_premiums_){arena}
    , decltype(_impl_.num_premiums_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PremiumStore::~PremiumStore() {
  // @@protoc_insertion_point(destructor:dydxprotocol.perpetuals.PremiumStore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PremiumStore::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_all_market_premiums()->~RepeatedPtrField();
}

void PremiumStore::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PremiumStore::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.perpetuals.PremiumStore)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_all_market_premiums()->Clear();
  _impl_.num_premiums_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PremiumStore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .dydxprotocol.perpetuals.MarketPremiums all_market_premiums = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_all_market_premiums(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 num_premiums = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.num_premiums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PremiumStore::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.perpetuals.PremiumStore)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dydxprotocol.perpetuals.MarketPremiums all_market_premiums = 1 [(.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_all_market_premiums_size()); i < n; i++) {
    const auto& repfield = this->_internal_all_market_premiums(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 num_premiums = 2;
  if (this->_internal_num_premiums() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_num_premiums(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.perpetuals.PremiumStore)
  return target;
}

::size_t PremiumStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.perpetuals.PremiumStore)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dydxprotocol.perpetuals.MarketPremiums all_market_premiums = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_all_market_premiums_size();
  for (const auto& msg : this->_internal_all_market_premiums()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 num_premiums = 2;
  if (this->_internal_num_premiums() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_num_premiums());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PremiumStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PremiumStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PremiumStore::GetClassData() const { return &_class_data_; }


void PremiumStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PremiumStore*>(&to_msg);
  auto& from = static_cast<const PremiumStore&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.perpetuals.PremiumStore)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_all_market_premiums()->MergeFrom(from._internal_all_market_premiums());
  if (from._internal_num_premiums() != 0) {
    _this->_internal_set_num_premiums(from._internal_num_premiums());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PremiumStore::CopyFrom(const PremiumStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.perpetuals.PremiumStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PremiumStore::IsInitialized() const {
  return true;
}

void PremiumStore::InternalSwap(PremiumStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_all_market_premiums()->InternalSwap(other->_internal_mutable_all_market_premiums());

  swap(_impl_.num_premiums_, other->_impl_.num_premiums_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PremiumStore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_getter, &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once,
      file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto[3]);
}
// ===================================================================

class LiquidityTier::_Internal {
 public:
};

LiquidityTier::LiquidityTier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dydxprotocol.perpetuals.LiquidityTier)
}
LiquidityTier::LiquidityTier(const LiquidityTier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LiquidityTier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.initial_margin_ppm_) {}

    , decltype(_impl_.base_position_notional_) {}

    , decltype(_impl_.impact_notional_) {}

    , decltype(_impl_.maintenance_fraction_ppm_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.maintenance_fraction_ppm_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maintenance_fraction_ppm_));
  // @@protoc_insertion_point(copy_constructor:dydxprotocol.perpetuals.LiquidityTier)
}

inline void LiquidityTier::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.id_) { 0u }

    , decltype(_impl_.initial_margin_ppm_) { 0u }

    , decltype(_impl_.base_position_notional_) { ::uint64_t{0u} }

    , decltype(_impl_.impact_notional_) { ::uint64_t{0u} }

    , decltype(_impl_.maintenance_fraction_ppm_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LiquidityTier::~LiquidityTier() {
  // @@protoc_insertion_point(destructor:dydxprotocol.perpetuals.LiquidityTier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LiquidityTier::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void LiquidityTier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LiquidityTier::Clear() {
// @@protoc_insertion_point(message_clear_start:dydxprotocol.perpetuals.LiquidityTier)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.maintenance_fraction_ppm_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.maintenance_fraction_ppm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LiquidityTier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dydxprotocol.perpetuals.LiquidityTier.name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 initial_margin_ppm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.initial_margin_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 maintenance_fraction_ppm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.maintenance_fraction_ppm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 base_position_notional = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.base_position_notional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 impact_notional = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.impact_notional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LiquidityTier::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dydxprotocol.perpetuals.LiquidityTier)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "dydxprotocol.perpetuals.LiquidityTier.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 initial_margin_ppm = 3;
  if (this->_internal_initial_margin_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_initial_margin_ppm(), target);
  }

  // uint32 maintenance_fraction_ppm = 4;
  if (this->_internal_maintenance_fraction_ppm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_maintenance_fraction_ppm(), target);
  }

  // uint64 base_position_notional = 5;
  if (this->_internal_base_position_notional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_base_position_notional(), target);
  }

  // uint64 impact_notional = 6;
  if (this->_internal_impact_notional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_impact_notional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dydxprotocol.perpetuals.LiquidityTier)
  return target;
}

::size_t LiquidityTier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dydxprotocol.perpetuals.LiquidityTier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_id());
  }

  // uint32 initial_margin_ppm = 3;
  if (this->_internal_initial_margin_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_initial_margin_ppm());
  }

  // uint64 base_position_notional = 5;
  if (this->_internal_base_position_notional() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_base_position_notional());
  }

  // uint64 impact_notional = 6;
  if (this->_internal_impact_notional() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_impact_notional());
  }

  // uint32 maintenance_fraction_ppm = 4;
  if (this->_internal_maintenance_fraction_ppm() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_maintenance_fraction_ppm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LiquidityTier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LiquidityTier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LiquidityTier::GetClassData() const { return &_class_data_; }


void LiquidityTier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LiquidityTier*>(&to_msg);
  auto& from = static_cast<const LiquidityTier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dydxprotocol.perpetuals.LiquidityTier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_initial_margin_ppm() != 0) {
    _this->_internal_set_initial_margin_ppm(from._internal_initial_margin_ppm());
  }
  if (from._internal_base_position_notional() != 0) {
    _this->_internal_set_base_position_notional(from._internal_base_position_notional());
  }
  if (from._internal_impact_notional() != 0) {
    _this->_internal_set_impact_notional(from._internal_impact_notional());
  }
  if (from._internal_maintenance_fraction_ppm() != 0) {
    _this->_internal_set_maintenance_fraction_ppm(from._internal_maintenance_fraction_ppm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LiquidityTier::CopyFrom(const LiquidityTier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dydxprotocol.perpetuals.LiquidityTier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiquidityTier::IsInitialized() const {
  return true;
}

void LiquidityTier::InternalSwap(LiquidityTier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LiquidityTier, _impl_.maintenance_fraction_ppm_)
      + sizeof(LiquidityTier::_impl_.maintenance_fraction_ppm_)
      - PROTOBUF_FIELD_OFFSET(LiquidityTier, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LiquidityTier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_getter, &descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto_once,
      file_level_metadata_dydxprotocol_2fperpetuals_2fperpetual_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace perpetuals
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dydxprotocol::perpetuals::Perpetual*
Arena::CreateMaybeMessage< ::dydxprotocol::perpetuals::Perpetual >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::perpetuals::Perpetual >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::perpetuals::PerpetualParams*
Arena::CreateMaybeMessage< ::dydxprotocol::perpetuals::PerpetualParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::perpetuals::PerpetualParams >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::perpetuals::MarketPremiums*
Arena::CreateMaybeMessage< ::dydxprotocol::perpetuals::MarketPremiums >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::perpetuals::MarketPremiums >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::perpetuals::PremiumStore*
Arena::CreateMaybeMessage< ::dydxprotocol::perpetuals::PremiumStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::perpetuals::PremiumStore >(arena);
}
template<> PROTOBUF_NOINLINE ::dydxprotocol::perpetuals::LiquidityTier*
Arena::CreateMaybeMessage< ::dydxprotocol::perpetuals::LiquidityTier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dydxprotocol::perpetuals::LiquidityTier >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
