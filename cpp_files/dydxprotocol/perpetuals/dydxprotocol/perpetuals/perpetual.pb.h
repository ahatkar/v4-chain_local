// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dydxprotocol/perpetuals/perpetual.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fperpetuals_2fperpetual_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fperpetuals_2fperpetual_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_dydxprotocol_2fperpetuals_2fperpetual_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
namespace dydxprotocol {
namespace perpetuals {
class LiquidityTier;
struct LiquidityTierDefaultTypeInternal;
extern LiquidityTierDefaultTypeInternal _LiquidityTier_default_instance_;
class MarketPremiums;
struct MarketPremiumsDefaultTypeInternal;
extern MarketPremiumsDefaultTypeInternal _MarketPremiums_default_instance_;
class Perpetual;
struct PerpetualDefaultTypeInternal;
extern PerpetualDefaultTypeInternal _Perpetual_default_instance_;
class PerpetualParams;
struct PerpetualParamsDefaultTypeInternal;
extern PerpetualParamsDefaultTypeInternal _PerpetualParams_default_instance_;
class PremiumStore;
struct PremiumStoreDefaultTypeInternal;
extern PremiumStoreDefaultTypeInternal _PremiumStore_default_instance_;
}  // namespace perpetuals
}  // namespace dydxprotocol
PROTOBUF_NAMESPACE_OPEN
template <>
::dydxprotocol::perpetuals::LiquidityTier* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::LiquidityTier>(Arena*);
template <>
::dydxprotocol::perpetuals::MarketPremiums* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::MarketPremiums>(Arena*);
template <>
::dydxprotocol::perpetuals::Perpetual* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::Perpetual>(Arena*);
template <>
::dydxprotocol::perpetuals::PerpetualParams* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::PerpetualParams>(Arena*);
template <>
::dydxprotocol::perpetuals::PremiumStore* Arena::CreateMaybeMessage<::dydxprotocol::perpetuals::PremiumStore>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace dydxprotocol {
namespace perpetuals {

// ===================================================================


// -------------------------------------------------------------------

class Perpetual final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.Perpetual) */ {
 public:
  inline Perpetual() : Perpetual(nullptr) {}
  ~Perpetual() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Perpetual(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Perpetual(const Perpetual& from);
  Perpetual(Perpetual&& from) noexcept
    : Perpetual() {
    *this = ::std::move(from);
  }

  inline Perpetual& operator=(const Perpetual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Perpetual& operator=(Perpetual&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Perpetual& default_instance() {
    return *internal_default_instance();
  }
  static inline const Perpetual* internal_default_instance() {
    return reinterpret_cast<const Perpetual*>(
               &_Perpetual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Perpetual& a, Perpetual& b) {
    a.Swap(&b);
  }
  inline void Swap(Perpetual* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Perpetual* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Perpetual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Perpetual>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Perpetual& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Perpetual& from) {
    Perpetual::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Perpetual* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.Perpetual";
  }
  protected:
  explicit Perpetual(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundingIndexFieldNumber = 2,
    kParamsFieldNumber = 1,
    kOpenInterestFieldNumber = 3,
  };
  // bytes funding_index = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
  void clear_funding_index() ;
  const std::string& funding_index() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_funding_index(Arg_&& arg, Args_... args);
  std::string* mutable_funding_index();
  PROTOBUF_NODISCARD std::string* release_funding_index();
  void set_allocated_funding_index(std::string* ptr);

  private:
  const std::string& _internal_funding_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_funding_index(
      const std::string& value);
  std::string* _internal_mutable_funding_index();

  public:
  // .dydxprotocol.perpetuals.PerpetualParams params = 1 [(.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::dydxprotocol::perpetuals::PerpetualParams& params() const;
  PROTOBUF_NODISCARD ::dydxprotocol::perpetuals::PerpetualParams* release_params();
  ::dydxprotocol::perpetuals::PerpetualParams* mutable_params();
  void set_allocated_params(::dydxprotocol::perpetuals::PerpetualParams* params);
  private:
  const ::dydxprotocol::perpetuals::PerpetualParams& _internal_params() const;
  ::dydxprotocol::perpetuals::PerpetualParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::dydxprotocol::perpetuals::PerpetualParams* params);
  ::dydxprotocol::perpetuals::PerpetualParams* unsafe_arena_release_params();
  // uint64 open_interest = 3;
  void clear_open_interest() ;
  ::uint64_t open_interest() const;
  void set_open_interest(::uint64_t value);

  private:
  ::uint64_t _internal_open_interest() const;
  void _internal_set_open_interest(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.Perpetual)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_index_;
    ::dydxprotocol::perpetuals::PerpetualParams* params_;
    ::uint64_t open_interest_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
};// -------------------------------------------------------------------

class PerpetualParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.PerpetualParams) */ {
 public:
  inline PerpetualParams() : PerpetualParams(nullptr) {}
  ~PerpetualParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerpetualParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerpetualParams(const PerpetualParams& from);
  PerpetualParams(PerpetualParams&& from) noexcept
    : PerpetualParams() {
    *this = ::std::move(from);
  }

  inline PerpetualParams& operator=(const PerpetualParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerpetualParams& operator=(PerpetualParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerpetualParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerpetualParams* internal_default_instance() {
    return reinterpret_cast<const PerpetualParams*>(
               &_PerpetualParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerpetualParams& a, PerpetualParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PerpetualParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerpetualParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerpetualParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerpetualParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PerpetualParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PerpetualParams& from) {
    PerpetualParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerpetualParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.PerpetualParams";
  }
  protected:
  explicit PerpetualParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickerFieldNumber = 2,
    kIdFieldNumber = 1,
    kMarketIdFieldNumber = 3,
    kAtomicResolutionFieldNumber = 4,
    kDefaultFundingPpmFieldNumber = 5,
    kLiquidityTierFieldNumber = 6,
  };
  // string ticker = 2;
  void clear_ticker() ;
  const std::string& ticker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ticker(Arg_&& arg, Args_... args);
  std::string* mutable_ticker();
  PROTOBUF_NODISCARD std::string* release_ticker();
  void set_allocated_ticker(std::string* ptr);

  private:
  const std::string& _internal_ticker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticker(
      const std::string& value);
  std::string* _internal_mutable_ticker();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 market_id = 3;
  void clear_market_id() ;
  ::uint32_t market_id() const;
  void set_market_id(::uint32_t value);

  private:
  ::uint32_t _internal_market_id() const;
  void _internal_set_market_id(::uint32_t value);

  public:
  // sint32 atomic_resolution = 4;
  void clear_atomic_resolution() ;
  ::int32_t atomic_resolution() const;
  void set_atomic_resolution(::int32_t value);

  private:
  ::int32_t _internal_atomic_resolution() const;
  void _internal_set_atomic_resolution(::int32_t value);

  public:
  // sint32 default_funding_ppm = 5;
  void clear_default_funding_ppm() ;
  ::int32_t default_funding_ppm() const;
  void set_default_funding_ppm(::int32_t value);

  private:
  ::int32_t _internal_default_funding_ppm() const;
  void _internal_set_default_funding_ppm(::int32_t value);

  public:
  // uint32 liquidity_tier = 6;
  void clear_liquidity_tier() ;
  ::uint32_t liquidity_tier() const;
  void set_liquidity_tier(::uint32_t value);

  private:
  ::uint32_t _internal_liquidity_tier() const;
  void _internal_set_liquidity_tier(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.PerpetualParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticker_;
    ::uint32_t id_;
    ::uint32_t market_id_;
    ::int32_t atomic_resolution_;
    ::int32_t default_funding_ppm_;
    ::uint32_t liquidity_tier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
};// -------------------------------------------------------------------

class MarketPremiums final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.MarketPremiums) */ {
 public:
  inline MarketPremiums() : MarketPremiums(nullptr) {}
  ~MarketPremiums() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MarketPremiums(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketPremiums(const MarketPremiums& from);
  MarketPremiums(MarketPremiums&& from) noexcept
    : MarketPremiums() {
    *this = ::std::move(from);
  }

  inline MarketPremiums& operator=(const MarketPremiums& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketPremiums& operator=(MarketPremiums&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketPremiums& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketPremiums* internal_default_instance() {
    return reinterpret_cast<const MarketPremiums*>(
               &_MarketPremiums_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MarketPremiums& a, MarketPremiums& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketPremiums* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketPremiums* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketPremiums* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketPremiums>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketPremiums& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketPremiums& from) {
    MarketPremiums::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketPremiums* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.MarketPremiums";
  }
  protected:
  explicit MarketPremiums(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPremiumsFieldNumber = 2,
    kPerpetualIdFieldNumber = 1,
  };
  // repeated sint32 premiums = 2;
  int premiums_size() const;
  private:
  int _internal_premiums_size() const;

  public:
  void clear_premiums() ;
  ::int32_t premiums(int index) const;
  void set_premiums(int index, ::int32_t value);
  void add_premiums(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& premiums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_premiums();

  private:
  ::int32_t _internal_premiums(int index) const;
  void _internal_add_premiums(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_premiums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_premiums();

  public:
  // uint32 perpetual_id = 1;
  void clear_perpetual_id() ;
  ::uint32_t perpetual_id() const;
  void set_perpetual_id(::uint32_t value);

  private:
  ::uint32_t _internal_perpetual_id() const;
  void _internal_set_perpetual_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.MarketPremiums)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> premiums_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _premiums_cached_byte_size_;
    ::uint32_t perpetual_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
};// -------------------------------------------------------------------

class PremiumStore final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.PremiumStore) */ {
 public:
  inline PremiumStore() : PremiumStore(nullptr) {}
  ~PremiumStore() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PremiumStore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PremiumStore(const PremiumStore& from);
  PremiumStore(PremiumStore&& from) noexcept
    : PremiumStore() {
    *this = ::std::move(from);
  }

  inline PremiumStore& operator=(const PremiumStore& from) {
    CopyFrom(from);
    return *this;
  }
  inline PremiumStore& operator=(PremiumStore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PremiumStore& default_instance() {
    return *internal_default_instance();
  }
  static inline const PremiumStore* internal_default_instance() {
    return reinterpret_cast<const PremiumStore*>(
               &_PremiumStore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PremiumStore& a, PremiumStore& b) {
    a.Swap(&b);
  }
  inline void Swap(PremiumStore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PremiumStore* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PremiumStore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PremiumStore>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PremiumStore& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PremiumStore& from) {
    PremiumStore::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PremiumStore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.PremiumStore";
  }
  protected:
  explicit PremiumStore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllMarketPremiumsFieldNumber = 1,
    kNumPremiumsFieldNumber = 2,
  };
  // repeated .dydxprotocol.perpetuals.MarketPremiums all_market_premiums = 1 [(.gogoproto.nullable) = false];
  int all_market_premiums_size() const;
  private:
  int _internal_all_market_premiums_size() const;

  public:
  void clear_all_market_premiums() ;
  ::dydxprotocol::perpetuals::MarketPremiums* mutable_all_market_premiums(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::MarketPremiums >*
      mutable_all_market_premiums();
  private:
  const ::dydxprotocol::perpetuals::MarketPremiums& _internal_all_market_premiums(int index) const;
  ::dydxprotocol::perpetuals::MarketPremiums* _internal_add_all_market_premiums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::MarketPremiums>& _internal_all_market_premiums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::MarketPremiums>* _internal_mutable_all_market_premiums();
  public:
  const ::dydxprotocol::perpetuals::MarketPremiums& all_market_premiums(int index) const;
  ::dydxprotocol::perpetuals::MarketPremiums* add_all_market_premiums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::MarketPremiums >&
      all_market_premiums() const;
  // uint32 num_premiums = 2;
  void clear_num_premiums() ;
  ::uint32_t num_premiums() const;
  void set_num_premiums(::uint32_t value);

  private:
  ::uint32_t _internal_num_premiums() const;
  void _internal_set_num_premiums(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.PremiumStore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::MarketPremiums > all_market_premiums_;
    ::uint32_t num_premiums_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
};// -------------------------------------------------------------------

class LiquidityTier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dydxprotocol.perpetuals.LiquidityTier) */ {
 public:
  inline LiquidityTier() : LiquidityTier(nullptr) {}
  ~LiquidityTier() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LiquidityTier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LiquidityTier(const LiquidityTier& from);
  LiquidityTier(LiquidityTier&& from) noexcept
    : LiquidityTier() {
    *this = ::std::move(from);
  }

  inline LiquidityTier& operator=(const LiquidityTier& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiquidityTier& operator=(LiquidityTier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiquidityTier& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiquidityTier* internal_default_instance() {
    return reinterpret_cast<const LiquidityTier*>(
               &_LiquidityTier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LiquidityTier& a, LiquidityTier& b) {
    a.Swap(&b);
  }
  inline void Swap(LiquidityTier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiquidityTier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiquidityTier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LiquidityTier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LiquidityTier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LiquidityTier& from) {
    LiquidityTier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LiquidityTier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dydxprotocol.perpetuals.LiquidityTier";
  }
  protected:
  explicit LiquidityTier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kInitialMarginPpmFieldNumber = 3,
    kBasePositionNotionalFieldNumber = 5,
    kImpactNotionalFieldNumber = 6,
    kMaintenanceFractionPpmFieldNumber = 4,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint32 id = 1;
  void clear_id() ;
  ::uint32_t id() const;
  void set_id(::uint32_t value);

  private:
  ::uint32_t _internal_id() const;
  void _internal_set_id(::uint32_t value);

  public:
  // uint32 initial_margin_ppm = 3;
  void clear_initial_margin_ppm() ;
  ::uint32_t initial_margin_ppm() const;
  void set_initial_margin_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_initial_margin_ppm() const;
  void _internal_set_initial_margin_ppm(::uint32_t value);

  public:
  // uint64 base_position_notional = 5;
  void clear_base_position_notional() ;
  ::uint64_t base_position_notional() const;
  void set_base_position_notional(::uint64_t value);

  private:
  ::uint64_t _internal_base_position_notional() const;
  void _internal_set_base_position_notional(::uint64_t value);

  public:
  // uint64 impact_notional = 6;
  void clear_impact_notional() ;
  ::uint64_t impact_notional() const;
  void set_impact_notional(::uint64_t value);

  private:
  ::uint64_t _internal_impact_notional() const;
  void _internal_set_impact_notional(::uint64_t value);

  public:
  // uint32 maintenance_fraction_ppm = 4;
  void clear_maintenance_fraction_ppm() ;
  ::uint32_t maintenance_fraction_ppm() const;
  void set_maintenance_fraction_ppm(::uint32_t value);

  private:
  ::uint32_t _internal_maintenance_fraction_ppm() const;
  void _internal_set_maintenance_fraction_ppm(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dydxprotocol.perpetuals.LiquidityTier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uint32_t id_;
    ::uint32_t initial_margin_ppm_;
    ::uint64_t base_position_notional_;
    ::uint64_t impact_notional_;
    ::uint32_t maintenance_fraction_ppm_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dydxprotocol_2fperpetuals_2fperpetual_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Perpetual

// .dydxprotocol.perpetuals.PerpetualParams params = 1 [(.gogoproto.nullable) = false];
inline bool Perpetual::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline void Perpetual::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dydxprotocol::perpetuals::PerpetualParams& Perpetual::_internal_params() const {
  const ::dydxprotocol::perpetuals::PerpetualParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::dydxprotocol::perpetuals::PerpetualParams&>(
      ::dydxprotocol::perpetuals::_PerpetualParams_default_instance_);
}
inline const ::dydxprotocol::perpetuals::PerpetualParams& Perpetual::params() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.Perpetual.params)
  return _internal_params();
}
inline void Perpetual::unsafe_arena_set_allocated_params(
    ::dydxprotocol::perpetuals::PerpetualParams* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dydxprotocol.perpetuals.Perpetual.params)
}
inline ::dydxprotocol::perpetuals::PerpetualParams* Perpetual::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::perpetuals::PerpetualParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dydxprotocol::perpetuals::PerpetualParams* Perpetual::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.Perpetual.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dydxprotocol::perpetuals::PerpetualParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::dydxprotocol::perpetuals::PerpetualParams* Perpetual::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::dydxprotocol::perpetuals::PerpetualParams>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::dydxprotocol::perpetuals::PerpetualParams* Perpetual::mutable_params() {
  ::dydxprotocol::perpetuals::PerpetualParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.Perpetual.params)
  return _msg;
}
inline void Perpetual::set_allocated_params(::dydxprotocol::perpetuals::PerpetualParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.Perpetual.params)
}

// bytes funding_index = 2 [(.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt"];
inline void Perpetual::clear_funding_index() {
  _impl_.funding_index_.ClearToEmpty();
}
inline const std::string& Perpetual::funding_index() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.Perpetual.funding_index)
  return _internal_funding_index();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Perpetual::set_funding_index(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.funding_index_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.Perpetual.funding_index)
}
inline std::string* Perpetual::mutable_funding_index() {
  std::string* _s = _internal_mutable_funding_index();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.Perpetual.funding_index)
  return _s;
}
inline const std::string& Perpetual::_internal_funding_index() const {
  return _impl_.funding_index_.Get();
}
inline void Perpetual::_internal_set_funding_index(const std::string& value) {
  ;


  _impl_.funding_index_.Set(value, GetArenaForAllocation());
}
inline std::string* Perpetual::_internal_mutable_funding_index() {
  ;
  return _impl_.funding_index_.Mutable( GetArenaForAllocation());
}
inline std::string* Perpetual::release_funding_index() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.Perpetual.funding_index)
  return _impl_.funding_index_.Release();
}
inline void Perpetual::set_allocated_funding_index(std::string* value) {
  _impl_.funding_index_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.funding_index_.IsDefault()) {
          _impl_.funding_index_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.Perpetual.funding_index)
}

// uint64 open_interest = 3;
inline void Perpetual::clear_open_interest() {
  _impl_.open_interest_ = ::uint64_t{0u};
}
inline ::uint64_t Perpetual::open_interest() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.Perpetual.open_interest)
  return _internal_open_interest();
}
inline void Perpetual::set_open_interest(::uint64_t value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.Perpetual.open_interest)
}
inline ::uint64_t Perpetual::_internal_open_interest() const {
  return _impl_.open_interest_;
}
inline void Perpetual::_internal_set_open_interest(::uint64_t value) {
  ;
  _impl_.open_interest_ = value;
}

// -------------------------------------------------------------------

// PerpetualParams

// uint32 id = 1;
inline void PerpetualParams::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t PerpetualParams::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PerpetualParams.id)
  return _internal_id();
}
inline void PerpetualParams::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PerpetualParams.id)
}
inline ::uint32_t PerpetualParams::_internal_id() const {
  return _impl_.id_;
}
inline void PerpetualParams::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string ticker = 2;
inline void PerpetualParams::clear_ticker() {
  _impl_.ticker_.ClearToEmpty();
}
inline const std::string& PerpetualParams::ticker() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PerpetualParams.ticker)
  return _internal_ticker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PerpetualParams::set_ticker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ticker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PerpetualParams.ticker)
}
inline std::string* PerpetualParams::mutable_ticker() {
  std::string* _s = _internal_mutable_ticker();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.PerpetualParams.ticker)
  return _s;
}
inline const std::string& PerpetualParams::_internal_ticker() const {
  return _impl_.ticker_.Get();
}
inline void PerpetualParams::_internal_set_ticker(const std::string& value) {
  ;


  _impl_.ticker_.Set(value, GetArenaForAllocation());
}
inline std::string* PerpetualParams::_internal_mutable_ticker() {
  ;
  return _impl_.ticker_.Mutable( GetArenaForAllocation());
}
inline std::string* PerpetualParams::release_ticker() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.PerpetualParams.ticker)
  return _impl_.ticker_.Release();
}
inline void PerpetualParams::set_allocated_ticker(std::string* value) {
  _impl_.ticker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ticker_.IsDefault()) {
          _impl_.ticker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.PerpetualParams.ticker)
}

// uint32 market_id = 3;
inline void PerpetualParams::clear_market_id() {
  _impl_.market_id_ = 0u;
}
inline ::uint32_t PerpetualParams::market_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PerpetualParams.market_id)
  return _internal_market_id();
}
inline void PerpetualParams::set_market_id(::uint32_t value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PerpetualParams.market_id)
}
inline ::uint32_t PerpetualParams::_internal_market_id() const {
  return _impl_.market_id_;
}
inline void PerpetualParams::_internal_set_market_id(::uint32_t value) {
  ;
  _impl_.market_id_ = value;
}

// sint32 atomic_resolution = 4;
inline void PerpetualParams::clear_atomic_resolution() {
  _impl_.atomic_resolution_ = 0;
}
inline ::int32_t PerpetualParams::atomic_resolution() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PerpetualParams.atomic_resolution)
  return _internal_atomic_resolution();
}
inline void PerpetualParams::set_atomic_resolution(::int32_t value) {
  _internal_set_atomic_resolution(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PerpetualParams.atomic_resolution)
}
inline ::int32_t PerpetualParams::_internal_atomic_resolution() const {
  return _impl_.atomic_resolution_;
}
inline void PerpetualParams::_internal_set_atomic_resolution(::int32_t value) {
  ;
  _impl_.atomic_resolution_ = value;
}

// sint32 default_funding_ppm = 5;
inline void PerpetualParams::clear_default_funding_ppm() {
  _impl_.default_funding_ppm_ = 0;
}
inline ::int32_t PerpetualParams::default_funding_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PerpetualParams.default_funding_ppm)
  return _internal_default_funding_ppm();
}
inline void PerpetualParams::set_default_funding_ppm(::int32_t value) {
  _internal_set_default_funding_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PerpetualParams.default_funding_ppm)
}
inline ::int32_t PerpetualParams::_internal_default_funding_ppm() const {
  return _impl_.default_funding_ppm_;
}
inline void PerpetualParams::_internal_set_default_funding_ppm(::int32_t value) {
  ;
  _impl_.default_funding_ppm_ = value;
}

// uint32 liquidity_tier = 6;
inline void PerpetualParams::clear_liquidity_tier() {
  _impl_.liquidity_tier_ = 0u;
}
inline ::uint32_t PerpetualParams::liquidity_tier() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PerpetualParams.liquidity_tier)
  return _internal_liquidity_tier();
}
inline void PerpetualParams::set_liquidity_tier(::uint32_t value) {
  _internal_set_liquidity_tier(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PerpetualParams.liquidity_tier)
}
inline ::uint32_t PerpetualParams::_internal_liquidity_tier() const {
  return _impl_.liquidity_tier_;
}
inline void PerpetualParams::_internal_set_liquidity_tier(::uint32_t value) {
  ;
  _impl_.liquidity_tier_ = value;
}

// -------------------------------------------------------------------

// MarketPremiums

// uint32 perpetual_id = 1;
inline void MarketPremiums::clear_perpetual_id() {
  _impl_.perpetual_id_ = 0u;
}
inline ::uint32_t MarketPremiums::perpetual_id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.MarketPremiums.perpetual_id)
  return _internal_perpetual_id();
}
inline void MarketPremiums::set_perpetual_id(::uint32_t value) {
  _internal_set_perpetual_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.MarketPremiums.perpetual_id)
}
inline ::uint32_t MarketPremiums::_internal_perpetual_id() const {
  return _impl_.perpetual_id_;
}
inline void MarketPremiums::_internal_set_perpetual_id(::uint32_t value) {
  ;
  _impl_.perpetual_id_ = value;
}

// repeated sint32 premiums = 2;
inline int MarketPremiums::_internal_premiums_size() const {
  return _impl_.premiums_.size();
}
inline int MarketPremiums::premiums_size() const {
  return _internal_premiums_size();
}
inline void MarketPremiums::clear_premiums() {
  _internal_mutable_premiums()->Clear();
}
inline ::int32_t MarketPremiums::premiums(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.MarketPremiums.premiums)
  return _internal_premiums(index);
}
inline void MarketPremiums::set_premiums(int index, ::int32_t value) {
  _internal_mutable_premiums()->Set(index, value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.MarketPremiums.premiums)
}
inline void MarketPremiums::add_premiums(::int32_t value) {
  _internal_add_premiums(value);
  // @@protoc_insertion_point(field_add:dydxprotocol.perpetuals.MarketPremiums.premiums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& MarketPremiums::premiums() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.perpetuals.MarketPremiums.premiums)
  return _internal_premiums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* MarketPremiums::mutable_premiums() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.perpetuals.MarketPremiums.premiums)
  return _internal_mutable_premiums();
}

inline ::int32_t MarketPremiums::_internal_premiums(int index) const {
  return _internal_premiums().Get(index);
}
inline void MarketPremiums::_internal_add_premiums(::int32_t value) {
  _internal_mutable_premiums()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& MarketPremiums::_internal_premiums() const {
  return _impl_.premiums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* MarketPremiums::_internal_mutable_premiums() {
  return &_impl_.premiums_;
}

// -------------------------------------------------------------------

// PremiumStore

// repeated .dydxprotocol.perpetuals.MarketPremiums all_market_premiums = 1 [(.gogoproto.nullable) = false];
inline int PremiumStore::_internal_all_market_premiums_size() const {
  return _impl_.all_market_premiums_.size();
}
inline int PremiumStore::all_market_premiums_size() const {
  return _internal_all_market_premiums_size();
}
inline void PremiumStore::clear_all_market_premiums() {
  _internal_mutable_all_market_premiums()->Clear();
}
inline ::dydxprotocol::perpetuals::MarketPremiums* PremiumStore::mutable_all_market_premiums(int index) {
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.PremiumStore.all_market_premiums)
  return _internal_mutable_all_market_premiums()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::MarketPremiums >*
PremiumStore::mutable_all_market_premiums() {
  // @@protoc_insertion_point(field_mutable_list:dydxprotocol.perpetuals.PremiumStore.all_market_premiums)
  return _internal_mutable_all_market_premiums();
}
inline const ::dydxprotocol::perpetuals::MarketPremiums& PremiumStore::_internal_all_market_premiums(int index) const {
  return _internal_all_market_premiums().Get(index);
}
inline const ::dydxprotocol::perpetuals::MarketPremiums& PremiumStore::all_market_premiums(int index) const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PremiumStore.all_market_premiums)
  return _internal_all_market_premiums(index);
}
inline ::dydxprotocol::perpetuals::MarketPremiums* PremiumStore::_internal_add_all_market_premiums() {
  return _internal_mutable_all_market_premiums()->Add();
}
inline ::dydxprotocol::perpetuals::MarketPremiums* PremiumStore::add_all_market_premiums() {
  ::dydxprotocol::perpetuals::MarketPremiums* _add = _internal_add_all_market_premiums();
  // @@protoc_insertion_point(field_add:dydxprotocol.perpetuals.PremiumStore.all_market_premiums)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dydxprotocol::perpetuals::MarketPremiums >&
PremiumStore::all_market_premiums() const {
  // @@protoc_insertion_point(field_list:dydxprotocol.perpetuals.PremiumStore.all_market_premiums)
  return _internal_all_market_premiums();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::MarketPremiums>&
PremiumStore::_internal_all_market_premiums() const {
  return _impl_.all_market_premiums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::dydxprotocol::perpetuals::MarketPremiums>*
PremiumStore::_internal_mutable_all_market_premiums() {
  return &_impl_.all_market_premiums_;
}

// uint32 num_premiums = 2;
inline void PremiumStore::clear_num_premiums() {
  _impl_.num_premiums_ = 0u;
}
inline ::uint32_t PremiumStore::num_premiums() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.PremiumStore.num_premiums)
  return _internal_num_premiums();
}
inline void PremiumStore::set_num_premiums(::uint32_t value) {
  _internal_set_num_premiums(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.PremiumStore.num_premiums)
}
inline ::uint32_t PremiumStore::_internal_num_premiums() const {
  return _impl_.num_premiums_;
}
inline void PremiumStore::_internal_set_num_premiums(::uint32_t value) {
  ;
  _impl_.num_premiums_ = value;
}

// -------------------------------------------------------------------

// LiquidityTier

// uint32 id = 1;
inline void LiquidityTier::clear_id() {
  _impl_.id_ = 0u;
}
inline ::uint32_t LiquidityTier::id() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.LiquidityTier.id)
  return _internal_id();
}
inline void LiquidityTier::set_id(::uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.LiquidityTier.id)
}
inline ::uint32_t LiquidityTier::_internal_id() const {
  return _impl_.id_;
}
inline void LiquidityTier::_internal_set_id(::uint32_t value) {
  ;
  _impl_.id_ = value;
}

// string name = 2;
inline void LiquidityTier::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& LiquidityTier::name() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.LiquidityTier.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LiquidityTier::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.LiquidityTier.name)
}
inline std::string* LiquidityTier::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dydxprotocol.perpetuals.LiquidityTier.name)
  return _s;
}
inline const std::string& LiquidityTier::_internal_name() const {
  return _impl_.name_.Get();
}
inline void LiquidityTier::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* LiquidityTier::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* LiquidityTier::release_name() {
  // @@protoc_insertion_point(field_release:dydxprotocol.perpetuals.LiquidityTier.name)
  return _impl_.name_.Release();
}
inline void LiquidityTier::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dydxprotocol.perpetuals.LiquidityTier.name)
}

// uint32 initial_margin_ppm = 3;
inline void LiquidityTier::clear_initial_margin_ppm() {
  _impl_.initial_margin_ppm_ = 0u;
}
inline ::uint32_t LiquidityTier::initial_margin_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.LiquidityTier.initial_margin_ppm)
  return _internal_initial_margin_ppm();
}
inline void LiquidityTier::set_initial_margin_ppm(::uint32_t value) {
  _internal_set_initial_margin_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.LiquidityTier.initial_margin_ppm)
}
inline ::uint32_t LiquidityTier::_internal_initial_margin_ppm() const {
  return _impl_.initial_margin_ppm_;
}
inline void LiquidityTier::_internal_set_initial_margin_ppm(::uint32_t value) {
  ;
  _impl_.initial_margin_ppm_ = value;
}

// uint32 maintenance_fraction_ppm = 4;
inline void LiquidityTier::clear_maintenance_fraction_ppm() {
  _impl_.maintenance_fraction_ppm_ = 0u;
}
inline ::uint32_t LiquidityTier::maintenance_fraction_ppm() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.LiquidityTier.maintenance_fraction_ppm)
  return _internal_maintenance_fraction_ppm();
}
inline void LiquidityTier::set_maintenance_fraction_ppm(::uint32_t value) {
  _internal_set_maintenance_fraction_ppm(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.LiquidityTier.maintenance_fraction_ppm)
}
inline ::uint32_t LiquidityTier::_internal_maintenance_fraction_ppm() const {
  return _impl_.maintenance_fraction_ppm_;
}
inline void LiquidityTier::_internal_set_maintenance_fraction_ppm(::uint32_t value) {
  ;
  _impl_.maintenance_fraction_ppm_ = value;
}

// uint64 base_position_notional = 5;
inline void LiquidityTier::clear_base_position_notional() {
  _impl_.base_position_notional_ = ::uint64_t{0u};
}
inline ::uint64_t LiquidityTier::base_position_notional() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.LiquidityTier.base_position_notional)
  return _internal_base_position_notional();
}
inline void LiquidityTier::set_base_position_notional(::uint64_t value) {
  _internal_set_base_position_notional(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.LiquidityTier.base_position_notional)
}
inline ::uint64_t LiquidityTier::_internal_base_position_notional() const {
  return _impl_.base_position_notional_;
}
inline void LiquidityTier::_internal_set_base_position_notional(::uint64_t value) {
  ;
  _impl_.base_position_notional_ = value;
}

// uint64 impact_notional = 6;
inline void LiquidityTier::clear_impact_notional() {
  _impl_.impact_notional_ = ::uint64_t{0u};
}
inline ::uint64_t LiquidityTier::impact_notional() const {
  // @@protoc_insertion_point(field_get:dydxprotocol.perpetuals.LiquidityTier.impact_notional)
  return _internal_impact_notional();
}
inline void LiquidityTier::set_impact_notional(::uint64_t value) {
  _internal_set_impact_notional(value);
  // @@protoc_insertion_point(field_set:dydxprotocol.perpetuals.LiquidityTier.impact_notional)
}
inline ::uint64_t LiquidityTier::_internal_impact_notional() const {
  return _impl_.impact_notional_;
}
inline void LiquidityTier::_internal_set_impact_notional(::uint64_t value) {
  ;
  _impl_.impact_notional_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace perpetuals
}  // namespace dydxprotocol


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_dydxprotocol_2fperpetuals_2fperpetual_2eproto_2epb_2eh
